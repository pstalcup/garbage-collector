/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7987:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parent = __webpack_require__(7981);
module.exports = parent;

/***/ }),

/***/ 2529:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(9390);
__webpack_require__(5892);
var entryUnbind = __webpack_require__(1305);
module.exports = entryUnbind('Array', 'flat');

/***/ }),

/***/ 1755:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* unused reexport */ __webpack_require__(3642);

/***/ }),

/***/ 3642:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parent = __webpack_require__(7987);
module.exports = parent;

/***/ }),

/***/ 8257:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(9212);
var tryToString = __webpack_require__(5637);
var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};

/***/ }),

/***/ 6288:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(3649);
var create = __webpack_require__(3590);
var defineProperty = (__webpack_require__(4615).f);
var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  defineProperty(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

/***/ }),

/***/ 2569:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(794);
var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};

/***/ }),

/***/ 5766:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIndexedObject = __webpack_require__(2977);
var toAbsoluteIndex = __webpack_require__(6782);
var lengthOfArrayLike = __webpack_require__(1825);

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function createMethod(IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    }
    return !IS_INCLUDES && -1;
  };
};
module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

/***/ }),

/***/ 5289:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(4521);
var isConstructor = __webpack_require__(2097);
var isObject = __webpack_require__(794);
var wellKnownSymbol = __webpack_require__(3649);
var SPECIES = wellKnownSymbol('species');
var $Array = Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }
  return C === undefined ? $Array : C;
};

/***/ }),

/***/ 4822:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arraySpeciesConstructor = __webpack_require__(5289);

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};

/***/ }),

/***/ 9624:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(7386);
var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);
module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};

/***/ }),

/***/ 3058:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var TO_STRING_TAG_SUPPORT = __webpack_require__(8191);
var isCallable = __webpack_require__(9212);
var classofRaw = __webpack_require__(9624);
var wellKnownSymbol = __webpack_require__(3649);
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () {
  return arguments;
}()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function tryGet(it, key) {
  try {
    return it[key];
  } catch (error) {/* empty */}
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
  // @@toStringTag case
  : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
  // builtinTag case
  : CORRECT_ARGUMENTS ? classofRaw(O)
  // ES3 arguments fallback
  : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};

/***/ }),

/***/ 3478:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(2870);
var ownKeys = __webpack_require__(929);
var getOwnPropertyDescriptorModule = __webpack_require__(6683);
var definePropertyModule = __webpack_require__(4615);
module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};

/***/ }),

/***/ 57:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(8494);
var definePropertyModule = __webpack_require__(4615);
var createPropertyDescriptor = __webpack_require__(4677);
module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),

/***/ 4677:
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),

/***/ 5999:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toPropertyKey = __webpack_require__(8734);
var definePropertyModule = __webpack_require__(4615);
var createPropertyDescriptor = __webpack_require__(4677);
module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
};

/***/ }),

/***/ 3746:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(9212);
var definePropertyModule = __webpack_require__(4615);
var makeBuiltIn = __webpack_require__(9594);
var defineGlobalProperty = __webpack_require__(2296);
module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];else if (O[key]) simple = true;
    } catch (error) {/* empty */}
    if (simple) O[key] = value;else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  }
  return O;
};

/***/ }),

/***/ 2296:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(7583);

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
module.exports = function (key, value) {
  try {
    defineProperty(global, key, {
      value: value,
      configurable: true,
      writable: true
    });
  } catch (error) {
    global[key] = value;
  }
  return value;
};

/***/ }),

/***/ 8494:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(6544);

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, {
    get: function get() {
      return 7;
    }
  })[1] != 7;
});

/***/ }),

/***/ 2952:
/***/ ((module) => {

var documentAll = typeof document == 'object' && document.all;

// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
var IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;
module.exports = {
  all: documentAll,
  IS_HTMLDDA: IS_HTMLDDA
};

/***/ }),

/***/ 6668:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(7583);
var isObject = __webpack_require__(794);
var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

/***/ }),

/***/ 6768:
/***/ ((module) => {

var $TypeError = TypeError;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991

module.exports = function (it) {
  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');
  return it;
};

/***/ }),

/***/ 6918:
/***/ ((module) => {

module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';

/***/ }),

/***/ 4061:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(7583);
var userAgent = __webpack_require__(6918);
var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;
if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}
module.exports = version;

/***/ }),

/***/ 1305:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(7583);
var uncurryThis = __webpack_require__(7386);
module.exports = function (CONSTRUCTOR, METHOD) {
  return uncurryThis(global[CONSTRUCTOR].prototype[METHOD]);
};

/***/ }),

/***/ 5690:
/***/ ((module) => {

// IE8- don't enum bug keys
module.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

/***/ }),

/***/ 7263:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(7583);
var getOwnPropertyDescriptor = (__webpack_require__(6683).f);
var createNonEnumerableProperty = __webpack_require__(57);
var defineBuiltIn = __webpack_require__(3746);
var defineGlobalProperty = __webpack_require__(2296);
var copyConstructorProperties = __webpack_require__(3478);
var isForced = __webpack_require__(4451);

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};

/***/ }),

/***/ 6544:
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

/***/ }),

/***/ 1266:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isArray = __webpack_require__(4521);
var lengthOfArrayLike = __webpack_require__(1825);
var doesNotExceedSafeInteger = __webpack_require__(6768);
var bind = __webpack_require__(2938);

// `FlattenIntoArray` abstract operation
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var flattenIntoArray = function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? bind(mapper, thisArg) : false;
  var element, elementLen;
  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
      if (depth > 0 && isArray(element)) {
        elementLen = lengthOfArrayLike(element);
        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;
      } else {
        doesNotExceedSafeInteger(targetIndex + 1);
        target[targetIndex] = element;
      }
      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};
module.exports = flattenIntoArray;

/***/ }),

/***/ 2938:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(6887);
var aCallable = __webpack_require__(8257);
var NATIVE_BIND = __webpack_require__(8987);
var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function /* ...args */
  () {
    return fn.apply(that, arguments);
  };
};

/***/ }),

/***/ 8987:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(6544);
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-function-prototype-bind -- safe
  var test = function () {/* empty */}.bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});

/***/ }),

/***/ 8262:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(8987);
var call = Function.prototype.call;
module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};

/***/ }),

/***/ 4340:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(8494);
var hasOwn = __webpack_require__(2870);
var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && function something() {/* empty */}.name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable);
module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};

/***/ }),

/***/ 6887:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classofRaw = __webpack_require__(9624);
var uncurryThis = __webpack_require__(7386);
module.exports = function (fn) {
  // Nashorn bug:
  //   https://github.com/zloirock/core-js/issues/1128
  //   https://github.com/zloirock/core-js/issues/1130
  if (classofRaw(fn) === 'Function') return uncurryThis(fn);
};

/***/ }),

/***/ 7386:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_BIND = __webpack_require__(8987);
var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
module.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {
  return function () {
    return call.apply(fn, arguments);
  };
};

/***/ }),

/***/ 5897:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(7583);
var isCallable = __webpack_require__(9212);
var aFunction = function aFunction(argument) {
  return isCallable(argument) ? argument : undefined;
};
module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};

/***/ }),

/***/ 8272:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(3058);
var getMethod = __webpack_require__(911);
var isNullOrUndefined = __webpack_require__(8505);
var Iterators = __webpack_require__(339);
var wellKnownSymbol = __webpack_require__(3649);
var ITERATOR = wellKnownSymbol('iterator');
module.exports = function (it) {
  if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR) || getMethod(it, '@@iterator') || Iterators[classof(it)];
};

/***/ }),

/***/ 6307:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(8262);
var aCallable = __webpack_require__(8257);
var anObject = __webpack_require__(2569);
var tryToString = __webpack_require__(5637);
var getIteratorMethod = __webpack_require__(8272);
var $TypeError = TypeError;
module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw $TypeError(tryToString(argument) + ' is not iterable');
};

/***/ }),

/***/ 911:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aCallable = __webpack_require__(8257);
var isNullOrUndefined = __webpack_require__(8505);

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? undefined : aCallable(func);
};

/***/ }),

/***/ 7583:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var check = function check(it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
// eslint-disable-next-line es/no-global-this -- safe
check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) ||
// eslint-disable-next-line no-restricted-globals -- safe
check(typeof self == 'object' && self) || check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
// eslint-disable-next-line no-new-func -- fallback
function () {
  return this;
}() || Function('return this')();

/***/ }),

/***/ 2870:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(7386);
var toObject = __webpack_require__(1324);
var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};

/***/ }),

/***/ 4639:
/***/ ((module) => {

module.exports = {};

/***/ }),

/***/ 482:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(5897);
module.exports = getBuiltIn('document', 'documentElement');

/***/ }),

/***/ 275:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(8494);
var fails = __webpack_require__(6544);
var createElement = __webpack_require__(6668);

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),

/***/ 5044:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(7386);
var fails = __webpack_require__(6544);
var classof = __webpack_require__(9624);
var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : $Object(it);
} : $Object;

/***/ }),

/***/ 9734:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(7386);
var isCallable = __webpack_require__(9212);
var store = __webpack_require__(1314);
var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}
module.exports = store.inspectSource;

/***/ }),

/***/ 2743:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_WEAK_MAP = __webpack_require__(5307);
var global = __webpack_require__(7583);
var isObject = __webpack_require__(794);
var createNonEnumerableProperty = __webpack_require__(57);
var hasOwn = __webpack_require__(2870);
var shared = __webpack_require__(1314);
var sharedKey = __webpack_require__(9137);
var hiddenKeys = __webpack_require__(4639);
var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;
var enforce = function enforce(it) {
  return has(it) ? get(it) : set(it, {});
};
var getterFor = function getterFor(TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    }
    return state;
  };
};
if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  /* eslint-disable no-self-assign -- prototype methods protection */
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  /* eslint-enable no-self-assign -- prototype methods protection */
  set = function set(it, metadata) {
    if (store.has(it)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function get(it) {
    return store.get(it) || {};
  };
  has = function has(it) {
    return store.has(it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function set(it, metadata) {
    if (hasOwn(it, STATE)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function get(it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function has(it) {
    return hasOwn(it, STATE);
  };
}
module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

/***/ }),

/***/ 114:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(3649);
var Iterators = __webpack_require__(339);
var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

/***/ }),

/***/ 4521:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(9624);

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};

/***/ }),

/***/ 9212:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $documentAll = __webpack_require__(2952);
var documentAll = $documentAll.all;

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = $documentAll.IS_HTMLDDA ? function (argument) {
  return typeof argument == 'function' || argument === documentAll;
} : function (argument) {
  return typeof argument == 'function';
};

/***/ }),

/***/ 2097:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(7386);
var fails = __webpack_require__(6544);
var isCallable = __webpack_require__(9212);
var classof = __webpack_require__(3058);
var getBuiltIn = __webpack_require__(5897);
var inspectSource = __webpack_require__(9734);
var noop = function noop() {/* empty */};
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};
var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction':
      return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};
isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function () {
    called = true;
  }) || called;
}) ? isConstructorLegacy : isConstructorModern;

/***/ }),

/***/ 4451:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(6544);
var isCallable = __webpack_require__(9212);
var replacement = /#|\.prototype\./;
var isForced = function isForced(feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
};
var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};
var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';
module.exports = isForced;

/***/ }),

/***/ 8505:
/***/ ((module) => {

// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function (it) {
  return it === null || it === undefined;
};

/***/ }),

/***/ 794:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(9212);
var $documentAll = __webpack_require__(2952);
var documentAll = $documentAll.all;
module.exports = $documentAll.IS_HTMLDDA ? function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;
} : function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};

/***/ }),

/***/ 6268:
/***/ ((module) => {

module.exports = false;

/***/ }),

/***/ 5871:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(5897);
var isCallable = __webpack_require__(9212);
var isPrototypeOf = __webpack_require__(2447);
var USE_SYMBOL_AS_UID = __webpack_require__(7786);
var $Object = Object;
module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};

/***/ }),

/***/ 4026:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(2938);
var call = __webpack_require__(8262);
var anObject = __webpack_require__(2569);
var tryToString = __webpack_require__(5637);
var isArrayIteratorMethod = __webpack_require__(114);
var lengthOfArrayLike = __webpack_require__(1825);
var isPrototypeOf = __webpack_require__(2447);
var getIterator = __webpack_require__(6307);
var getIteratorMethod = __webpack_require__(8272);
var iteratorClose = __webpack_require__(7093);
var $TypeError = TypeError;
var Result = function Result(stopped, result) {
  this.stopped = stopped;
  this.result = result;
};
var ResultPrototype = Result.prototype;
module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_RECORD = !!(options && options.IS_RECORD);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;
  var stop = function stop(condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };
  var callFn = function callFn(value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    }
    return INTERRUPTED ? fn(value, stop) : fn(value);
  };
  if (IS_RECORD) {
    iterator = iterable.iterator;
  } else if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw $TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      }
      return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }
  next = IS_RECORD ? iterable.next : iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  }
  return new Result(false);
};

/***/ }),

/***/ 7093:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(8262);
var anObject = __webpack_require__(2569);
var getMethod = __webpack_require__(911);
module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};

/***/ }),

/***/ 339:
/***/ ((module) => {

module.exports = {};

/***/ }),

/***/ 1825:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toLength = __webpack_require__(97);

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};

/***/ }),

/***/ 9594:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(7386);
var fails = __webpack_require__(6544);
var isCallable = __webpack_require__(9212);
var hasOwn = __webpack_require__(2870);
var DESCRIPTORS = __webpack_require__(8494);
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(4340).CONFIGURABLE);
var inspectSource = __webpack_require__(9734);
var InternalStateModule = __webpack_require__(2743);
var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var $String = String;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var stringSlice = uncurryThis(''.slice);
var replace = uncurryThis(''.replace);
var join = uncurryThis([].join);
var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () {/* empty */}, 'length', {
    value: 8
  }).length !== 8;
});
var TEMPLATE = String(String).split('String');
var makeBuiltIn = module.exports = function (value, name, options) {
  if (stringSlice($String(name), 0, 7) === 'Symbol(') {
    name = '[' + replace($String(name), /^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
    if (DESCRIPTORS) defineProperty(value, 'name', {
      value: name,
      configurable: true
    });else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', {
      value: options.arity
    });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', {
        writable: false
      });
      // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) {/* empty */}
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
  }
  return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');

/***/ }),

/***/ 9021:
/***/ ((module) => {

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};

/***/ }),

/***/ 3590:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(2569);
var definePropertiesModule = __webpack_require__(8728);
var enumBugKeys = __webpack_require__(5690);
var hiddenKeys = __webpack_require__(4639);
var html = __webpack_require__(482);
var documentCreateElement = __webpack_require__(6668);
var sharedKey = __webpack_require__(9137);
var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');
var EmptyConstructor = function EmptyConstructor() {/* empty */};
var scriptTag = function scriptTag(content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var _NullProtoObject = function NullProtoObject() {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) {/* ignore */}
  _NullProtoObject = typeof document != 'undefined' ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
  : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete _NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return _NullProtoObject();
};
hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = _NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};

/***/ }),

/***/ 8728:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(8494);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(7670);
var definePropertyModule = __webpack_require__(4615);
var anObject = __webpack_require__(2569);
var toIndexedObject = __webpack_require__(2977);
var objectKeys = __webpack_require__(5432);

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};

/***/ }),

/***/ 4615:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(8494);
var IE8_DOM_DEFINE = __webpack_require__(275);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(7670);
var anObject = __webpack_require__(2569);
var toPropertyKey = __webpack_require__(8734);
var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  }
  return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) {/* empty */}
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),

/***/ 6683:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(8494);
var call = __webpack_require__(8262);
var propertyIsEnumerableModule = __webpack_require__(112);
var createPropertyDescriptor = __webpack_require__(4677);
var toIndexedObject = __webpack_require__(2977);
var toPropertyKey = __webpack_require__(8734);
var hasOwn = __webpack_require__(2870);
var IE8_DOM_DEFINE = __webpack_require__(275);

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) {/* empty */}
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};

/***/ }),

/***/ 9275:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(8356);
var enumBugKeys = __webpack_require__(5690);
var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

/***/ }),

/***/ 4012:
/***/ ((__unused_webpack_module, exports) => {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;

/***/ }),

/***/ 2447:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(7386);
module.exports = uncurryThis({}.isPrototypeOf);

/***/ }),

/***/ 8356:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(7386);
var hasOwn = __webpack_require__(2870);
var toIndexedObject = __webpack_require__(2977);
var indexOf = (__webpack_require__(5766).indexOf);
var hiddenKeys = __webpack_require__(4639);
var push = uncurryThis([].push);
module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};

/***/ }),

/***/ 5432:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(8356);
var enumBugKeys = __webpack_require__(5690);

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};

/***/ }),

/***/ 112:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({
  1: 2
}, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

/***/ }),

/***/ 9953:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(8494);
var uncurryThis = __webpack_require__(7386);
var objectKeys = __webpack_require__(5432);
var toIndexedObject = __webpack_require__(2977);
var $propertyIsEnumerable = (__webpack_require__(112).f);
var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
var push = uncurryThis([].push);

// `Object.{ entries, values }` methods implementation
var createMethod = function createMethod(TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {
        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};
module.exports = {
  // `Object.entries` method
  // https://tc39.es/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values
  values: createMethod(false)
};

/***/ }),

/***/ 6252:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(8262);
var isCallable = __webpack_require__(9212);
var isObject = __webpack_require__(794);
var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};

/***/ }),

/***/ 929:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(5897);
var uncurryThis = __webpack_require__(7386);
var getOwnPropertyNamesModule = __webpack_require__(9275);
var getOwnPropertySymbolsModule = __webpack_require__(4012);
var anObject = __webpack_require__(2569);
var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};

/***/ }),

/***/ 3955:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isNullOrUndefined = __webpack_require__(8505);
var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (isNullOrUndefined(it)) throw $TypeError("Can't call method on " + it);
  return it;
};

/***/ }),

/***/ 9137:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(7836);
var uid = __webpack_require__(8284);
var keys = shared('keys');
module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

/***/ }),

/***/ 1314:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(7583);
var defineGlobalProperty = __webpack_require__(2296);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});
module.exports = store;

/***/ }),

/***/ 7836:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__(6268);
var store = __webpack_require__(1314);
(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.27.2',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.27.2/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});

/***/ }),

/***/ 4193:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(4061);
var fails = __webpack_require__(6544);

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
  // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});

/***/ }),

/***/ 6782:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(7486);
var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

/***/ }),

/***/ 2977:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(5044);
var requireObjectCoercible = __webpack_require__(3955);
module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

/***/ }),

/***/ 7486:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trunc = __webpack_require__(9021);

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};

/***/ }),

/***/ 97:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(7486);
var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

/***/ }),

/***/ 1324:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var requireObjectCoercible = __webpack_require__(3955);
var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};

/***/ }),

/***/ 2670:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(8262);
var isObject = __webpack_require__(794);
var isSymbol = __webpack_require__(5871);
var getMethod = __webpack_require__(911);
var ordinaryToPrimitive = __webpack_require__(6252);
var wellKnownSymbol = __webpack_require__(3649);
var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

/***/ }),

/***/ 8734:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPrimitive = __webpack_require__(2670);
var isSymbol = __webpack_require__(5871);

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};

/***/ }),

/***/ 8191:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(3649);
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};
test[TO_STRING_TAG] = 'z';
module.exports = String(test) === '[object z]';

/***/ }),

/***/ 5637:
/***/ ((module) => {

var $String = String;
module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};

/***/ }),

/***/ 8284:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(7386);
var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);
module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};

/***/ }),

/***/ 7786:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(4193);
module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';

/***/ }),

/***/ 7670:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(8494);
var fails = __webpack_require__(6544);

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () {/* empty */}, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});

/***/ }),

/***/ 5307:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(7583);
var isCallable = __webpack_require__(9212);
var WeakMap = global.WeakMap;
module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));

/***/ }),

/***/ 3649:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(7583);
var shared = __webpack_require__(7836);
var hasOwn = __webpack_require__(2870);
var uid = __webpack_require__(8284);
var NATIVE_SYMBOL = __webpack_require__(4193);
var USE_SYMBOL_AS_UID = __webpack_require__(7786);
var Symbol = global.Symbol;
var WellKnownSymbolsStore = shared('wks');
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;
module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name)) {
    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name) ? Symbol[name] : createWellKnownSymbol('Symbol.' + name);
  }
  return WellKnownSymbolsStore[name];
};

/***/ }),

/***/ 9390:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $ = __webpack_require__(7263);
var flattenIntoArray = __webpack_require__(1266);
var toObject = __webpack_require__(1324);
var lengthOfArrayLike = __webpack_require__(1825);
var toIntegerOrInfinity = __webpack_require__(7486);
var arraySpeciesCreate = __webpack_require__(4822);

// `Array.prototype.flat` method
// https://tc39.es/ecma262/#sec-array.prototype.flat
$({
  target: 'Array',
  proto: true
}, {
  flat: function flat( /* depthArg = 1 */
  ) {
    var depthArg = arguments.length ? arguments[0] : undefined;
    var O = toObject(this);
    var sourceLen = lengthOfArrayLike(O);
    var A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toIntegerOrInfinity(depthArg));
    return A;
  }
});

/***/ }),

/***/ 5892:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = __webpack_require__(6288);

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('flat');

/***/ }),

/***/ 6737:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(7263);
var $entries = (__webpack_require__(9953).entries);

// `Object.entries` method
// https://tc39.es/ecma262/#sec-object.entries
$({
  target: 'Object',
  stat: true
}, {
  entries: function entries(O) {
    return $entries(O);
  }
});

/***/ }),

/***/ 5809:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(7263);
var iterate = __webpack_require__(4026);
var createProperty = __webpack_require__(5999);

// `Object.fromEntries` method
// https://github.com/tc39/proposal-object-from-entries
$({
  target: 'Object',
  stat: true
}, {
  fromEntries: function fromEntries(iterable) {
    var obj = {};
    iterate(iterable, function (k, v) {
      createProperty(obj, k, v);
    }, {
      AS_ENTRIES: true
    });
    return obj;
  }
});

/***/ }),

/***/ 9628:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(7263);
var $values = (__webpack_require__(9953).values);

// `Object.values` method
// https://tc39.es/ecma262/#sec-object.values
$({
  target: 'Object',
  stat: true
}, {
  values: function values(O) {
    return $values(O);
  }
});

/***/ }),

/***/ 7981:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var parent = __webpack_require__(2529);
module.exports = parent;

/***/ }),

/***/ 7635:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "canContinue": () => (/* binding */ canContinue),
  "main": () => (/* binding */ main)
});

;// CONCATENATED MODULE: external "kolmafia"
const external_kolmafia_namespaceObject = require("kolmafia");
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.entries.js
var es_object_entries = __webpack_require__(6737);
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.from-entries.js
var es_object_from_entries = __webpack_require__(5809);
;// CONCATENATED MODULE: ./node_modules/libram/dist/propertyTypes.js
/** THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseDefaultProperties.ts for more information */
var booleanProperties = ["abortOnChoiceWhenNotInChoice", "addChatCommandLine", "addCreationQueue", "addStatusBarToFrames", "allowCloseableDesktopTabs", "allowNegativeTally", "allowNonMoodBurning", "allowSummonBurning", "autoHighlightOnFocus", "broadcastEvents", "cacheMallSearches", "chatBeep", "chatLinksUseRelay", "compactChessboard", "copyAsHTML", "customizedTabs", "debugBuy", "debugConsequences", "debugFoxtrotRemoval", "debugPathnames", "gapProtection", "gitInstallDependencies", "gitShowCommitMessages", "gitUpdateOnLogin", "greenScreenProtection", "guiUsesOneWindow", "hideServerDebugText", "logAcquiredItems", "logBattleAction", "logBrowserInteractions", "logChatMessages", "logChatRequests", "logCleanedHTML", "logDecoratedResponses", "logFamiliarActions", "logGainMessages", "logReadableHTML", "logPreferenceChange", "logMonsterHealth", "logReverseOrder", "logStatGains", "logStatusEffects", "logStatusOnLogin", "macroDebug", "macroLens", "mementoListActive", "mergeHobopolisChat", "printStackOnAbort", "proxySet", "relayAddSounds", "relayAddsCustomCombat", "relayAddsDiscoHelper", "relayAddsGraphicalCLI", "relayAddsQuickScripts", "relayAddsRestoreLinks", "relayAddsUpArrowLinks", "relayAddsUseLinks", "relayAddsWikiLinks", "relayAllowRemoteAccess", "relayBrowserOnly", "relayCacheUncacheable", "relayFormatsChatText", "relayHidesJunkMallItems", "relayMaintainsEffects", "relayMaintainsHealth", "relayMaintainsMana", "relayOverridesImages", "relayRunsAfterAdventureScript", "relayRunsBeforeBattleScript", "relayRunsBeforePVPScript", "relayScriptButtonFirst", "relayTextualizesEffects", "relayTrimsZapList", "relayUsesInlineLinks", "relayUsesIntegratedChat", "relayWarnOnRecoverFailure", "removeMalignantEffects", "saveSettingsOnSet", "sharePriceData", "showAllRequests", "showExceptionalRequests", "stealthLogin", "svnInstallDependencies", "svnShowCommitMessages", "svnUpdateOnLogin", "switchEquipmentForBuffs", "syncAfterSvnUpdate", "useChatToolbar", "useContactsFrame", "useDevProxyServer", "useDockIconBadge", "useHugglerChannel", "useImageCache", "useLastUserAgent", "useSystemTrayIcon", "useTabbedChatFrame", "useToolbars", "useCachedVolcanoMaps", "useZoneComboBox", "verboseSpeakeasy", "verboseFloundry", "wrapLongLines", "_gitUpdated", "_svnRepoFileFetched", "_svnUpdated", "antagonisticSnowmanKitAvailable", "arcadeGameHints", "armoryUnlocked", "autoForbidIgnoringStores", "autoCraft", "autoQuest", "autoEntangle", "autoGarish", "autoManaRestore", "autoFillMayoMinder", "autoPinkyRing", "autoPlantHardcore", "autoPlantSoftcore", "autoPotionID", "autoRepairBoxServants", "autoSatisfyWithCloset", "autoSatisfyWithCoinmasters", "autoSatisfyWithMall", "autoSatisfyWithNPCs", "autoSatisfyWithStash", "autoSatisfyWithStorage", "autoSetConditions", "autoSteal", "autoTuxedo", "backupCameraReverserEnabled", "badMoonEncounter01", "badMoonEncounter02", "badMoonEncounter03", "badMoonEncounter04", "badMoonEncounter05", "badMoonEncounter06", "badMoonEncounter07", "badMoonEncounter08", "badMoonEncounter09", "badMoonEncounter10", "badMoonEncounter11", "badMoonEncounter12", "badMoonEncounter13", "badMoonEncounter14", "badMoonEncounter15", "badMoonEncounter16", "badMoonEncounter17", "badMoonEncounter18", "badMoonEncounter19", "badMoonEncounter20", "badMoonEncounter21", "badMoonEncounter22", "badMoonEncounter23", "badMoonEncounter24", "badMoonEncounter25", "badMoonEncounter26", "badMoonEncounter27", "badMoonEncounter28", "badMoonEncounter29", "badMoonEncounter30", "badMoonEncounter31", "badMoonEncounter32", "badMoonEncounter33", "badMoonEncounter34", "badMoonEncounter35", "badMoonEncounter36", "badMoonEncounter37", "badMoonEncounter38", "badMoonEncounter39", "badMoonEncounter40", "badMoonEncounter41", "badMoonEncounter42", "badMoonEncounter43", "badMoonEncounter44", "badMoonEncounter45", "badMoonEncounter46", "badMoonEncounter47", "badMoonEncounter48", "barrelShrineUnlocked", "bigBrotherRescued", "blackBartsBootyAvailable", "bondAdv", "bondBeach", "bondBeat", "bondBooze", "bondBridge", "bondDesert", "bondDR", "bondDrunk1", "bondDrunk2", "bondHoney", "bondHP", "bondInit", "bondItem1", "bondItem2", "bondItem3", "bondJetpack", "bondMartiniDelivery", "bondMartiniPlus", "bondMartiniTurn", "bondMeat", "bondMox1", "bondMox2", "bondMPregen", "bondMus1", "bondMus2", "bondMys1", "bondMys2", "bondSpleen", "bondStat", "bondStat2", "bondStealth", "bondStealth2", "bondSymbols", "bondWar", "bondWeapon2", "bondWpn", "booPeakLit", "bootsCharged", "breakfastCompleted", "burrowgrubHiveUsed", "calzoneOfLegendEaten", "canteenUnlocked", "chaosButterflyThrown", "chatbotScriptExecuted", "chateauAvailable", "chatLiterate", "chatServesUpdates", "checkJackassHardcore", "checkJackassSoftcore", "clanAttacksEnabled", "coldAirportAlways", "considerShadowNoodles", "controlRoomUnlock", "concertVisited", "controlPanel1", "controlPanel2", "controlPanel3", "controlPanel4", "controlPanel5", "controlPanel6", "controlPanel7", "controlPanel8", "controlPanel9", "corralUnlocked", "dailyDungeonDone", "dampOldBootPurchased", "daycareOpen", "deepDishOfLegendEaten", "demonSummoned", "dinseyAudienceEngagement", "dinseyGarbagePirate", "dinseyRapidPassEnabled", "dinseyRollercoasterNext", "dinseySafetyProtocolsLoose", "doghouseBoarded", "dontStopForCounters", "drippingHallUnlocked", "drippyShieldUnlocked", "edUsedLash", "eldritchFissureAvailable", "eldritchHorrorAvailable", "essenceOfAnnoyanceAvailable", "essenceOfBearAvailable", "expressCardUsed", "falloutShelterChronoUsed", "falloutShelterCoolingTankUsed", "fireExtinguisherBatHoleUsed", "fireExtinguisherChasmUsed", "fireExtinguisherCyrptUsed", "fireExtinguisherDesertUsed", "fireExtinguisherHaremUsed", "fistTeachingsHaikuDungeon", "fistTeachingsPokerRoom", "fistTeachingsBarroomBrawl", "fistTeachingsConservatory", "fistTeachingsBatHole", "fistTeachingsFunHouse", "fistTeachingsMenagerie", "fistTeachingsSlums", "fistTeachingsFratHouse", "fistTeachingsRoad", "fistTeachingsNinjaSnowmen", "flickeringPixel1", "flickeringPixel2", "flickeringPixel3", "flickeringPixel4", "flickeringPixel5", "flickeringPixel6", "flickeringPixel7", "flickeringPixel8", "frAlways", "frCemetaryUnlocked", "friarsBlessingReceived", "frMountainsUnlocked", "frSwampUnlocked", "frVillageUnlocked", "frWoodUnlocked", "getawayCampsiteUnlocked", "ghostPencil1", "ghostPencil2", "ghostPencil3", "ghostPencil4", "ghostPencil5", "ghostPencil6", "ghostPencil7", "ghostPencil8", "ghostPencil9", "gingerAdvanceClockUnlocked", "gingerBlackmailAccomplished", "gingerbreadCityAvailable", "gingerExtraAdventures", "gingerNegativesDropped", "gingerSewersUnlocked", "gingerSubwayLineUnlocked", "gingerRetailUnlocked", "glitchItemAvailable", "grabCloversHardcore", "grabCloversSoftcore", "guideToSafariAvailable", "guyMadeOfBeesDefeated", "hallowienerDefiledNook", "hallowienerGuanoJunction", "hallowienerKnollGym", "hallowienerMadnessBakery", "hallowienerMiddleChamber", "hallowienerOvergrownLot", "hallowienerSkeletonStore", "hallowienerSmutOrcs", "hallowienerSonofaBeach", "hallowienerVolcoino", "hardcorePVPWarning", "harvestBatteriesHardcore", "harvestBatteriesSoftcore", "hasAutumnaton", "hasBartender", "hasChef", "hasCocktailKit", "hasCosmicBowlingBall", "hasDetectiveSchool", "hasMaydayContract", "hasOven", "hasRange", "hasShaker", "hasSushiMat", "haveBoxingDaydreamHardcore", "haveBoxingDaydreamSoftcore", "hermitHax0red", "holidayHalsBookAvailable", "horseryAvailable", "hotAirportAlways", "implementGlitchItem", "intenseCurrents", "itemBoughtPerAscension637", "itemBoughtPerAscension8266", "itemBoughtPerAscension10790", "itemBoughtPerAscension10794", "itemBoughtPerAscension10795", "itemBoughtPerCharacter6423", "itemBoughtPerCharacter6428", "itemBoughtPerCharacter6429", "kingLiberated", "lastPirateInsult1", "lastPirateInsult2", "lastPirateInsult3", "lastPirateInsult4", "lastPirateInsult5", "lastPirateInsult6", "lastPirateInsult7", "lastPirateInsult8", "lawOfAveragesAvailable", "leafletCompleted", "libraryCardUsed", "lockPicked", "logBastilleBattalionBattles", "loginRecoveryHardcore", "loginRecoverySoftcore", "lovebugsUnlocked", "loveTunnelAvailable", "lowerChamberUnlock", "madnessBakeryAvailable", "makePocketWishesHardcore", "makePocketWishesSoftcore", "manualOfNumberologyAvailable", "mappingMonsters", "mapToAnemoneMinePurchased", "mapToKokomoAvailable", "mapToMadnessReefPurchased", "mapToTheDiveBarPurchased", "mapToTheMarinaraTrenchPurchased", "mapToTheSkateParkPurchased", "maraisBeaverUnlock", "maraisCorpseUnlock", "maraisDarkUnlock", "maraisVillageUnlock", "maraisWildlifeUnlock", "maraisWizardUnlock", "maximizerAlwaysCurrent", "maximizerCreateOnHand", "maximizerCurrentMallPrices", "maximizerFoldables", "maximizerIncludeAll", "maximizerNoAdventures", "middleChamberUnlock", "milkOfMagnesiumActive", "moonTuned", "neverendingPartyAlways", "oasisAvailable", "odeBuffbotCheck", "oilPeakLit", "oscusSodaUsed", "outrageousSombreroUsed", "overgrownLotAvailable", "ownsSpeakeasy", "pathedSummonsHardcore", "pathedSummonsSoftcore", "pizzaOfLegendEaten", "popularTartUnlocked", "potatoAlarmClockUsed", "prAlways", "prayedForGlamour", "prayedForProtection", "prayedForVigor", "primaryLabCheerCoreGrabbed", "pyramidBombUsed", "ROMOfOptimalityAvailable", "rageGlandVented", "readManualHardcore", "readManualSoftcore", "relayShowSpoilers", "relayShowWarnings", "rememberDesktopSize", "restUsingChateau", "restUsingCampAwayTent", "requireBoxServants", "requireSewerTestItems", "safePickpocket", "schoolOfHardKnocksDiplomaAvailable", "scriptCascadingMenus", "serverAddsCustomCombat", "SHAWARMAInitiativeUnlocked", "showForbiddenStores", "showGainsPerUnit", "showIgnoringStorePrices", "showNoSummonOnly", "showTurnFreeOnly", "skeletonStoreAvailable", "sleazeAirportAlways", "snojoAvailable", "sortByEffect", "sortByRoom", "spacegateAlways", "spacegateVaccine1", "spacegateVaccine2", "spacegateVaccine3", "spaceInvaderDefeated", "spelunkyHints", "spiceMelangeUsed", "spookyAirportAlways", "stenchAirportAlways", "stopForFixedWanderer", "stopForUltraRare", "styxPixieVisited", "superconductorDefeated", "suppressInappropriateNags", "suppressPowerPixellation", "suppressMallPriceCacheMessages", "telegraphOfficeAvailable", "telescopeLookedHigh", "timeTowerAvailable", "trackLightsOut", "uneffectWithHotTub", "universalSeasoningActive", "universalSeasoningAvailable", "useBookOfEverySkillHardcore", "useBookOfEverySkillSoftcore", "useCrimboToysHardcore", "useCrimboToysSoftcore", "verboseMaximizer", "visitLoungeHardcore", "visitLoungeSoftcore", "visitRumpusHardcore", "visitRumpusSoftcore", "voteAlways", "wildfireBarrelCaulked", "wildfireDusted", "wildfireFracked", "wildfirePumpGreased", "wildfireSprinkled", "yearbookCameraPending", "youRobotScavenged", "_affirmationCookieEaten", "_affirmationHateUsed", "_airFryerUsed", "_akgyxothUsed", "_alienAnimalMilkUsed", "_alienPlantPodUsed", "_allYearSucker", "_aprilShower", "_armyToddlerCast", "_authorsInkUsed", "_baconMachineUsed", "_bagOfCandy", "_bagOfCandyUsed", "_bagOTricksUsed", "_ballastTurtleUsed", "_ballInACupUsed", "_ballpit", "_barrelPrayer", "_bastilleLastBattleWon", "_beachCombing", "_bendHellUsed", "_blankoutUsed", "_bonersSummoned", "_bookOfEverySkillUsed", "_borrowedTimeUsed", "_bowleggedSwaggerUsed", "_bowlFullOfJellyUsed", "_boxOfHammersUsed", "_brainPreservationFluidUsed", "_brassDreadFlaskUsed", "_cameraUsed", "_canSeekBirds", "_carboLoaded", "_cargoPocketEmptied", "_ceciHatUsed", "_chateauDeskHarvested", "_chateauMonsterFought", "_chronerCrossUsed", "_chronerTriggerUsed", "_chubbyAndPlumpUsed", "_circleDrumUsed", "_clanFortuneBuffUsed", "_claraBellUsed", "_coalPaperweightUsed", "_cocoaDispenserUsed", "_cocktailShakerUsed", "_coldAirportToday", "_coldOne", "_communismUsed", "_confusingLEDClockUsed", "_controlPanelUsed", "_cookbookbatRecipeDrops", "_corruptedStardustUsed", "_cosmicSixPackConjured", "_crappyCameraUsed", "_creepyVoodooDollUsed", "_crimboTraining", "_crimboTree", "_cursedKegUsed", "_cursedMicrowaveUsed", "_dailyDungeonMalwareUsed", "_darkChocolateHeart", "_daycareFights", "_daycareNap", "_daycareSpa", "_daycareToday", "_defectiveTokenChecked", "_defectiveTokenUsed", "_dinseyGarbageDisposed", "_discoKnife", "_distentionPillUsed", "_dnaHybrid", "_docClocksThymeCocktailDrunk", "_drippingHallDoor1", "_drippingHallDoor2", "_drippingHallDoor3", "_drippingHallDoor4", "_drippyCaviarUsed", "_drippyNuggetUsed", "_drippyPilsnerUsed", "_drippyPlumUsed", "_drippyWineUsed", "_eldritchHorrorEvoked", "_eldritchTentacleFought", "_entauntaunedToday", "_envyfishEggUsed", "_essentialTofuUsed", "_etchedHourglassUsed", "_eternalCarBatteryUsed", "_everfullGlassUsed", "_eyeAndATwistUsed", "_fancyChessSetUsed", "_falloutShelterSpaUsed", "_fancyHotDogEaten", "_farmerItemsCollected", "_favoriteBirdVisited", "_firedJokestersGun", "_fireExtinguisherRefilled", "_fireStartingKitUsed", "_fireworksShop", "_fireworksShopHatBought", "_fireworksShopEquipmentBought", "_fireworkUsed", "_fishyPipeUsed", "_floundryItemCreated", "_floundryItemUsed", "_freePillKeeperUsed", "_frToday", "_fudgeSporkUsed", "_garbageItemChanged", "_gingerBiggerAlligators", "_gingerbreadCityToday", "_gingerbreadClockAdvanced", "_gingerbreadClockVisited", "_gingerbreadColumnDestroyed", "_gingerbreadMobHitUsed", "_glennGoldenDiceUsed", "_glitchItemImplemented", "_gnollEyeUsed", "_governmentPerDiemUsed", "_grimBuff", "_guildManualUsed", "_guzzlrQuestAbandoned", "_hardKnocksDiplomaUsed", "_hippyMeatCollected", "_hobbyHorseUsed", "_holidayFunUsed", "_holoWristCrystal", "_hotAirportToday", "_hungerSauceUsed", "_hyperinflatedSealLungUsed", "_iceHotelRoomsRaided", "_iceSculptureUsed", "_incredibleSelfEsteemCast", "_infernoDiscoVisited", "_internetDailyDungeonMalwareBought", "_internetGallonOfMilkBought", "_internetPlusOneBought", "_internetPrintScreenButtonBought", "_internetViralVideoBought", "_interviewIsabella", "_interviewMasquerade", "_interviewVlad", "_inquisitorsUnidentifiableObjectUsed", "_ironicMoustache", "_jackassPlumberGame", "_jarlsCheeseSummoned", "_jarlsCreamSummoned", "_jarlsDoughSummoned", "_jarlsEggsSummoned", "_jarlsFruitSummoned", "_jarlsMeatSummoned", "_jarlsPotatoSummoned", "_jarlsVeggiesSummoned", "_jingleBellUsed", "_jukebox", "_kgbFlywheelCharged", "_kgbLeftDrawerUsed", "_kgbOpened", "_kgbRightDrawerUsed", "_kolConSixPackUsed", "_kolhsCutButNotDried", "_kolhsIsskayLikeAnAshtray", "_kolhsPoeticallyLicenced", "_kolhsSchoolSpirited", "_kudzuSaladEaten", "_lastCombatWon", "_latteBanishUsed", "_latteCopyUsed", "_latteDrinkUsed", "_legendaryBeat", "_licenseToChillUsed", "_lodestoneUsed", "_lookingGlass", "_loveTunnelToday", "_loveTunnelUsed", "_luckyGoldRingVolcoino", "_lunchBreak", "_lupineHormonesUsed", "_lyleFavored", "_madLiquorDrunk", "_madTeaParty", "_mafiaMiddleFingerRingUsed", "_managerialManipulationUsed", "_mansquitoSerumUsed", "_maydayDropped", "_mayoDeviceRented", "_mayoTankSoaked", "_meatballMachineUsed", "_meatifyMatterUsed", "_milkOfMagnesiumUsed", "_mimeArmyShotglassUsed", "_missGravesVermouthDrunk", "_missileLauncherUsed", "_molehillMountainUsed", "_momFoodReceived", "_mrBurnsgerEaten", "_muffinOrderedToday", "_mushroomGardenVisited", "_neverendingPartyToday", "_newYouQuestCompleted", "_olympicSwimmingPool", "_olympicSwimmingPoolItemFound", "_overflowingGiftBasketUsed", "_partyHard", "_pastaAdditive", "_perfectFreezeUsed", "_perfectlyFairCoinUsed", "_petePartyThrown", "_peteRiotIncited", "_photocopyUsed", "_pickyTweezersUsed", "_pingPongGame", "_pirateBellowUsed", "_pirateForkUsed", "_pixelOrbUsed", "_plumbersMushroomStewEaten", "_pneumaticityPotionUsed", "_portableSteamUnitUsed", "_pottedTeaTreeUsed", "_prToday", "_psychoJarFilled", "_psychoJarUsed", "_psychokineticHugUsed", "_rainStickUsed", "_redwoodRainStickUsed", "_requestSandwichSucceeded", "_rhinestonesAcquired", "_seaJellyHarvested", "_setOfJacksUsed", "_sewingKitUsed", "_sexChanged", "_shrubDecorated", "_silverDreadFlaskUsed", "_sitCourseCompleted", "_skateBuff1", "_skateBuff2", "_skateBuff3", "_skateBuff4", "_skateBuff5", "_sleazeAirportToday", "_sobrieTeaUsed", "_softwareGlitchTurnReceived", "_spacegateMurderbot", "_spacegateRuins", "_spacegateSpant", "_spacegateToday", "_spacegateVaccine", "_spaghettiBreakfast", "_spaghettiBreakfastEaten", "_spinmasterLatheVisited", "_spinningWheel", "_spookyAirportToday", "_stabonicScrollUsed", "_steelyEyedSquintUsed", "_stenchAirportToday", "_stinkyCheeseBanisherUsed", "_strangeStalagmiteUsed", "_streamsCrossed", "_stuffedPocketwatchUsed", "_styxSprayUsed", "_summonAnnoyanceUsed", "_summonCarrotUsed", "_summonResortPassUsed", "_sweetToothUsed", "_syntheticDogHairPillUsed", "_tacoFlierUsed", "_telegraphOfficeToday", "_templeHiddenPower", "_tempuraAirUsed", "_thesisDelivered", "_timeSpinnerReplicatorUsed", "_toastSummoned", "_tonicDjinn", "_treasuryEliteMeatCollected", "_treasuryHaremMeatCollected", "_trivialAvocationsGame", "_tryptophanDartUsed", "_turtlePowerCast", "_twelveNightEnergyUsed", "_ultraMegaSourBallUsed", "_victorSpoilsUsed", "_villainLairCanLidUsed", "_villainLairColorChoiceUsed", "_villainLairDoorChoiceUsed", "_villainLairFirecrackerUsed", "_villainLairSymbologyChoiceUsed", "_villainLairWebUsed", "_vmaskBanisherUsed", "_voraciTeaUsed", "_volcanoItemRedeemed", "_volcanoSuperduperheatedMetal", "_voteToday", "_VYKEACafeteriaRaided", "_VYKEALoungeRaided", "_walfordQuestStartedToday", "_warbearBankUsed", "_warbearBreakfastMachineUsed", "_warbearGyrocopterUsed", "_warbearSodaMachineUsed", "_wildfireBarrelHarvested", "_witchessBuff", "_workshedItemUsed", "_zombieClover", "_preventScurvy", "lockedItem4637", "lockedItem4638", "lockedItem4639", "lockedItem4646", "lockedItem4647", "unknownRecipe3542", "unknownRecipe3543", "unknownRecipe3544", "unknownRecipe3545", "unknownRecipe3546", "unknownRecipe3547", "unknownRecipe3548", "unknownRecipe3749", "unknownRecipe3751", "unknownRecipe4172", "unknownRecipe4173", "unknownRecipe4174", "unknownRecipe5060", "unknownRecipe5061", "unknownRecipe5062", "unknownRecipe5063", "unknownRecipe5064", "unknownRecipe5066", "unknownRecipe5067", "unknownRecipe5069", "unknownRecipe5070", "unknownRecipe5072", "unknownRecipe5073", "unknownRecipe5670", "unknownRecipe5671", "unknownRecipe6501", "unknownRecipe6564", "unknownRecipe6565", "unknownRecipe6566", "unknownRecipe6567", "unknownRecipe6568", "unknownRecipe6569", "unknownRecipe6570", "unknownRecipe6571", "unknownRecipe6572", "unknownRecipe6573", "unknownRecipe6574", "unknownRecipe6575", "unknownRecipe6576", "unknownRecipe6577", "unknownRecipe6578", "unknownRecipe7752", "unknownRecipe7753", "unknownRecipe7754", "unknownRecipe7755", "unknownRecipe7756", "unknownRecipe7757", "unknownRecipe7758", "unknownRecipe10970", "unknownRecipe10971", "unknownRecipe10972", "unknownRecipe10973", "unknownRecipe10974", "unknownRecipe10975", "unknownRecipe10976", "unknownRecipe10977", "unknownRecipe10978", "unknownRecipe10988", "unknownRecipe10989", "unknownRecipe10990", "unknownRecipe10991", "unknownRecipe10992", "unknownRecipe11000"];
var numericProperties = ["coinMasterIndex", "dailyDeedsVersion", "defaultDropdown1", "defaultDropdown2", "defaultDropdownSplit", "defaultLimit", "fixedThreadPoolSize", "itemManagerIndex", "lastBuffRequestType", "lastGlobalCounterDay", "lastImageCacheClear", "previousUpdateRevision", "relayDelayForSVN", "relaySkillButtonCount", "scriptButtonPosition", "statusDropdown", "svnThreadPoolSize", "toolbarPosition", "_g9Effect", "8BitScore", "addingScrolls", "affirmationCookiesEaten", "aminoAcidsUsed", "antagonisticSnowmanKitCost", "ascensionsToday", "autoAbortThreshold", "autoAntidote", "autoBuyPriceLimit", "autumnatonQuestTurn", "availableCandyCredits", "availableDimes", "availableFunPoints", "availableQuarters", "availableStoreCredits", "availableSwagger", "averageSwagger", "awolMedicine", "awolPointsBeanslinger", "awolPointsCowpuncher", "awolPointsSnakeoiler", "awolDeferredPointsBeanslinger", "awolDeferredPointsCowpuncher", "awolDeferredPointsSnakeoiler", "awolVenom", "bagOTricksCharges", "ballpitBonus", "bankedKarma", "bartenderTurnsUsed", "basementMallPrices", "basementSafetyMargin", "batmanFundsAvailable", "batmanBonusInitialFunds", "batmanTimeLeft", "bearSwagger", "beeCounter", "beGregariousCharges", "beGregariousFightsLeft", "birdformCold", "birdformHot", "birdformRoc", "birdformSleaze", "birdformSpooky", "birdformStench", "blackBartsBootyCost", "blackPuddingsDefeated", "blackForestProgress", "blankOutUsed", "bloodweiserDrunk", "bondPoints", "bondVillainsDefeated", "boneAbacusVictories", "booPeakProgress", "borisPoints", "breakableHandling", "breakableHandling1964", "breakableHandling9691", "breakableHandling9692", "breakableHandling9699", "breathitinCharges", "brodenBacteria", "brodenSprinkles", "buffBotMessageDisposal", "buffBotPhilanthropyType", "buffJimmyIngredients", "burnoutsDefeated", "burrowgrubSummonsRemaining", "camelSpit", "camerasUsed", "campAwayDecoration", "candyWitchTurnsUsed", "candyWitchCandyTotal", "carboLoading", "catBurglarBankHeists", "cellarLayout", "charitableDonations", "chasmBridgeProgress", "chefTurnsUsed", "chessboardsCleared", "chilledToTheBone", "cinderellaMinutesToMidnight", "cinderellaScore", "cocktailSummons", "commerceGhostCombats", "controlPanelOmega", "cornucopiasOpened", "cosmicBowlingBallReturnCombats", "cozyCounter6332", "cozyCounter6333", "cozyCounter6334", "craftingClay", "craftingLeather", "craftingStraw", "crimbo16BeardChakraCleanliness", "crimbo16BootsChakraCleanliness", "crimbo16BungChakraCleanliness", "crimbo16CrimboHatChakraCleanliness", "crimbo16GutsChakraCleanliness", "crimbo16HatChakraCleanliness", "crimbo16JellyChakraCleanliness", "crimbo16LiverChakraCleanliness", "crimbo16NippleChakraCleanliness", "crimbo16NoseChakraCleanliness", "crimbo16ReindeerChakraCleanliness", "crimbo16SackChakraCleanliness", "crimboTrainingSkill", "crimboTreeDays", "cubelingProgress", "currentExtremity", "currentHedgeMazeRoom", "currentMojoFilters", "currentNunneryMeat", "currentPortalEnergy", "cursedMagnifyingGlassCount", "cyrptAlcoveEvilness", "cyrptCrannyEvilness", "cyrptNicheEvilness", "cyrptNookEvilness", "cyrptTotalEvilness", "darkGyfftePoints", "daycareEquipment", "daycareInstructors", "daycareLastScavenge", "daycareToddlers", "dbNemesisSkill1", "dbNemesisSkill2", "dbNemesisSkill3", "desertExploration", "desktopHeight", "desktopWidth", "dinseyFilthLevel", "dinseyFunProgress", "dinseyNastyBearsDefeated", "dinseySocialJusticeIProgress", "dinseySocialJusticeIIProgress", "dinseyTouristsFed", "dinseyToxicMultiplier", "doctorBagQuestLights", "doctorBagUpgrades", "dreadScroll1", "dreadScroll2", "dreadScroll3", "dreadScroll4", "dreadScroll5", "dreadScroll6", "dreadScroll7", "dreadScroll8", "dripAdventuresSinceAscension", "drippingHallAdventuresSinceAscension", "drippingTreesAdventuresSinceAscension", "drippyBatsUnlocked", "drippyJuice", "drippyOrbsClaimed", "drunkenSwagger", "edDefeatAbort", "edPoints", "eldritchTentaclesFought", "electricKoolAidEaten", "elfGratitude", "encountersUntilDMTChoice", "encountersUntilNEPChoice", "ensorceleeLevel", "entauntaunedColdRes", "essenceOfAnnoyanceCost", "essenceOfBearCost", "extraRolloverAdventures", "falloutShelterLevel", "familiarSweat", "fingernailsClipped", "fistSkillsKnown", "flyeredML", "fossilB", "fossilD", "fossilN", "fossilP", "fossilS", "fossilW", "fratboysDefeated", "frenchGuardTurtlesFreed", "funGuyMansionKills", "garbageChampagneCharge", "garbageFireProgress", "garbageShirtCharge", "garbageTreeCharge", "garlandUpgrades", "gingerDigCount", "gingerLawChoice", "gingerMuscleChoice", "gingerTrainScheduleStudies", "gladiatorBallMovesKnown", "gladiatorBladeMovesKnown", "gladiatorNetMovesKnown", "glitchItemCost", "glitchItemImplementationCount", "glitchItemImplementationLevel", "glitchSwagger", "gloverPoints", "gnasirProgress", "goldenMrAccessories", "gongPath", "gooseDronesRemaining", "goreCollected", "gourdItemCount", "greyYouPoints", "grimoire1Summons", "grimoire2Summons", "grimoire3Summons", "grimstoneCharge", "guardTurtlesFreed", "guideToSafariCost", "guyMadeOfBeesCount", "guzzlrBronzeDeliveries", "guzzlrDeliveryProgress", "guzzlrGoldDeliveries", "guzzlrPlatinumDeliveries", "haciendaLayout", "hallowiener8BitRealm", "hallowienerCoinspiracy", "hareMillisecondsSaved", "hareTurnsUsed", "heavyRainsStartingThunder", "heavyRainsStartingRain", "heavyRainsStartingLightning", "heroDonationBoris", "heroDonationJarlsberg", "heroDonationSneakyPete", "hiddenApartmentProgress", "hiddenBowlingAlleyProgress", "hiddenHospitalProgress", "hiddenOfficeProgress", "hiddenTavernUnlock", "highTopPumped", "hippiesDefeated", "holidayHalsBookCost", "holidaySwagger", "homemadeRobotUpgrades", "homebodylCharges", "hpAutoRecovery", "hpAutoRecoveryTarget", "iceSwagger", "jarlsbergPoints", "jungCharge", "junglePuns", "knownAscensions", "kolhsTotalSchoolSpirited", "lastAnticheeseDay", "lastArcadeAscension", "lastBadMoonReset", "lastBangPotionReset", "lastBattlefieldReset", "lastBeardBuff", "lastBreakfast", "lastCartographyBooPeak", "lastCartographyCastleTop", "lastCartographyDarkNeck", "lastCartographyDefiledNook", "lastCartographyFratHouse", "lastCartographyFratHouseVerge", "lastCartographyGuanoJunction", "lastCartographyHauntedBilliards", "lastCartographyHippyCampVerge", "lastCartographyZeppelinProtesters", "lastCastleGroundUnlock", "lastCastleTopUnlock", "lastCellarReset", "lastChanceThreshold", "lastChasmReset", "lastColosseumRoundWon", "lastCouncilVisit", "lastCounterDay", "lastDesertUnlock", "lastDispensaryOpen", "lastDMTDuplication", "lastDwarfFactoryReset", "lastEVHelmetValue", "lastEVHelmetReset", "lastEmptiedStorage", "lastFilthClearance", "lastGoofballBuy", "lastGuildStoreOpen", "lastGuyMadeOfBeesReset", "lastFratboyCall", "lastFriarCeremonyAscension", "lastFriarElbowNC", "lastFriarHeartNC", "lastFriarNeckNC", "lastHippyCall", "lastIslandUnlock", "lastKeyotronUse", "lastKingLiberation", "lastLightsOutTurn", "lastMushroomPlot", "lastMiningReset", "lastNemesisReset", "lastPaperStripReset", "lastPirateEphemeraReset", "lastPirateInsultReset", "lastPlusSignUnlock", "lastQuartetAscension", "lastQuartetRequest", "lastSecondFloorUnlock", "lastSkateParkReset", "lastStillBeatingSpleen", "lastTavernAscension", "lastTavernSquare", "lastTelescopeReset", "lastTempleAdventures", "lastTempleButtonsUnlock", "lastTempleUnlock", "lastThingWithNoNameDefeated", "lastTowelAscension", "lastTr4pz0rQuest", "lastTrainsetConfiguration", "lastVioletFogMap", "lastVoteMonsterTurn", "lastWartDinseyDefeated", "lastWuTangDefeated", "lastYearbookCameraAscension", "lastZapperWand", "lastZapperWandExplosionDay", "lawOfAveragesCost", "libramSummons", "lightsOutAutomation", "louvreDesiredGoal", "louvreGoal", "lovebugsAridDesert", "lovebugsBeachBuck", "lovebugsBooze", "lovebugsChroner", "lovebugsCoinspiracy", "lovebugsCyrpt", "lovebugsFreddy", "lovebugsFunFunds", "lovebugsHoboNickel", "lovebugsItemDrop", "lovebugsMeat", "lovebugsMeatDrop", "lovebugsMoxie", "lovebugsMuscle", "lovebugsMysticality", "lovebugsOilPeak", "lovebugsOrcChasm", "lovebugsPowder", "lovebugsWalmart", "lttQuestDifficulty", "lttQuestStageCount", "manaBurnSummonThreshold", "manaBurningThreshold", "manaBurningTrigger", "manorDrawerCount", "manualOfNumberologyCost", "mapToKokomoCost", "masksUnlocked", "maximizerMRUSize", "maximizerCombinationLimit", "maximizerEquipmentLevel", "maximizerEquipmentScope", "maximizerMaxPrice", "maximizerPriceLevel", "maxManaBurn", "mayflyExperience", "mayoLevel", "meansuckerPrice", "merkinVocabularyMastery", "miniAdvClass", "miniMartinisDrunk", "moleTunnelLevel", "mothershipProgress", "mpAutoRecovery", "mpAutoRecoveryTarget", "munchiesPillsUsed", "mushroomGardenCropLevel", "nextParanormalActivity", "nextQuantumFamiliarOwnerId", "nextQuantumFamiliarTurn", "noobPoints", "noobDeferredPoints", "noodleSummons", "nsContestants1", "nsContestants2", "nsContestants3", "nuclearAutumnPoints", "numericSwagger", "nunsVisits", "oilPeakProgress", "optimalSwagger", "optimisticCandleProgress", "palindomeDudesDefeated", "parasolUsed", "pendingMapReflections", "pingpongSkill", "pirateSwagger", "plantingDay", "plumberBadgeCost", "plumberCostumeCost", "plumberPoints", "poolSharkCount", "poolSkill", "primaryLabGooIntensity", "prismaticSummons", "procrastinatorLanguageFluency", "promptAboutCrafting", "puzzleChampBonus", "pyramidPosition", "rockinRobinProgress", "ROMOfOptimalityCost", "quantumPoints", "reagentSummons", "reanimatorArms", "reanimatorLegs", "reanimatorSkulls", "reanimatorWeirdParts", "reanimatorWings", "recentLocations", "redSnapperProgress", "relayPort", "relocatePygmyJanitor", "relocatePygmyLawyer", "rumpelstiltskinTurnsUsed", "rumpelstiltskinKidsRescued", "safariSwagger", "sausageGrinderUnits", "schoolOfHardKnocksDiplomaCost", "schoolSwagger", "scrapbookCharges", "scriptMRULength", "seaodesFound", "SeasoningSwagger", "sexChanges", "shenInitiationDay", "shockingLickCharges", "singleFamiliarRun", "skillBurn3", "skillBurn90", "skillBurn153", "skillBurn154", "skillBurn155", "skillBurn1019", "skillBurn5017", "skillBurn6014", "skillBurn6015", "skillBurn6016", "skillBurn6020", "skillBurn6021", "skillBurn6022", "skillBurn6023", "skillBurn6024", "skillBurn6026", "skillBurn6028", "skillBurn7323", "skillBurn14008", "skillBurn14028", "skillBurn14038", "skillBurn15011", "skillBurn15028", "skillBurn17005", "skillBurn22034", "skillBurn22035", "skillBurn23301", "skillBurn23302", "skillBurn23303", "skillBurn23304", "skillBurn23305", "skillBurn23306", "skillLevel46", "skillLevel47", "skillLevel48", "skillLevel117", "skillLevel118", "skillLevel121", "skillLevel128", "skillLevel134", "skillLevel144", "skillLevel180", "skillLevel188", "skillLevel7254", "slimelingFullness", "slimelingStacksDropped", "slimelingStacksDue", "smoresEaten", "smutOrcNoncombatProgress", "sneakyPetePoints", "snojoMoxieWins", "snojoMuscleWins", "snojoMysticalityWins", "sourceAgentsDefeated", "sourceEnlightenment", "sourceInterval", "sourcePoints", "sourceTerminalGram", "sourceTerminalPram", "sourceTerminalSpam", "spaceBabyLanguageFluency", "spacePirateLanguageFluency", "spelunkyNextNoncombat", "spelunkySacrifices", "spelunkyWinCount", "spookyPuttyCopiesMade", "statbotUses", "sugarCounter4178", "sugarCounter4179", "sugarCounter4180", "sugarCounter4181", "sugarCounter4182", "sugarCounter4183", "sugarCounter4191", "summonAnnoyanceCost", "sweat", "tacoDanCocktailSauce", "tacoDanFishMeat", "tavernLayout", "telescopeUpgrades", "tempuraSummons", "timeSpinnerMedals", "timesRested", "tomeSummons", "totalCharitableDonations", "trainsetPosition", "turtleBlessingTurns", "twinPeakProgress", "twoCRSPoints", "unicornHornInflation", "universalSeasoningCost", "usable1HWeapons", "usable1xAccs", "usable2HWeapons", "usable3HWeapons", "usableAccessories", "usableHats", "usableOffhands", "usableOther", "usablePants", "usableShirts", "valueOfAdventure", "valueOfInventory", "valueOfStill", "valueOfTome", "vintnerCharge", "vintnerWineLevel", "violetFogGoal", "walfordBucketProgress", "warehouseProgress", "welcomeBackAdv", "whetstonesUsed", "wolfPigsEvicted", "wolfTurnsUsed", "writingDesksDefeated", "xoSkeleltonXProgress", "xoSkeleltonOProgress", "yearbookCameraAscensions", "yearbookCameraUpgrades", "youRobotBody", "youRobotBottom", "youRobotLeft", "youRobotPoints", "youRobotRight", "youRobotTop", "zeppelinProtestors", "zigguratLianas", "zombiePoints", "_absintheDrops", "_abstractionDropsCrown", "_aguaDrops", "_xenomorphCharge", "_ancestralRecallCasts", "_antihangoverBonus", "_astralDrops", "_autumnatonQuests", "_backUpUses", "_badlyRomanticArrows", "_badgerCharge", "_balefulHowlUses", "_banderRunaways", "_bastilleCheese", "_bastilleGames", "_bastilleGameTurn", "_bastilleLastCheese", "_beanCannonUses", "_bearHugs", "_beerLensDrops", "_bellydancerPickpockets", "_benettonsCasts", "_birdsSoughtToday", "_boomBoxFights", "_boomBoxSongsLeft", "_bootStomps", "_boxingGloveArrows", "_brickoEyeSummons", "_brickoFights", "_campAwayCloudBuffs", "_campAwaySmileBuffs", "_candySummons", "_captainHagnkUsed", "_carnieCandyDrops", "_carrotNoseDrops", "_catBurglarCharge", "_catBurglarHeistsComplete", "_cheerleaderSteam", "_chestXRayUsed", "_chipBags", "_chocolateCigarsUsed", "_chocolateSculpturesUsed", "_chocolatesUsed", "_chronolithActivations", "_chronolithNextCost", "_clanFortuneConsultUses", "_clipartSummons", "_cloversPurchased", "_coldMedicineConsults", "_coldMedicineEquipmentTaken", "_companionshipCasts", "_cookbookbatCrafting", "_cosmicBowlingSkillsUsed", "_crimbo21ColdResistance", "_dailySpecialPrice", "_daycareGymScavenges", "_daycareRecruits", "_deckCardsDrawn", "_deluxeKlawSummons", "_demandSandwich", "_detectiveCasesCompleted", "_disavowed", "_dnaPotionsMade", "_donhosCasts", "_dreamJarDrops", "_drunkPygmyBanishes", "_edDefeats", "_edLashCount", "_elronsCasts", "_enamorangs", "_energyCollected", "_expertCornerCutterUsed", "_favorRareSummons", "_feastUsed", "_feelinTheRhythm", "_feelPrideUsed", "_feelExcitementUsed", "_feelHatredUsed", "_feelLonelyUsed", "_feelNervousUsed", "_feelEnvyUsed", "_feelDisappointedUsed", "_feelSuperiorUsed", "_feelLostUsed", "_feelNostalgicUsed", "_feelPeacefulUsed", "_fingertrapArrows", "_fireExtinguisherCharge", "_fragrantHerbsUsed", "_freeBeachWalksUsed", "_frButtonsPressed", "_fudgeWaspFights", "_gapBuffs", "_garbageFireDrops", "_garbageFireDropsCrown", "_genieFightsUsed", "_genieWishesUsed", "_gibbererAdv", "_gibbererCharge", "_gingerbreadCityTurns", "_glarkCableUses", "_glitchMonsterFights", "_gnomeAdv", "_godLobsterFights", "_goldenMoneyCharge", "_gongDrops", "_gothKidCharge", "_gothKidFights", "_grimBrotherCharge", "_grimFairyTaleDrops", "_grimFairyTaleDropsCrown", "_grimoireConfiscatorSummons", "_grimoireGeekySummons", "_grimstoneMaskDrops", "_grimstoneMaskDropsCrown", "_grooseCharge", "_grooseDrops", "_grubbyWoolDrops", "_guzzlrDeliveries", "_guzzlrGoldDeliveries", "_guzzlrPlatinumDeliveries", "_hareAdv", "_hareCharge", "_highTopPumps", "_hipsterAdv", "_hoardedCandyDropsCrown", "_hoboUnderlingSummons", "_holoWristDrops", "_holoWristProgress", "_hotAshesDrops", "_hotJellyUses", "_hotTubSoaks", "_humanMuskUses", "_iceballUses", "_inigosCasts", "_jerksHealthMagazinesUsed", "_jiggleCheese", "_jiggleCream", "_jiggleLife", "_jiggleSteak", "_jitbCharge", "_juneCleaverFightsLeft", "_juneCleaverEncounters", "_juneCleaverStench", "_juneCleaverSpooky", "_juneCleaverSleaze", "_juneCleaverHot", "_juneCleaverCold", "_juneCleaverSkips", "_jungDrops", "_kgbClicksUsed", "_kgbDispenserUses", "_kgbTranquilizerDartUses", "_klawSummons", "_kloopCharge", "_kloopDrops", "_kolhsAdventures", "_kolhsSavedByTheBell", "_lastDailyDungeonRoom", "_lastSausageMonsterTurn", "_lastZomboEye", "_latteRefillsUsed", "_leafblowerML", "_legionJackhammerCrafting", "_llamaCharge", "_longConUsed", "_lovebugsBeachBuck", "_lovebugsChroner", "_lovebugsCoinspiracy", "_lovebugsFreddy", "_lovebugsFunFunds", "_lovebugsHoboNickel", "_lovebugsWalmart", "_loveChocolatesUsed", "_lynyrdSnareUses", "_machineTunnelsAdv", "_macrometeoriteUses", "_mafiaThumbRingAdvs", "_mayflowerDrops", "_mayflySummons", "_mediumSiphons", "_meteoriteAdesUsed", "_meteorShowerUses", "_micrometeoriteUses", "_miniMartiniDrops", "_monstersMapped", "_mushroomGardenFights", "_nanorhinoCharge", "_navelRunaways", "_neverendingPartyFreeTurns", "_newYouQuestSharpensDone", "_newYouQuestSharpensToDo", "_nextColdMedicineConsult", "_nextQuantumAlignment", "_nightmareFuelCharges", "_noobSkillCount", "_nuclearStockpileUsed", "_oilExtracted", "_olfactionsUsed", "_speakeasyFreeFights", "_optimisticCandleDropsCrown", "_oreDropsCrown", "_otoscopeUsed", "_oysterEggsFound", "_pantsgivingBanish", "_pantsgivingCount", "_pantsgivingCrumbs", "_pantsgivingFullness", "_pasteDrops", "_peteJukeboxFixed", "_peteJumpedShark", "_petePeeledOut", "_pieDrops", "_piePartsCount", "_pixieCharge", "_pocketProfessorLectures", "_poisonArrows", "_pokeGrowFertilizerDrops", "_poolGames", "_powderedGoldDrops", "_powderedMadnessUses", "_powerfulGloveBatteryPowerUsed", "_powerPillDrops", "_powerPillUses", "_precisionCasts", "_radlibSummons", "_raindohCopiesMade", "_rapidPrototypingUsed", "_raveStealCount", "_reflexHammerUsed", "_resolutionAdv", "_resolutionRareSummons", "_riftletAdv", "_robinEggDrops", "_roboDrops", "_rogueProgramCharge", "_romanticFightsLeft", "_saberForceMonsterCount", "_saberForceUses", "_saberMod", "_saltGrainsConsumed", "_sandwormCharge", "_saplingsPlanted", "_sausageFights", "_sausagesEaten", "_sausagesMade", "_sealFigurineUses", "_sealScreeches", "_sealsSummoned", "_shatteringPunchUsed", "_shortOrderCookCharge", "_shrubCharge", "_sloppyDinerBeachBucks", "_smilesOfMrA", "_smithsnessSummons", "_snojoFreeFights", "_snojoParts", "_snokebombUsed", "_snowconeSummons", "_snowglobeDrops", "_snowSuitCount", "_sourceTerminalDigitizeMonsterCount", "_sourceTerminalDigitizeUses", "_sourceTerminalDuplicateUses", "_sourceTerminalEnhanceUses", "_sourceTerminalExtrudes", "_sourceTerminalPortscanUses", "_spaceFurDropsCrown", "_spacegatePlanetIndex", "_spacegateTurnsLeft", "_spaceJellyfishDrops", "_speakeasyDrinksDrunk", "_spelunkerCharges", "_spelunkingTalesDrops", "_spikolodonSpikeUses", "_spookyJellyUses", "_stackLumpsUses", "_steamCardDrops", "_stickerSummons", "_stinkyCheeseCount", "_stressBallSqueezes", "_sugarSummons", "_sweatOutSomeBoozeUsed", "_taffyRareSummons", "_taffyYellowSummons", "_thanksgettingFoodsEaten", "_thingfinderCasts", "_thinknerdPackageDrops", "_thorsPliersCrafting", "_timeHelmetAdv", "_timeSpinnerMinutesUsed", "_tokenDrops", "_transponderDrops", "_turkeyBlastersUsed", "_turkeyBooze", "_turkeyMuscle", "_turkeyMyst", "_turkeyMoxie", "_unaccompaniedMinerUsed", "_unconsciousCollectiveCharge", "_universalSeasoningsUsed", "_universeCalculated", "_universeImploded", "_usedReplicaBatoomerang", "_vampyreCloakeFormUses", "_villainLairProgress", "_vitachocCapsulesUsed", "_vmaskAdv", "_voidFreeFights", "_volcanoItem1", "_volcanoItem2", "_volcanoItem3", "_volcanoItemCount1", "_volcanoItemCount2", "_volcanoItemCount3", "_voteFreeFights", "_VYKEACompanionLevel", "_warbearAutoAnvilCrafting", "_waxGlobDrops", "_whiteRiceDrops", "_witchessFights", "_xoHugsUsed", "_yellowPixelDropsCrown", "_zapCount", "_zombieSmashPocketsUsed"];
var monsterProperties = ["beGregariousMonster", "cameraMonster", "chateauMonster", "clumsinessGroveBoss", "crappyCameraMonster", "crudeMonster", "enamorangMonster", "envyfishMonster", "glacierOfJerksBoss", "iceSculptureMonster", "lastCopyableMonster", "longConMonster", "maelstromOfLoversBoss", "makeFriendsMonster", "merkinLockkeyMonster", "nosyNoseMonster", "olfactedMonster", "photocopyMonster", "rainDohMonster", "romanticTarget", "screencappedMonster", "spookyPuttyMonster", "stenchCursedMonster", "superficiallyInterestedMonster", "waxMonster", "yearbookCameraTarget", "_gallapagosMonster", "_jiggleCreamedMonster", "_latteMonster", "_nanorhinoBanishedMonster", "_newYouQuestMonster", "_relativityMonster", "_saberForceMonster", "_sourceTerminalDigitizeMonster", "_voteMonster"];
var locationProperties = ["autumnatonQuestLocation", "currentJunkyardLocation", "doctorBagQuestLocation", "ghostLocation", "guzzlrQuestLocation", "nextSpookyravenElizabethRoom", "nextSpookyravenStephenRoom", "sourceOracleTarget", "_floundryBassLocation", "_floundryCarpLocation", "_floundryCodLocation", "_floundryHatchetfishLocation", "_floundryTroutLocation", "_floundryTunaLocation"];
var stringProperties = ["autoLogin", "browserBookmarks", "chatFontSize", "combatHotkey0", "combatHotkey1", "combatHotkey2", "combatHotkey3", "combatHotkey4", "combatHotkey5", "combatHotkey6", "combatHotkey7", "combatHotkey8", "combatHotkey9", "commandLineNamespace", "dailyDeedsOptions", "defaultBorderColor", "displayName", "externalEditor", "getBreakfast", "headerStates", "highlightList", "http.proxyHost", "http.proxyPassword", "http.proxyPort", "http.proxyUser", "https.proxyHost", "https.proxyPassword", "https.proxyPort", "https.proxyUser", "initialDesktop", "initialFrames", "lastRelayUpdate", "lastUserAgent", "lastUsername", "logPreferenceChangeFilter", "loginScript", "loginServerName", "loginWindowLogo", "logoutScript", "previousNotifyList", "previousUpdateVersion", "saveState", "saveStateActive", "scriptList", "swingLookAndFeel", "userAgent", "8BitColor", "afterAdventureScript", "autoOlfact", "autoPutty", "autumnatonUpgrades", "backupCameraMode", "banishedMonsters", "banishingShoutMonsters", "batmanStats", "batmanZone", "batmanUpgrades", "battleAction", "beachHeadsUnlocked", "beforePVPScript", "betweenBattleScript", "boomBoxSong", "breakfastAlways", "breakfastHardcore", "breakfastSoftcore", "buffBotCasting", "buyScript", "cargoPocketsEmptied", "cargoPocketScraps", "chatbotScript", "chatPlayerScript", "choiceAdventureScript", "chosenTrip", "clanFortuneReply1", "clanFortuneReply2", "clanFortuneReply3", "clanFortuneWord1", "clanFortuneWord2", "clanFortuneWord3", "commerceGhostItem", "counterScript", "copperheadClubHazard", "crimbotChassis", "crimbotArm", "crimbotPropulsion", "crystalBallPredictions", "csServicesPerformed", "currentAstralTrip", "currentDistillateMods", "currentEasyBountyItem", "currentHardBountyItem", "currentHippyStore", "currentJunkyardTool", "currentLlamaForm", "currentMood", "currentPVPSeason", "currentPvpVictories", "currentSpecialBountyItem", "currentSITSkill", "customCombatScript", "cyrusAdjectives", "defaultFlowerLossMessage", "defaultFlowerWinMessage", "demonName1", "demonName2", "demonName3", "demonName4", "demonName5", "demonName6", "demonName7", "demonName8", "demonName9", "demonName10", "demonName11", "demonName12", "demonName13", "dinseyGatorStenchDamage", "dinseyRollercoasterStats", "doctorBagQuestItem", "dolphinItem", "duckAreasCleared", "duckAreasSelected", "edPiece", "enamorangMonsterTurn", "ensorcelee", "EVEDirections", "extraCosmeticModifiers", "familiarScript", "forbiddenStores", "gameProBossSpecialPower", "gooseReprocessed", "grimoireSkillsHardcore", "grimoireSkillsSoftcore", "grimstoneMaskPath", "guzzlrQuestClient", "guzzlrQuestBooze", "guzzlrQuestTier", "harvestGardenHardcore", "harvestGardenSoftcore", "hpAutoRecoveryItems", "invalidBuffMessage", "jickSwordModifier", "juneCleaverQueue", "kingLiberatedScript", "lassoTraining", "lastAdventure", "lastBangPotion819", "lastBangPotion820", "lastBangPotion821", "lastBangPotion822", "lastBangPotion823", "lastBangPotion824", "lastBangPotion825", "lastBangPotion826", "lastBangPotion827", "lastChanceBurn", "lastChessboard", "lastCombatEnvironments", "lastDwarfDiceRolls", "lastDwarfDigitRunes", "lastDwarfEquipmentRunes", "lastDwarfFactoryItem118", "lastDwarfFactoryItem119", "lastDwarfFactoryItem120", "lastDwarfFactoryItem360", "lastDwarfFactoryItem361", "lastDwarfFactoryItem362", "lastDwarfFactoryItem363", "lastDwarfFactoryItem364", "lastDwarfFactoryItem365", "lastDwarfFactoryItem910", "lastDwarfFactoryItem3199", "lastDwarfOfficeItem3208", "lastDwarfOfficeItem3209", "lastDwarfOfficeItem3210", "lastDwarfOfficeItem3211", "lastDwarfOfficeItem3212", "lastDwarfOfficeItem3213", "lastDwarfOfficeItem3214", "lastDwarfOreRunes", "lastDwarfHopper1", "lastDwarfHopper2", "lastDwarfHopper3", "lastDwarfHopper4", "lastEncounter", "lastMacroError", "lastMessageId", "lastPaperStrip3144", "lastPaperStrip4138", "lastPaperStrip4139", "lastPaperStrip4140", "lastPaperStrip4141", "lastPaperStrip4142", "lastPaperStrip4143", "lastPaperStrip4144", "lastPirateEphemera", "lastPorkoBoard", "lastPorkoPayouts", "lastPorkoExpected", "lastSlimeVial3885", "lastSlimeVial3886", "lastSlimeVial3887", "lastSlimeVial3888", "lastSlimeVial3889", "lastSlimeVial3890", "lastSlimeVial3891", "lastSlimeVial3892", "lastSlimeVial3893", "lastSlimeVial3894", "lastSlimeVial3895", "lastSlimeVial3896", "latteModifier", "latteUnlocks", "libramSkillsHardcore", "libramSkillsSoftcore", "louvreOverride", "lovePotion", "lttQuestName", "maximizerList", "maximizerMRUList", "mayoInMouth", "mayoMinderSetting", "merkinQuestPath", "mineLayout1", "mineLayout2", "mineLayout3", "mineLayout4", "mineLayout5", "mineLayout6", "mpAutoRecoveryItems", "muffinOnOrder", "nextAdventure", "nextDistillateMods", "nextQuantumFamiliarName", "nextQuantumFamiliarOwner", "nsChallenge2", "nsChallenge3", "nsChallenge4", "nsChallenge5", "nsTowerDoorKeysUsed", "oceanAction", "oceanDestination", "parkaMode", "pastaThrall1", "pastaThrall2", "pastaThrall3", "pastaThrall4", "pastaThrall5", "pastaThrall6", "pastaThrall7", "pastaThrall8", "peteMotorbikeTires", "peteMotorbikeGasTank", "peteMotorbikeHeadlight", "peteMotorbikeCowling", "peteMotorbikeMuffler", "peteMotorbikeSeat", "pieStuffing", "plantingDate", "plantingLength", "plantingScript", "plumberCostumeWorn", "pokefamBoosts", "postAscensionScript", "preAscensionScript", "retroCapeSuperhero", "retroCapeWashingInstructions", "questClumsinessGrove", "questDoctorBag", "questECoBucket", "questESlAudit", "questESlBacteria", "questESlCheeseburger", "questESlCocktail", "questESlDebt", "questESlFish", "questESlMushStash", "questESlSalt", "questESlSprinkles", "questESpEVE", "questESpJunglePun", "questESpGore", "questESpClipper", "questESpFakeMedium", "questESpSerum", "questESpSmokes", "questESpOutOfOrder", "questEStFishTrash", "questEStGiveMeFuel", "questEStNastyBears", "questEStSocialJusticeI", "questEStSocialJusticeII", "questEStSuperLuber", "questEStWorkWithFood", "questEStZippityDooDah", "questEUNewYou", "questF01Primordial", "questF02Hyboria", "questF03Future", "questF04Elves", "questF05Clancy", "questG01Meatcar", "questG02Whitecastle", "questG03Ego", "questG04Nemesis", "questG05Dark", "questG06Delivery", "questG07Myst", "questG08Moxie", "questG09Muscle", "questGlacierOfJerks", "questGuzzlr", "questI01Scapegoat", "questI02Beat", "questL02Larva", "questL03Rat", "questL04Bat", "questL05Goblin", "questL06Friar", "questL07Cyrptic", "questL08Trapper", "questL09Topping", "questL10Garbage", "questL11MacGuffin", "questL11Black", "questL11Business", "questL11Curses", "questL11Desert", "questL11Doctor", "questL11Manor", "questL11Palindome", "questL11Pyramid", "questL11Ron", "questL11Shen", "questL11Spare", "questL11Worship", "questL12War", "questL12HippyFrat", "questL13Final", "questL13Warehouse", "questLTTQuestByWire", "questM01Untinker", "questM02Artist", "questM03Bugbear", "questM05Toot", "questM06Gourd", "questM07Hammer", "questM08Baker", "questM09Rocks", "questM10Azazel", "questM11Postal", "questM12Pirate", "questM13Escape", "questM14Bounty", "questM15Lol", "questM16Temple", "questM17Babies", "questM18Swamp", "questM19Hippy", "questM20Necklace", "questM21Dance", "questM22Shirt", "questM23Meatsmith", "questM24Doc", "questM25Armorer", "questM26Oracle", "questMaelstromOfLovers", "questPAGhost", "questS01OldGuy", "questS02Monkees", "raveCombo1", "raveCombo2", "raveCombo3", "raveCombo4", "raveCombo5", "raveCombo6", "recoveryScript", "relayCounters", "royalty", "scriptMRUList", "seahorseName", "shenQuestItem", "shrubGarland", "shrubGifts", "shrubLights", "shrubTopper", "sideDefeated", "sidequestArenaCompleted", "sidequestFarmCompleted", "sidequestJunkyardCompleted", "sidequestLighthouseCompleted", "sidequestNunsCompleted", "sidequestOrchardCompleted", "skateParkStatus", "snowsuit", "sourceTerminalChips", "sourceTerminalEducate1", "sourceTerminalEducate2", "sourceTerminalEnquiry", "sourceTerminalEducateKnown", "sourceTerminalEnhanceKnown", "sourceTerminalEnquiryKnown", "sourceTerminalExtrudeKnown", "spadingData", "spadingScript", "speakeasyName", "spelunkyStatus", "spelunkyUpgrades", "spookyravenRecipeUsed", "stationaryButton1", "stationaryButton2", "stationaryButton3", "stationaryButton4", "stationaryButton5", "streamCrossDefaultTarget", "sweetSynthesisBlacklist", "telescope1", "telescope2", "telescope3", "telescope4", "telescope5", "testudinalTeachings", "textColors", "thanksMessage", "tomeSkillsHardcore", "tomeSkillsSoftcore", "trackVoteMonster", "trainsetConfiguration", "trapperOre", "umbrellaState", "umdLastObtained", "vintnerWineEffect", "vintnerWineName", "vintnerWineType", "violetFogLayout", "volcanoMaze1", "volcanoMaze2", "volcanoMaze3", "volcanoMaze4", "volcanoMaze5", "walfordBucketItem", "warProgress", "watchedPreferences", "workteaClue", "yourFavoriteBird", "yourFavoriteBirdMods", "youRobotCPUUpgrades", "_bastilleBoosts", "_bastilleChoice1", "_bastilleChoice2", "_bastilleChoice3", "_bastilleCurrentStyles", "_bastilleEnemyCastle", "_bastilleEnemyName", "_bastilleLastBattleResults", "_bastilleLastEncounter", "_bastilleStats", "_beachHeadsUsed", "_beachLayout", "_beachMinutes", "_birdOfTheDay", "_birdOfTheDayMods", "_bittycar", "_campAwaySmileBuffSign", "_cloudTalkMessage", "_cloudTalkSmoker", "_coatOfPaintModifier", "_dailySpecial", "_deckCardsSeen", "_feastedFamiliars", "_floristPlantsUsed", "_frAreasUnlocked", "_frHoursLeft", "_frMonstersKilled", "_horsery", "_horseryCrazyMox", "_horseryCrazyMus", "_horseryCrazyMys", "_horseryCrazyName", "_horseryCurrentName", "_horseryDarkName", "_horseryNormalName", "_horseryPaleName", "_jickJarAvailable", "_jiggleCheesedMonsters", "_lastCombatStarted", "_LastPirateRealmIsland", "_locketMonstersFought", "_mummeryMods", "_mummeryUses", "_newYouQuestSkill", "_noHatModifier", "_pantogramModifier", "_pottedPowerPlant", "_questESp", "_questPartyFair", "_questPartyFairProgress", "_questPartyFairQuest", "_roboDrinks", "_roninStoragePulls", "_spacegateAnimalLife", "_spacegateCoordinates", "_spacegateGear", "_spacegateHazards", "_spacegateIntelligentLife", "_spacegatePlanetName", "_spacegatePlantLife", "_stolenAccordions", "_tempRelayCounters", "_timeSpinnerFoodAvailable", "_unknownEasyBountyItem", "_unknownHardBountyItem", "_unknownSpecialBountyItem", "_untakenEasyBountyItem", "_untakenHardBountyItem", "_untakenSpecialBountyItem", "_userMods", "_villainLairColor", "_villainLairKey", "_voteLocal1", "_voteLocal2", "_voteLocal3", "_voteLocal4", "_voteMonster1", "_voteMonster2", "_voteModifier", "_VYKEACompanionType", "_VYKEACompanionRune", "_VYKEACompanionName"];
var numericOrStringProperties = ["statusEngineering", "statusGalley", "statusMedbay", "statusMorgue", "statusNavigation", "statusScienceLab", "statusSonar", "statusSpecialOps", "statusWasteProcessing", "choiceAdventure2", "choiceAdventure3", "choiceAdventure4", "choiceAdventure5", "choiceAdventure6", "choiceAdventure7", "choiceAdventure8", "choiceAdventure9", "choiceAdventure10", "choiceAdventure11", "choiceAdventure12", "choiceAdventure14", "choiceAdventure15", "choiceAdventure16", "choiceAdventure17", "choiceAdventure18", "choiceAdventure19", "choiceAdventure20", "choiceAdventure21", "choiceAdventure22", "choiceAdventure23", "choiceAdventure24", "choiceAdventure25", "choiceAdventure26", "choiceAdventure27", "choiceAdventure28", "choiceAdventure29", "choiceAdventure40", "choiceAdventure41", "choiceAdventure42", "choiceAdventure45", "choiceAdventure46", "choiceAdventure47", "choiceAdventure71", "choiceAdventure72", "choiceAdventure73", "choiceAdventure74", "choiceAdventure75", "choiceAdventure76", "choiceAdventure77", "choiceAdventure86", "choiceAdventure87", "choiceAdventure88", "choiceAdventure89", "choiceAdventure90", "choiceAdventure91", "choiceAdventure105", "choiceAdventure106", "choiceAdventure107", "choiceAdventure108", "choiceAdventure109", "choiceAdventure110", "choiceAdventure111", "choiceAdventure112", "choiceAdventure113", "choiceAdventure114", "choiceAdventure115", "choiceAdventure116", "choiceAdventure117", "choiceAdventure118", "choiceAdventure120", "choiceAdventure123", "choiceAdventure125", "choiceAdventure126", "choiceAdventure127", "choiceAdventure129", "choiceAdventure131", "choiceAdventure132", "choiceAdventure135", "choiceAdventure136", "choiceAdventure137", "choiceAdventure138", "choiceAdventure139", "choiceAdventure140", "choiceAdventure141", "choiceAdventure142", "choiceAdventure143", "choiceAdventure144", "choiceAdventure145", "choiceAdventure146", "choiceAdventure147", "choiceAdventure148", "choiceAdventure149", "choiceAdventure151", "choiceAdventure152", "choiceAdventure153", "choiceAdventure154", "choiceAdventure155", "choiceAdventure156", "choiceAdventure157", "choiceAdventure158", "choiceAdventure159", "choiceAdventure160", "choiceAdventure161", "choiceAdventure162", "choiceAdventure163", "choiceAdventure164", "choiceAdventure165", "choiceAdventure166", "choiceAdventure167", "choiceAdventure168", "choiceAdventure169", "choiceAdventure170", "choiceAdventure171", "choiceAdventure172", "choiceAdventure177", "choiceAdventure178", "choiceAdventure180", "choiceAdventure181", "choiceAdventure182", "choiceAdventure184", "choiceAdventure185", "choiceAdventure186", "choiceAdventure187", "choiceAdventure188", "choiceAdventure189", "choiceAdventure191", "choiceAdventure197", "choiceAdventure198", "choiceAdventure199", "choiceAdventure200", "choiceAdventure201", "choiceAdventure202", "choiceAdventure203", "choiceAdventure204", "choiceAdventure205", "choiceAdventure206", "choiceAdventure207", "choiceAdventure208", "choiceAdventure211", "choiceAdventure212", "choiceAdventure213", "choiceAdventure214", "choiceAdventure215", "choiceAdventure216", "choiceAdventure217", "choiceAdventure218", "choiceAdventure219", "choiceAdventure220", "choiceAdventure221", "choiceAdventure222", "choiceAdventure223", "choiceAdventure224", "choiceAdventure225", "choiceAdventure230", "choiceAdventure272", "choiceAdventure273", "choiceAdventure276", "choiceAdventure277", "choiceAdventure278", "choiceAdventure279", "choiceAdventure280", "choiceAdventure281", "choiceAdventure282", "choiceAdventure283", "choiceAdventure284", "choiceAdventure285", "choiceAdventure286", "choiceAdventure287", "choiceAdventure288", "choiceAdventure289", "choiceAdventure290", "choiceAdventure291", "choiceAdventure292", "choiceAdventure293", "choiceAdventure294", "choiceAdventure295", "choiceAdventure296", "choiceAdventure297", "choiceAdventure298", "choiceAdventure299", "choiceAdventure302", "choiceAdventure303", "choiceAdventure304", "choiceAdventure305", "choiceAdventure306", "choiceAdventure307", "choiceAdventure308", "choiceAdventure309", "choiceAdventure310", "choiceAdventure311", "choiceAdventure317", "choiceAdventure318", "choiceAdventure319", "choiceAdventure320", "choiceAdventure321", "choiceAdventure322", "choiceAdventure326", "choiceAdventure327", "choiceAdventure328", "choiceAdventure329", "choiceAdventure330", "choiceAdventure331", "choiceAdventure332", "choiceAdventure333", "choiceAdventure334", "choiceAdventure335", "choiceAdventure336", "choiceAdventure337", "choiceAdventure338", "choiceAdventure339", "choiceAdventure340", "choiceAdventure341", "choiceAdventure342", "choiceAdventure343", "choiceAdventure344", "choiceAdventure345", "choiceAdventure346", "choiceAdventure347", "choiceAdventure348", "choiceAdventure349", "choiceAdventure350", "choiceAdventure351", "choiceAdventure352", "choiceAdventure353", "choiceAdventure354", "choiceAdventure355", "choiceAdventure356", "choiceAdventure357", "choiceAdventure358", "choiceAdventure360", "choiceAdventure361", "choiceAdventure362", "choiceAdventure363", "choiceAdventure364", "choiceAdventure365", "choiceAdventure366", "choiceAdventure367", "choiceAdventure372", "choiceAdventure376", "choiceAdventure387", "choiceAdventure388", "choiceAdventure389", "choiceAdventure390", "choiceAdventure391", "choiceAdventure392", "choiceAdventure393", "choiceAdventure395", "choiceAdventure396", "choiceAdventure397", "choiceAdventure398", "choiceAdventure399", "choiceAdventure400", "choiceAdventure401", "choiceAdventure402", "choiceAdventure403", "choiceAdventure423", "choiceAdventure424", "choiceAdventure425", "choiceAdventure426", "choiceAdventure427", "choiceAdventure428", "choiceAdventure429", "choiceAdventure430", "choiceAdventure431", "choiceAdventure432", "choiceAdventure433", "choiceAdventure435", "choiceAdventure438", "choiceAdventure439", "choiceAdventure442", "choiceAdventure444", "choiceAdventure445", "choiceAdventure446", "choiceAdventure447", "choiceAdventure448", "choiceAdventure449", "choiceAdventure451", "choiceAdventure452", "choiceAdventure453", "choiceAdventure454", "choiceAdventure455", "choiceAdventure456", "choiceAdventure457", "choiceAdventure458", "choiceAdventure460", "choiceAdventure461", "choiceAdventure462", "choiceAdventure463", "choiceAdventure464", "choiceAdventure465", "choiceAdventure467", "choiceAdventure468", "choiceAdventure469", "choiceAdventure470", "choiceAdventure471", "choiceAdventure472", "choiceAdventure473", "choiceAdventure474", "choiceAdventure475", "choiceAdventure477", "choiceAdventure478", "choiceAdventure480", "choiceAdventure483", "choiceAdventure484", "choiceAdventure485", "choiceAdventure486", "choiceAdventure488", "choiceAdventure489", "choiceAdventure490", "choiceAdventure491", "choiceAdventure496", "choiceAdventure497", "choiceAdventure502", "choiceAdventure503", "choiceAdventure504", "choiceAdventure505", "choiceAdventure506", "choiceAdventure507", "choiceAdventure509", "choiceAdventure510", "choiceAdventure511", "choiceAdventure512", "choiceAdventure513", "choiceAdventure514", "choiceAdventure515", "choiceAdventure517", "choiceAdventure518", "choiceAdventure519", "choiceAdventure521", "choiceAdventure522", "choiceAdventure523", "choiceAdventure527", "choiceAdventure528", "choiceAdventure529", "choiceAdventure530", "choiceAdventure531", "choiceAdventure532", "choiceAdventure533", "choiceAdventure534", "choiceAdventure535", "choiceAdventure536", "choiceAdventure538", "choiceAdventure539", "choiceAdventure542", "choiceAdventure543", "choiceAdventure544", "choiceAdventure546", "choiceAdventure548", "choiceAdventure549", "choiceAdventure550", "choiceAdventure551", "choiceAdventure552", "choiceAdventure553", "choiceAdventure554", "choiceAdventure556", "choiceAdventure557", "choiceAdventure558", "choiceAdventure559", "choiceAdventure560", "choiceAdventure561", "choiceAdventure562", "choiceAdventure563", "choiceAdventure564", "choiceAdventure565", "choiceAdventure566", "choiceAdventure567", "choiceAdventure568", "choiceAdventure569", "choiceAdventure571", "choiceAdventure572", "choiceAdventure573", "choiceAdventure574", "choiceAdventure575", "choiceAdventure576", "choiceAdventure577", "choiceAdventure578", "choiceAdventure579", "choiceAdventure581", "choiceAdventure582", "choiceAdventure583", "choiceAdventure584", "choiceAdventure594", "choiceAdventure595", "choiceAdventure596", "choiceAdventure597", "choiceAdventure598", "choiceAdventure599", "choiceAdventure600", "choiceAdventure603", "choiceAdventure604", "choiceAdventure616", "choiceAdventure634", "choiceAdventure640", "choiceAdventure654", "choiceAdventure655", "choiceAdventure656", "choiceAdventure657", "choiceAdventure658", "choiceAdventure664", "choiceAdventure669", "choiceAdventure670", "choiceAdventure671", "choiceAdventure672", "choiceAdventure673", "choiceAdventure674", "choiceAdventure675", "choiceAdventure676", "choiceAdventure677", "choiceAdventure678", "choiceAdventure679", "choiceAdventure681", "choiceAdventure683", "choiceAdventure684", "choiceAdventure685", "choiceAdventure686", "choiceAdventure687", "choiceAdventure688", "choiceAdventure689", "choiceAdventure690", "choiceAdventure691", "choiceAdventure692", "choiceAdventure693", "choiceAdventure694", "choiceAdventure695", "choiceAdventure696", "choiceAdventure697", "choiceAdventure698", "choiceAdventure700", "choiceAdventure701", "choiceAdventure705", "choiceAdventure706", "choiceAdventure707", "choiceAdventure708", "choiceAdventure709", "choiceAdventure710", "choiceAdventure711", "choiceAdventure712", "choiceAdventure713", "choiceAdventure714", "choiceAdventure715", "choiceAdventure716", "choiceAdventure717", "choiceAdventure721", "choiceAdventure725", "choiceAdventure729", "choiceAdventure733", "choiceAdventure737", "choiceAdventure741", "choiceAdventure745", "choiceAdventure749", "choiceAdventure753", "choiceAdventure771", "choiceAdventure778", "choiceAdventure780", "choiceAdventure781", "choiceAdventure783", "choiceAdventure784", "choiceAdventure785", "choiceAdventure786", "choiceAdventure787", "choiceAdventure788", "choiceAdventure789", "choiceAdventure791", "choiceAdventure793", "choiceAdventure794", "choiceAdventure795", "choiceAdventure796", "choiceAdventure797", "choiceAdventure803", "choiceAdventure805", "choiceAdventure808", "choiceAdventure809", "choiceAdventure813", "choiceAdventure815", "choiceAdventure830", "choiceAdventure832", "choiceAdventure833", "choiceAdventure834", "choiceAdventure835", "choiceAdventure837", "choiceAdventure838", "choiceAdventure839", "choiceAdventure840", "choiceAdventure841", "choiceAdventure842", "choiceAdventure851", "choiceAdventure852", "choiceAdventure853", "choiceAdventure854", "choiceAdventure855", "choiceAdventure856", "choiceAdventure857", "choiceAdventure858", "choiceAdventure866", "choiceAdventure873", "choiceAdventure875", "choiceAdventure876", "choiceAdventure877", "choiceAdventure878", "choiceAdventure879", "choiceAdventure880", "choiceAdventure881", "choiceAdventure882", "choiceAdventure888", "choiceAdventure889", "choiceAdventure918", "choiceAdventure919", "choiceAdventure920", "choiceAdventure921", "choiceAdventure923", "choiceAdventure924", "choiceAdventure925", "choiceAdventure926", "choiceAdventure927", "choiceAdventure928", "choiceAdventure929", "choiceAdventure930", "choiceAdventure931", "choiceAdventure932", "choiceAdventure940", "choiceAdventure941", "choiceAdventure942", "choiceAdventure943", "choiceAdventure944", "choiceAdventure945", "choiceAdventure946", "choiceAdventure950", "choiceAdventure955", "choiceAdventure957", "choiceAdventure958", "choiceAdventure959", "choiceAdventure960", "choiceAdventure961", "choiceAdventure962", "choiceAdventure963", "choiceAdventure964", "choiceAdventure965", "choiceAdventure966", "choiceAdventure970", "choiceAdventure973", "choiceAdventure974", "choiceAdventure975", "choiceAdventure976", "choiceAdventure977", "choiceAdventure979", "choiceAdventure980", "choiceAdventure981", "choiceAdventure982", "choiceAdventure983", "choiceAdventure988", "choiceAdventure989", "choiceAdventure993", "choiceAdventure998", "choiceAdventure1000", "choiceAdventure1003", "choiceAdventure1005", "choiceAdventure1006", "choiceAdventure1007", "choiceAdventure1008", "choiceAdventure1009", "choiceAdventure1010", "choiceAdventure1011", "choiceAdventure1012", "choiceAdventure1013", "choiceAdventure1015", "choiceAdventure1016", "choiceAdventure1017", "choiceAdventure1018", "choiceAdventure1019", "choiceAdventure1020", "choiceAdventure1021", "choiceAdventure1022", "choiceAdventure1023", "choiceAdventure1026", "choiceAdventure1027", "choiceAdventure1028", "choiceAdventure1029", "choiceAdventure1030", "choiceAdventure1031", "choiceAdventure1032", "choiceAdventure1033", "choiceAdventure1034", "choiceAdventure1035", "choiceAdventure1036", "choiceAdventure1037", "choiceAdventure1038", "choiceAdventure1039", "choiceAdventure1040", "choiceAdventure1041", "choiceAdventure1042", "choiceAdventure1044", "choiceAdventure1045", "choiceAdventure1046", "choiceAdventure1048", "choiceAdventure1051", "choiceAdventure1052", "choiceAdventure1053", "choiceAdventure1054", "choiceAdventure1055", "choiceAdventure1056", "choiceAdventure1057", "choiceAdventure1059", "choiceAdventure1060", "choiceAdventure1061", "choiceAdventure1062", "choiceAdventure1065", "choiceAdventure1067", "choiceAdventure1068", "choiceAdventure1069", "choiceAdventure1070", "choiceAdventure1071", "choiceAdventure1073", "choiceAdventure1077", "choiceAdventure1080", "choiceAdventure1081", "choiceAdventure1082", "choiceAdventure1083", "choiceAdventure1084", "choiceAdventure1085", "choiceAdventure1091", "choiceAdventure1094", "choiceAdventure1095", "choiceAdventure1096", "choiceAdventure1097", "choiceAdventure1102", "choiceAdventure1106", "choiceAdventure1107", "choiceAdventure1108", "choiceAdventure1110", "choiceAdventure1114", "choiceAdventure1115", "choiceAdventure1116", "choiceAdventure1118", "choiceAdventure1119", "choiceAdventure1120", "choiceAdventure1121", "choiceAdventure1122", "choiceAdventure1123", "choiceAdventure1171", "choiceAdventure1172", "choiceAdventure1173", "choiceAdventure1174", "choiceAdventure1175", "choiceAdventure1193", "choiceAdventure1195", "choiceAdventure1196", "choiceAdventure1197", "choiceAdventure1198", "choiceAdventure1199", "choiceAdventure1202", "choiceAdventure1203", "choiceAdventure1204", "choiceAdventure1205", "choiceAdventure1206", "choiceAdventure1207", "choiceAdventure1208", "choiceAdventure1209", "choiceAdventure1210", "choiceAdventure1211", "choiceAdventure1212", "choiceAdventure1213", "choiceAdventure1214", "choiceAdventure1215", "choiceAdventure1219", "choiceAdventure1222", "choiceAdventure1223", "choiceAdventure1224", "choiceAdventure1225", "choiceAdventure1226", "choiceAdventure1227", "choiceAdventure1228", "choiceAdventure1229", "choiceAdventure1236", "choiceAdventure1237", "choiceAdventure1238", "choiceAdventure1239", "choiceAdventure1240", "choiceAdventure1241", "choiceAdventure1242", "choiceAdventure1243", "choiceAdventure1244", "choiceAdventure1245", "choiceAdventure1246", "choiceAdventure1247", "choiceAdventure1248", "choiceAdventure1249", "choiceAdventure1250", "choiceAdventure1251", "choiceAdventure1252", "choiceAdventure1253", "choiceAdventure1254", "choiceAdventure1255", "choiceAdventure1256", "choiceAdventure1266", "choiceAdventure1280", "choiceAdventure1281", "choiceAdventure1282", "choiceAdventure1283", "choiceAdventure1284", "choiceAdventure1285", "choiceAdventure1286", "choiceAdventure1287", "choiceAdventure1288", "choiceAdventure1289", "choiceAdventure1290", "choiceAdventure1291", "choiceAdventure1292", "choiceAdventure1293", "choiceAdventure1294", "choiceAdventure1295", "choiceAdventure1296", "choiceAdventure1297", "choiceAdventure1298", "choiceAdventure1299", "choiceAdventure1300", "choiceAdventure1301", "choiceAdventure1302", "choiceAdventure1303", "choiceAdventure1304", "choiceAdventure1305", "choiceAdventure1307", "choiceAdventure1310", "choiceAdventure1312", "choiceAdventure1313", "choiceAdventure1314", "choiceAdventure1315", "choiceAdventure1316", "choiceAdventure1317", "choiceAdventure1318", "choiceAdventure1319", "choiceAdventure1321", "choiceAdventure1322", "choiceAdventure1323", "choiceAdventure1324", "choiceAdventure1325", "choiceAdventure1326", "choiceAdventure1327", "choiceAdventure1328", "choiceAdventure1332", "choiceAdventure1333", "choiceAdventure1335", "choiceAdventure1340", "choiceAdventure1341", "choiceAdventure1345", "choiceAdventure1389", "choiceAdventure1392", "choiceAdventure1397", "choiceAdventure1399", "choiceAdventure1405", "choiceAdventure1411", "choiceAdventure1415", "choiceAdventure1427", "choiceAdventure1428", "choiceAdventure1429", "choiceAdventure1430", "choiceAdventure1431", "choiceAdventure1432", "choiceAdventure1433", "choiceAdventure1434", "choiceAdventure1436", "choiceAdventure1460", "choiceAdventure1461", "choiceAdventure1467", "choiceAdventure1468", "choiceAdventure1469", "choiceAdventure1470", "choiceAdventure1471", "choiceAdventure1472", "choiceAdventure1473", "choiceAdventure1474", "choiceAdventure1475", "choiceAdventure1486", "choiceAdventure1487", "choiceAdventure1488", "choiceAdventure1489", "choiceAdventure1491", "choiceAdventure1494"];
var familiarProperties = ["commaFamiliar", "nextQuantumFamiliar", "stillsuitFamiliar"];
var statProperties = ["nsChallenge1", "snojoSetting"];
var phylumProperties = ["dnaSyringe", "locketPhylum", "redSnapperPhylum"];
;// CONCATENATED MODULE: ./node_modules/libram/dist/propertyTyping.js

var booleanPropertiesSet = new Set(booleanProperties);
var numericPropertiesSet = new Set(numericProperties);
var numericOrStringPropertiesSet = new Set(numericOrStringProperties);
var stringPropertiesSet = new Set(stringProperties);
var locationPropertiesSet = new Set(locationProperties);
var monsterPropertiesSet = new Set(monsterProperties);
var familiarPropertiesSet = new Set(familiarProperties);
var statPropertiesSet = new Set(statProperties);
var phylumPropertiesSet = new Set(phylumProperties);
function isBooleanProperty(property) {
  return booleanPropertiesSet.has(property);
}
function isNumericProperty(property) {
  return numericPropertiesSet.has(property);
}
function isNumericOrStringProperty(property) {
  return numericOrStringPropertiesSet.has(property);
}
function isStringProperty(property) {
  return stringPropertiesSet.has(property);
}
function isLocationProperty(property) {
  return locationPropertiesSet.has(property);
}
function isMonsterProperty(property) {
  return monsterPropertiesSet.has(property);
}
function isFamiliarProperty(property) {
  return familiarPropertiesSet.has(property);
}
function isStatProperty(property) {
  return statPropertiesSet.has(property);
}
function isPhylumProperty(property) {
  return phylumPropertiesSet.has(property);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/property.js
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }




var createPropertyGetter = transform => (property, default_) => {
  var value = (0,external_kolmafia_namespaceObject.getProperty)(property);
  if (default_ !== undefined && value === "") {
    return default_;
  }
  return transform(value, property);
};
var createMafiaClassPropertyGetter = (Type, toType) => createPropertyGetter(value => {
  if (value === "") return null;
  var v = toType(value);
  return v === Type.none ? null : v;
});
var getString = createPropertyGetter(value => value);
var getCommaSeparated = createPropertyGetter(value => value.split(/, ?/));
var getBoolean = createPropertyGetter(value => value === "true");
var getNumber = createPropertyGetter(value => Number(value));
var getBounty = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Bounty, external_kolmafia_namespaceObject.toBounty);
var getClass = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Class, external_kolmafia_namespaceObject.toClass);
var getCoinmaster = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Coinmaster, external_kolmafia_namespaceObject.toCoinmaster);
var getEffect = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Effect, external_kolmafia_namespaceObject.toEffect);
var getElement = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Element, external_kolmafia_namespaceObject.toElement);
var getFamiliar = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Familiar, external_kolmafia_namespaceObject.toFamiliar);
var getItem = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Item, external_kolmafia_namespaceObject.toItem);
var getLocation = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Location, external_kolmafia_namespaceObject.toLocation);
var getMonster = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Monster, external_kolmafia_namespaceObject.toMonster);
var getPhylum = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Phylum, external_kolmafia_namespaceObject.toPhylum);
var getServant = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Servant, external_kolmafia_namespaceObject.toServant);
var getSkill = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Skill, external_kolmafia_namespaceObject.toSkill);
var getSlot = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Slot, external_kolmafia_namespaceObject.toSlot);
var getStat = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Stat, external_kolmafia_namespaceObject.toStat);
var getThrall = createMafiaClassPropertyGetter(external_kolmafia_namespaceObject.Thrall, external_kolmafia_namespaceObject.toThrall);
function property_get(property, _default) {
  var value = getString(property);
  // Handle known properties.
  if (isBooleanProperty(property)) {
    var _getBoolean;
    return (_getBoolean = getBoolean(property, _default)) !== null && _getBoolean !== void 0 ? _getBoolean : false;
  } else if (isNumericProperty(property)) {
    var _getNumber;
    return (_getNumber = getNumber(property, _default)) !== null && _getNumber !== void 0 ? _getNumber : 0;
  } else if (isNumericOrStringProperty(property)) {
    return value.match(/^\d+$/) ? parseInt(value) : value;
  } else if (isLocationProperty(property)) {
    return getLocation(property, _default);
  } else if (isMonsterProperty(property)) {
    return getMonster(property, _default);
  } else if (isFamiliarProperty(property)) {
    return getFamiliar(property, _default);
  } else if (isStatProperty(property)) {
    return getStat(property, _default);
  } else if (isPhylumProperty(property)) {
    return getPhylum(property, _default);
  } else if (isStringProperty(property)) {
    return value;
  }
  // Not a KnownProperty from here on out.
  if (_default instanceof external_kolmafia_namespaceObject.Location) {
    return getLocation(property, _default);
  } else if (_default instanceof external_kolmafia_namespaceObject.Monster) {
    return getMonster(property, _default);
  } else if (_default instanceof external_kolmafia_namespaceObject.Familiar) {
    return getFamiliar(property, _default);
  } else if (_default instanceof external_kolmafia_namespaceObject.Stat) {
    return getStat(property, _default);
  } else if (_default instanceof external_kolmafia_namespaceObject.Phylum) {
    return getPhylum(property, _default);
  } else if (typeof _default === "boolean") {
    return value === "true" ? true : value === "false" ? false : _default;
  } else if (typeof _default === "number") {
    return value === "" ? _default : parseInt(value);
  } else if (value === "") {
    return _default === undefined ? "" : _default;
  } else {
    return value;
  }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _set(property, value) {
  var stringValue = value === null ? "" : value.toString();
  (0,external_kolmafia_namespaceObject.setProperty)(property, stringValue);
}

function setProperties(properties) {
  for (var _i = 0, _Object$entries = Object.entries(properties); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      prop = _Object$entries$_i[0],
      value = _Object$entries$_i[1];
    _set(prop, value);
  }
}
function withProperties(properties, callback) {
  var propertiesBackup = Object.fromEntries(Object.entries(properties).map(_ref => {
    var _ref2 = _slicedToArray(_ref, 1),
      prop = _ref2[0];
    return [prop, property_get(prop)];
  }));
  setProperties(properties);
  try {
    callback();
  } finally {
    setProperties(propertiesBackup);
  }
}
function withProperty(property, value, callback) {
  withProperties(_defineProperty({}, property, value), callback);
}
function withChoices(choices, callback) {
  var properties = Object.fromEntries(Object.entries(choices).map(_ref3 => {
    var _ref4 = _slicedToArray(_ref3, 2),
      choice = _ref4[0],
      option = _ref4[1];
    return ["choiceAdventure".concat(choice), option];
  }));
  withProperties(properties, callback);
}
function withChoice(choice, value, callback) {
  withChoices(_defineProperty({}, choice, value), callback);
}
var PropertiesManager = /*#__PURE__*/function () {
  function PropertiesManager() {
    _classCallCheck(this, PropertiesManager);
    _defineProperty(this, "properties", {});
  }
  _createClass(PropertiesManager, [{
    key: "storedValues",
    get: function get() {
      return this.properties;
    }
    /**
     * Sets a collection of properties to the given values, storing the old values.
     * @param propertiesToSet A Properties object, keyed by property name.
     */
  }, {
    key: "set",
    value: function set(propertiesToSet) {
      for (var _i2 = 0, _Object$entries2 = Object.entries(propertiesToSet); _i2 < _Object$entries2.length; _i2++) {
        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
          propertyName = _Object$entries2$_i[0],
          propertyValue = _Object$entries2$_i[1];
        if (this.properties[propertyName] === undefined) {
          this.properties[propertyName] = property_get(propertyName);
        }
        _set(propertyName, propertyValue);
      }
    }
    /**
     * Sets a collection of choice adventure properties to the given values, storing the old values.
     * @param choicesToSet An object keyed by choice adventure number.
     */
  }, {
    key: "setChoices",
    value: function setChoices(choicesToSet) {
      this.set(Object.fromEntries(Object.entries(choicesToSet).map(_ref5 => {
        var _ref6 = _slicedToArray(_ref5, 2),
          choiceNumber = _ref6[0],
          choiceValue = _ref6[1];
        return ["choiceAdventure".concat(choiceNumber), choiceValue];
      })));
    }
    /**
     * Sets a single choice adventure property to the given value, storing the old value.
     * @param choiceToSet The number of the choice adventure to set the property for.
     * @param value The value to assign to that choice adventure.
     */
  }, {
    key: "setChoice",
    value: function setChoice(choiceToSet, value) {
      this.setChoices(_defineProperty({}, choiceToSet, value));
    }
    /**
     * Resets the given properties to their original stored value. Does not delete entries from the manager.
     * @param properties Collection of properties to reset.
     */
  }, {
    key: "reset",
    value: function reset() {
      for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {
        properties[_key] = arguments[_key];
      }
      for (var _i3 = 0, _properties = properties; _i3 < _properties.length; _i3++) {
        var property = _properties[_i3];
        var value = this.properties[property];
        if (value) {
          _set(property, value);
        }
      }
    }
    /**
     * Iterates over all stored values, setting each property back to its original stored value. Does not delete entries from the manager.
     */
  }, {
    key: "resetAll",
    value: function resetAll() {
      setProperties(this.properties);
    }
    /**
     * Stops storing the original values of inputted properties.
     * @param properties Properties for the manager to forget.
     */
  }, {
    key: "clear",
    value: function clear() {
      for (var _len2 = arguments.length, properties = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        properties[_key2] = arguments[_key2];
      }
      for (var _i4 = 0, _properties2 = properties; _i4 < _properties2.length; _i4++) {
        var property = _properties2[_i4];
        if (this.properties[property]) {
          delete this.properties[property];
        }
      }
    }
    /**
     * Clears all properties.
     */
  }, {
    key: "clearAll",
    value: function clearAll() {
      this.properties = {};
    }
    /**
     * Increases a numeric property to the given value if necessary.
     * @param property The numeric property we want to potentially raise.
     * @param value The minimum value we want that property to have.
     * @returns Whether we needed to change the property.
     */
  }, {
    key: "setMinimumValue",
    value: function setMinimumValue(property, value) {
      if (property_get(property, 0) < value) {
        this.set(_defineProperty({}, property, value));
        return true;
      }
      return false;
    }
    /**
     * Decrease a numeric property to the given value if necessary.
     * @param property The numeric property we want to potentially lower.
     * @param value The maximum value we want that property to have.
     * @returns Whether we needed to change the property.
     */
  }, {
    key: "setMaximumValue",
    value: function setMaximumValue(property, value) {
      if (property_get(property, 0) > value) {
        this.set(_defineProperty({}, property, value));
        return true;
      }
      return false;
    }
    /**
     * Creates a new PropertiesManager with identical stored values to this one.
     * @returns A new PropertiesManager, with identical stored values to this one.
     */
  }, {
    key: "clone",
    value: function clone() {
      var newGuy = new PropertiesManager();
      newGuy.properties = this.storedValues;
      return newGuy;
    }
    /**
     * Clamps a numeric property, modulating it up or down to fit within a specified range
     * @param property The numeric property to clamp
     * @param min The lower bound for what we want the property to be allowed to be.
     * @param max The upper bound for what we want the property to be allowed to be.
     * @returns Whether we ended up changing the property or not.
     */
  }, {
    key: "clamp",
    value: function clamp(property, min, max) {
      if (max < min) return false;
      var start = property_get(property);
      this.setMinimumValue(property, min);
      this.setMaximumValue(property, max);
      return start !== property_get(property);
    }
    /**
     * Determines whether this PropertiesManager has identical stored values to another.
     * @param other The PropertiesManager to compare to this one.
     * @returns Whether their StoredValues are identical.
     */
  }, {
    key: "equals",
    value: function equals(other) {
      var thisProps = Object.entries(this.storedValues);
      var otherProps = new Map(Object.entries(other.storedValues));
      if (thisProps.length !== otherProps.size) return false;
      for (var _i5 = 0, _thisProps = thisProps; _i5 < _thisProps.length; _i5++) {
        var _thisProps$_i = _slicedToArray(_thisProps[_i5], 2),
          propertyName = _thisProps$_i[0],
          propertyValue = _thisProps$_i[1];
        if (otherProps.get(propertyName) === propertyValue) return false;
      }
      return true;
    }
    /**
     * Merges a PropertiesManager onto this one, letting the input win in the event that both PropertiesManagers have a value stored.
     * @param other The PropertiesManager to be merged onto this one.
     * @returns A new PropertiesManager with stored values from both its parents.
     */
  }, {
    key: "merge",
    value: function merge(other) {
      var newGuy = new PropertiesManager();
      newGuy.properties = _objectSpread(_objectSpread({}, this.properties), other.properties);
      return newGuy;
    }
    /**
     * Merges an arbitrary collection of PropertiesManagers, letting the rightmost PropertiesManager win in the event of verlap.
     * @param mergees The PropertiesManagers to merge together.
     * @returns A PropertiesManager that is just an amalgam of all the constituents.
     */
  }], [{
    key: "merge",
    value: function merge() {
      for (var _len3 = arguments.length, mergees = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        mergees[_key3] = arguments[_key3];
      }
      if (mergees.length === 0) return new PropertiesManager();
      return mergees.reduce((a, b) => a.merge(b));
    }
  }]);
  return PropertiesManager;
}();
;// CONCATENATED MODULE: ./node_modules/libram/dist/utils.js
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = utils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function utils_slicedToArray(arr, i) { return utils_arrayWithHoles(arr) || utils_iterableToArrayLimit(arr, i) || utils_unsupportedIterableToArray(arr, i) || utils_nonIterableRest(); }
function utils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function utils_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function utils_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || utils_unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return utils_arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return utils_arrayLikeToArray(arr); }
function utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function notNull(value) {
  return value !== null;
}
function parseNumber(n) {
  return Number.parseInt(n.replace(/,/g, ""));
}
/**
 * Clamp a number between lower and upper bounds.
 *
 * @param n Number to clamp.
 * @param min Lower bound.
 * @param max Upper bound.
 */
function utils_clamp(n, min, max) {
  return Math.max(min, Math.min(max, n));
}
/**
 * Split an {@param array} into {@param chunkSize} sized chunks
 *
 * @param array Array to split
 * @param chunkSize Size of chunk
 */
function chunk(array, chunkSize) {
  var result = [];
  for (var i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
}
function arrayToCountedMap(array) {
  if (!Array.isArray(array)) return array;
  var map = new Map();
  array.forEach(item => {
    map.set(item, (map.get(item) || 0) + 1);
  });
  return map;
}
function countedMapToArray(map) {
  var _ref;
  return (_ref = []).concat.apply(_ref, _toConsumableArray(_toConsumableArray(map).map(_ref2 => {
    var _ref3 = utils_slicedToArray(_ref2, 2),
      item = _ref3[0],
      quantity = _ref3[1];
    return Array(quantity).fill(item);
  })));
}
function countedMapToString(map) {
  return _toConsumableArray(map).map(_ref4 => {
    var _ref5 = utils_slicedToArray(_ref4, 2),
      item = _ref5[0],
      quantity = _ref5[1];
    return "".concat(quantity, " x ").concat(item);
  }).join(", ");
}
function utils_sum(addends, x) {
  return addends.reduce((subtotal, element) => subtotal + (typeof x === "function" ? x(element) : element[x]), 0);
}
function sumNumbers(addends) {
  return utils_sum(addends, x => x);
}
/**
 * Checks if a given item is in a readonly array, acting as a typeguard.
 * @param item Needle
 * @param array Readonly array haystack
 * @returns Whether the item is in the array, and narrows the type of the item.
 */
function arrayContains(item, array) {
  return array.includes(item);
}
/**
 * Checks if two arrays contain the same elements in the same quantity.
 * @param a First array for comparison
 * @param b Second array for comparison
 * @returns Whether the two arrays are equal, irrespective of order.
 */
function setEqual(a, b) {
  var sortedA = _toConsumableArray(a).sort();
  var sortedB = _toConsumableArray(b).sort();
  return a.length === b.length && sortedA.every((item, index) => item === sortedB[index]);
}
/**
 * Reverses keys and values for a given map
 * @param map Map to invert
 */
function invertMap(map) {
  var returnValue = new Map();
  var _iterator = _createForOfIteratorHelper(map),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = utils_slicedToArray(_step.value, 2),
        key = _step$value[0],
        value = _step$value[1];
      returnValue.set(value, key);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return returnValue;
}
/**
 * Splits a string by commas while also respecting escaping commas with a backslash
 * @param str String to split
 * @returns List of tokens
 */
function splitByCommasWithEscapes(str) {
  var returnValue = [];
  var ignoreNext = false;
  var currentString = "";
  var _iterator2 = _createForOfIteratorHelper(str.split("")),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var char = _step2.value;
      if (char === "\\") {
        ignoreNext = true;
      } else {
        if (char == "," && !ignoreNext) {
          returnValue.push(currentString.trim());
          currentString = "";
        } else {
          currentString += char;
        }
        ignoreNext = false;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  returnValue.push(currentString.trim());
  return returnValue;
}
function maxBy(array, optimizer) {
  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (!array.length) throw new Error("Cannot call maxBy on an empty array!");
  if (typeof optimizer === "function") {
    return _toConsumableArray(array).reduce((_ref6, other) => {
      var value = _ref6.value,
        item = _ref6.item;
      var otherValue = optimizer(other);
      return value >= otherValue !== reverse ? {
        value: value,
        item: item
      } : {
        value: otherValue,
        item: other
      };
    }, {
      item: array[0],
      value: optimizer(array[0])
    }).item;
  } else {
    return array.reduce((a, b) => a[optimizer] >= b[optimizer] !== reverse ? a : b);
  }
}
function arrayEquals(left, right) {
  if (left.length !== right.length) return false;
  return left.every((element, index) => element === right[index]);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/template-string.js


var concatTemplateString = function concatTemplateString(literals) {
  for (var _len = arguments.length, placeholders = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    placeholders[_key - 1] = arguments[_key];
  }
  return literals.raw.reduce((acc, literal, i) => {
    var _placeholders$i;
    return acc + literal + ((_placeholders$i = placeholders[i]) !== null && _placeholders$i !== void 0 ? _placeholders$i : "");
  }, "");
};
var createSingleConstant = Type => {
  var tagFunction = function tagFunction(literals) {
    for (var _len2 = arguments.length, placeholders = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      placeholders[_key2 - 1] = arguments[_key2];
    }
    var input = concatTemplateString.apply(void 0, [literals].concat(placeholders));
    return Type.get(input);
  };
  tagFunction.none = Type.none;
  return tagFunction;
};
var createPluralConstant = Type => function (literals) {
  for (var _len3 = arguments.length, placeholders = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    placeholders[_key3 - 1] = arguments[_key3];
  }
  var input = concatTemplateString.apply(void 0, [literals].concat(placeholders));
  if (input === "") {
    return Type.all();
  }
  return Type.get(splitByCommasWithEscapes(input));
};
/**
 * A Bounty specified by name.
 *
 * @category In-game constant
 */
var $bounty = createSingleConstant(external_kolmafia_namespaceObject.Bounty);
/**
 * A list of Bounties specified by a comma-separated list of names.
 * For a list of all possible Bounties, leave the template string blank.
 *
 * @category In-game constant
 */
var $bounties = createPluralConstant(external_kolmafia_namespaceObject.Bounty);
/**
 * A Class specified by name.
 *
 * @category In-game constant
 */
var $class = createSingleConstant(external_kolmafia_namespaceObject.Class);
/**
 * A list of Classes specified by a comma-separated list of names.
 * For a list of all possible Classes, leave the template string blank.
 *
 * @category In-game constant
 */
var $classes = createPluralConstant(external_kolmafia_namespaceObject.Class);
/**
 * A Coinmaster specified by name.
 *
 * @category In-game constant
 */
var $coinmaster = createSingleConstant(external_kolmafia_namespaceObject.Coinmaster);
/**
 * A list of Coinmasters specified by a comma-separated list of names.
 * For a list of all possible Coinmasters, leave the template string blank.
 *
 * @category In-game constant
 */
var $coinmasters = createPluralConstant(external_kolmafia_namespaceObject.Coinmaster);
/**
 * An Effect specified by name.
 *
 * @category In-game constant
 */
var template_string_$effect = createSingleConstant(external_kolmafia_namespaceObject.Effect);
/**
 * A list of Effects specified by a comma-separated list of names.
 * For a list of all possible Effects, leave the template string blank.
 *
 * @category In-game constant
 */
var $effects = createPluralConstant(external_kolmafia_namespaceObject.Effect);
/**
 * An Element specified by name.
 *
 * @category In-game constant
 */
var $element = createSingleConstant(external_kolmafia_namespaceObject.Element);
/**
 * A list of Elements specified by a comma-separated list of names.
 * For a list of all possible Elements, leave the template string blank.
 *
 * @category In-game constant
 */
var $elements = createPluralConstant(external_kolmafia_namespaceObject.Element);
/**
 * A Familiar specified by name.
 *
 * @category In-game constant
 */
var $familiar = createSingleConstant(external_kolmafia_namespaceObject.Familiar);
/**
 * A list of Familiars specified by a comma-separated list of names.
 * For a list of all possible Familiars, leave the template string blank.
 *
 * @category In-game constant
 */
var $familiars = createPluralConstant(external_kolmafia_namespaceObject.Familiar);
/**
 * An Item specified by name.
 *
 * @category In-game constant
 */
var template_string_$item = createSingleConstant(external_kolmafia_namespaceObject.Item);
/**
 * A list of Items specified by a comma-separated list of names.
 * For a list of all possible Items, leave the template string blank.
 *
 * @category In-game constant
 */
var template_string_$items = createPluralConstant(external_kolmafia_namespaceObject.Item);
/**
 * A Location specified by name.
 *
 * @category In-game constant
 */
var $location = createSingleConstant(external_kolmafia_namespaceObject.Location);
/**
 * A list of Locations specified by a comma-separated list of names.
 * For a list of all possible Locations, leave the template string blank.
 *
 * @category In-game constant
 */
var $locations = createPluralConstant(external_kolmafia_namespaceObject.Location);
/**
 * A Monster specified by name.
 *
 * @category In-game constant
 */
var $monster = createSingleConstant(external_kolmafia_namespaceObject.Monster);
/**
 * A list of Monsters specified by a comma-separated list of names.
 * For a list of all possible Monsters, leave the template string blank.
 *
 * @category In-game constant
 */
var $monsters = createPluralConstant(external_kolmafia_namespaceObject.Monster);
/**
 * A Phylum specified by name.
 *
 * @category In-game constant
 */
var $phylum = createSingleConstant(external_kolmafia_namespaceObject.Phylum);
/**
 * A list of Phyla specified by a comma-separated list of names.
 * For a list of all possible Phyla, leave the template string blank.
 *
 * @category In-game constant
 */
var $phyla = createPluralConstant(external_kolmafia_namespaceObject.Phylum);
/**
 * A Servant specified by name.
 *
 * @category In-game constant
 */
var $servant = createSingleConstant(external_kolmafia_namespaceObject.Servant);
/**
 * A list of Servants specified by a comma-separated list of names.
 * For a list of all possible Servants, leave the template string blank.
 *
 * @category In-game constant
 */
var $servants = createPluralConstant(external_kolmafia_namespaceObject.Servant);
/**
 * A Skill specified by name.
 *
 * @category In-game constant
 */
var $skill = createSingleConstant(external_kolmafia_namespaceObject.Skill);
/**
 * A list of Skills specified by a comma-separated list of names.
 * For a list of all possible Skills, leave the template string blank.
 *
 * @category In-game constant
 */
var $skills = createPluralConstant(external_kolmafia_namespaceObject.Skill);
/**
 * A Slot specified by name.
 *
 * @category In-game constant
 */
var $slot = createSingleConstant(external_kolmafia_namespaceObject.Slot);
/**
 * A list of Slots specified by a comma-separated list of names.
 * For a list of all possible Slots, leave the template string blank.
 *
 * @category In-game constant
 */
var $slots = createPluralConstant(external_kolmafia_namespaceObject.Slot);
/**
 * A Stat specified by name.
 *
 * @category In-game constant
 */
var $stat = createSingleConstant(external_kolmafia_namespaceObject.Stat);
/**
 * A list of Stats specified by a comma-separated list of names.
 * For a list of all possible Stats, leave the template string blank.
 *
 * @category In-game constant
 */
var $stats = createPluralConstant(external_kolmafia_namespaceObject.Stat);
/**
 * A Thrall specified by name.
 *
 * @category In-game constant
 */
var $thrall = createSingleConstant(external_kolmafia_namespaceObject.Thrall);
/**
 * A list of Thralls specified by a comma-separated list of names.
 * For a list of all possible Thralls, leave the template string blank.
 *
 * @category In-game constant
 */
var $thralls = createPluralConstant(external_kolmafia_namespaceObject.Thrall);
/**
 * A Path specified by name.
 *
 * @category In-game constant
 */
var $path = createSingleConstant(external_kolmafia_namespaceObject.Path);
/**
 * A list of Paths specified by a comma-separated list of names.
 * For a list of all possible Paths, leave the template string blank.
 *
 * @category In-game constant
 */
var $paths = createPluralConstant(external_kolmafia_namespaceObject.Path);
// EXTERNAL MODULE: ./node_modules/core-js/features/array/flat.js
var flat = __webpack_require__(1755);
;// CONCATENATED MODULE: ./node_modules/libram/dist/lib.js
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34;
function lib_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, lib_toPropertyKey(descriptor.key), descriptor); } }
function lib_createClass(Constructor, protoProps, staticProps) { if (protoProps) lib_defineProperties(Constructor.prototype, protoProps); if (staticProps) lib_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function lib_toPropertyKey(arg) { var key = lib_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function lib_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function lib_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function lib_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = lib_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function lib_slicedToArray(arr, i) { return lib_arrayWithHoles(arr) || lib_iterableToArrayLimit(arr, i) || lib_unsupportedIterableToArray(arr, i) || lib_nonIterableRest(); }
function lib_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function lib_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return lib_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return lib_arrayLikeToArray(o, minLen); }
function lib_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function lib_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function lib_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
/** @module GeneralLibrary */






/**
 * Returns the current maximum Accordion Thief songs the player can have in their head
 *
 * @category General
 */
function getSongLimit() {
  return 3 + ((0,external_kolmafia_namespaceObject.booleanModifier)("Four Songs") ? 1 : 0) + (0,external_kolmafia_namespaceObject.numericModifier)("Additional Song");
}
/**
 * Return whether the Skill or Effect provided is an Accordion Thief song
 *
 * @category General
 * @param skillOrEffect The Skill or Effect
 */
function isSong(skillOrEffect) {
  if (skillOrEffect instanceof external_kolmafia_namespaceObject.Effect && skillOrEffect.attributes.includes("song")) {
    return true;
  } else {
    var skill = skillOrEffect instanceof external_kolmafia_namespaceObject.Effect ? (0,external_kolmafia_namespaceObject.toSkill)(skillOrEffect) : skillOrEffect;
    return skill.class === $class(_templateObject || (_templateObject = _taggedTemplateLiteral(["Accordion Thief"]))) && skill.buff;
  }
}
/**
 * List all active Effects
 *
 * @category General
 */
function getActiveEffects() {
  return Object.keys((0,external_kolmafia_namespaceObject.myEffects)()).map(e => external_kolmafia_namespaceObject.Effect.get(e));
}
/**
 * List currently active Accordion Thief songs
 *
 * @category General
 */
function lib_getActiveSongs() {
  return getActiveEffects().filter(isSong);
}
/**
 * List number of active Accordion Thief songs
 *
 * @category General
 */
function getSongCount() {
  return lib_getActiveSongs().length;
}
/**
 * Returns true if the player can remember another Accordion Thief song
 *
 * @category General
 * @param quantity Number of songs to test the space for
 */
function lib_canRememberSong() {
  var quantity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  return getSongLimit() - getSongCount() >= quantity;
}
/**
 * Return the locations in which the given monster can be encountered naturally
 *
 * @category General
 * @param monster Monster to find
 */
function getMonsterLocations(monster) {
  return Location.all().filter(location => monster.name in appearanceRates(location));
}
/**
 * Return the player's remaining liver space
 *
 * @category General
 */
function getRemainingLiver() {
  return (0,external_kolmafia_namespaceObject.inebrietyLimit)() - (0,external_kolmafia_namespaceObject.myInebriety)();
}
/**
 * Return the player's remaining stomach space
 *
 * @category General
 */
function getRemainingStomach() {
  return (0,external_kolmafia_namespaceObject.fullnessLimit)() - (0,external_kolmafia_namespaceObject.myFullness)();
}
/**
 * Return the player's remaining spleen space
 *
 * @category General
 */
function getRemainingSpleen() {
  return spleenLimit() - mySpleenUse();
}
/**
 * Return whether the player "has" any entity which one could feasibly "have".
 *
 * @category General
 * @param thing Thing to check
 * @param quantity Number to check that the player has
 */
function lib_have(thing) {
  var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  if (thing instanceof external_kolmafia_namespaceObject.Effect) {
    return (0,external_kolmafia_namespaceObject.haveEffect)(thing) >= quantity;
  }
  if (thing instanceof external_kolmafia_namespaceObject.Familiar) {
    return (0,external_kolmafia_namespaceObject.haveFamiliar)(thing);
  }
  if (thing instanceof external_kolmafia_namespaceObject.Item) {
    return (0,external_kolmafia_namespaceObject.availableAmount)(thing) >= quantity;
  }
  if (thing instanceof external_kolmafia_namespaceObject.Servant) {
    return (0,external_kolmafia_namespaceObject.haveServant)(thing);
  }
  if (thing instanceof external_kolmafia_namespaceObject.Skill) {
    return (0,external_kolmafia_namespaceObject.haveSkill)(thing);
  }
  if (thing instanceof external_kolmafia_namespaceObject.Thrall) {
    var thrall = (0,external_kolmafia_namespaceObject.myThrall)();
    return thrall.id === thing.id && thrall.level >= quantity;
  }
  return false;
}
/**
 * Return whether an item is in the player's campground
 *
 * @category General
 * @param item The item mafia uses to represent the campground item
 */
function haveInCampground(item) {
  return Object.keys((0,external_kolmafia_namespaceObject.getCampground)()).map(i => external_kolmafia_namespaceObject.Item.get(i)).includes(item);
}
var Wanderer;
(function (Wanderer) {
  Wanderer["Digitize"] = "Digitize Monster";
  Wanderer["Enamorang"] = "Enamorang Monster";
  Wanderer["Familiar"] = "Familiar";
  Wanderer["Holiday"] = "Holiday Monster";
  Wanderer["Kramco"] = "Kramco";
  Wanderer["Nemesis"] = "Nemesis Assassin";
  Wanderer["Portscan"] = "portscan.edu";
  Wanderer["Romantic"] = "Romantic Monster";
  Wanderer["Vote"] = "Vote Monster";
})(Wanderer || (Wanderer = {}));
var deterministicWanderers = [Wanderer.Digitize, Wanderer.Portscan];
/**
 * Return whether the player has the queried counter
 *
 * @category General
 */
function haveCounter(counterName) {
  var minTurns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var maxTurns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;
  return (0,external_kolmafia_namespaceObject.getCounters)(counterName, minTurns, maxTurns) === counterName;
}
/**
 * Return whether the player has the queried wandering counter
 *
 * @category Wanderers
 */
function haveWandererCounter(wanderer) {
  if (deterministicWanderers.includes(wanderer)) {
    return haveCounter(wanderer);
  }
  var begin = wanderer + " window begin";
  var end = wanderer + " window end";
  return haveCounter(begin) || haveCounter(end);
}
/**
 * Returns whether the player will encounter a vote wanderer on the next turn,
 * providing an "I Voted!" sticker is equipped.
 *
 * @category Wanderers
 */
function isVoteWandererNow() {
  return totalTurnsPlayed() % 11 === 1 && get("lastVoteMonsterTurn") < totalTurnsPlayed();
}
/**
 * Tells us whether we can expect a given wanderer now. Behaves differently
 * for different types of wanderer.
 *
 * - For deterministic wanderers, return whether the player will encounter
 *   the queried wanderer on the next turn
 *
 * - For variable wanderers (window), return whether the player is within
 *   an encounter window for the queried wanderer
 *
 * - For variable wanderers (chance per turn), returns true unless the player
 *   has exhausted the number of wanderers possible
 *
 * @category Wanderers
 * @param wanderer Wanderer to check
 */
function isWandererNow(wanderer) {
  if (deterministicWanderers.includes(wanderer)) {
    return haveCounter(wanderer, 0, 0);
  }
  if (wanderer === Wanderer.Kramco) {
    return true;
  }
  if (wanderer === Wanderer.Vote) {
    return isVoteWandererNow();
  }
  if (wanderer === Wanderer.Familiar) {
    return get("_hipsterAdv") < 7;
  }
  var begin = wanderer + " window begin";
  var end = wanderer + " window end";
  return !haveCounter(begin, 1) && haveCounter(end);
}
/**
 * Returns the float chance the player will encounter a sausage goblin on the
 * next turn, providing the Kramco Sausage-o-Matic is equipped.
 *
 * @category Wanderers
 */
function getKramcoWandererChance() {
  var fights = property_get("_sausageFights");
  var lastFight = property_get("_lastSausageMonsterTurn");
  var totalTurns = (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
  if (fights < 1) {
    return lastFight === totalTurns && (0,external_kolmafia_namespaceObject.myTurncount)() < 1 ? 0.5 : 1.0;
  }
  var turnsSinceLastFight = totalTurns - lastFight;
  return Math.min(1.0, (turnsSinceLastFight + 1) / (5 + fights * 3 + Math.pow(Math.max(0, fights - 5), 3)));
}
/**
 * Returns the float chance the player will encounter an Artistic Goth Kid or
 * Mini-Hipster wanderer on the next turn, providing a familiar is equipped.
 *
 * NOTE: You must complete one combat with the Artistic Goth Kid before you
 * can encounter any wanderers. Consequently,ƒ the first combat with the
 * Artist Goth Kid is effectively 0% chance to encounter a wanderer.
 *
 * @category Wanderers
 */
function getFamiliarWandererChance() {
  var totalFights = get("_hipsterAdv");
  var probability = [0.5, 0.4, 0.3, 0.2];
  if (totalFights < 4) {
    return probability[totalFights];
  }
  return totalFights > 7 ? 0.0 : 0.1;
}
/**
 * Returns the float chance the player will encounter the queried wanderer
 * on the next turn.
 *
 * @category Wanderers
 * @param wanderer Wanderer to check
 */
function getWandererChance(wanderer) {
  if (deterministicWanderers.includes(wanderer)) {
    return haveCounter(wanderer, 0, 0) ? 1.0 : 0.0;
  }
  if (wanderer === Wanderer.Kramco) {
    getKramcoWandererChance();
  }
  if (wanderer === Wanderer.Vote) {
    return isVoteWandererNow() ? 1.0 : 0.0;
  }
  if (wanderer === Wanderer.Familiar) {
    getFamiliarWandererChance();
  }
  var begin = wanderer + " window begin";
  var end = wanderer + " window end";
  if (haveCounter(begin, 1, 100)) {
    return 0.0;
  }
  var counters = get("relayCounters");
  var re = new RegExp("(\\d+):" + end);
  var matches = counters.match(re);
  if (matches && matches.length === 2) {
    var window = Number.parseInt(matches[1]) - myTurncount();
    return 1.0 / window;
  }
  return 0.0;
}
/**
 * Returns true if the player's current familiar is equal to the one supplied
 *
 * @category General
 * @param familiar Familiar to check
 */
function lib_isCurrentFamiliar(familiar) {
  return myFamiliar() === familiar;
}
/**
 * Returns the fold group (if any) of which the given item is a part
 *
 * @category General
 * @param item Item that is part of the required fold group
 */
function getFoldGroup(item) {
  return Object.entries((0,external_kolmafia_namespaceObject.getRelated)(item, "fold")).sort((_ref, _ref2) => {
    var _ref3 = lib_slicedToArray(_ref, 2),
      a = _ref3[1];
    var _ref4 = lib_slicedToArray(_ref2, 2),
      b = _ref4[1];
    return a - b;
  }).map(_ref5 => {
    var _ref6 = lib_slicedToArray(_ref5, 1),
      i = _ref6[0];
    return external_kolmafia_namespaceObject.Item.get(i);
  });
}
/**
 * Returns the zap group (if any) of which the given item is a part
 *
 * @category General
 * @param item Item that is part of the required zap group
 */
function getZapGroup(item) {
  return Object.keys(getRelated(item, "zap")).map(i => Item.get(i));
}
/**
 * Get a map of banished monsters keyed by what banished them
 *
 * @category General
 */
function getBanishedMonsters() {
  var banishes = chunk(property_get("banishedMonsters").split(":"), 3);
  var result = new Map();
  var _iterator = lib_createForOfIteratorHelper(banishes),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = lib_slicedToArray(_step.value, 2),
        foe = _step$value[0],
        banisher = _step$value[1];
      if (foe === undefined || banisher === undefined) break;
      // toItem doesn"t error if the item doesn"t exist, so we have to use that.
      var banisherItem = (0,external_kolmafia_namespaceObject.toItem)(banisher);
      if (banisher.toLowerCase() === "saber force") {
        result.set($skill(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["Use the Force"]))), external_kolmafia_namespaceObject.Monster.get(foe));
      } else if (banisher.toLowerCase() === "nanorhino") {
        result.set($skill(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["Unleash Nanites"]))), external_kolmafia_namespaceObject.Monster.get(foe));
      } else if ([external_kolmafia_namespaceObject.Item.none, external_kolmafia_namespaceObject.Item.get("training scroll:  Snokebomb"), external_kolmafia_namespaceObject.Item.get("tomayohawk-style reflex hammer"), null].includes(banisherItem)) {
        if (external_kolmafia_namespaceObject.Skill.get(banisher) === $skill.none) {
          break;
        } else {
          result.set(external_kolmafia_namespaceObject.Skill.get(banisher), external_kolmafia_namespaceObject.Monster.get(foe));
        }
      } else {
        result.set(banisherItem, external_kolmafia_namespaceObject.Monster.get(foe));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return result;
}
/**
 * Returns true if the item is usable
 *
 * This function will be an ongoing work in progress
 *
 * @param item Item to check
 */
function canUse(item) {
  var path = myPath();
  if (path !== Path.get("Nuclear Autumn")) {
    if ($items(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["Shrieking Weasel holo-record, Power-Guy 2000 holo-record, Lucky Strikes holo-record, EMD holo-record, Superdrifter holo-record, The Pigs holo-record, Drunk Uncles holo-record"]))).includes(item)) {
      return false;
    }
  }
  if (path === Path.get("G-Lover")) {
    if (!item.name.toLowerCase().includes("g")) return false;
  }
  if (path === Path.get("Bees Hate You")) {
    if (item.name.toLowerCase().includes("b")) return false;
  }
  return true;
}
/**
 * Turn KoLmafia `none`s to JavaScript `null`s
 *
 * @param thing Thing that can have a mafia "none" value
 */
function noneToNull(thing) {
  if (thing instanceof Effect) {
    return thing === Effect.none ? null : thing;
  }
  if (thing instanceof Familiar) {
    return thing === Familiar.none ? null : thing;
  }
  if (thing instanceof Item) {
    return thing === Item.none ? null : thing;
  }
  return thing;
}
/**
 * Return the average value from the sort of range that KoLmafia encodes as a string
 *
 * @param range KoLmafia-style range string
 */
function getAverage(range) {
  var _range$match;
  if (range.indexOf("-") < 0) return Number(range);
  var _ref7 = (_range$match = range.match(/(-?[0-9]+)-(-?[0-9]+)/)) !== null && _range$match !== void 0 ? _range$match : ["0", "0", "0"],
    _ref8 = lib_slicedToArray(_ref7, 3),
    lower = _ref8[1],
    upper = _ref8[2];
  return (Number(lower) + Number(upper)) / 2;
}
/**
 * Return average adventures expected from consuming an item
 *
 * If item is not a consumable, will just return "0".
 *
 * @param item Consumable item
 */
function getAverageAdventures(item) {
  return getAverage(item.adventures);
}
/**
 * Remove an effect
 *
 * @category General
 * @param effect Effect to remove
 */
function lib_uneffect(effect) {
  return (0,external_kolmafia_namespaceObject.cliExecute)("uneffect ".concat(effect.name));
}
/**
 * Get both the name and id of a player from either their name or id
 *
 * @param idOrName Id or name of player
 * @returns Object containing id and name of player
 */
function getPlayerFromIdOrName(idOrName) {
  var id = typeof idOrName === "number" ? idOrName : parseInt(getPlayerId(idOrName));
  return {
    name: getPlayerName(id),
    id: id
  };
}
/**
 * Return the step as a number for a given quest property.
 *
 * @param questName Name of quest property to check.
 */
function questStep(questName) {
  var stringStep = property_get(questName);
  if (stringStep === "unstarted") return -1;else if (stringStep === "started") return 0;else if (stringStep === "finished" || stringStep === "") return 999;else {
    if (stringStep.substring(0, 4) !== "step") {
      throw new Error("Quest state parsing error.");
    }
    return parseInt(stringStep.substring(4), 10);
  }
}
var EnsureError = /*#__PURE__*/function (_Error) {
  _inherits(EnsureError, _Error);
  var _super = _createSuper(EnsureError);
  function EnsureError(cause, reason) {
    var _this;
    lib_classCallCheck(this, EnsureError);
    _this = _super.call(this, "Failed to ensure ".concat(cause.name, "!").concat(reason ? " ".concat(reason) : ""));
    _this.name = "Ensure Error";
    return _this;
  }
  return lib_createClass(EnsureError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Tries to get an effect using the default method
 * @param ef effect to try to get
 * @param turns turns to aim for; default of 1
 *
 * @throws {EnsureError} Throws an error if the effect cannot be guaranteed
 */
function ensureEffect(ef) {
  var turns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  if ((0,external_kolmafia_namespaceObject.haveEffect)(ef) < turns) {
    if (ef.default === null) {
      throw new EnsureError(ef, "No default action");
    }
    if (!(0,external_kolmafia_namespaceObject.cliExecute)(ef.default) || (0,external_kolmafia_namespaceObject.haveEffect)(ef) === 0) {
      throw new EnsureError(ef);
    }
  }
}
var valueMap = new Map();
var MALL_VALUE_MODIFIER = 0.9;
/**
 * Returns the average value--based on mallprice and autosell--of a collection of items
 * @param items items whose value you care about
 */
function getSaleValue() {
  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }
  return items.map(item => {
    if (valueMap.has(item)) return valueMap.get(item) || 0;
    if (item.discardable) {
      valueMap.set(item, (0,external_kolmafia_namespaceObject.mallPrice)(item) > Math.max(2 * (0,external_kolmafia_namespaceObject.autosellPrice)(item), 100) ? MALL_VALUE_MODIFIER * (0,external_kolmafia_namespaceObject.mallPrice)(item) : (0,external_kolmafia_namespaceObject.autosellPrice)(item));
    } else {
      valueMap.set(item, (0,external_kolmafia_namespaceObject.mallPrice)(item) > 100 ? MALL_VALUE_MODIFIER * (0,external_kolmafia_namespaceObject.mallPrice)(item) : 0);
    }
    return valueMap.get(item) || 0;
  }).reduce((s, price) => s + price, 0) / items.length;
}
var Environment = {
  Outdoor: "outdoor",
  Indoor: "indoor",
  Underground: "underground",
  Underwater: "underwater"
};
/**
 * Returns the weight-coefficient of any leprechaunning that this familiar may find itself doing
 * Assumes the familiar is nude and thus fails for hatrack & pantsrack
 * For the Mutant Cactus Bud, returns the efficacy-multiplier instead
 * @param familiar The familiar whose leprechaun multiplier you're interested in
 */
function findLeprechaunMultiplier(familiar) {
  if (familiar === $familiar(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["Mutant Cactus Bud"])))) {
    return (0,external_kolmafia_namespaceObject.numericModifier)(familiar, "Leprechaun Effectiveness", 1, template_string_$item.none);
  }
  if (familiar === $familiar(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["Reanimated Reanimator"])))) return 0;
  var meatBonus = (0,external_kolmafia_namespaceObject.numericModifier)(familiar, "Meat Drop", 1, template_string_$item.none);
  if (meatBonus === 0) return 0;
  return Math.pow(Math.sqrt(meatBonus / 2 + 55 / 4 + 3) - Math.sqrt(55) / 2, 2);
}
/**
 * Returns the weight-coefficient of any baby gravy fairying that this familiar may find itself doing
 * Assumes the familiar is nude and thus fails for hatrack & pantsrack
 * For the Mutant Fire Ant, returns the efficacy-multiplier instead
 * @param familiar The familiar whose fairy multiplier you're interested in
 */
function findFairyMultiplier(familiar) {
  if (familiar === $familiar(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["Mutant Fire Ant"])))) {
    return (0,external_kolmafia_namespaceObject.numericModifier)(familiar, "Fairy Effectiveness", 1, template_string_$item.none);
  }
  if (familiar === $familiar(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["Reanimated Reanimator"])))) return 0;
  var itemBonus = (0,external_kolmafia_namespaceObject.numericModifier)(familiar, "Item Drop", 1, template_string_$item.none);
  if (itemBonus === 0) return 0;
  return Math.pow(Math.sqrt(itemBonus + 55 / 4 + 3) - Math.sqrt(55) / 2, 2);
}
var holidayWanderers = new Map([["El Dia De Los Muertos Borrachos", $monsters(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["Novia Cad\xE1ver, Novio Cad\xE1ver, Padre Cad\xE1ver, Persona Inocente Cad\xE1ver"])))], ["Feast of Boris", $monsters(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["Candied Yam Golem, Malevolent Tofurkey, Possessed Can of Cranberry Sauce, Stuffing Golem"])))], ["Talk Like a Pirate Day", $monsters(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["ambulatory pirate, migratory pirate, peripatetic pirate"])))]]);
function getTodaysHolidayWanderers() {
  return (0,external_kolmafia_namespaceObject.holiday)().split("/").map(holiday => {
    var _holidayWanderers$get;
    return (_holidayWanderers$get = holidayWanderers.get(holiday)) !== null && _holidayWanderers$get !== void 0 ? _holidayWanderers$get : [];
  }).flat();
}
/**
 * Determines & returns whether or not we can safely call visitUrl(), based on whether we're in a fight, multi-fight, choice, etc
 */
function canVisitUrl() {
  return !((0,external_kolmafia_namespaceObject.currentRound)() || (0,external_kolmafia_namespaceObject.inMultiFight)() || (0,external_kolmafia_namespaceObject.choiceFollowsFight)() || (0,external_kolmafia_namespaceObject.handlingChoice)());
}
/**
 * Calculate damage taken from a specific element after factoring in resistance
 * @param baseDamage
 * @param element
 * @returns damage after factoring in resistances
 */
function damageTakenByElement(baseDamage, element) {
  if (baseDamage < 0) return 1;
  var res = elementalResistance(element);
  return Math.max(1, Math.ceil(baseDamage - baseDamage * res / 100));
}
var telescopeStats = new Map([["standing around flexing their muscles and using grip exercisers", $stat(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["Muscle"])))], ["sitting around playing chess and solving complicated-looking logic puzzles", $stat(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["Mysticality"])))], ["all wearing sunglasses and dancing", $stat(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["Moxie"])))]]);
var telescopeElements = new Map([["people, all of whom appear to be on fire", $element(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["hot"])))], ["people, surrounded by a cloud of eldritch mist", $element(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["spooky"])))], ["greasy-looking people furtively skulking around", $element(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["sleaze"])))], ["people, surrounded by garbage and clouds of flies", $element(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["stench"])))], ["people, clustered around a group of igloos", $element(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["cold"])))]]);
var hedgeTrap1 = new Map([["smoldering bushes on the outskirts of a hedge maze", $element(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["hot"])))], ["creepy-looking black bushes on the outskirts of a hedge maze", $element(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["spooky"])))], ["purplish, greasy-looking hedges", $element(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["sleaze"])))], ["nasty-looking, dripping green bushes on the outskirts of a hedge maze", $element(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["stench"])))], ["frost-rimed bushes on the outskirts of a hedge maze", $element(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["cold"])))]]);
var hedgeTrap2 = new Map([["smoke rising from deeper within the maze", $element(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["hot"])))], ["a miasma of eldritch vapors rising from deeper within the maze", $element(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["spooky"])))], ["a greasy purple cloud hanging over the center of the maze", $element(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["sleaze"])))], ["a cloud of green gas hovering over the maze", $element(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["stench"])))], ["wintry mists rising from deeper within the maze", $element(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["cold"])))]]);
var hedgeTrap3 = new Map([["with lava slowly oozing out of it", $element(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["hot"])))], ["surrounded by creepy black mist", $element(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["spooky"])))], ["that occasionally vomits out a greasy ball of hair", $element(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["sleaze"])))], ["disgorging a really surprising amount of sewage", $element(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["stench"])))], ["occasionally disgorging a bunch of ice cubes", $element(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["cold"])))]]);
/**
 * @returns An object with all information the telescope gives you about the sorceress's contests and maze
 */
function telescope() {
  return {
    statContest: telescopeStats.get(get("telescope1")),
    elementContest: telescopeElements.get(get("telescope2")),
    hedge1: hedgeTrap1.get(get("telescope3")),
    hedge2: hedgeTrap2.get(get("telescope4")),
    hedge3: hedgeTrap3.get(get("telescope5"))
  };
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/since.js
function since_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, since_toPropertyKey(descriptor.key), descriptor); } }
function since_createClass(Constructor, protoProps, staticProps) { if (protoProps) since_defineProperties(Constructor.prototype, protoProps); if (staticProps) since_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function since_toPropertyKey(arg) { var key = since_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function since_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function since_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function since_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) since_setPrototypeOf(subClass, superClass); }
function since_createSuper(Derived) { var hasNativeReflectConstruct = since_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = since_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = since_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return since_possibleConstructorReturn(this, result); }; }
function since_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return since_assertThisInitialized(self); }
function since_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function since_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; since_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !since_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return since_construct(Class, arguments, since_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return since_setPrototypeOf(Wrapper, Class); }; return since_wrapNativeSuper(Class); }
function since_construct(Parent, args, Class) { if (since_isNativeReflectConstruct()) { since_construct = Reflect.construct.bind(); } else { since_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) since_setPrototypeOf(instance, Class.prototype); return instance; }; } return since_construct.apply(null, arguments); }
function since_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function since_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function since_setPrototypeOf(o, p) { since_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return since_setPrototypeOf(o, p); }
function since_getPrototypeOf(o) { since_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return since_getPrototypeOf(o); }
/**
 * Provides functions for checking KoLmafia's version and revision.
 * @packageDocumentation
 */

/**
 * Represents an exception thrown when the current KoLmafia version does not
 * match an expected condition.
 */
var KolmafiaVersionError = /*#__PURE__*/function (_Error) {
  since_inherits(KolmafiaVersionError, _Error);
  var _super = since_createSuper(KolmafiaVersionError);
  function KolmafiaVersionError(message) {
    var _this;
    since_classCallCheck(this, KolmafiaVersionError);
    _this = _super.call(this, message);
    // Explicitly set the prototype, so that 'instanceof' still works in Node.js
    // even when the class is transpiled down to ES5
    // See: https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
    // Note that this code isn't needed for Rhino.
    Object.setPrototypeOf(since_assertThisInitialized(_this), KolmafiaVersionError.prototype);
    return _this;
  }
  return since_createClass(KolmafiaVersionError);
}( /*#__PURE__*/since_wrapNativeSuper(Error));
// Manually set class name, so that the stack trace shows proper name in Rhino
KolmafiaVersionError.prototype.name = "KolmafiaVersionError";
/**
 * Returns the currently executing script name, suitable for embedding in an
 * error message.
 * @returns Path of the main script wrapped in single-quotes, or `"This script"`
 *    if the path cannot be determined
 */
function getScriptName() {
  var _require$main;
  // In Rhino, the current script name is available in require.main.id
  var scriptName = (_require$main = __webpack_require__.c[__webpack_require__.s]) === null || _require$main === void 0 ? void 0 : _require$main.id;
  return scriptName ? "'".concat(scriptName, "'") : "This script";
}
/**
 * If KoLmafia's revision number is less than `revision`, throws an exception.
 * Otherwise, does nothing.
 *
 * This behaves like the `since rXXX;` statement in ASH.
 * @param revision Revision number
 * @throws {KolmafiaVersionError}
 *    If KoLmafia's revision number is less than `revision`.
 * @throws {TypeError} If `revision` is not an integer
 *
 * @example
 * ```ts
 * // Throws if KoLmafia revision is less than r20500
 * sinceKolmafiaRevision(20500);
 * ```
 */
function sinceKolmafiaRevision(revision) {
  if (!Number.isInteger(revision)) {
    throw new TypeError("Invalid revision number ".concat(revision, " (must be an integer)"));
  }
  // Based on net.sourceforge.kolmafia.textui.Parser.sinceException()
  var currentRevision = (0,external_kolmafia_namespaceObject.getRevision)();
  if (currentRevision > 0 && currentRevision < revision) {
    throw new KolmafiaVersionError("".concat(getScriptName(), " requires revision r").concat(revision, " of kolmafia or higher (current: ").concat((0,external_kolmafia_namespaceObject.getRevision)(), "). Up-to-date builds can be found at https://ci.kolmafia.us/."));
  }
}
/**
 * If KoLmafia's version is less than `majorVersion.minorVersion`, throws an
 * exception.
 * Otherwise, does nothing.
 *
 * This behaves like the `since X.Y;` statement in ASH.
 * @param majorVersion Major version number
 * @param minorVersion Minor version number
 * @deprecated Point versions are no longer released by KoLmafia
 * @throws {KolmafiaVersionError}
 *    If KoLmafia's major version is less than `majorVersion`, or if the major
 *    versions are equal but the minor version is less than `minorVersion`
 * @throws {TypeError}
 *    If either `majorVersion` or `minorVersion` are not integers
 *
 * @example
 * ```ts
 * // Throws if KoLmafia version is less than 20.7
 * sinceKolmafiaVersion(20, 7);
 * ```
 */
function sinceKolmafiaVersion(majorVersion, minorVersion) {
  if (getRevision() >= 25720) {
    return;
  }
  if (!Number.isInteger(majorVersion)) {
    throw new TypeError("Invalid major version number ".concat(majorVersion, " (must be an integer)"));
  }
  if (!Number.isInteger(minorVersion)) {
    throw new TypeError("Invalid minor version number ".concat(minorVersion, " (must be an integer)"));
  }
  if (majorVersion > 21 || majorVersion === 20 && minorVersion > 9) {
    throw new Error("There were no versions released after 21.09. This command will always fail");
  }
  var versionStr = getVersion();
  var versionStrMatch = /v(\d+)\.(\d+)/.exec(versionStr);
  if (!versionStrMatch) {
    // This is not something the user should handle
    throw new Error("Unexpected KoLmafia version string: \"".concat(versionStr, "\". You may need to update the script."));
  }
  var currentMajorVersion = Number(versionStrMatch[1]);
  var currentMinorVersion = Number(versionStrMatch[2]);
  // Based on net.sourceforge.kolmafia.textui.Parser.sinceException()
  if (currentMajorVersion < majorVersion || currentMajorVersion === majorVersion && currentMinorVersion < minorVersion) {
    throw new KolmafiaVersionError("".concat(getScriptName(), " requires version ").concat(majorVersion, ".").concat(minorVersion, " of kolmafia or higher (current: ").concat(currentMajorVersion, ".").concat(currentMinorVersion, "). Up-to-date builds can be found at https://ci.kolmafia.us/."));
  }
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/logger.js
function logger_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function logger_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, logger_toPropertyKey(descriptor.key), descriptor); } }
function logger_createClass(Constructor, protoProps, staticProps) { if (protoProps) logger_defineProperties(Constructor.prototype, protoProps); if (staticProps) logger_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function logger_defineProperty(obj, key, value) { key = logger_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function logger_toPropertyKey(arg) { var key = logger_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function logger_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var defaultHandlers = {
  info: message => {
    (0,external_kolmafia_namespaceObject.printHtml)("<b>[Libram]</b> ".concat(message));
    (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(message));
  },
  warning: message => {
    (0,external_kolmafia_namespaceObject.printHtml)("<span style=\"background: orange; color: white;\"><b>[Libram]</b> ".concat(message, "</span>"));
    (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(message));
  },
  error: _error => {
    (0,external_kolmafia_namespaceObject.printHtml)("<span style=\"background: red; color: white;\"><b>[Libram]</b> ".concat(_error.toString(), "</span>"));
    (0,external_kolmafia_namespaceObject.logprint)("[Libram] ".concat(_error.toString()));
  }
};
var Logger = /*#__PURE__*/function () {
  function Logger() {
    logger_classCallCheck(this, Logger);
    logger_defineProperty(this, "handlers", defaultHandlers);
  }
  logger_createClass(Logger, [{
    key: "setHandler",
    value:
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function setHandler(level, callback) {
      this.handlers[level] = callback;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
  }, {
    key: "log",
    value: function log(level, message) {
      this.handlers[level](message);
    }
  }, {
    key: "info",
    value: function info(message) {
      this.log("info", message);
    }
  }, {
    key: "warning",
    value: function warning(message) {
      this.log("warning", message);
    }
  }, {
    key: "error",
    value: function error(message) {
      this.log("error", message);
    }
  }]);
  return Logger;
}();
/* harmony default export */ const logger = (new Logger());
;// CONCATENATED MODULE: ./node_modules/libram/dist/Clan.js
function Clan_toConsumableArray(arr) { return Clan_arrayWithoutHoles(arr) || Clan_iterableToArray(arr) || Clan_unsupportedIterableToArray(arr) || Clan_nonIterableSpread(); }
function Clan_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Clan_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Clan_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Clan_arrayLikeToArray(arr); }
function Clan_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Clan_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function Clan_slicedToArray(arr, i) { return Clan_arrayWithHoles(arr) || Clan_iterableToArrayLimit(arr, i) || Clan_unsupportedIterableToArray(arr, i) || Clan_nonIterableRest(); }
function Clan_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Clan_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Clan_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Clan_arrayLikeToArray(o, minLen); }
function Clan_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Clan_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function Clan_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Clan_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Clan_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Clan_toPropertyKey(descriptor.key), descriptor); } }
function Clan_createClass(Constructor, protoProps, staticProps) { if (protoProps) Clan_defineProperties(Constructor.prototype, protoProps); if (staticProps) Clan_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Clan_defineProperty(obj, key, value) { key = Clan_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Clan_toPropertyKey(arg) { var key = Clan_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function Clan_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, void 0, groups); }; var _super = RegExp.prototype, _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); return _groups.set(_this, groups || _groups.get(re)), Clan_setPrototypeOf(_this, BabelRegExp.prototype); } function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { var i = g[name]; if ("number" == typeof i) groups[name] = result[i];else { for (var k = 0; void 0 === result[i[k]] && k + 1 < i.length;) k++; groups[name] = result[i[k]]; } return groups; }, Object.create(null)); } return Clan_inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) { result.groups = buildGroups(result, this); var indices = result.indices; indices && (indices.groups = buildGroups(indices, this)); } return result; }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if ("string" == typeof substitution) { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { var group = groups[name]; return "$" + (Array.isArray(group) ? group.join("$") : group); })); } if ("function" == typeof substitution) { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args); }); } return _super[Symbol.replace].call(this, str, substitution); }, _wrapRegExp.apply(this, arguments); }
function Clan_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Clan_setPrototypeOf(subClass, superClass); }
function Clan_setPrototypeOf(o, p) { Clan_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Clan_setPrototypeOf(o, p); }




var clanIdCache = {};
var toPlayerId = player => typeof player === "string" ? (0,external_kolmafia_namespaceObject.getPlayerId)(player) : player;
var LOG_FAX_PATTERN = /*#__PURE__*/_wrapRegExp(/(\d{2}\/\d{2}\/\d{2}, \d{2}:\d{2}(?:AM|PM): )<a [^>]+>([^<]+)<\/a>(?: faxed in a (.*?))<br>/, {
  monster: 3
});
var WHITELIST_DEGREE_PATTERN = /*#__PURE__*/_wrapRegExp(/(.*?) \(\xB0(\d+)\)/, {
  name: 1,
  degree: 2
});
var Clan = /*#__PURE__*/function () {
  function Clan(id, name) {
    Clan_classCallCheck(this, Clan);
    Clan_defineProperty(this, "id", void 0);
    Clan_defineProperty(this, "name", void 0);
    this.id = id;
    this.name = name;
  }
  Clan_createClass(Clan, [{
    key: "_check",
    value: function _check() {
      if (this.id !== (0,external_kolmafia_namespaceObject.getClanId)()) {
        throw new Error("You are no longer a member of this clan");
      }
    }
    /**
     * Join clan
     */
  }, {
    key: "join",
    value: function join() {
      return Clan.join(this.id);
    }
  }, {
    key: "check",
    value: function check() {
      return (0,external_kolmafia_namespaceObject.visitUrl)("clan_hall.php").includes("<b>".concat(this.name, "</b>"));
    }
    /**
     * Return the monster that is currently in the current clan's fax machine if any
     */
  }, {
    key: "getCurrentFax",
    value: function getCurrentFax() {
      this._check();
      var logs = (0,external_kolmafia_namespaceObject.visitUrl)("clan_log.php");
      var lastFax = logs.match(LOG_FAX_PATTERN);
      if (!lastFax) return null;
      var _lastFax = Clan_slicedToArray(lastFax, 4),
        monsterName = _lastFax[3];
      if (!monsterName) return null;
      return external_kolmafia_namespaceObject.Monster.get(monsterName);
    }
    /**
     * List available ranks (name, degree and id) from the current clan
     */
  }, {
    key: "getRanks",
    value: function getRanks() {
      this._check();
      var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_whitelist.php");
      return (0,external_kolmafia_namespaceObject.xpath)(page, '//select[@name="level"]//option').map(option => {
        var validHtml = "<select>".concat(option, "</select>");
        var match = (0,external_kolmafia_namespaceObject.xpath)(validHtml, "//text()")[0].match(WHITELIST_DEGREE_PATTERN);
        var id = (0,external_kolmafia_namespaceObject.xpath)(validHtml, "//@value")[0];
        if (!match || !id) return null;
        var _match = Clan_slicedToArray(match, 3),
          name = _match[1],
          degree = _match[2];
        return {
          name: name,
          degree: Number.parseInt(degree),
          id: Number.parseInt(id)
        };
      }).filter(notNull);
    }
    /**
     * Add a player to the current clan's whitelist.
     * If the player is already in the whitelist this will change their rank or title.
     * @param player Player id or name
     * @param rankName Rank to give the player. If not provided they will be given the lowest rank
     * @param title Title to give the player. If not provided, will be blank
     */
  }, {
    key: "addPlayerToWhitelist",
    value: function addPlayerToWhitelist(player, rankName) {
      var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      this._check();
      var playerId = toPlayerId(player);
      var ranks = this.getRanks();
      var rank = rankName ? ranks.find(r => r.name === rankName) : ranks.sort((a, b) => a.degree - b.degree)[0];
      if (!rank) return false;
      var result = (0,external_kolmafia_namespaceObject.visitUrl)("clan_whitelist.php?action=add&pwd&addwho=".concat(playerId, "&level=").concat(rank.id, "&title=").concat(title));
      return result.includes("added to whitelist.") || result.includes("That player is already on the whitelist");
    }
    /**
     * Remove a player from the current clan's whitelist
     * @param player Player id or name
     */
  }, {
    key: "removePlayerFromWhitelist",
    value: function removePlayerFromWhitelist(player) {
      this._check();
      var playerId = toPlayerId(player);
      var result = (0,external_kolmafia_namespaceObject.visitUrl)("clan_whitelist.php?action=updatewl&pwd&who=".concat(playerId, "&remove=Remove"));
      return result.includes("Whitelist updated.");
    }
    /**
     * Return the amount of meat in the current clan's coffer.
     */
  }, {
    key: "getMeatInCoffer",
    value: function getMeatInCoffer() {
      this._check();
      var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_stash.php");
      var _ref = page.match(/Your <b>Clan Coffer<\/b> contains ([\d,]+) Meat./) || ["0", "0"],
        _ref2 = Clan_slicedToArray(_ref, 2),
        meat = _ref2[1];
      return parseNumber(meat);
    }
    /**
     * Add the given amount of meat to the current clan's coffer.
     * @param amount Amount of meat to put in coffer
     */
  }, {
    key: "putMeatInCoffer",
    value: function putMeatInCoffer(amount) {
      this._check();
      var result = (0,external_kolmafia_namespaceObject.visitUrl)("clan_stash.php?pwd&action=contribute&howmuch=".concat(amount));
      return result.includes("You contributed");
    }
  }, {
    key: "take",
    value: function take(items) {
      this._check();
      var map = arrayToCountedMap(items);
      map.forEach((quantity, item) => {
        var needed = Math.max(0, quantity - (0,external_kolmafia_namespaceObject.availableAmount)(item));
        if (needed === 0) {
          return map.set(item, 0);
        }
        var foldGroup = getFoldGroup(item);
        var _iterator = Clan_createForOfIteratorHelper(foldGroup),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var foldable = _step.value;
            var quantityToFold = Math.min(needed, (0,external_kolmafia_namespaceObject.availableAmount)(foldable));
            for (var _i3 = 0; _i3 < quantityToFold; _i3++) {
              (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(item.name));
              needed--;
            }
            return map.set(item, needed);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        (0,external_kolmafia_namespaceObject.refreshStash)();
        for (var _i2 = 0, _arr2 = [item].concat(Clan_toConsumableArray(foldGroup)); _i2 < _arr2.length; _i2++) {
          var matchingItem = _arr2[_i2];
          var quantityToTake = Math.min(needed, (0,external_kolmafia_namespaceObject.stashAmount)(matchingItem));
          if (quantityToTake === 0) continue;
          // If we can't take from the stash, there's no sense in iterating through the whole fold group
          if (!(0,external_kolmafia_namespaceObject.takeStash)(quantityToTake, matchingItem)) return;
          if (matchingItem === item) {
            needed -= quantityToTake;
          } else {
            for (var i = 0; i < quantityToTake; i++) {
              (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(matchingItem.name));
              needed--;
            }
          }
        }
      });
      return Array.isArray(items) ? countedMapToArray(map) : map;
    }
  }, {
    key: "put",
    value: function put(items) {
      this._check();
      var map = arrayToCountedMap(items);
      if (!this.check()) throw new Error("Wanted to return ".concat(countedMapToString(map), " to ").concat(this.name, " but KoLmafia's clan data is out of sync"));
      map.forEach((quantity, item) => {
        (0,external_kolmafia_namespaceObject.retrieveItem)(quantity, item);
        var returned = Math.min(quantity, (0,external_kolmafia_namespaceObject.availableAmount)(item));
        (0,external_kolmafia_namespaceObject.putStash)(returned, item);
        map.set(item, quantity - returned);
      });
      return Array.isArray(items) ? countedMapToArray(map) : map;
    }
  }, {
    key: "withStash",
    value: function withStash(items, callback // eslint-disable-line @typescript-eslint/no-explicit-any
    ) {
      this._check();
      var map = arrayToCountedMap(items);
      return Clan._withStash(() => this.take(map), borrowed => this.put(borrowed), callback);
    }
  }], [{
    key: "_join",
    value: function _join(id) {
      var result = (0,external_kolmafia_namespaceObject.visitUrl)("showclan.php?recruiter=1&whichclan=".concat(id, "&pwd&whichclan=").concat(id, "&action=joinclan&apply=Apply+to+this+Clan&confirm=on"));
      if (!result.includes("clanhalltop.gif")) {
        throw new Error("Could not join clan");
      }
      return Clan.get();
    }
  }, {
    key: "_withStash",
    value: function _withStash(borrowFn,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    returnFn,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callback) {
      var borrowed = borrowFn();
      var map = arrayToCountedMap(borrowed);
      try {
        return callback(borrowed);
      } finally {
        if (map.size > 0) {
          var returned = arrayToCountedMap(returnFn(borrowed));
          map.forEach((quantity, item) => {
            var remaining = quantity - (returned.get(item) || 0);
            if (remaining > 0) {
              map.set(item, remaining);
            } else {
              map.delete(item);
            }
          });
          if (map.size > 0) {
            logger.error("Failed to return <b>".concat(countedMapToString(map), "</b> to <b>").concat(this.name, "</b> stash"));
          }
        }
      }
    }
    /**
     * Join a clan and return its instance
     * @param clanIdOrName Clan id or name
     */
  }, {
    key: "join",
    value: function join(clanIdOrName) {
      var clanId;
      if (typeof clanIdOrName === "string") {
        var clanName = clanIdOrName.toLowerCase();
        if (clanName === (0,external_kolmafia_namespaceObject.getClanName)().toLowerCase()) {
          return Clan.get();
        }
        if (!(clanName in clanIdCache)) {
          var clan = Clan.getWhitelisted().find(c => c.name.toLowerCase() === clanName);
          if (!clan) {
            throw new Error("Player is not whitelisted to clan");
          }
          clanIdCache[clanName] = clan.id;
        }
        clanId = clanIdCache[clanName];
      } else {
        clanId = clanIdOrName;
        if (clanId === (0,external_kolmafia_namespaceObject.getClanId)()) {
          return Clan.get();
        }
      }
      return Clan._join(clanId);
    }
    /**
     * Execute callback as a member of a clan
     * and then restore prior membership
     * @param clanIdOrName Clan id or name
     */
  }, {
    key: "with",
    value: function _with(clanIdOrName, callback) {
      var startingClan = Clan.get();
      var clan = Clan.join(clanIdOrName);
      try {
        return callback(clan);
      } finally {
        startingClan.join();
      }
    }
  }, {
    key: "withStash",
    value: function withStash(clanIdOrName, items,
    // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    callback // eslint-disable-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    ) {
      return Clan._withStash(() => Clan.with(clanIdOrName, clan => clan.take(items)), borrowed => Clan.with(clanIdOrName, clan => clan.put(borrowed)), callback);
    }
    /**
     * Return player's current Clan
     */
  }, {
    key: "get",
    value: function get() {
      return new Clan((0,external_kolmafia_namespaceObject.getClanId)(), (0,external_kolmafia_namespaceObject.getClanName)());
    }
    /**
     * Get list of clans to which the player is whitelisted
     */
  }, {
    key: "getWhitelisted",
    value: function getWhitelisted() {
      var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_signup.php");
      return (0,external_kolmafia_namespaceObject.xpath)(page, '//select[@name="whichclan"]//option').map(option => {
        var validHtml = "<select>".concat(option, "</select>");
        var id = Number.parseInt((0,external_kolmafia_namespaceObject.xpath)(validHtml, "//@value")[0]);
        var name = (0,external_kolmafia_namespaceObject.xpath)(validHtml, "//text()")[0];
        return new Clan(id, name);
      });
    }
  }]);
  return Clan;
}();
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/JuneCleaver.js


var cleaver = (0,external_kolmafia_namespaceObject.toItem)("June cleaver");
function JuneCleaver_have() {
  return (0,external_kolmafia_namespaceObject.availableAmount)(cleaver) > 0;
}
/**
 * @returns The number of cleaver-combats it takes to get a particular encounter number--this is agnostic of your current fights.
 */
function getInterval() {
  var _encounters;
  var encounters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : property_get("_juneCleaverEncounters");
  return (_encounters = [1, 6, 10, 12, 15, 20][encounters]) !== null && _encounters !== void 0 ? _encounters : 30;
}
/**
 * @returns The number of cleaver-combats it would take to get a particular encounter after skipping.
 */
function getSkippedInterval() {
  var _encounters2;
  var encounters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : get("_juneCleaverEncounters");
  return (_encounters2 = [1, 2, 3, 3, 4, 5][encounters]) !== null && _encounters2 !== void 0 ? _encounters2 : 8;
}
/**
 * @returns The bonus damage your cleaver currently gives for a given element.
 */
function damage(element) {
  return get("_juneCleaver".concat(element));
}
/**
 * @returns The number of additional times you can select option 4 in a cleaver choice today.
 */
function skipsRemaining() {
  return 5 - property_get("_juneCleaverSkips");
}
var choices = [1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475];
/**
 * @returns An array consisting of the cleaver choice adventures currently in the queue.
 */
function queue() {
  return property_get("juneCleaverQueue").split(",").filter(x => x.trim().length > 0).map(x => parseInt(x));
}
/**
 * @returns An array consisting of the cleaver choice adventures not currently in the queue.
 */
function choicesAvailable() {
  var currentQueue = queue();
  return choices.filter(choice => !currentQueue.includes(choice));
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/maximize.js
var maximize_templateObject, maximize_templateObject2, maximize_templateObject3, maximize_templateObject4, maximize_templateObject5, maximize_templateObject6, maximize_templateObject7, maximize_templateObject8, maximize_templateObject9, maximize_templateObject10, maximize_templateObject11, maximize_templateObject12, maximize_templateObject13, maximize_templateObject14, maximize_templateObject15, maximize_templateObject16, maximize_templateObject17, maximize_templateObject18, maximize_templateObject19, maximize_templateObject20, maximize_templateObject21, maximize_templateObject22, maximize_templateObject23, maximize_templateObject24, maximize_templateObject25, maximize_templateObject26, maximize_templateObject27, maximize_templateObject28, maximize_templateObject29, maximize_templateObject30, maximize_templateObject31, maximize_templateObject32, maximize_templateObject33, maximize_templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47, _templateObject48;
function maximize_slicedToArray(arr, i) { return maximize_arrayWithHoles(arr) || maximize_iterableToArrayLimit(arr, i) || maximize_unsupportedIterableToArray(arr, i) || maximize_nonIterableRest(); }
function maximize_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function maximize_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function maximize_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
function maximize_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, maximize_toPropertyKey(descriptor.key), descriptor); } }
function maximize_createClass(Constructor, protoProps, staticProps) { if (protoProps) maximize_defineProperties(Constructor.prototype, protoProps); if (staticProps) maximize_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function maximize_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function maximize_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = maximize_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function maximize_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function maximize_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function maximize_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? maximize_ownKeys(Object(source), !0).forEach(function (key) { maximize_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : maximize_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function maximize_defineProperty(obj, key, value) { key = maximize_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function maximize_toPropertyKey(arg) { var key = maximize_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function maximize_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function maximize_toConsumableArray(arr) { return maximize_arrayWithoutHoles(arr) || maximize_iterableToArray(arr) || maximize_unsupportedIterableToArray(arr) || maximize_nonIterableSpread(); }
function maximize_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function maximize_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return maximize_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return maximize_arrayLikeToArray(o, minLen); }
function maximize_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function maximize_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return maximize_arrayLikeToArray(arr); }
function maximize_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }




/**
 * Merges a Partial<MaximizeOptions> onto a MaximizeOptions. We merge via overriding for all boolean properties and for onlySlot, and concat all other array properties.
 * @param defaultOptions MaximizeOptions to use as a "base."
 * @param addendums Options to attempt to merge onto defaultOptions.
 */
function mergeMaximizeOptions(defaultOptions, addendums) {
  var _addendums$updateOnFa, _addendums$updateOnCa, _addendums$useOutfitC, _addendums$forceEquip, _addendums$preventEqu, _addendums$bonusEquip, _addendums$onlySlot, _addendums$preventSlo, _addendums$forceUpdat, _addendums$modes;
  return {
    updateOnFamiliarChange: (_addendums$updateOnFa = addendums.updateOnFamiliarChange) !== null && _addendums$updateOnFa !== void 0 ? _addendums$updateOnFa : defaultOptions.updateOnFamiliarChange,
    updateOnCanEquipChanged: (_addendums$updateOnCa = addendums.updateOnCanEquipChanged) !== null && _addendums$updateOnCa !== void 0 ? _addendums$updateOnCa : defaultOptions.updateOnCanEquipChanged,
    useOutfitCaching: (_addendums$useOutfitC = addendums.useOutfitCaching) !== null && _addendums$useOutfitC !== void 0 ? _addendums$useOutfitC : defaultOptions.useOutfitCaching,
    forceEquip: [].concat(maximize_toConsumableArray(defaultOptions.forceEquip), maximize_toConsumableArray((_addendums$forceEquip = addendums.forceEquip) !== null && _addendums$forceEquip !== void 0 ? _addendums$forceEquip : [])),
    preventEquip: [].concat(maximize_toConsumableArray(defaultOptions.preventEquip), maximize_toConsumableArray((_addendums$preventEqu = addendums.preventEquip) !== null && _addendums$preventEqu !== void 0 ? _addendums$preventEqu : [])).filter(item => {
      var _addendums$forceEquip2;
      return !defaultOptions.forceEquip.includes(item) && !((_addendums$forceEquip2 = addendums.forceEquip) !== null && _addendums$forceEquip2 !== void 0 && _addendums$forceEquip2.includes(item));
    }),
    bonusEquip: new Map([].concat(maximize_toConsumableArray(defaultOptions.bonusEquip), maximize_toConsumableArray((_addendums$bonusEquip = addendums.bonusEquip) !== null && _addendums$bonusEquip !== void 0 ? _addendums$bonusEquip : []))),
    onlySlot: (_addendums$onlySlot = addendums.onlySlot) !== null && _addendums$onlySlot !== void 0 ? _addendums$onlySlot : defaultOptions.onlySlot,
    preventSlot: [].concat(maximize_toConsumableArray(defaultOptions.preventSlot), maximize_toConsumableArray((_addendums$preventSlo = addendums.preventSlot) !== null && _addendums$preventSlo !== void 0 ? _addendums$preventSlo : [])),
    forceUpdate: (_addendums$forceUpdat = addendums.forceUpdate) !== null && _addendums$forceUpdat !== void 0 ? _addendums$forceUpdat : defaultOptions.forceUpdate,
    modes: maximize_objectSpread(maximize_objectSpread({}, defaultOptions.modes), (_addendums$modes = addendums.modes) !== null && _addendums$modes !== void 0 ? _addendums$modes : {})
  };
}
var defaultMaximizeOptions = {
  updateOnFamiliarChange: true,
  updateOnCanEquipChanged: true,
  useOutfitCaching: true,
  forceEquip: [],
  preventEquip: [],
  bonusEquip: new Map(),
  onlySlot: [],
  preventSlot: [],
  forceUpdate: false,
  modes: {}
};
/**
 *
 * @param options Default options for each maximizer run.
 * @param options.updateOnFamiliarChange Re-run the maximizer if familiar has changed. Default true.
 * @param options.updateOnCanEquipChanged Re-run the maximizer if stats have changed what can be equipped. Default true.
 * @param options.forceEquip Equipment to force-equip ("equip X").
 * @param options.preventEquip Equipment to prevent equipping ("-equip X").
 * @param options.bonusEquip Equipment to apply a bonus to ("200 bonus X").
 */
function setDefaultMaximizeOptions(options) {
  Object.assign(defaultMaximizeOptions, options);
}
var modeableCommands = ["backupcamera", "umbrella", "snowsuit", "edpiece", "retrocape", "parka"];
var modeableItems = {
  backupcamera: template_string_$item(maximize_templateObject || (maximize_templateObject = maximize_taggedTemplateLiteral(["backup camera"]))),
  umbrella: template_string_$item(maximize_templateObject2 || (maximize_templateObject2 = maximize_taggedTemplateLiteral(["unbreakable umbrella"]))),
  snowsuit: template_string_$item(maximize_templateObject3 || (maximize_templateObject3 = maximize_taggedTemplateLiteral(["Snow Suit"]))),
  edpiece: template_string_$item(maximize_templateObject4 || (maximize_templateObject4 = maximize_taggedTemplateLiteral(["The Crown of Ed the Undying"]))),
  retrocape: template_string_$item(maximize_templateObject5 || (maximize_templateObject5 = maximize_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"]))),
  parka: template_string_$item(maximize_templateObject6 || (maximize_templateObject6 = maximize_taggedTemplateLiteral(["Jurassic Parka"])))
};
var modeableState = {
  backupcamera: () => (0,external_kolmafia_namespaceObject.getProperty)("backupCameraMode"),
  umbrella: () => (0,external_kolmafia_namespaceObject.getProperty)("umbrellaState"),
  snowsuit: () => (0,external_kolmafia_namespaceObject.getProperty)("snowsuit"),
  edpiece: () => (0,external_kolmafia_namespaceObject.getProperty)("edPiece"),
  retrocape: () => (0,external_kolmafia_namespaceObject.getProperty)("retroCapeSuperhero") + " " + (0,external_kolmafia_namespaceObject.getProperty)("retroCapeWashingInstructions"),
  parka: () => (0,external_kolmafia_namespaceObject.getProperty)("parkaMode")
};
function getCurrentModes() {
  var modes = {};
  var _iterator = maximize_createForOfIteratorHelper(modeableCommands),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      if ((0,external_kolmafia_namespaceObject.haveEquipped)(modeableItems[key])) {
        modes[key] = modeableState[key]();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return modes;
}
function applyModes(modes) {
  var _iterator2 = maximize_createForOfIteratorHelper(modeableCommands),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var command = _step2.value;
      if ((0,external_kolmafia_namespaceObject.haveEquipped)(modeableItems[command]) && modes[command] !== undefined) {
        if (modeableState[command]() !== modes[command]) {
          (0,external_kolmafia_namespaceObject.cliExecute)(command + " " + modes[command]);
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
// Subset of slots that are valid for caching.
var cachedSlots = $slots(maximize_templateObject7 || (maximize_templateObject7 = maximize_taggedTemplateLiteral(["hat, weapon, off-hand, back, shirt, pants, acc1, acc2, acc3, familiar"])));
var CacheEntry = /*#__PURE__*/maximize_createClass(function CacheEntry(equipment, rider, familiar, canEquipItemCount, modes) {
  maximize_classCallCheck(this, CacheEntry);
  maximize_defineProperty(this, "equipment", void 0);
  maximize_defineProperty(this, "rider", void 0);
  maximize_defineProperty(this, "familiar", void 0);
  maximize_defineProperty(this, "canEquipItemCount", void 0);
  maximize_defineProperty(this, "modes", void 0);
  this.equipment = equipment;
  this.rider = rider;
  this.familiar = familiar;
  this.canEquipItemCount = canEquipItemCount;
  this.modes = modes;
});
var _outfitSlots = /*#__PURE__*/new WeakMap();
var _useHistory = /*#__PURE__*/new WeakMap();
var _maxSize = /*#__PURE__*/new WeakMap();
var OutfitLRUCache = /*#__PURE__*/function () {
  // Current outfits allocated

  // Array of indices into #outfitSlots in order of use. Most recent at the front.

  function OutfitLRUCache(maxSize) {
    maximize_classCallCheck(this, OutfitLRUCache);
    _classPrivateFieldInitSpec(this, _outfitSlots, {
      writable: true,
      value: []
    });
    _classPrivateFieldInitSpec(this, _useHistory, {
      writable: true,
      value: []
    });
    _classPrivateFieldInitSpec(this, _maxSize, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _maxSize, maxSize);
  }
  maximize_createClass(OutfitLRUCache, [{
    key: "checkConsistent",
    value: function checkConsistent() {
      if (_classPrivateFieldGet(this, _useHistory).length !== _classPrivateFieldGet(this, _outfitSlots).length || !maximize_toConsumableArray(_classPrivateFieldGet(this, _useHistory)).sort().every((value, index) => value === index)) {
        throw new Error("Outfit cache consistency failed.");
      }
    }
  }, {
    key: "promote",
    value: function promote(index) {
      _classPrivateFieldSet(this, _useHistory, [index].concat(maximize_toConsumableArray(_classPrivateFieldGet(this, _useHistory).filter(i => i !== index))));
      this.checkConsistent();
    }
  }, {
    key: "get",
    value: function get(key) {
      var index = _classPrivateFieldGet(this, _outfitSlots).indexOf(key);
      if (index < 0) return undefined;
      this.promote(index);
      return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(index);
    }
  }, {
    key: "insert",
    value: function insert(key) {
      var lastUseIndex = undefined;
      if (_classPrivateFieldGet(this, _outfitSlots).length >= _classPrivateFieldGet(this, _maxSize)) {
        lastUseIndex = _classPrivateFieldGet(this, _useHistory).pop();
        if (lastUseIndex === undefined) {
          throw new Error("Outfit cache consistency failed.");
        }
        _classPrivateFieldGet(this, _useHistory).splice(0, 0, lastUseIndex);
        _classPrivateFieldGet(this, _outfitSlots)[lastUseIndex] = key;
        this.checkConsistent();
        return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(lastUseIndex);
      } else {
        var index = _classPrivateFieldGet(this, _outfitSlots).push(key) - 1;
        _classPrivateFieldGet(this, _useHistory).splice(0, 0, index);
        this.checkConsistent();
        return "".concat(OutfitLRUCache.OUTFIT_PREFIX, " ").concat(index);
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      _classPrivateFieldSet(this, _outfitSlots, []);
      _classPrivateFieldSet(this, _useHistory, []);
    }
  }]);
  return OutfitLRUCache;
}();
/**
 * Save current equipment as KoL-native outfit.
 * @param name Name of new outfit.
 */
maximize_defineProperty(OutfitLRUCache, "OUTFIT_PREFIX", "Script Outfit");
function saveOutfit(name) {
  (0,external_kolmafia_namespaceObject.cliExecute)("outfit save ".concat(name));
}
// Objective cache entries.
var cachedObjectives = {};
// Outfit cache entries. Keep 6 by default to avoid cluttering list.
var outfitCache = new OutfitLRUCache(6);
// Cache to prevent rescanning all items unnecessarily
var cachedStats = [0, 0, 0];
var cachedCanEquipItemCount = 0;
/**
 * Count the number of unique items that can be equipped.
 * @returns The count of unique items.
 */
function canEquipItemCount() {
  var stats = $stats(maximize_templateObject8 || (maximize_templateObject8 = maximize_taggedTemplateLiteral(["Muscle, Mysticality, Moxie"]))).map(stat => Math.min((0,external_kolmafia_namespaceObject.myBasestat)(stat), 300));
  if (stats.every((value, index) => value === cachedStats[index])) {
    return cachedCanEquipItemCount;
  }
  cachedStats = stats;
  cachedCanEquipItemCount = external_kolmafia_namespaceObject.Item.all().filter(item => (0,external_kolmafia_namespaceObject.canEquip)(item)).length;
  return cachedCanEquipItemCount;
}
/**
 * Checks the objective cache for a valid entry.
 * @param cacheKey The cache key to check.
 * @param updateOnFamiliarChange Ignore cache if familiar has changed.
 * @param updateOnCanEquipChanged Ignore cache if stats have changed what can be equipped.
 * @returns A valid CacheEntry or null.
 */
function checkCache(cacheKey, options) {
  var entry = cachedObjectives[cacheKey];
  if (!entry) {
    return null;
  }
  if (options.updateOnFamiliarChange && (0,external_kolmafia_namespaceObject.myFamiliar)() !== entry.familiar) {
    logger.warning("Equipment found in maximize cache but familiar is different.");
    return null;
  }
  if (options.updateOnCanEquipChanged && entry.canEquipItemCount !== canEquipItemCount()) {
    logger.warning("Equipment found in maximize cache but equippable item list is out of date.");
    return null;
  }
  return entry;
}
/**
 * Applies equipment that was found in the cache.
 * @param entry The CacheEntry to apply
 */
function applyCached(entry, options) {
  var outfitName = options.useOutfitCaching ? outfitCache.get(entry) : undefined;
  if (outfitName) {
    if (!(0,external_kolmafia_namespaceObject.isWearingOutfit)(outfitName)) {
      (0,external_kolmafia_namespaceObject.outfit)(outfitName);
    }
    var familiarEquip = entry.equipment.get($slot(maximize_templateObject9 || (maximize_templateObject9 = maximize_taggedTemplateLiteral(["familiar"]))));
    if (familiarEquip) (0,external_kolmafia_namespaceObject.equip)($slot(maximize_templateObject10 || (maximize_templateObject10 = maximize_taggedTemplateLiteral(["familiar"]))), familiarEquip);
  } else {
    var _iterator3 = maximize_createForOfIteratorHelper(entry.equipment),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = maximize_slicedToArray(_step3.value, 2),
          slot = _step3$value[0],
          item = _step3$value[1];
        if ((0,external_kolmafia_namespaceObject.equippedItem)(slot) !== item && (0,external_kolmafia_namespaceObject.availableAmount)(item) > 0) {
          (0,external_kolmafia_namespaceObject.equip)(slot, item);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    if (verifyCached(entry) && options.useOutfitCaching) {
      var _outfitName = outfitCache.insert(entry);
      logger.info("Saving equipment to outfit ".concat(_outfitName, "."));
      saveOutfit(_outfitName);
    }
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject11 || (maximize_templateObject11 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject12 || (maximize_templateObject12 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))))) {
    (0,external_kolmafia_namespaceObject.enthroneFamiliar)(entry.rider.get(template_string_$item(maximize_templateObject13 || (maximize_templateObject13 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) || $familiar.none);
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject14 || (maximize_templateObject14 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject15 || (maximize_templateObject15 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))))) {
    (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(entry.rider.get(template_string_$item(maximize_templateObject16 || (maximize_templateObject16 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) || $familiar.none);
  }
  applyModes(maximize_objectSpread(maximize_objectSpread({}, entry.modes), options.modes));
}
var slotStructure = [$slots(maximize_templateObject17 || (maximize_templateObject17 = maximize_taggedTemplateLiteral(["hat"]))), $slots(maximize_templateObject18 || (maximize_templateObject18 = maximize_taggedTemplateLiteral(["back"]))), $slots(maximize_templateObject19 || (maximize_templateObject19 = maximize_taggedTemplateLiteral(["shirt"]))), $slots(maximize_templateObject20 || (maximize_templateObject20 = maximize_taggedTemplateLiteral(["weapon, off-hand"]))), $slots(maximize_templateObject21 || (maximize_templateObject21 = maximize_taggedTemplateLiteral(["pants"]))), $slots(maximize_templateObject22 || (maximize_templateObject22 = maximize_taggedTemplateLiteral(["acc1, acc2, acc3"]))), $slots(maximize_templateObject23 || (maximize_templateObject23 = maximize_taggedTemplateLiteral(["familiar"])))];
/**
 * Verifies that a CacheEntry was applied successfully.
 * @param entry The CacheEntry to verify
 * @returns If all desired equipment was appliedn in the correct slots.
 */
function verifyCached(entry) {
  var warn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var success = true;
  var _iterator4 = maximize_createForOfIteratorHelper(slotStructure),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var slotGroup = _step4.value;
      var desiredSlots = slotGroup.map(slot => {
        var _entry$equipment$get;
        return [slot, (_entry$equipment$get = entry.equipment.get(slot)) !== null && _entry$equipment$get !== void 0 ? _entry$equipment$get : null];
      }).filter(_ref => {
        var _ref2 = maximize_slicedToArray(_ref, 2),
          item = _ref2[1];
        return item !== null;
      });
      var desiredSet = desiredSlots.map(_ref3 => {
        var _ref4 = maximize_slicedToArray(_ref3, 2),
          item = _ref4[1];
        return item;
      });
      var equippedSet = desiredSlots.map(_ref5 => {
        var _ref6 = maximize_slicedToArray(_ref5, 1),
          slot = _ref6[0];
        return (0,external_kolmafia_namespaceObject.equippedItem)(slot);
      });
      if (!setEqual(desiredSet, equippedSet)) {
        if (warn) {
          logger.warning("Failed to apply cached ".concat(desiredSet.join(", "), " in ").concat(slotGroup.join(", "), "."));
        }
        success = false;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject24 || (maximize_templateObject24 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject25 || (maximize_templateObject25 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))))) {
    if (entry.rider.get(template_string_$item(maximize_templateObject26 || (maximize_templateObject26 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) !== (0,external_kolmafia_namespaceObject.myEnthronedFamiliar)()) {
      if (warn) {
        logger.warning("Failed to apply ".concat(entry.rider.get(template_string_$item(maximize_templateObject27 || (maximize_templateObject27 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))), " in ").concat(template_string_$item(maximize_templateObject28 || (maximize_templateObject28 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))), "."));
      }
      success = false;
    }
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject29 || (maximize_templateObject29 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) > 0 && entry.rider.get(template_string_$item(maximize_templateObject30 || (maximize_templateObject30 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))))) {
    if (entry.rider.get(template_string_$item(maximize_templateObject31 || (maximize_templateObject31 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) !== (0,external_kolmafia_namespaceObject.myBjornedFamiliar)()) {
      if (warn) {
        logger.warning("Failed to apply".concat(entry.rider.get(template_string_$item(maximize_templateObject32 || (maximize_templateObject32 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))), " in ").concat(template_string_$item(maximize_templateObject33 || (maximize_templateObject33 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))), "."));
      }
      success = false;
    }
  }
  return success;
}
/**
 * Save current equipment to the objective cache.
 * @param cacheKey The cache key to save.
 */
function saveCached(cacheKey, options) {
  var equipment = new Map();
  var rider = new Map();
  var _iterator5 = maximize_createForOfIteratorHelper(cachedSlots),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var _slot2 = _step5.value;
      equipment.set(_slot2, (0,external_kolmafia_namespaceObject.equippedItem)(_slot2));
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(maximize_templateObject34 || (maximize_templateObject34 = maximize_taggedTemplateLiteral(["card sleeve"])))) > 0) {
    equipment.set($slot(_templateObject35 || (_templateObject35 = maximize_taggedTemplateLiteral(["card-sleeve"]))), (0,external_kolmafia_namespaceObject.equippedItem)($slot(_templateObject36 || (_templateObject36 = maximize_taggedTemplateLiteral(["card-sleeve"])))));
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(_templateObject37 || (_templateObject37 = maximize_taggedTemplateLiteral(["Crown of Thrones"])))) > 0) {
    rider.set(template_string_$item(_templateObject38 || (_templateObject38 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))), (0,external_kolmafia_namespaceObject.myEnthronedFamiliar)());
  }
  if ((0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(_templateObject39 || (_templateObject39 = maximize_taggedTemplateLiteral(["Buddy Bjorn"])))) > 0) {
    rider.set(template_string_$item(_templateObject40 || (_templateObject40 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))), (0,external_kolmafia_namespaceObject.myBjornedFamiliar)());
  }
  if (options.preventSlot && options.preventSlot.length > 0) {
    var _iterator6 = maximize_createForOfIteratorHelper(options.preventSlot),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var slot = _step6.value;
        equipment.delete(slot);
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
    if (options.preventSlot.includes($slot(_templateObject41 || (_templateObject41 = maximize_taggedTemplateLiteral(["buddy-bjorn"]))))) {
      rider.delete(template_string_$item(_templateObject42 || (_templateObject42 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))));
    }
    if (options.preventSlot.includes($slot(_templateObject43 || (_templateObject43 = maximize_taggedTemplateLiteral(["crown-of-thrones"]))))) {
      rider.delete(template_string_$item(_templateObject44 || (_templateObject44 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))));
    }
  }
  if (options.onlySlot && options.onlySlot.length > 0) {
    var _iterator7 = maximize_createForOfIteratorHelper(external_kolmafia_namespaceObject.Slot.all()),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var _slot = _step7.value;
        if (!options.onlySlot.includes(_slot)) {
          equipment.delete(_slot);
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
    if (!options.onlySlot.includes($slot(_templateObject45 || (_templateObject45 = maximize_taggedTemplateLiteral(["buddy-bjorn"]))))) {
      rider.delete(template_string_$item(_templateObject46 || (_templateObject46 = maximize_taggedTemplateLiteral(["Buddy Bjorn"]))));
    }
    if (!options.onlySlot.includes($slot(_templateObject47 || (_templateObject47 = maximize_taggedTemplateLiteral(["crown-of-thrones"]))))) {
      rider.delete(template_string_$item(_templateObject48 || (_templateObject48 = maximize_taggedTemplateLiteral(["Crown of Thrones"]))));
    }
  }
  var entry = new CacheEntry(equipment, rider, (0,external_kolmafia_namespaceObject.myFamiliar)(), canEquipItemCount(), maximize_objectSpread(maximize_objectSpread({}, getCurrentModes()), options.modes));
  cachedObjectives[cacheKey] = entry;
  if (options.useOutfitCaching) {
    var outfitName = outfitCache.insert(entry);
    logger.info("Saving equipment to outfit ".concat(outfitName, "."));
    saveOutfit(outfitName);
  }
}
/**
 * Run the maximizer, but only if the objective and certain pieces of game state haven't changed since it was last run.
 * @param objectives Objectives to maximize for.
 * @param options Options for this run of the maximizer.
 * @param options.updateOnFamiliarChange Re-run the maximizer if familiar has changed. Default true.
 * @param options.updateOnCanEquipChanged Re-run the maximizer if stats have changed what can be equipped. Default true.
 * @param options.forceEquip Equipment to force-equip ("equip X").
 * @param options.preventEquip Equipment to prevent equipping ("-equip X").
 * @param options.bonusEquip Equipment to apply a bonus to ("200 bonus X").
 * @returns Whether the maximize call succeeded.
 */
function maximizeCached(objectives) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fullOptions = mergeMaximizeOptions(defaultMaximizeOptions, options);
  var forceEquip = fullOptions.forceEquip,
    preventEquip = fullOptions.preventEquip,
    bonusEquip = fullOptions.bonusEquip,
    onlySlot = fullOptions.onlySlot,
    preventSlot = fullOptions.preventSlot,
    forceUpdate = fullOptions.forceUpdate;
  // Sort each group in objective to ensure consistent ordering in string
  var objective = maximize_toConsumableArray(new Set([].concat(maximize_toConsumableArray(objectives.sort()), maximize_toConsumableArray(forceEquip.map(item => "equip ".concat(item)).sort()), maximize_toConsumableArray(preventEquip.map(item => "-equip ".concat(item)).sort()), maximize_toConsumableArray(onlySlot.map(slot => "".concat(slot)).sort()), maximize_toConsumableArray(preventSlot.map(slot => "-".concat(slot)).sort()), maximize_toConsumableArray(Array.from(bonusEquip.entries()).filter(_ref7 => {
    var _ref8 = maximize_slicedToArray(_ref7, 2),
      bonus = _ref8[1];
    return bonus !== 0;
  }).map(_ref9 => {
    var _ref10 = maximize_slicedToArray(_ref9, 2),
      item = _ref10[0],
      bonus = _ref10[1];
    return "".concat(Math.round(bonus * 100) / 100, " bonus ").concat(item);
  }).sort())))).join(", ");
  // Items equipped in slots not touched by the maximizer must be in the cache key
  var untouchedSlots = cachedSlots.filter(slot => preventSlot.includes(slot) || onlySlot.length > 0 && !onlySlot.includes(slot));
  var cacheKey = [objective].concat(maximize_toConsumableArray(untouchedSlots.map(slot => "".concat(slot, ":").concat((0,external_kolmafia_namespaceObject.equippedItem)(slot))).sort())).join("; ");
  var cacheEntry = checkCache(cacheKey, fullOptions);
  if (cacheEntry && !forceUpdate) {
    if (verifyCached(cacheEntry, false)) return true;
    logger.info("Equipment found in maximize cache, equipping...");
    applyCached(cacheEntry, fullOptions);
    if (verifyCached(cacheEntry)) {
      logger.info("Equipped cached ".concat(cacheKey));
      return true;
    }
    logger.warning("Maximize cache application failed, maximizing...");
  }
  var result = (0,external_kolmafia_namespaceObject.maximize)(objective, false);
  saveCached(cacheKey, fullOptions);
  return result;
}
var _maximizeParameters = /*#__PURE__*/new WeakMap();
var _maximizeOptions = /*#__PURE__*/new WeakMap();
var Requirement = /*#__PURE__*/function () {
  /**
   * A convenient way of combining maximization parameters and options
   * @param maximizeParameters Parameters you're attempting to maximize
   * @param maximizeOptions Object potentially containing forceEquips, bonusEquips, preventEquips, and preventSlots
   */
  function Requirement(maximizeParameters, maximizeOptions) {
    maximize_classCallCheck(this, Requirement);
    _classPrivateFieldInitSpec(this, _maximizeParameters, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _maximizeOptions, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _maximizeParameters, maximizeParameters);
    _classPrivateFieldSet(this, _maximizeOptions, maximizeOptions);
  }
  maximize_createClass(Requirement, [{
    key: "maximizeParameters",
    get: function get() {
      return _classPrivateFieldGet(this, _maximizeParameters);
    }
  }, {
    key: "maximizeOptions",
    get: function get() {
      return _classPrivateFieldGet(this, _maximizeOptions);
    }
    /**
     * Merges two requirements, concanating relevant arrays. Typically used in static form.
     * @param other Requirement to merge with.
     */
  }, {
    key: "merge",
    value: function merge(other) {
      var _optionsA$forceEquip, _other$maximizeOption, _optionsA$preventEqui, _other$maximizeOption3, _optionsA$bonusEquip$, _optionsA$bonusEquip, _optionsB$bonusEquip$, _optionsB$bonusEquip, _optionsA$onlySlot, _optionsB$onlySlot, _optionsA$preventSlot, _optionsB$preventSlot;
      var optionsA = this.maximizeOptions;
      var optionsB = other.maximizeOptions;
      return new Requirement([].concat(maximize_toConsumableArray(this.maximizeParameters), maximize_toConsumableArray(other.maximizeParameters)), {
        updateOnFamiliarChange: optionsA.updateOnFamiliarChange || other.maximizeOptions.updateOnFamiliarChange,
        updateOnCanEquipChanged: optionsA.updateOnCanEquipChanged || other.maximizeOptions.updateOnCanEquipChanged,
        forceEquip: [].concat(maximize_toConsumableArray((_optionsA$forceEquip = optionsA.forceEquip) !== null && _optionsA$forceEquip !== void 0 ? _optionsA$forceEquip : []), maximize_toConsumableArray((_other$maximizeOption = other.maximizeOptions.forceEquip) !== null && _other$maximizeOption !== void 0 ? _other$maximizeOption : [])).filter(x => {
          var _other$maximizeOption2;
          return !((_other$maximizeOption2 = other.maximizeOptions.preventEquip) !== null && _other$maximizeOption2 !== void 0 && _other$maximizeOption2.includes(x));
        }),
        preventEquip: [].concat(maximize_toConsumableArray((_optionsA$preventEqui = optionsA.preventEquip) !== null && _optionsA$preventEqui !== void 0 ? _optionsA$preventEqui : []), maximize_toConsumableArray((_other$maximizeOption3 = other.maximizeOptions.preventEquip) !== null && _other$maximizeOption3 !== void 0 ? _other$maximizeOption3 : [])).filter(x => {
          var _other$maximizeOption4;
          return !((_other$maximizeOption4 = other.maximizeOptions.forceEquip) !== null && _other$maximizeOption4 !== void 0 && _other$maximizeOption4.includes(x));
        }),
        bonusEquip: new Map([].concat(maximize_toConsumableArray((_optionsA$bonusEquip$ = (_optionsA$bonusEquip = optionsA.bonusEquip) === null || _optionsA$bonusEquip === void 0 ? void 0 : _optionsA$bonusEquip.entries()) !== null && _optionsA$bonusEquip$ !== void 0 ? _optionsA$bonusEquip$ : []), maximize_toConsumableArray((_optionsB$bonusEquip$ = (_optionsB$bonusEquip = optionsB.bonusEquip) === null || _optionsB$bonusEquip === void 0 ? void 0 : _optionsB$bonusEquip.entries()) !== null && _optionsB$bonusEquip$ !== void 0 ? _optionsB$bonusEquip$ : []))),
        onlySlot: [].concat(maximize_toConsumableArray((_optionsA$onlySlot = optionsA.onlySlot) !== null && _optionsA$onlySlot !== void 0 ? _optionsA$onlySlot : []), maximize_toConsumableArray((_optionsB$onlySlot = optionsB.onlySlot) !== null && _optionsB$onlySlot !== void 0 ? _optionsB$onlySlot : [])),
        preventSlot: [].concat(maximize_toConsumableArray((_optionsA$preventSlot = optionsA.preventSlot) !== null && _optionsA$preventSlot !== void 0 ? _optionsA$preventSlot : []), maximize_toConsumableArray((_optionsB$preventSlot = optionsB.preventSlot) !== null && _optionsB$preventSlot !== void 0 ? _optionsB$preventSlot : [])),
        forceUpdate: optionsA.forceUpdate || optionsB.forceUpdate
      });
    }
    /**
     * Merges a set of requirements together, starting with an empty requirement.
     * @param allRequirements Requirements to merge
     */
  }, {
    key: "maximize",
    value:
    /**
     * Runs maximizeCached, using the maximizeParameters and maximizeOptions contained by this requirement.
     * @returns Whether the maximize call succeeded.
     */
    function maximize() {
      return maximizeCached(this.maximizeParameters, this.maximizeOptions);
    }
    /**
     * Merges requirements, and then runs maximizeCached on the combined requirement.
     * @param requirements Requirements to maximize on
     */
  }], [{
    key: "merge",
    value: function merge(allRequirements) {
      return allRequirements.reduce((x, y) => x.merge(y), new Requirement([], {}));
    }
  }, {
    key: "maximize",
    value: function maximize() {
      for (var _len = arguments.length, requirements = new Array(_len), _key = 0; _key < _len; _key++) {
        requirements[_key] = arguments[_key];
      }
      Requirement.merge(requirements).maximize();
    }
  }]);
  return Requirement;
}();
/**
 * Clear all outfits cached by the maximizer.
 */
function clearMaximizerCache() {
  outfitCache.clear();
  for (var member in cachedObjectives) delete cachedObjectives[member];
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.values.js
var es_object_values = __webpack_require__(9628);
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2015/MayoClinic.js
var MayoClinic_templateObject, MayoClinic_templateObject2, MayoClinic_templateObject3, MayoClinic_templateObject4, MayoClinic_templateObject5, MayoClinic_templateObject6, MayoClinic_templateObject7, MayoClinic_templateObject8, MayoClinic_templateObject9, MayoClinic_templateObject10;
function MayoClinic_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var Mayo = {
  nex: template_string_$item(MayoClinic_templateObject || (MayoClinic_templateObject = MayoClinic_taggedTemplateLiteral(["Mayonex"]))),
  diol: template_string_$item(MayoClinic_templateObject2 || (MayoClinic_templateObject2 = MayoClinic_taggedTemplateLiteral(["Mayodiol"]))),
  zapine: template_string_$item(MayoClinic_templateObject3 || (MayoClinic_templateObject3 = MayoClinic_taggedTemplateLiteral(["Mayozapine"]))),
  flex: template_string_$item(MayoClinic_templateObject4 || (MayoClinic_templateObject4 = MayoClinic_taggedTemplateLiteral(["Mayoflex"])))
};
function installed() {
  return (0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(MayoClinic_templateObject5 || (MayoClinic_templateObject5 = MayoClinic_taggedTemplateLiteral(["portable Mayo Clinic"])));
}
function MayoClinic_have() {
  return haveItem($item(MayoClinic_templateObject6 || (MayoClinic_templateObject6 = MayoClinic_taggedTemplateLiteral(["portable Mayo Clinic"])))) || installed();
}
/**
 * Sets mayo minder to a particular mayo, and ensures you have enough of it.
 * @param mayo Mayo to use
 * @param quantity Quantity to ensure
 */
function setMayoMinder(mayo) {
  var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  if ((0,external_kolmafia_namespaceObject.getWorkshed)() !== template_string_$item(MayoClinic_templateObject7 || (MayoClinic_templateObject7 = MayoClinic_taggedTemplateLiteral(["portable Mayo Clinic"])))) return false;
  if (!Object.values(Mayo).includes(mayo)) {
    logger.error("Invalid mayo selected");
    return false;
  }
  if (property_get("mayoInMouth") && property_get("mayoInMouth") !== mayo.name) {
    logger.error("Currently have incorrect mayo in mouth");
    return false;
  }
  (0,external_kolmafia_namespaceObject.retrieveItem)(quantity, mayo);
  if (!lib_have(template_string_$item(MayoClinic_templateObject8 || (MayoClinic_templateObject8 = MayoClinic_taggedTemplateLiteral(["Mayo Minder\u2122"]))))) (0,external_kolmafia_namespaceObject.buy)(template_string_$item(MayoClinic_templateObject9 || (MayoClinic_templateObject9 = MayoClinic_taggedTemplateLiteral(["Mayo Minder\u2122"]))));
  if (property_get("mayoMinderSetting") !== mayo.name) {
    withChoice(1076, (0,external_kolmafia_namespaceObject.toInt)(mayo) - 8260, () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(MayoClinic_templateObject10 || (MayoClinic_templateObject10 = MayoClinic_taggedTemplateLiteral(["Mayo Minder\u2122"])))));
  }
  return property_get("mayoMinderSetting") === mayo.name;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/Kmail.js
function Kmail_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Kmail_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function Kmail_toConsumableArray(arr) { return Kmail_arrayWithoutHoles(arr) || Kmail_iterableToArray(arr) || Kmail_unsupportedIterableToArray(arr) || Kmail_nonIterableSpread(); }
function Kmail_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Kmail_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Kmail_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Kmail_arrayLikeToArray(arr); }
function Kmail_slicedToArray(arr, i) { return Kmail_arrayWithHoles(arr) || Kmail_iterableToArrayLimit(arr, i) || Kmail_unsupportedIterableToArray(arr, i) || Kmail_nonIterableRest(); }
function Kmail_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Kmail_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Kmail_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Kmail_arrayLikeToArray(o, minLen); }
function Kmail_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Kmail_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function Kmail_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Kmail_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Kmail_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Kmail_toPropertyKey(descriptor.key), descriptor); } }
function Kmail_createClass(Constructor, protoProps, staticProps) { if (protoProps) Kmail_defineProperties(Constructor.prototype, protoProps); if (staticProps) Kmail_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Kmail_defineProperty(obj, key, value) { key = Kmail_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Kmail_toPropertyKey(arg) { var key = Kmail_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function Kmail_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var Kmail = /*#__PURE__*/function () {
  function Kmail(rawKmail) {
    Kmail_classCallCheck(this, Kmail);
    Kmail_defineProperty(this, "id", void 0);
    Kmail_defineProperty(this, "date", void 0);
    Kmail_defineProperty(this, "type", void 0);
    Kmail_defineProperty(this, "senderId", void 0);
    Kmail_defineProperty(this, "senderName", void 0);
    Kmail_defineProperty(this, "rawMessage", void 0);
    var date = new Date(rawKmail.localtime);
    // Date come from KoL formatted with YY and so will be parsed 19YY, which is wrong.
    // We can safely add 100 because if 19YY was a leap year, 20YY will be too!
    date.setFullYear(date.getFullYear() + 100);
    this.id = Number(rawKmail.id);
    this.date = date;
    this.type = rawKmail.type;
    this.senderId = Number(rawKmail.fromid);
    this.senderName = rawKmail.fromname;
    this.rawMessage = rawKmail.message;
  }
  /**
   * Delete the kmail
   *
   * @returns Whether the kmail was deleted
   */
  Kmail_createClass(Kmail, [{
    key: "delete",
    value: function _delete() {
      return Kmail.delete([this]) === 1;
    }
    /**
     * Message contents without any HTML from items or meat
     */
  }, {
    key: "message",
    get: function get() {
      var match = this.rawMessage.match(/^([\s\S]*?)</);
      return match ? match[1] : this.rawMessage;
    }
    /**
     * Get items attached to the kmail
     *
     * @returns Map of items attached to the kmail and their quantities
     */
  }, {
    key: "items",
    value: function items() {
      return new Map(Object.entries((0,external_kolmafia_namespaceObject.extractItems)(this.rawMessage)).map(_ref => {
        var _ref2 = Kmail_slicedToArray(_ref, 2),
          itemName = _ref2[0],
          quantity = _ref2[1];
        return [external_kolmafia_namespaceObject.Item.get(itemName), quantity];
      }));
    }
    /**
     * Get meat attached to the kmail
     *
     * @returns Meat attached to the kmail
     */
  }, {
    key: "meat",
    value: function meat() {
      return (0,external_kolmafia_namespaceObject.extractMeat)(this.rawMessage);
    }
    /**
     * Reply to kmail
     *
     * @see Kmail.send
     *
     * @returns True if the kmail was successfully sent
     */
  }, {
    key: "reply",
    value: function reply() {
      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var meat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return Kmail.send(this.senderId, message, items, meat);
    }
  }], [{
    key: "parse",
    value:
    /**
     * Parses a kmail from KoL's native format
     *
     * @param rawKmail Kmail in the format supplies by api.php
     * @returns Parsed kmail
     */
    function parse(rawKmail) {
      return new Kmail(rawKmail);
    }
    /**
     * Returns all of the player's kmails
     *
     * @param count Number of kmails to fetch
     * @returns Parsed kmails
     */
  }, {
    key: "inbox",
    value: function inbox() {
      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
      return JSON.parse((0,external_kolmafia_namespaceObject.visitUrl)("api.php?what=kmail&for=libram&count=".concat(count))).map(Kmail.parse);
    }
    /**
     * Bulk delete kmails
     *
     * @param kmails Kmails to delete
     * @returns Number of kmails deleted
     */
  }, {
    key: "delete",
    value: function _delete(kmails) {
      var _results$match$, _results$match;
      var results = (0,external_kolmafia_namespaceObject.visitUrl)("messages.php?the_action=delete&box=Inbox&pwd&".concat(kmails.map(k => "sel".concat(k.id, "=on")).join("&")));
      return Number((_results$match$ = (_results$match = results.match(/<td>(\d) messages? deleted.<\/td>/)) === null || _results$match === void 0 ? void 0 : _results$match[1]) !== null && _results$match$ !== void 0 ? _results$match$ : 0);
    }
  }, {
    key: "_genericSend",
    value: function _genericSend(to, message, items, meat, chunkSize, constructUrl, successString) {
      var m = meat;
      var sendableItems = Kmail_toConsumableArray(arrayToCountedMap(items).entries()).filter(_ref3 => {
        var _ref4 = Kmail_slicedToArray(_ref3, 1),
          item = _ref4[0];
        return (0,external_kolmafia_namespaceObject.isGiftable)(item);
      });
      var result = true;
      var chunks = chunk(sendableItems, chunkSize);
      // Split the items to be sent into chunks of max 11 item types
      var _iterator = Kmail_createForOfIteratorHelper(chunks.length > 0 ? chunks : [null]),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var c = _step.value;
          var itemsQuery = c === null ? [] : c.map((_ref5, index) => {
            var _ref6 = Kmail_slicedToArray(_ref5, 2),
              item = _ref6[0],
              quantity = _ref6[1];
            return "whichitem".concat(index + 1, "=").concat((0,external_kolmafia_namespaceObject.toInt)(item), "&howmany").concat(index + 1, "=").concat(quantity);
          });
          var r = (0,external_kolmafia_namespaceObject.visitUrl)(constructUrl(m, itemsQuery.join("&"), itemsQuery.length));
          if (r.includes("That player cannot receive Meat or items")) {
            return Kmail.gift(to, message, items, meat);
          }
          // Make sure we don't send the same batch of meat with every chunk
          m = 0;
          result && (result = r.includes(successString));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return result;
    }
    /**
     * Sends a kmail to a player
     *
     * Sends multiple kmails if more than 11 unique item types are attached.
     * Ignores any ungiftable items.
     * Sends a gift package to players in run
     *
     * @param to The player name or id to receive the kmail
     * @param message The text contents of the message
     * @param items The items to be attached
     * @param meat The quantity of meat to be attached
     * @returns True if the kmail was successfully sent
     */
  }, {
    key: "send",
    value: function send(to) {
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var items = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var meat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      return Kmail._genericSend(to, message, items, meat, 11, (meat, itemsQuery) => "sendmessage.php?action=send&pwd&towho=".concat(to, "&message=").concat(message).concat(itemsQuery ? "&".concat(itemsQuery) : "", "&sendmeat=").concat(meat), ">Message sent.</");
    }
    /**
     * Sends a gift to a player
     *
     * Sends multiple kmails if more than 3 unique item types are attached.
     * Ignores any ungiftable items.
     *
     * @param to The player name or id to receive the gift
     * @param note The note on the outside of the gift
     * @param items The items to be attached
     * @param meat The quantity of meat to be attached
     * @param insideNode The note on the inside of the gift
     * @returns True if the gift was successfully sent
     */
  }, {
    key: "gift",
    value: function gift(to) {
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var items = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var meat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var insideNote = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
      var baseUrl = "town_sendgift.php?action=Yep.&pwd&fromwhere=0&note=".concat(message, "&insidenote=").concat(insideNote, "&towho=").concat(to);
      return Kmail._genericSend(to, message, items, meat, 3, (m, itemsQuery, chunkSize) => "".concat(baseUrl, "&whichpackage=").concat(chunkSize).concat(itemsQuery ? "&".concat(itemsQuery) : "", "&sendmeat=").concat(m), ">Package sent.</");
    }
  }]);
  return Kmail;
}();

;// CONCATENATED MODULE: ./node_modules/libram/dist/modifierTypes.js
// THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseModifiers.ts for more information
var booleanModifiers = ["Softcore Only", "Single Equip", "Never Fumble", "Weakens Monster", "Free Pull", "Variable", "Nonstackable Watch", "Cold Immunity", "Hot Immunity", "Sleaze Immunity", "Spooky Immunity", "Stench Immunity", "Cold Vulnerability", "Hot Vulnerability", "Sleaze Vulnerability", "Spooky Vulnerability", "Stench Vulnerability", "Moxie Controls MP", "Moxie May Control MP", "Four Songs", "Adventure Underwater", "Underwater Familiar", "Generic", "Unarmed", "No Pull", "Lasts Until Rollover", "Attacks Can't Miss", "Pirate", "Breakable", "Drops Items", "Drops Meat"];
var classModifiers = ["Class"];
var numericModifiers = ["Familiar Weight", "Monster Level", "Combat Rate", "Initiative", "Experience", "Item Drop", "Meat Drop", "Damage Absorption", "Damage Reduction", "Cold Resistance", "Hot Resistance", "Sleaze Resistance", "Spooky Resistance", "Stench Resistance", "Mana Cost", "Moxie", "Moxie Percent", "Muscle", "Muscle Percent", "Mysticality", "Mysticality Percent", "Maximum HP", "Maximum HP Percent", "Maximum MP", "Maximum MP Percent", "Weapon Damage", "Ranged Damage", "Spell Damage", "Spell Damage Percent", "Cold Damage", "Hot Damage", "Sleaze Damage", "Spooky Damage", "Stench Damage", "Cold Spell Damage", "Hot Spell Damage", "Sleaze Spell Damage", "Spooky Spell Damage", "Stench Spell Damage", "Underwater Combat Rate", "Fumble", "HP Regen Min", "HP Regen Max", "MP Regen Min", "MP Regen Max", "Adventures", "Familiar Weight Percent", "Weapon Damage Percent", "Ranged Damage Percent", "Stackable Mana Cost", "Hobo Power", "Base Resting HP", "Resting HP Percent", "Bonus Resting HP", "Base Resting MP", "Resting MP Percent", "Bonus Resting MP", "Critical Hit Percent", "PvP Fights", "Volleyball", "Sombrero", "Leprechaun", "Fairy", "Meat Drop Penalty", "Hidden Familiar Weight", "Item Drop Penalty", "Initiative Penalty", "Food Drop", "Booze Drop", "Hat Drop", "Weapon Drop", "Offhand Drop", "Shirt Drop", "Pants Drop", "Accessory Drop", "Volleyball Effectiveness", "Sombrero Effectiveness", "Leprechaun Effectiveness", "Fairy Effectiveness", "Familiar Weight Cap", "Slime Resistance", "Slime Hates It", "Spell Critical Percent", "Muscle Experience", "Mysticality Experience", "Moxie Experience", "Effect Duration", "Candy Drop", "DB Combat Damage", "Sombrero Bonus", "Familiar Experience", "Sporadic Meat Drop", "Sporadic Item Drop", "Meat Bonus", "Pickpocket Chance", "Combat Mana Cost", "Muscle Experience Percent", "Mysticality Experience Percent", "Moxie Experience Percent", "Minstrel Level", "Muscle Limit", "Mysticality Limit", "Moxie Limit", "Song Duration", "Prismatic Damage", "Smithsness", "Supercold Resistance", "Reduce Enemy Defense", "Pool Skill", "Surgeonosity", "Familiar Damage", "Gear Drop", "Maximum Hooch", "Water Level", "Crimbot Outfit Power", "Familiar Tuning Muscle", "Familiar Tuning Mysticality", "Familiar Tuning Moxie", "Random Monster Modifiers", "Luck", "Othello Skill", "Disco Style", "Rollover Effect Duration", "Sixgun Damage", "Fishing Skill", "Additional Song", "Sprinkle Drop", "Absorb Adventures", "Absorb Stats", "Rubee Drop", "Kruegerand Drop", "WarBear Armor Penetration", "Clowniness", "Maximum PP", "Plumber Power", "Drippy Damage", "Drippy Resistance", "Energy", "Scrap", "Familiar Action Bonus", "Water"];
var effectModifiers = ["Effect", "Rollover Effect"];
var monsterModifiers = ["Avatar"];
var skillModifiers = ["Skill"];
var statModifiers = ["Plumber Stat"];
var stringModifiers = ["Intrinsic Effect", "Equalize", "Wiki Name", "Modifiers", "Outfit", "Stat Tuning", "Equips On", "Familiar Effect", "Jiggle", "Equalize Muscle", "Equalize Mysticality", "Equalize Moxie", "Floor Buffed Muscle", "Floor Buffed Mysticality", "Floor Buffed Moxie"];
;// CONCATENATED MODULE: ./node_modules/libram/dist/modifier.js
function modifier_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function modifier_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? modifier_ownKeys(Object(source), !0).forEach(function (key) { modifier_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : modifier_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function modifier_defineProperty(obj, key, value) { key = modifier_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function modifier_toPropertyKey(arg) { var key = modifier_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function modifier_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




function modifier_get(name, subject) {
  if (arrayContains(name, booleanModifiers)) {
    return subject === undefined ? (0,external_kolmafia_namespaceObject.booleanModifier)(name) : (0,external_kolmafia_namespaceObject.booleanModifier)(subject, name);
  }
  if (arrayContains(name, classModifiers)) {
    return (0,external_kolmafia_namespaceObject.classModifier)(subject, name);
  }
  if (arrayContains(name, effectModifiers)) {
    return (0,external_kolmafia_namespaceObject.effectModifier)(subject, name);
  }
  if (arrayContains(name, monsterModifiers)) {
    return (0,external_kolmafia_namespaceObject.monsterModifier)(subject, name);
  }
  if (arrayContains(name, numericModifiers)) {
    return subject === undefined ? (0,external_kolmafia_namespaceObject.numericModifier)(name) : (0,external_kolmafia_namespaceObject.numericModifier)(subject, name);
  }
  if (arrayContains(name, skillModifiers)) {
    return (0,external_kolmafia_namespaceObject.skillModifier)(subject, name);
  }
  if (arrayContains(name, stringModifiers)) {
    return subject === undefined ? (0,external_kolmafia_namespaceObject.stringModifier)(name) : (0,external_kolmafia_namespaceObject.stringModifier)(subject, name);
  }
  if (arrayContains(name, statModifiers)) {
    return (0,external_kolmafia_namespaceObject.statModifier)(subject, name);
  }
}
/**
 * Merge two Modifiers objects into one, summing all numeric modifiers, ||ing all boolean modifiers, and otherwise letting the second object overwrite the first.
 * @param modifiers1 Modifiers objects to be merged onto.
 * @param modifiers2 Modifiers object to merge.
 * @returns A single Modifiers object obtained by merging.
 */
function pairwiseMerge(modifiers1, modifiers2) {
  var returnValue = modifier_objectSpread(modifier_objectSpread({}, modifiers1), modifiers2);
  for (var modifier in modifiers1) {
    if (Array.from(Object.values(modifiers2)).includes(modifier)) {
      if (arrayContains(modifier, numericModifiers)) {
        var _modifiers1$modifier, _modifiers2$modifier;
        returnValue[modifier] = ((_modifiers1$modifier = modifiers1[modifier]) !== null && _modifiers1$modifier !== void 0 ? _modifiers1$modifier : 0) + ((_modifiers2$modifier = modifiers2[modifier]) !== null && _modifiers2$modifier !== void 0 ? _modifiers2$modifier : 0);
      }
      if (arrayContains(modifier, booleanModifiers)) {
        var _modifiers1$modifier2, _modifiers2$modifier2;
        returnValue[modifier] = ((_modifiers1$modifier2 = modifiers1[modifier]) !== null && _modifiers1$modifier2 !== void 0 ? _modifiers1$modifier2 : false) || ((_modifiers2$modifier2 = modifiers2[modifier]) !== null && _modifiers2$modifier2 !== void 0 ? _modifiers2$modifier2 : false);
      }
    }
  }
  return returnValue;
}
/**
 * Merge arbitrarily many Modifiers objects into one, summing all numeric modifiers, and ||ing all boolean modifiers.
 * @param modifierss Modifiers objects to be merged together.
 * @returns A single Modifiers object obtained by merging.
 */
function mergeModifiers() {
  for (var _len = arguments.length, modifierss = new Array(_len), _key = 0; _key < _len; _key++) {
    modifierss[_key] = arguments[_key];
  }
  return modifierss.reduce((a, b) => pairwiseMerge(a, b), {});
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/diet/knapsack.js
function knapsack_toConsumableArray(arr) { return knapsack_arrayWithoutHoles(arr) || knapsack_iterableToArray(arr) || knapsack_unsupportedIterableToArray(arr) || knapsack_nonIterableSpread(); }
function knapsack_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function knapsack_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function knapsack_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return knapsack_arrayLikeToArray(arr); }
function knapsack_slicedToArray(arr, i) { return knapsack_arrayWithHoles(arr) || knapsack_iterableToArrayLimit(arr, i) || knapsack_unsupportedIterableToArray(arr, i) || knapsack_nonIterableRest(); }
function knapsack_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function knapsack_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function knapsack_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function knapsack_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = knapsack_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function knapsack_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return knapsack_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return knapsack_arrayLikeToArray(o, minLen); }
function knapsack_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function knapsack_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, knapsack_toPropertyKey(descriptor.key), descriptor); } }
function knapsack_createClass(Constructor, protoProps, staticProps) { if (protoProps) knapsack_defineProperties(Constructor.prototype, protoProps); if (staticProps) knapsack_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function knapsack_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function knapsack_defineProperty(obj, key, value) { key = knapsack_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function knapsack_toPropertyKey(arg) { var key = knapsack_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function knapsack_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var Not = /*#__PURE__*/knapsack_createClass(function Not(thing) {
  knapsack_classCallCheck(this, Not);
  knapsack_defineProperty(this, "thing", void 0);
  this.thing = thing;
}); // Assuming list is already sorted, count adjacent items.
// Effectively run-length encoding.
function aggregate(list, isEqual) {
  var aggregatedList = [];
  var _iterator = knapsack_createForOfIteratorHelper(list),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var item = _step.value;
      if (aggregatedList.length === 0) {
        aggregatedList.push([item, 1]);
      } else {
        var last = aggregatedList[aggregatedList.length - 1];
        var _last = knapsack_slicedToArray(last, 1),
          lastItem = _last[0];
        if (isEqual ? isEqual(item, lastItem) : item === lastItem) {
          last[1]++;
        } else {
          aggregatedList.push([item, 1]);
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return aggregatedList;
}
/**
 * Solve the knapsack problem.
 * @param values Array of {[item, value, weight, maximum]} tuples for knapsack parameter.
 * @param capacity Capacity of knapsack.
 * @returns Tuple {[totalValue, items]} of selected items and total value of those items.
 */
function knapsack(values, capacity) {
  var _ref5;
  if (!Number.isFinite(capacity)) {
    throw new Error("Invalid capacity.");
  }
  // Invert negative values into a fake value for not using it.
  var valuesInverted = values.map(_ref => {
    var _ref2 = knapsack_slicedToArray(_ref, 4),
      thing = _ref2[0],
      value = _ref2[1],
      weight = _ref2[2],
      maximum = _ref2[3];
    return weight < 0 && maximum !== undefined ? [new Not(thing), -value, -weight, maximum] : [thing, value, weight, maximum];
  });
  var capacityAdjustment = utils_sum(values, _ref3 => {
    var _ref4 = knapsack_slicedToArray(_ref3, 4),
      weight = _ref4[2],
      maximum = _ref4[3];
    return weight < 0 && maximum !== undefined ? -weight * maximum : 0;
  });
  var adjustedCapacity = capacity + capacityAdjustment;
  if (adjustedCapacity < 0) {
    // We don't have enough cleaners to create any space, so can't fit anything.
    return [-Infinity, []];
  }
  // Sort values by weight.
  var valuesSorted = knapsack_toConsumableArray(valuesInverted).sort((x, y) => x[2] - y[2]);
  // Convert the problem into 0/1 knapsack - just include as many copies as possible of each item.
  var values01 = (_ref5 = []).concat.apply(_ref5, knapsack_toConsumableArray(valuesSorted.map(_ref6 => {
    var _ref7 = knapsack_slicedToArray(_ref6, 4),
      thing = _ref7[0],
      value = _ref7[1],
      weight = _ref7[2],
      maximum = _ref7[3];
    if (!Number.isFinite(weight) || weight < 0) {
      throw new Error("Invalid weight ".concat(weight, " for ").concat(thing instanceof Not ? "not ".concat(thing.thing) : thing));
    }
    var maxQuantity = Math.floor(maximum !== null && maximum !== void 0 ? maximum : adjustedCapacity / weight);
    if (maxQuantity < 0) {
      throw new Error("Invalid max quantity ".concat(maxQuantity, " for ").concat(thing instanceof Not ? "not ".concat(thing.thing) : thing));
    }
    return new Array(maxQuantity).fill([thing, value, weight]);
  })));
  var memoizationTable = new Array(values01.length);
  for (var i = 0; i < values01.length; i++) {
    memoizationTable[i] = new Array(adjustedCapacity).fill(null);
  }
  var _bestSolution = bestSolution(memoizationTable, values01, values01.length - 1, adjustedCapacity),
    _bestSolution2 = knapsack_slicedToArray(_bestSolution, 2),
    value = _bestSolution2[0],
    invertedSolution = _bestSolution2[1];
  // Still need to replace Not<T>s with right quantity of T's.
  var aggregatedSolution = aggregate(invertedSolution);
  var countMap = new Map(aggregatedSolution);
  var valueAdjustment = 0;
  var solution = aggregatedSolution.filter(_ref8 => {
    var _ref9 = knapsack_slicedToArray(_ref8, 1),
      thingOrNot = _ref9[0];
    return !(thingOrNot instanceof Not);
  });
  var _iterator2 = knapsack_createForOfIteratorHelper(valuesSorted),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = knapsack_slicedToArray(_step2.value, 4),
        thingOrNot = _step2$value[0],
        _value = _step2$value[1],
        maximum = _step2$value[3];
      if (thingOrNot instanceof Not) {
        var _countMap$get;
        var notCount = (_countMap$get = countMap.get(thingOrNot)) !== null && _countMap$get !== void 0 ? _countMap$get : 0;
        if (maximum === undefined) {
          throw new Error("Cannot find maximum for item ".concat(thingOrNot.thing, "."));
        }
        if (notCount > maximum) {
          throw new Error("Somehow picked ".concat(notCount, " more than the maximum ").concat(notCount, " for item ").concat(thingOrNot.thing, "."));
        }
        if (notCount < maximum) {
          solution.push([thingOrNot.thing, maximum - notCount]);
        }
        valueAdjustment -= maximum * _value;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return [value + valueAdjustment, solution];
}
/**
 * Find the best solution to a knapsack subproblem.
 * @param memoizationTable Memoization table for dynamic programming approach.
 * @param values Array of {[item, value, weight, maximum]} tuples for knapsack parameter.
 * @param currentIndex Current index into values array - only add items before this index.
 * @param remainingCapacity Remaining capacity of knapsack.
 * @returns
 */
function bestSolution(memoizationTable, values, currentIndex, remainingCapacity) {
  // If we've used all our capacity, this solution is no good.
  if (remainingCapacity < 0) return [-Infinity, []];
  if (remainingCapacity === 0 || currentIndex < 0) return [0, []];
  var memoized = memoizationTable[currentIndex][remainingCapacity - 1];
  if (memoized !== null) return memoized;
  var _values$currentIndex = knapsack_slicedToArray(values[currentIndex], 3),
    item = _values$currentIndex[0],
    value = _values$currentIndex[1],
    weight = _values$currentIndex[2];
  var _bestSolution3 = bestSolution(memoizationTable, values, currentIndex - 1, remainingCapacity - weight),
    _bestSolution4 = knapsack_slicedToArray(_bestSolution3, 2),
    valueIncludeRest = _bestSolution4[0],
    itemsInclude = _bestSolution4[1];
  var valueInclude = valueIncludeRest + value;
  var _bestSolution5 = bestSolution(memoizationTable, values, currentIndex - 1, remainingCapacity),
    _bestSolution6 = knapsack_slicedToArray(_bestSolution5, 2),
    valueExclude = _bestSolution6[0],
    itemsExclude = _bestSolution6[1];
  // Pick the better of the two options between including/excluding.
  var result = valueInclude > valueExclude ? [valueInclude, [].concat(knapsack_toConsumableArray(itemsInclude), [item])] : [valueExclude, itemsExclude];
  memoizationTable[currentIndex][remainingCapacity - 1] = result;
  return result;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/diet/index.js
var diet_templateObject, diet_templateObject2, diet_templateObject3, diet_templateObject4, diet_templateObject5, diet_templateObject6, diet_templateObject7, diet_templateObject8, diet_templateObject9, diet_templateObject10, diet_templateObject11, diet_templateObject12, diet_templateObject13, diet_templateObject14, diet_templateObject15, diet_templateObject16, diet_templateObject17, diet_templateObject18, diet_templateObject19, diet_templateObject20, diet_templateObject21, diet_templateObject22, diet_templateObject23, diet_templateObject24, diet_templateObject25, diet_templateObject26, diet_templateObject27, diet_templateObject28, diet_templateObject29, diet_templateObject30, diet_templateObject31, diet_templateObject32, diet_templateObject33, diet_templateObject34, diet_templateObject35, diet_templateObject36, diet_templateObject37, diet_templateObject38, diet_templateObject39, diet_templateObject40, diet_templateObject41, diet_templateObject42, diet_templateObject43, diet_templateObject44, diet_templateObject45, diet_templateObject46, diet_templateObject47, diet_templateObject48, _templateObject49, _templateObject50, _templateObject51, _templateObject52, _templateObject53, _templateObject54, _templateObject55, _templateObject56, _templateObject57, _templateObject58, _templateObject59;
function diet_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = diet_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function diet_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function diet_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? diet_ownKeys(Object(source), !0).forEach(function (key) { diet_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : diet_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function diet_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function diet_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, diet_toPropertyKey(descriptor.key), descriptor); } }
function diet_createClass(Constructor, protoProps, staticProps) { if (protoProps) diet_defineProperties(Constructor.prototype, protoProps); if (staticProps) diet_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function diet_defineProperty(obj, key, value) { key = diet_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function diet_toPropertyKey(arg) { var key = diet_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function diet_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function diet_toConsumableArray(arr) { return diet_arrayWithoutHoles(arr) || diet_iterableToArray(arr) || diet_unsupportedIterableToArray(arr) || diet_nonIterableSpread(); }
function diet_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function diet_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function diet_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return diet_arrayLikeToArray(arr); }
function diet_slicedToArray(arr, i) { return diet_arrayWithHoles(arr) || diet_iterableToArrayLimit(arr, i) || diet_unsupportedIterableToArray(arr, i) || diet_nonIterableRest(); }
function diet_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function diet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return diet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return diet_arrayLikeToArray(o, minLen); }
function diet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function diet_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function diet_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function diet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }








function isMonday() {
  // Checking Tuesday's ruby is a hack to see if it's Monday in Arizona.
  return modifier_get("Muscle Percent", template_string_$item(diet_templateObject || (diet_templateObject = diet_taggedTemplateLiteral(["Tuesday's ruby"])))) > 0;
}
// TODO: Include Salty Mouth and potentially other modifiers.
function _expectedAdventures(item, modifiers) {
  var _item$notes, _item$notes2, _item$notes3, _item$notes4, _item$notes5;
  if (item.adventures === "") return 0;
  var _item$adventures$spli = item.adventures.split(/[-]/).map(s => parseInt(s)),
    _item$adventures$spli2 = diet_slicedToArray(_item$adventures$spli, 2),
    min = _item$adventures$spli2[0],
    recordedMax = _item$adventures$spli2[1];
  var max = recordedMax !== null && recordedMax !== void 0 ? recordedMax : min;
  var interpolated = diet_toConsumableArray(new Array(max - min + 1).keys()).map(n => n + min);
  var forkMugMultiplier = (0,external_kolmafia_namespaceObject.itemType)(item) === "food" && (_item$notes = item.notes) !== null && _item$notes !== void 0 && _item$notes.includes("SALAD") || (0,external_kolmafia_namespaceObject.itemType)(item) === "booze" && (_item$notes2 = item.notes) !== null && _item$notes2 !== void 0 && _item$notes2.includes("BEER") ? 1.5 : 1.3;
  var seasoningAdventures = max - min <= 1 ? 1 : 0.5;
  var garish = modifiers.garish && ((_item$notes3 = item.notes) === null || _item$notes3 === void 0 ? void 0 : _item$notes3.includes("LASAGNA")) && !isMonday();
  var refinedPalate = modifiers.refinedPalate && ((_item$notes4 = item.notes) === null || _item$notes4 === void 0 ? void 0 : _item$notes4.includes("WINE"));
  var pinkyRing = modifiers.pinkyRing && ((_item$notes5 = item.notes) === null || _item$notes5 === void 0 ? void 0 : _item$notes5.includes("WINE"));
  return utils_sum(interpolated, baseAdventures => {
    var _item$notes6, _item$notes7;
    var adventures = baseAdventures;
    if (modifiers.forkMug) {
      adventures = Math.floor(adventures * forkMugMultiplier);
    }
    if ((_item$notes6 = item.notes) !== null && _item$notes6 !== void 0 && _item$notes6.includes("SAUCY") && modifiers.saucemaven) {
      adventures += (0,external_kolmafia_namespaceObject.myPrimestat)() === $stat(diet_templateObject2 || (diet_templateObject2 = diet_taggedTemplateLiteral(["Mysticality"]))) ? 5 : 3;
    }
    if (garish) adventures += 5;
    if (refinedPalate) adventures = Math.floor(adventures * 1.25);
    if (pinkyRing) adventures = Math.round(adventures * 1.125);
    if ((_item$notes7 = item.notes) !== null && _item$notes7 !== void 0 && _item$notes7.includes("MARTINI") && modifiers.tuxedoShirt) {
      adventures += 2;
    }
    if ((0,external_kolmafia_namespaceObject.itemType)(item) === "food" && modifiers.mayoflex) adventures++;
    if ((0,external_kolmafia_namespaceObject.itemType)(item) === "food" && modifiers.seasoning) adventures += seasoningAdventures;
    return adventures;
  }) / interpolated.length;
}
var MenuItem = /*#__PURE__*/function () {
  /**
   * Construct a new menu item, possibly with extra properties. Items in MenuItem.defaultOptions have intelligent defaults.
   * @param item Item to add to menu.
   * @param options.organ Designate item as belonging to a specific organ.
   * @param options.size Override item organ size. Necessary for any non-food/booze/spleen item.
   * @param options.maximum Maximum uses remaining today, or "auto" to check dailyusesleft Mafia property.
   * @param options.additionalValue Additional value (positive) or cost (negative) to consider with item, e.g. from buffs.
   * @param options.effect Effect associated with this menu item (pocket wish effect, sweet synthesis effect, pill keeper potion extension)
   * @param options.mayo Which mayo to use before item (ignored if mayo clinic is not installed or item is not a food)
   * @param options.note Any note to track information about item, to be used later
   */
  function MenuItem(item) {
    var _MenuItem$defaultOpti;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    diet_classCallCheck(this, MenuItem);
    diet_defineProperty(this, "item", void 0);
    diet_defineProperty(this, "organ", void 0);
    diet_defineProperty(this, "size", void 0);
    diet_defineProperty(this, "maximum", void 0);
    diet_defineProperty(this, "additionalValue", void 0);
    diet_defineProperty(this, "effect", void 0);
    diet_defineProperty(this, "priceOverride", void 0);
    diet_defineProperty(this, "mayo", void 0);
    diet_defineProperty(this, "data", void 0);
    var _options = diet_objectSpread(diet_objectSpread({}, options), (_MenuItem$defaultOpti = MenuItem.defaultOptions().get(item)) !== null && _MenuItem$defaultOpti !== void 0 ? _MenuItem$defaultOpti : {}),
      size = _options.size,
      organ = _options.organ,
      maximum = _options.maximum,
      additionalValue = _options.additionalValue,
      effect = _options.effect,
      priceOverride = _options.priceOverride,
      mayo = _options.mayo,
      data = _options.data;
    this.item = item;
    this.maximum = maximum === "auto" ? item.dailyusesleft : maximum;
    this.additionalValue = additionalValue;
    this.effect = effect;
    this.priceOverride = priceOverride;
    this.mayo = mayo;
    this.data = data;
    var typ = (0,external_kolmafia_namespaceObject.itemType)(this.item);
    this.organ = organ !== null && organ !== void 0 ? organ : isOrgan(typ) ? typ : undefined;
    this.size = size !== null && size !== void 0 ? size : this.organ === "food" ? this.item.fullness : this.organ === "booze" ? this.item.inebriety : this.organ === "spleen item" ? this.item.spleen : 0;
  }
  diet_createClass(MenuItem, [{
    key: "equals",
    value: function equals(other) {
      return this.item === other.item && this.effect === other.effect;
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.effect) {
        return "".concat(this.item, ":").concat(this.effect);
      }
      return this.item.toString();
    }
  }, {
    key: "price",
    value: function price() {
      var _this$priceOverride, _MenuItem$defaultPric;
      return (_this$priceOverride = this.priceOverride) !== null && _this$priceOverride !== void 0 ? _this$priceOverride : (_MenuItem$defaultPric = MenuItem.defaultPriceFunction) === null || _MenuItem$defaultPric === void 0 ? void 0 : _MenuItem$defaultPric.call(MenuItem, this.item);
    }
  }], [{
    key: "defaultOptions",
    value: function defaultOptions() {
      return new Map([[template_string_$item(diet_templateObject3 || (diet_templateObject3 = diet_taggedTemplateLiteral(["distention pill"]))), {
        organ: "food",
        maximum: !lib_have(template_string_$item(diet_templateObject4 || (diet_templateObject4 = diet_taggedTemplateLiteral(["distention pill"])))) || property_get("_distentionPillUsed") ? 0 : 1,
        size: -1
      }], [template_string_$item(diet_templateObject5 || (diet_templateObject5 = diet_taggedTemplateLiteral(["synthetic dog hair pill"]))), {
        organ: "booze",
        maximum: !lib_have(template_string_$item(diet_templateObject6 || (diet_templateObject6 = diet_taggedTemplateLiteral(["synthetic dog hair pill"])))) || property_get("_syntheticDogHairPillUsed") ? 0 : 1,
        size: -1
      }], [template_string_$item(diet_templateObject7 || (diet_templateObject7 = diet_taggedTemplateLiteral(["cuppa Voraci tea"]))), {
        organ: "food",
        maximum: property_get("_voraciTeaUsed") ? 0 : 1,
        size: -1
      }], [template_string_$item(diet_templateObject8 || (diet_templateObject8 = diet_taggedTemplateLiteral(["cuppa Sobrie tea"]))), {
        organ: "booze",
        maximum: property_get("_sobrieTeaUsed") ? 0 : 1,
        size: -1
      }], [template_string_$item(diet_templateObject9 || (diet_templateObject9 = diet_taggedTemplateLiteral(["mojo filter"]))), {
        organ: "spleen item",
        maximum: 3 - property_get("currentMojoFilters"),
        size: -1
      }], [template_string_$item(diet_templateObject10 || (diet_templateObject10 = diet_taggedTemplateLiteral(["spice melange"]))), {
        maximum: property_get("spiceMelangeUsed") ? 0 : 1
      }], [template_string_$item(diet_templateObject11 || (diet_templateObject11 = diet_taggedTemplateLiteral(["Ultra Mega Sour Ball"]))), {
        maximum: property_get("_ultraMegaSourBallUsed") ? 0 : 1
      }], [template_string_$item(diet_templateObject12 || (diet_templateObject12 = diet_taggedTemplateLiteral(["The Plumber's mushroom stew"]))), {
        maximum: property_get("_plumbersMushroomStewEaten") ? 0 : 1
      }], [template_string_$item(diet_templateObject13 || (diet_templateObject13 = diet_taggedTemplateLiteral(["The Mad Liquor"]))), {
        maximum: property_get("_madLiquorDrunk") ? 0 : 1
      }], [template_string_$item(diet_templateObject14 || (diet_templateObject14 = diet_taggedTemplateLiteral(["Doc Clock's thyme cocktail"]))), {
        maximum: property_get("_docClocksThymeCocktailDrunk") ? 0 : 1
      }], [template_string_$item(diet_templateObject15 || (diet_templateObject15 = diet_taggedTemplateLiteral(["Mr. Burnsger"]))), {
        maximum: property_get("_mrBurnsgerEaten") ? 0 : 1
      }]]);
    }
  }]);
  return MenuItem;
}();
diet_defineProperty(MenuItem, "defaultPriceFunction", item => (0,external_kolmafia_namespaceObject.npcPrice)(item) > 0 ? (0,external_kolmafia_namespaceObject.npcPrice)(item) : (0,external_kolmafia_namespaceObject.mallPrice)(item));
var organs = ["food", "booze", "spleen item"];
function isOrgan(x) {
  return organs.includes(x);
}
var DietPlanner = /*#__PURE__*/function () {
  function DietPlanner(mpa, menu) {
    var _this = this;
    diet_classCallCheck(this, DietPlanner);
    diet_defineProperty(this, "mpa", void 0);
    diet_defineProperty(this, "menu", void 0);
    diet_defineProperty(this, "mayoLookup", void 0);
    diet_defineProperty(this, "fork", void 0);
    diet_defineProperty(this, "mug", void 0);
    diet_defineProperty(this, "seasoning", void 0);
    diet_defineProperty(this, "spleenValue", 0);
    this.mpa = mpa;
    this.fork = menu.find(item => item.item === template_string_$item(diet_templateObject16 || (diet_templateObject16 = diet_taggedTemplateLiteral(["Ol' Scratch's salad fork"]))));
    this.mug = menu.find(item => item.item === template_string_$item(diet_templateObject17 || (diet_templateObject17 = diet_taggedTemplateLiteral(["Frosty's frosty mug"]))));
    this.seasoning = menu.find(item => item.item === template_string_$item(diet_templateObject18 || (diet_templateObject18 = diet_taggedTemplateLiteral(["Special Seasoning"]))));
    this.mayoLookup = new Map();
    if (installed()) {
      var _loop = function _loop() {
        var mayo = _arr2[_i2];
        var menuItem = menu.find(item => item.item === mayo);
        if (menuItem) _this.mayoLookup.set(mayo, menuItem);
      };
      for (var _i2 = 0, _arr2 = [Mayo.flex, Mayo.zapine]; _i2 < _arr2.length; _i2++) {
        _loop();
      }
    }
    this.menu = menu.filter(item => item.organ);
    if (menu.filter(item => (0,external_kolmafia_namespaceObject.historicalPrice)(item.item) === 0 || (0,external_kolmafia_namespaceObject.historicalAge)(item.item) >= 1).length > 100) {
      (0,external_kolmafia_namespaceObject.mallPrices)("food");
      (0,external_kolmafia_namespaceObject.mallPrices)("booze");
    }
    var spleenItems = menu.filter(item => (0,external_kolmafia_namespaceObject.itemType)(item.item) === "spleen item");
    spleenItems.sort((x, y) => -(this.consumptionValue(x) / x.item.spleen - this.consumptionValue(y) / y.item.spleen));
    if (spleenItems.length > 0) {
      // Marginal value for sliders and jars depends on our best unlimited spleen item.
      // TODO: spleenLimit() - mySpleenUse() is a poor estimate.
      var bestMarginalSpleenItem = spleenItems.find(spleenItem => spleenItem.maximum === undefined || spleenItem.maximum * spleenItem.size >= (0,external_kolmafia_namespaceObject.spleenLimit)() - (0,external_kolmafia_namespaceObject.mySpleenUse)());
      if (bestMarginalSpleenItem) {
        this.spleenValue = Math.max(0, this.consumptionValue(bestMarginalSpleenItem) / bestMarginalSpleenItem.size);
      }
    }
  }
  /**
   * Determine the value of consuming a menu item with any profitable helpers.
   * @param menuItem Menu item to check.
   * @returns Value for consuming that menu item.
   */
  diet_createClass(DietPlanner, [{
    key: "consumptionValue",
    value: function consumptionValue(menuItem) {
      return this.consumptionHelpersAndValue(menuItem, {})[1];
    }
    /**
     * Determine which helpers will be used with a menu item and its resulting value.
     * @param menuItem Menu item to check.
     * @param overrideModifiers Overrides for consumption modifiers, if any.
     * @returns Pair [array of helpers and base menu item, value].
     */
  }, {
    key: "consumptionHelpersAndValue",
    value: function consumptionHelpersAndValue(menuItem, overrideModifiers) {
      var _menuItem$additionalV, _menuItem$additionalV2;
      var helpers = [];
      if ((0,external_kolmafia_namespaceObject.itemType)(menuItem.item) === "food" && this.mayoLookup.size) {
        var mayo = menuItem.mayo ? this.mayoLookup.get(menuItem.mayo) : this.mayoLookup.get(Mayo.flex);
        if (mayo) helpers.push(mayo);
      }
      var defaultModifiers = diet_objectSpread({
        forkMug: false,
        seasoning: this.seasoning ? helpers.includes(this.seasoning) : false,
        mayoflex: this.mayoLookup.size ? helpers.some(item => item.item === Mayo.flex) : false,
        refinedPalate: lib_have(template_string_$effect(diet_templateObject19 || (diet_templateObject19 = diet_taggedTemplateLiteral(["Refined Palate"])))),
        garish: lib_have(template_string_$effect(diet_templateObject20 || (diet_templateObject20 = diet_taggedTemplateLiteral(["Gar-ish"])))),
        saucemaven: lib_have($skill(diet_templateObject21 || (diet_templateObject21 = diet_taggedTemplateLiteral(["Saucemaven"])))),
        pinkyRing: lib_have(template_string_$item(diet_templateObject22 || (diet_templateObject22 = diet_taggedTemplateLiteral(["mafia pinky ring"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(diet_templateObject23 || (diet_templateObject23 = diet_taggedTemplateLiteral(["mafia pinky ring"])))),
        tuxedoShirt: lib_have(template_string_$item(diet_templateObject24 || (diet_templateObject24 = diet_taggedTemplateLiteral(["tuxedo shirt"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(diet_templateObject25 || (diet_templateObject25 = diet_taggedTemplateLiteral(["tuxedo shirt"]))))
      }, overrideModifiers);
      if (this.seasoning && (0,external_kolmafia_namespaceObject.itemType)(menuItem.item) === "food" && this.mpa * (_expectedAdventures(menuItem.item, diet_objectSpread(diet_objectSpread({}, defaultModifiers), {}, {
        seasoning: true
      })) - _expectedAdventures(menuItem.item, diet_objectSpread(diet_objectSpread({}, defaultModifiers), {}, {
        seasoning: false
      }))) > (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(diet_templateObject26 || (diet_templateObject26 = diet_taggedTemplateLiteral(["Special Seasoning"]))))) {
        helpers.push(this.seasoning);
      }
      var forkMug = (0,external_kolmafia_namespaceObject.itemType)(menuItem.item) === "food" ? this.fork : (0,external_kolmafia_namespaceObject.itemType)(menuItem.item) === "booze" ? this.mug : null;
      var forkMugPrice = forkMug ? forkMug.price() : Infinity;
      var baseCost = menuItem.price() + utils_sum(helpers, item => item.price());
      var valueRaw = _expectedAdventures(menuItem.item, defaultModifiers) * this.mpa - baseCost + ((_menuItem$additionalV = menuItem.additionalValue) !== null && _menuItem$additionalV !== void 0 ? _menuItem$additionalV : 0);
      var valueForkMug = _expectedAdventures(menuItem.item, diet_objectSpread(diet_objectSpread({}, defaultModifiers), {}, {
        forkMug: true
      })) * this.mpa - baseCost - forkMugPrice + ((_menuItem$additionalV2 = menuItem.additionalValue) !== null && _menuItem$additionalV2 !== void 0 ? _menuItem$additionalV2 : 0);
      var valueSpleen = template_string_$items(diet_templateObject27 || (diet_templateObject27 = diet_taggedTemplateLiteral(["jar of fermented pickle juice, extra-greasy slider"]))).includes(menuItem.item) ? 5 * this.spleenValue : 0;
      return forkMug && valueForkMug > valueRaw ? [[].concat(helpers, [forkMug, menuItem]), valueForkMug + valueSpleen] : [[].concat(helpers, [menuItem]), valueRaw + valueSpleen];
    }
    /**
     * Plan an individual organ.
     * @param capacity Organ capacity.
     * @param overrideModifiers Overrides for consumption modifiers, if any.
     * @returns Pair of [value, menu items and quantities].
     */
  }, {
    key: "planOrgan",
    value: function planOrgan(organ, capacity) {
      var overrideModifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var submenu = this.menu.filter(menuItem => menuItem.organ === organ && (0,external_kolmafia_namespaceObject.myLevel)() >= menuItem.item.levelreq);
      var knapsackValues = submenu.map(menuItem => [].concat(diet_toConsumableArray(this.consumptionHelpersAndValue(menuItem, overrideModifiers)), [menuItem.size, menuItem.maximum]));
      return knapsack(knapsackValues, capacity);
    }
    /**
     * Plan organs.
     * @param organCapacities Organ capacities.
     * @param overrideModifiers Overrides for consumption modifiers, if any.
     * @returns Pair of [value, menu items and quantities].
     */
  }, {
    key: "planOrgans",
    value: function planOrgans(organCapacities) {
      var _ref5;
      var overrideModifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var valuePlans = organCapacities.map(_ref => {
        var _ref2 = diet_slicedToArray(_ref, 2),
          organ = _ref2[0],
          capacity = _ref2[1];
        return this.planOrgan(organ, capacity, overrideModifiers);
      });
      return [utils_sum(valuePlans, _ref3 => {
        var _ref4 = diet_slicedToArray(_ref3, 1),
          value = _ref4[0];
        return value;
      }), (_ref5 = []).concat.apply(_ref5, diet_toConsumableArray(valuePlans.map(_ref6 => {
        var _ref7 = diet_slicedToArray(_ref6, 2),
          plan = _ref7[1];
        return plan;
      })))];
    }
    /**
     * Plan organs, retrying with and without each trial item. Runtime is
     * proportional to 2 ^ trialItems.length.
     * @param organCapacities Organ capacities.
     * @param trialItems Items to rerun solver with and without.
     * @param overrideModifiers Overrides for consumption modifiers, if any.
     * @returns Pair of [value, menu items and quantities].
     */
  }, {
    key: "planOrgansWithTrials",
    value: function planOrgansWithTrials(organCapacities, trialItems, overrideModifiers) {
      if (trialItems.length === 0) {
        return this.planOrgans(organCapacities, overrideModifiers);
      }
      var _trialItems$ = diet_slicedToArray(trialItems[0], 2),
        trialItem = _trialItems$[0],
        organSizes = _trialItems$[1];
      if (trialItem.maximum !== undefined && trialItem.maximum <= 0) {
        return this.planOrgansWithTrials(organCapacities, trialItems.slice(1), overrideModifiers);
      }
      var organCapacitiesWithMap = new Map(organCapacities);
      var _iterator = diet_createForOfIteratorHelper(organSizes),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = diet_slicedToArray(_step.value, 2),
            organ = _step$value[0],
            size = _step$value[1];
          var current = organCapacitiesWithMap.get(organ);
          if (current !== undefined) {
            organCapacitiesWithMap.set(organ, current - size);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var organCapacitiesWith = diet_toConsumableArray(organCapacitiesWithMap);
      var isRefinedPalate = trialItem.item === template_string_$item(diet_templateObject28 || (diet_templateObject28 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === template_string_$effect(diet_templateObject29 || (diet_templateObject29 = diet_taggedTemplateLiteral(["Refined Palate"]))) || trialItem.item === template_string_$item(diet_templateObject30 || (diet_templateObject30 = diet_taggedTemplateLiteral(["toasted brie"])));
      var isGarish = trialItem.item === template_string_$item(diet_templateObject31 || (diet_templateObject31 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === template_string_$effect(diet_templateObject32 || (diet_templateObject32 = diet_taggedTemplateLiteral(["Gar-ish"]))) || trialItem.item === template_string_$item(diet_templateObject33 || (diet_templateObject33 = diet_taggedTemplateLiteral(["potion of the field gar"])));
      var _this$planOrgansWithT = this.planOrgansWithTrials(organCapacities, trialItems.slice(1), overrideModifiers),
        _this$planOrgansWithT2 = diet_slicedToArray(_this$planOrgansWithT, 2),
        valueWithout = _this$planOrgansWithT2[0],
        planWithout = _this$planOrgansWithT2[1];
      var _this$planOrgansWithT3 = this.planOrgansWithTrials(organCapacitiesWith, trialItems.slice(1), diet_objectSpread(diet_objectSpread(diet_objectSpread({}, overrideModifiers), isRefinedPalate ? {
          refinedPalate: true
        } : {}), isGarish ? {
          garish: true
        } : {})),
        _this$planOrgansWithT4 = diet_slicedToArray(_this$planOrgansWithT3, 2),
        valueWith = _this$planOrgansWithT4[0],
        planWith = _this$planOrgansWithT4[1];
      var _this$consumptionHelp = this.consumptionHelpersAndValue(trialItem, {}),
        _this$consumptionHelp2 = diet_slicedToArray(_this$consumptionHelp, 2),
        helpersAndItem = _this$consumptionHelp2[0],
        value = _this$consumptionHelp2[1];
      return valueWithout > valueWith + value ? [valueWithout, planWithout] : [valueWith + value, [].concat(diet_toConsumableArray(planWith), [[helpersAndItem, 1]])];
    }
  }]);
  return DietPlanner;
}();
/**
 * Because the knapsack solver is one-dimensional only, any items that touch
 * multiple organs have to be treated specially. What we do is run the knapsack
 * solver multiple times, trying with + without each interacting item.
 */
var interactingItems = [[template_string_$item(diet_templateObject34 || (diet_templateObject34 = diet_taggedTemplateLiteral(["spice melange"]))), [["food", -3], ["booze", -3]]], [template_string_$item(diet_templateObject35 || (diet_templateObject35 = diet_taggedTemplateLiteral(["Ultra Mega Sour Ball"]))), [["food", -3], ["booze", -3]]], [template_string_$item(diet_templateObject36 || (diet_templateObject36 = diet_taggedTemplateLiteral(["The Plumber's mushroom stew"]))), [["food", 3], ["booze", -1]]], [template_string_$item(diet_templateObject37 || (diet_templateObject37 = diet_taggedTemplateLiteral(["The Mad Liquor"]))), [["food", -1], ["booze", 3]]], [template_string_$item(diet_templateObject38 || (diet_templateObject38 = diet_taggedTemplateLiteral(["Doc Clock's thyme cocktail"]))), [["food", -2], ["booze", 4]]], [template_string_$item(diet_templateObject39 || (diet_templateObject39 = diet_taggedTemplateLiteral(["Mr. Burnsger"]))), [["food", 4], ["booze", -2]]], [template_string_$effect(diet_templateObject40 || (diet_templateObject40 = diet_taggedTemplateLiteral(["Refined Palate"]))), []], [template_string_$item(diet_templateObject41 || (diet_templateObject41 = diet_taggedTemplateLiteral(["toasted brie"]))), [["food", 2]]], [template_string_$effect(diet_templateObject42 || (diet_templateObject42 = diet_taggedTemplateLiteral(["Gar-ish"]))), []], [template_string_$item(diet_templateObject43 || (diet_templateObject43 = diet_taggedTemplateLiteral(["potion of the field gar"]))), []]];
/**
 * Plan out an optimal diet using a knapsack algorithm.
 * @param mpa Meat per adventure value.
 * @param menu Array of MenuItems to consider for diet purposes.
 * @param organCapacities Optional override of each organ's capacity.
 * @returns Array of [menu item and helpers, count].
 */
function planDiet(mpa, menu) {
  var organCapacities = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [["food", null], ["booze", null], ["spleen item", null]];
  // FIXME: Figure out a better way to handle overfull organs (e.g. coming out of Ed).
  var resolvedOrganCapacities = organCapacities.map(_ref8 => {
    var _ref9 = diet_slicedToArray(_ref8, 2),
      organ = _ref9[0],
      size = _ref9[1];
    return [organ, size !== null && size !== void 0 ? size : organ === "food" ? (0,external_kolmafia_namespaceObject.fullnessLimit)() - (0,external_kolmafia_namespaceObject.myFullness)() : organ === "booze" ? (0,external_kolmafia_namespaceObject.inebrietyLimit)() - (0,external_kolmafia_namespaceObject.myInebriety)() : organ === "spleen item" ? (0,external_kolmafia_namespaceObject.spleenLimit)() - (0,external_kolmafia_namespaceObject.mySpleenUse)() : 0];
  });
  /**
   * Per above description, separate out items with cross-organ interaction
   * ("interacting items") for special treatment. These will be checked by
   * running the solver several times.
   */
  var includedInteractingItems = menu.map(menuItem => {
    var interacting = interactingItems.find(_ref10 => {
      var _ref11 = diet_slicedToArray(_ref10, 1),
        itemOrEffect = _ref11[0];
      return menuItem.item === itemOrEffect || menuItem.item === template_string_$item(diet_templateObject44 || (diet_templateObject44 = diet_taggedTemplateLiteral(["pocket wish"]))) && menuItem.effect === itemOrEffect;
    });
    if (interacting) {
      var _interacting = diet_slicedToArray(interacting, 2),
        organSizes = _interacting[1];
      return [menuItem, organSizes];
    } else {
      return null;
    }
  }).filter(value => value !== null);
  // Filter out interacting items from natural consideration.
  var dietPlanner = new DietPlanner(mpa, menu.filter(menuItem => !includedInteractingItems.some(_ref12 => {
    var _ref13 = diet_slicedToArray(_ref12, 1),
      interacting = _ref13[0];
    return interacting === menuItem;
  })));
  /**
   * Because our knapsack solver is one-dimensional, we have to consider
   * each organ separately. Since there are no spleen items that affect
   * stomach/liver, we consider those two first, with an approximation of the
   * value of spleen-cleaning. Afterwards, we see how much spleen we have and
   * plan that.
   */
  var _dietPlanner$planOrga = dietPlanner.planOrgansWithTrials(resolvedOrganCapacities.filter(_ref14 => {
      var _ref15 = diet_slicedToArray(_ref14, 2),
        organ = _ref15[0],
        capacity = _ref15[1];
      return ["food", "booze"].includes(organ) && capacity >= 0;
    }), includedInteractingItems, {}),
    _dietPlanner$planOrga2 = diet_slicedToArray(_dietPlanner$planOrga, 2),
    planFoodBooze = _dietPlanner$planOrga2[1];
  var spleenCapacity = resolvedOrganCapacities.find(_ref16 => {
    var _ref17 = diet_slicedToArray(_ref16, 1),
      organ = _ref17[0];
    return organ === "spleen item";
  });
  if (spleenCapacity) {
    // Count sliders and pickle juice, figure out how much extra spleen we got.
    var additionalSpleen = utils_sum(planFoodBooze, _ref18 => {
      var _ref19 = diet_slicedToArray(_ref18, 2),
        items = _ref19[0],
        number = _ref19[1];
      return items.some(menuItem => template_string_$items(diet_templateObject45 || (diet_templateObject45 = diet_taggedTemplateLiteral(["jar of fermented pickle juice, extra-greasy slider"]))).includes(menuItem.item)) ? 5 * number : 0;
    });
    var _spleenCapacity = diet_slicedToArray(spleenCapacity, 2),
      availableSpleen = _spleenCapacity[1];
    var _dietPlanner$planOrga3 = dietPlanner.planOrgan("spleen item", availableSpleen + additionalSpleen),
      _dietPlanner$planOrga4 = diet_slicedToArray(_dietPlanner$planOrga3, 2),
      planSpleen = _dietPlanner$planOrga4[1];
    return [].concat(diet_toConsumableArray(planFoodBooze), diet_toConsumableArray(planSpleen));
  } else {
    return planFoodBooze;
  }
}
var DietEntry = /*#__PURE__*/function () {
  function DietEntry(menuItems, quantity) {
    diet_classCallCheck(this, DietEntry);
    diet_defineProperty(this, "menuItems", void 0);
    diet_defineProperty(this, "quantity", void 0);
    this.menuItems = menuItems;
    this.quantity = quantity;
  }
  diet_createClass(DietEntry, [{
    key: "target",
    value: function target() {
      return this.menuItems[this.menuItems.length - 1];
    }
  }, {
    key: "helpers",
    value: function helpers() {
      if (this.menuItems.length > 1) {
        return this.menuItems.slice(0, -1);
      }
      return [];
    }
  }, {
    key: "expectedAdventures",
    value: function expectedAdventures(diet) {
      {
        if (this.menuItems.length === 0 || this.quantity === 0) {
          return 0;
        } else {
          var items = this.menuItems.map(m => m.item);
          var targetItem = this.menuItems[this.menuItems.length - 1].item;
          var fork = (0,external_kolmafia_namespaceObject.itemType)(targetItem) === "food" && items.includes(template_string_$item(diet_templateObject46 || (diet_templateObject46 = diet_taggedTemplateLiteral(["Ol' Scratch's salad fork"]))));
          var mug = (0,external_kolmafia_namespaceObject.itemType)(targetItem) === "booze" && items.includes(template_string_$item(diet_templateObject47 || (diet_templateObject47 = diet_taggedTemplateLiteral(["Frosty's frosty mug"]))));
          return this.quantity * _expectedAdventures(this.menuItems[this.menuItems.length - 1].item, {
            forkMug: fork || mug,
            seasoning: items.includes(template_string_$item(diet_templateObject48 || (diet_templateObject48 = diet_taggedTemplateLiteral(["Special Seasoning"])))),
            mayoflex: items.includes(Mayo.flex),
            refinedPalate: diet.refinedPalate,
            garish: diet.garish,
            saucemaven: diet.saucemaven,
            pinkyRing: diet.pinkyRing,
            tuxedoShirt: diet.tuxedoShirt
          });
        }
      }
    }
  }, {
    key: "expectedValue",
    value: function expectedValue(mpa, diet) {
      var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "gross";
      var gross = mpa * this.expectedAdventures(diet) + this.quantity * sumNumbers(this.menuItems.map(menuItem => {
        var _menuItem$additionalV3;
        return (_menuItem$additionalV3 = menuItem.additionalValue) !== null && _menuItem$additionalV3 !== void 0 ? _menuItem$additionalV3 : 0;
      }));
      if (method === "gross") {
        return gross;
      } else {
        return gross - this.expectedPrice();
      }
    }
  }, {
    key: "expectedPrice",
    value: function expectedPrice() {
      return this.quantity * sumNumbers(this.menuItems.map(menuItem => menuItem.price()));
    }
  }]);
  return DietEntry;
}();
/**
 * A representation of a potential diet
 */
var Diet = /*#__PURE__*/function () {
  function Diet() {
    var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    diet_classCallCheck(this, Diet);
    diet_defineProperty(this, "entries", void 0);
    this.entries = entries;
  }
  diet_createClass(Diet, [{
    key: "refinedPalate",
    get: function get() {
      return this.entries.some(dietEntry => dietEntry.menuItems.some(trialItem => trialItem.item === template_string_$item(_templateObject49 || (_templateObject49 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === template_string_$effect(_templateObject50 || (_templateObject50 = diet_taggedTemplateLiteral(["Refined Palate"]))) || trialItem.item === template_string_$item(_templateObject51 || (_templateObject51 = diet_taggedTemplateLiteral(["toasted brie"])))));
    }
  }, {
    key: "garish",
    get: function get() {
      return this.entries.some(dietEntry => dietEntry.menuItems.some(trialItem => trialItem.item === template_string_$item(_templateObject52 || (_templateObject52 = diet_taggedTemplateLiteral(["pocket wish"]))) && trialItem.effect === template_string_$effect(_templateObject53 || (_templateObject53 = diet_taggedTemplateLiteral(["Gar-ish"]))) || trialItem.item === template_string_$item(_templateObject54 || (_templateObject54 = diet_taggedTemplateLiteral(["potion of the field gar"])))));
    }
  }, {
    key: "saucemaven",
    get: function get() {
      return lib_have($skill(_templateObject55 || (_templateObject55 = diet_taggedTemplateLiteral(["Saucemaven"]))));
    }
  }, {
    key: "tuxedoShirt",
    get: function get() {
      return lib_have(template_string_$item(_templateObject56 || (_templateObject56 = diet_taggedTemplateLiteral(["tuxedo shirt"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(_templateObject57 || (_templateObject57 = diet_taggedTemplateLiteral(["tuxedo shirt"]))));
    }
  }, {
    key: "pinkyRing",
    get: function get() {
      return lib_have(template_string_$item(_templateObject58 || (_templateObject58 = diet_taggedTemplateLiteral(["mafia pinky ring"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(_templateObject59 || (_templateObject59 = diet_taggedTemplateLiteral(["mafia pinky ring"]))));
    }
  }, {
    key: "expectedAdventures",
    value: function expectedAdventures() {
      return sumNumbers(this.entries.map(dietEntry => dietEntry.expectedAdventures(this)));
    }
  }, {
    key: "expectedValue",
    value: function expectedValue(mpa) {
      var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "gross";
      return sumNumbers(this.entries.map(dietEntry => dietEntry.expectedValue(mpa, this, method)));
    }
  }, {
    key: "expectedPrice",
    value: function expectedPrice() {
      return sumNumbers(this.entries.map(dietEntry => dietEntry.expectedPrice()));
    }
  }, {
    key: "copy",
    value: function copy() {
      return new Diet(diet_toConsumableArray(this.entries));
    }
  }], [{
    key: "from",
    value: function from(rawDiet) {
      var diet = rawDiet.map(item => {
        var _item = diet_slicedToArray(item, 2),
          menuItems = _item[0],
          quantity = _item[1];
        return new DietEntry(menuItems, quantity);
      });
      return new Diet(diet);
    }
  }, {
    key: "plan",
    value: function plan(mpa, menu) {
      var organCapacities = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        food: "auto",
        booze: "auto",
        spleen: "auto"
      };
      var food = organCapacities.food,
        booze = organCapacities.booze,
        spleen = organCapacities.spleen;
      var plannerCapacity = [];
      if (food) {
        plannerCapacity.push(["food", food === "auto" ? null : food]);
      }
      if (booze) {
        plannerCapacity.push(["booze", booze === "auto" ? null : booze]);
      }
      if (spleen) {
        plannerCapacity.push(["spleen item", spleen === "auto" ? null : spleen]);
      }
      return Diet.from(planDiet(mpa, menu, plannerCapacity));
    }
  }]);
  return Diet;
}();
;// CONCATENATED MODULE: ./node_modules/libram/dist/session.js
var session_templateObject, session_templateObject2, session_templateObject3, session_templateObject4, session_templateObject5, session_templateObject6, session_templateObject7, session_templateObject8, session_templateObject9, session_templateObject10, session_templateObject11, session_templateObject12, session_templateObject13, session_templateObject14, session_templateObject15, session_templateObject16, session_templateObject17, session_templateObject18, session_templateObject19, session_templateObject20, session_templateObject21, session_templateObject22, session_templateObject23, session_templateObject24, session_templateObject25, session_templateObject26, session_templateObject27, session_templateObject28, session_templateObject29, session_templateObject30;
function session_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function session_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, session_toPropertyKey(descriptor.key), descriptor); } }
function session_createClass(Constructor, protoProps, staticProps) { if (protoProps) session_defineProperties(Constructor.prototype, protoProps); if (staticProps) session_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function session_defineProperty(obj, key, value) { key = session_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function session_toPropertyKey(arg) { var key = session_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function session_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function session_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = session_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function session_slicedToArray(arr, i) { return session_arrayWithHoles(arr) || session_iterableToArrayLimit(arr, i) || session_unsupportedIterableToArray(arr, i) || session_nonIterableRest(); }
function session_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function session_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function session_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function session_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function session_toConsumableArray(arr) { return session_arrayWithoutHoles(arr) || session_iterableToArray(arr) || session_unsupportedIterableToArray(arr) || session_nonIterableSpread(); }
function session_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function session_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return session_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return session_arrayLikeToArray(o, minLen); }
function session_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function session_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return session_arrayLikeToArray(arr); }
function session_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }




/**
 * Return a mapping of the session items, mapping foldable items to a single of their forms
 * @returns the item session results, with foldables mapped to a single of their folding forms
 */
function mySessionItemsWrapper() {
  var manyToOne = (primary, mapped) => mapped.map(target => [target, primary]);
  var foldable = item => manyToOne(item, getFoldGroup(item));
  var itemMappings = new Map([].concat(session_toConsumableArray(foldable(template_string_$item(session_templateObject || (session_templateObject = session_taggedTemplateLiteral(["liar's pants"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject2 || (session_templateObject2 = session_taggedTemplateLiteral(["ice pick"]))))), session_toConsumableArray(manyToOne(template_string_$item(session_templateObject3 || (session_templateObject3 = session_taggedTemplateLiteral(["Spooky Putty sheet"]))), [template_string_$item(session_templateObject4 || (session_templateObject4 = session_taggedTemplateLiteral(["Spooky Putty monster"])))].concat(session_toConsumableArray(getFoldGroup(template_string_$item(session_templateObject5 || (session_templateObject5 = session_taggedTemplateLiteral(["Spooky Putty sheet"])))))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject6 || (session_templateObject6 = session_taggedTemplateLiteral(["stinky cheese sword"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject7 || (session_templateObject7 = session_taggedTemplateLiteral(["naughty paper shuriken"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject8 || (session_templateObject8 = session_taggedTemplateLiteral(["Loathing Legion knife"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject9 || (session_templateObject9 = session_taggedTemplateLiteral(["deceased crimbo tree"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject10 || (session_templateObject10 = session_taggedTemplateLiteral(["makeshift turban"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject11 || (session_templateObject11 = session_taggedTemplateLiteral(["turtle wax shield"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject12 || (session_templateObject12 = session_taggedTemplateLiteral(["metallic foil bow"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject13 || (session_templateObject13 = session_taggedTemplateLiteral(["ironic moustache"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject14 || (session_templateObject14 = session_taggedTemplateLiteral(["bugged balaclava"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject15 || (session_templateObject15 = session_taggedTemplateLiteral(["toggle switch (Bartend)"]))))), session_toConsumableArray(foldable(template_string_$item(session_templateObject16 || (session_templateObject16 = session_taggedTemplateLiteral(["mushroom cap"]))))), session_toConsumableArray(manyToOne(template_string_$item(session_templateObject17 || (session_templateObject17 = session_taggedTemplateLiteral(["can of Rain-Doh"]))), template_string_$items(session_templateObject18 || (session_templateObject18 = session_taggedTemplateLiteral(["empty Rain-Doh can"]))))), session_toConsumableArray(manyToOne(template_string_$item(session_templateObject19 || (session_templateObject19 = session_taggedTemplateLiteral(["meteorite fragment"]))), template_string_$items(session_templateObject20 || (session_templateObject20 = session_taggedTemplateLiteral(["meteorite earring, meteorite necklace, meteorite ring"]))))), session_toConsumableArray(manyToOne(template_string_$item(session_templateObject21 || (session_templateObject21 = session_taggedTemplateLiteral(["Sneaky Pete's leather jacket"]))), template_string_$items(session_templateObject22 || (session_templateObject22 = session_taggedTemplateLiteral(["Sneaky Pete's leather jacket (collar popped)"]))))), session_toConsumableArray(manyToOne(template_string_$item(session_templateObject23 || (session_templateObject23 = session_taggedTemplateLiteral(["Boris's Helm"]))), template_string_$items(session_templateObject24 || (session_templateObject24 = session_taggedTemplateLiteral(["Boris's Helm (askew)"]))))), session_toConsumableArray(manyToOne(template_string_$item(session_templateObject25 || (session_templateObject25 = session_taggedTemplateLiteral(["Jarlsberg's pan"]))), template_string_$items(session_templateObject26 || (session_templateObject26 = session_taggedTemplateLiteral(["Jarlsberg's pan (Cosmic portal mode)"]))))), session_toConsumableArray(manyToOne(template_string_$item(session_templateObject27 || (session_templateObject27 = session_taggedTemplateLiteral(["tiny plastic sword"]))), template_string_$items(session_templateObject28 || (session_templateObject28 = session_taggedTemplateLiteral(["grogtini, bodyslam, dirty martini, vesper, cherry bomb, sangria del diablo"]))))), session_toConsumableArray(manyToOne(template_string_$item(session_templateObject29 || (session_templateObject29 = session_taggedTemplateLiteral(["earthenware muffin tin"]))), template_string_$items(session_templateObject30 || (session_templateObject30 = session_taggedTemplateLiteral(["blueberry muffin, bran muffin, chocolate chip muffin"])))))));
  var inventory = new Map();
  for (var _i = 0, _Object$entries = Object.entries((0,external_kolmafia_namespaceObject.mySessionItems)()); _i < _Object$entries.length; _i++) {
    var _itemMappings$get, _inventory$get;
    var _Object$entries$_i = session_slicedToArray(_Object$entries[_i], 2),
      itemStr = _Object$entries$_i[0],
      quantity = _Object$entries$_i[1];
    var item = (0,external_kolmafia_namespaceObject.toItem)(itemStr);
    var mappedItem = (_itemMappings$get = itemMappings.get(item)) !== null && _itemMappings$get !== void 0 ? _itemMappings$get : item;
    inventory.set(mappedItem, quantity + ((_inventory$get = inventory.get(mappedItem)) !== null && _inventory$get !== void 0 ? _inventory$get : 0));
  }
  return inventory;
}
/**
 * Performa a binary element-wise operation on two inventories
 * @param a The LHS inventory to perform the operation on
 * @param b The RHS inventory to perform the operation on
 * @param op an operator to compute between the sets
 * @param commutative if true use the value of b for any items not in a. if false, ignore values not in a
 * @returns a new map representing the combined inventories
 */
function inventoryOperation(a, b, op, commutative) {
  // return every entry that is in a and not in b
  var difference = new Map();
  var _iterator = session_createForOfIteratorHelper(a.entries()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _b$get;
      var _step$value = session_slicedToArray(_step.value, 2),
        _item = _step$value[0],
        _quantity = _step$value[1];
      var combinedQuantity = op(_quantity, (_b$get = b.get(_item)) !== null && _b$get !== void 0 ? _b$get : 0);
      difference.set(_item, combinedQuantity);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (commutative) {
    var _iterator2 = session_createForOfIteratorHelper(b.entries()),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = session_slicedToArray(_step2.value, 2),
          item = _step2$value[0],
          quantity = _step2$value[1];
        if (!a.has(item)) {
          difference.set(item, quantity);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  var diffEntries = session_toConsumableArray(difference.entries());
  return new Map(diffEntries.filter(value => value[1] !== 0));
}
/**
 * A wrapper around tracking items and meat gained from this session
 * Smartly handles foldables being added/removed based on their state
 * Provides operations to add sessions and subtract Sessions so you can isolate the value of each Session using a baseline
 * @member meat the raw meat associated with this Session
 * @member items a map representing the items gained/lost during this Session
 */
var session_Session = /*#__PURE__*/function () {
  /**
   * Construct a new session
   * @param meat the amount of meat associated with this session
   * @param items the items associated with this session
   */
  function Session(meat, items) {
    session_classCallCheck(this, Session);
    session_defineProperty(this, "meat", void 0);
    session_defineProperty(this, "items", void 0);
    this.meat = meat;
    this.items = items;
  }
  /**
   * Register session results that do not get tracked natively
   * @param target either the Item or a string saying "meat" of what quantity to modify
   * @param quantity How much to modify the tracked amount by
   */
  session_createClass(Session, [{
    key: "register",
    value: function register(target, quantity) {
      if (target === "meat") {
        this.meat += quantity;
      } else {
        var _this$items$get;
        this.items.set(target, ((_this$items$get = this.items.get(target)) !== null && _this$items$get !== void 0 ? _this$items$get : 0) + quantity);
      }
    }
    /**
     * Value this session
     * @param itemValue a function that, when given an item, will give a meat value of the item
     * @returns ItemResult with the full value of this session given the input function
     */
  }, {
    key: "value",
    value: function value(itemValue) {
      // TODO: add garbo specific pricing (sugar equipment for synth, etc.)
      var meat = Math.floor(this.meat);
      var itemDetails = session_toConsumableArray(this.items.entries()).map(_ref => {
        var _ref2 = session_slicedToArray(_ref, 2),
          item = _ref2[0],
          quantity = _ref2[1];
        return {
          item: item,
          quantity: quantity,
          value: itemValue(item) * quantity
        };
      });
      var items = Math.floor(sumNumbers(itemDetails.map(detail => detail.value)));
      return {
        meat: meat,
        items: items,
        total: meat + items,
        itemDetails: itemDetails
      };
    }
    /**
     * Subtract the contents of another session from this one, removing any items that have a resulting quantity of 0
     *  (this will ignore elements in b but not in a)
     * @param other the session from which to pull values to remove from this session
     * @returns a new session representing the difference between this session and the other session
     */
  }, {
    key: "diff",
    value: function diff(other) {
      return new Session(this.meat - other.meat, inventoryOperation(this.items, other.items, (a, b) => a - b, false));
    }
    /**
     * Subtract the contents of snasphot b from session a, removing any items that have a resulting quantity of 0
     *  (this will ignore elements in b but not in a)
     * @param a the session from which to subtract elements
     * @param b the session from which to add elements
     * @returns a new session representing the difference between a and b
     */
  }, {
    key: "add",
    value:
    /**
     * Generate a new session combining multiple sessions together
     * @param other the session from which to add elements to this set
     * @returns a new session representing the addition of other to this
     */
    function add(other) {
      return new Session(this.meat + other.meat, inventoryOperation(this.items, other.items, (a, b) => a + b, true));
    }
    /**
     * Combine the contents of sessions
     * @param sessions the set of sessions to combine together
     * @returns a new session representing the difference between a and b
     */
  }, {
    key: "toFile",
    value:
    /**
     * Export this session to a file in the data/ directory. Conventionally this file should end in ".json"
     * @param filename The file into which to export
     */
    function toFile(filename) {
      var val = {
        meat: this.meat,
        items: Object.fromEntries(this.items)
      };
      (0,external_kolmafia_namespaceObject.bufferToFile)(JSON.stringify(val), Session.getFilepath(filename));
    }
    /**
     * Import a session from a file in the data/ directory. Conventionally the file should end in ".json"
     * @param filename The file from which to import
     * @returns the session represented by the file
     */
  }], [{
    key: "diff",
    value: function diff(a, b) {
      return a.diff(b);
    }
  }, {
    key: "add",
    value: function add() {
      for (var _len = arguments.length, sessions = new Array(_len), _key = 0; _key < _len; _key++) {
        sessions[_key] = arguments[_key];
      }
      return sessions.reduce((previousSession, currentSession) => previousSession.add(currentSession));
    }
  }, {
    key: "getFilepath",
    value: function getFilepath(filename) {
      return filename.endsWith(".json") ? filename : "snapshots/".concat((0,external_kolmafia_namespaceObject.myName)(), "/").concat((0,external_kolmafia_namespaceObject.todayToString)(), "_").concat(filename, ".json");
    }
  }, {
    key: "fromFile",
    value: function fromFile(filename) {
      var fileValue = (0,external_kolmafia_namespaceObject.fileToBuffer)(Session.getFilepath(filename));
      // fileToBuffer returns empty string for files that don't exist
      if (fileValue.length > 0) {
        var val = JSON.parse(fileValue);
        var parsedItems = Object.entries(val.items).map(_ref3 => {
          var _ref4 = session_slicedToArray(_ref3, 2),
            itemStr = _ref4[0],
            quantity = _ref4[1];
          return [(0,external_kolmafia_namespaceObject.toItem)(itemStr), quantity];
        });
        return new Session(val.meat, new Map(parsedItems));
      } else {
        // if the file does not exist, return an empty session
        return new Session(0, new Map());
      }
    }
  }, {
    key: "current",
    value: function current() {
      return new Session((0,external_kolmafia_namespaceObject.mySessionMeat)(), mySessionItemsWrapper());
    }
  }]);
  return Session;
}();
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/args.js
function args_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = args_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function args_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return args_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return args_arrayLikeToArray(o, minLen); }
function args_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function args_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function args_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? args_ownKeys(Object(source), !0).forEach(function (key) { args_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : args_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function args_defineProperty(obj, key, value) { key = args_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function args_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function args_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, args_toPropertyKey(descriptor.key), descriptor); } }
function args_createClass(Constructor, protoProps, staticProps) { if (protoProps) args_defineProperties(Constructor.prototype, protoProps); if (staticProps) args_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function args_toPropertyKey(arg) { var key = args_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function args_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint-disable @typescript-eslint/no-explicit-any */

var Args = /*#__PURE__*/function () {
  function Args() {
    args_classCallCheck(this, Args);
  }
  args_createClass(Args, null, [{
    key: "custom",
    value: function custom(spec, _parser, valueHelpName) {
      var _a, _b;
      var raw_options = (_a = spec.options) === null || _a === void 0 ? void 0 : _a.map(option => option[0]);
      // Check that the default value actually appears in the options.
      if ("default" in spec && raw_options) {
        if (!raw_options.includes(spec.default)) {
          throw "Invalid default value ".concat(spec.default);
        }
      }
      return args_objectSpread(args_objectSpread({}, spec), {}, {
        valueHelpName: valueHelpName,
        parser: value => {
          var parsed_value = _parser(value);
          if (parsed_value === undefined || parsed_value instanceof ParseError) return parsed_value;
          if (raw_options) {
            if (!raw_options.includes(parsed_value)) {
              return new ParseError("received ".concat(value, " which was not in the allowed options"));
            }
          }
          return parsed_value;
        },
        options: (_b = spec.options) === null || _b === void 0 ? void 0 : _b.map(a => ["".concat(a[0]), a[1]])
      });
    }
  }, {
    key: "arrayFromArg",
    value: function arrayFromArg(spec, argFromSpec) {
      var _a, _b, _c;
      // First, construct a non-array version of this argument.
      // We do this by calling argFromSpec in order to extract the parser and
      // valueHelpName (to make it easier to define the functions below).
      //
      // The default argument of an ArraySpec is of type T[], which causes
      // problems, so we must remove it.
      var spec_without_default = args_objectSpread({}, spec); // Avoid "the operand of a 'delete' operator must be optional"
      if ("default" in spec_without_default) delete spec_without_default["default"];
      var arg = argFromSpec.call(this, spec_without_default);
      // Next, check that all default values actually appear in the options.
      var raw_options = (_a = spec.options) === null || _a === void 0 ? void 0 : _a.map(option => option[0]);
      if ("default" in spec && raw_options) {
        var _iterator = args_createForOfIteratorHelper(spec.default),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var default_entry = _step.value;
            if (!raw_options.includes(default_entry)) throw "Invalid default value ".concat(spec.default);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      var separator = (_b = spec.separator) !== null && _b !== void 0 ? _b : ",";
      var arrayParser = value => {
        // Split the array
        var values = value.split(separator);
        if (!spec.noTrim) values = values.map(v => v.trim());
        // Parse all values, return the first error found if any
        var result = values.map(v => arg.parser(v));
        var error = result.find(v => v instanceof ParseError);
        if (error) return error;
        var failure_index = result.indexOf(undefined);
        if (failure_index !== -1) return new ParseError("components expected ".concat(arg.valueHelpName, " but could not parse ").concat(values[failure_index]));
        // Otherwise, all values are good
        return result;
      };
      return args_objectSpread(args_objectSpread({}, spec), {}, {
        valueHelpName: "".concat(arg.valueHelpName).concat(separator, " ").concat(arg.valueHelpName).concat(separator, " ..."),
        parser: arrayParser,
        options: (_c = spec.options) === null || _c === void 0 ? void 0 : _c.map(a => ["".concat(a[0]), a[1]])
      });
    }
  }, {
    key: "string",
    value: function string(spec) {
      return this.custom(spec, value => value, "TEXT");
    }
  }, {
    key: "strings",
    value: function strings(spec) {
      return this.arrayFromArg(spec, this.string);
    }
  }, {
    key: "number",
    value: function number(spec) {
      return this.custom(spec, value => isNaN(Number(value)) ? undefined : Number(value), "NUMBER");
    }
  }, {
    key: "numbers",
    value: function numbers(spec) {
      return this.arrayFromArg(spec, this.number);
    }
  }, {
    key: "boolean",
    value: function boolean(spec) {
      return this.custom(spec, value => {
        if (value.toLowerCase() === "true") return true;
        if (value.toLowerCase() === "false") return false;
        return undefined;
      }, "BOOLEAN");
    }
  }, {
    key: "booleans",
    value: function booleans(spec) {
      return this.arrayFromArg(spec, this.boolean);
    }
  }, {
    key: "flag",
    value: function flag(spec) {
      return this.custom(spec, value => {
        if (value.toLowerCase() === "true") return true;
        if (value.toLowerCase() === "false") return false;
        return undefined;
      }, "FLAG");
    }
  }, {
    key: "class",
    value: function _class(spec) {
      return this.custom(spec, value => {
        var match = external_kolmafia_namespaceObject.Class.get(value);
        // Class.get does fuzzy matching:
        //  e.g. Class.get("sc") returns disco bandit.
        // To avoid this foot-gun, only return exact matches or id lookups.
        if (match.toString().toUpperCase() === value.toString().toUpperCase()) return match;
        if (!isNaN(Number(value))) return match;
        return undefined;
      }, "CLASS");
    }
  }, {
    key: "classes",
    value: function classes(spec) {
      return this.arrayFromArg(spec, this.class);
    }
  }, {
    key: "effect",
    value: function effect(spec) {
      return this.custom(spec, external_kolmafia_namespaceObject.Effect.get, "EFFECT");
    }
  }, {
    key: "effects",
    value: function effects(spec) {
      return this.arrayFromArg(spec, this.effect);
    }
  }, {
    key: "familiar",
    value: function familiar(spec) {
      return this.custom(spec, external_kolmafia_namespaceObject.Familiar.get, "FAMILIAR");
    }
  }, {
    key: "familiars",
    value: function familiars(spec) {
      return this.arrayFromArg(spec, this.familiar);
    }
  }, {
    key: "item",
    value: function item(spec) {
      return this.custom(spec, external_kolmafia_namespaceObject.Item.get, "ITEM");
    }
  }, {
    key: "items",
    value: function items(spec) {
      return this.arrayFromArg(spec, this.item);
    }
  }, {
    key: "location",
    value: function location(spec) {
      return this.custom(spec, external_kolmafia_namespaceObject.Location.get, "LOCATION");
    }
  }, {
    key: "locations",
    value: function locations(spec) {
      return this.arrayFromArg(spec, this.location);
    }
  }, {
    key: "monster",
    value: function monster(spec) {
      return this.custom(spec, external_kolmafia_namespaceObject.Monster.get, "MONSTER");
    }
  }, {
    key: "monsters",
    value: function monsters(spec) {
      return this.arrayFromArg(spec, this.monster);
    }
  }, {
    key: "path",
    value: function path(spec) {
      return this.custom(spec, external_kolmafia_namespaceObject.Path.get, "PATH");
    }
  }, {
    key: "paths",
    value: function paths(spec) {
      return this.arrayFromArg(spec, this.path);
    }
  }, {
    key: "skill",
    value: function skill(spec) {
      return this.custom(spec, external_kolmafia_namespaceObject.Skill.get, "SKILL");
    }
  }, {
    key: "skills",
    value: function skills(spec) {
      return this.arrayFromArg(spec, this.skill);
    }
    /**
     * Create a group of arguments that will be printed separately in the help.
     *
     * Note that keys in the group must still be globally distinct.
     *
     * @param groupName The display name for the group in help.
     * @param args A JS object specifying the script arguments. Its values should
     *    be {@link Arg} objects (created by Args.string, Args.number, or others)
     *    or groups of arguments (created by Args.group).
     */
  }, {
    key: "group",
    value: function group(groupName, args) {
      return {
        name: groupName,
        args: args
      };
    }
    /**
     * Create a set of input arguments for a script.
     * @param scriptName Prefix for property names; often the name of the script.
     * @param scriptHelp Brief description of this script, for the help message.
     * @param args A JS object specifying the script arguments. Its values should
     *    be {@link Arg} objects (created by Args.string, Args.number, or others)
     *    or groups of arguments (created by Args.group).
     * @param options Config options for the args and arg parser.
     * @returns An object which can hold parsed argument values. The keys of this
     *    object are identical to the keys in 'args'.
     */
  }, {
    key: "create",
    value: function create(scriptName, scriptHelp, args, options) {
      var _objectSpread2;
      _traverse(args, (keySpec, key) => {
        if (key === "help" || keySpec.key === "help") throw "help is a reserved argument name";
      });
      var argsWithHelp = args_objectSpread(args_objectSpread({}, args), {}, {
        help: this.flag({
          help: "Show this message and exit.",
          setting: ""
        })
      });
      // Create an object to hold argument results, with a default value for
      // each argument.
      var res = args_objectSpread(args_objectSpread({}, _loadDefaultValues(argsWithHelp)), {}, (_objectSpread2 = {}, args_defineProperty(_objectSpread2, specSymbol, argsWithHelp), args_defineProperty(_objectSpread2, scriptSymbol, scriptName), args_defineProperty(_objectSpread2, scriptHelpSymbol, scriptHelp), args_defineProperty(_objectSpread2, optionsSymbol, options !== null && options !== void 0 ? options : {}), _objectSpread2));
      if (options === null || options === void 0 ? void 0 : options.positionalArgs) {
        var keys = [];
        var metadata = Args.getMetadata(res);
        metadata.traverse((keySpec, key) => {
          var _a;
          keys.push((_a = keySpec.key) !== null && _a !== void 0 ? _a : key);
        });
        var _iterator2 = args_createForOfIteratorHelper(options.positionalArgs),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var arg = _step2.value;
            if (!keys.includes(arg)) throw "Unknown key for positional arg: ".concat(arg);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      return res;
    }
    /**
     * Parse the command line input into the provided script arguments.
     * @param args An object to hold the parsed argument values, from Args.create(*).
     * @param command The command line input.
     * @param includeSettings If true, parse values from settings as well.
     */
  }, {
    key: "fill",
    value: function fill(args, command) {
      var includeSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var _a;
      var metadata = Args.getMetadata(args);
      // Load the list of keys and flags from the arg spec
      var keys = new Set();
      var flags = new Set();
      metadata.traverse((keySpec, key) => {
        var _a;
        var name = (_a = keySpec.key) !== null && _a !== void 0 ? _a : key;
        if (flags.has(name) || keys.has(name)) throw "Duplicate arg key ".concat(name, " is not allowed");
        if (keySpec.valueHelpName === "FLAG") flags.add(name);else keys.add(name);
      });
      // Parse values from settings.
      if (includeSettings) {
        metadata.traverseAndMaybeSet(args, (keySpec, key) => {
          var _a, _b;
          var setting = (_a = keySpec.setting) !== null && _a !== void 0 ? _a : "".concat(metadata.scriptName, "_").concat((_b = keySpec.key) !== null && _b !== void 0 ? _b : key);
          if (setting === "") return undefined; // no setting
          var value_str = (0,external_kolmafia_namespaceObject.getProperty)(setting);
          if (value_str === "") return undefined; // no setting
          return parseAndValidate(keySpec, "Setting ".concat(setting), value_str);
        });
      }
      // Parse new argments from the command line
      if (command === undefined || command === "") return;
      var parsed = new CommandParser(command, keys, flags, (_a = metadata.options.positionalArgs) !== null && _a !== void 0 ? _a : []).parse();
      metadata.traverseAndMaybeSet(args, (keySpec, key) => {
        var _a;
        var argKey = (_a = keySpec.key) !== null && _a !== void 0 ? _a : key;
        var value_str = parsed.get(argKey);
        if (value_str === undefined) return undefined; // no setting
        return parseAndValidate(keySpec, "Argument ".concat(argKey), value_str);
      });
    }
    /**
     * Parse command line input into a new set of script arguments.
     * @param scriptName Prefix to use in property names; typically the name of the script.
     * @param scriptHelp Brief description of this script, for the help message.
     * @param spec An object specifying the script arguments.
     * @param command The command line input.
     * @param options Config options for the args and arg parser.
     */
  }, {
    key: "parse",
    value: function parse(scriptName, scriptHelp, spec, command, options) {
      var args = this.create(scriptName, scriptHelp, spec, options);
      this.fill(args, command);
      return args;
    }
    /**
     * Print a description of the script arguments to the CLI.
     *
     * First, all top-level argument descriptions are printed in the order they
     * were defined. Afterwards, descriptions for groups of arguments are printed
     * in the order they were defined.
     *
     * @param args An object of parsed arguments, from Args.create(*).
     * @param maxOptionsToDisplay If given, do not list more than this many options for each arg.
     */
  }, {
    key: "showHelp",
    value: function showHelp(args, maxOptionsToDisplay) {
      var _a;
      var metadata = Args.getMetadata(args);
      (0,external_kolmafia_namespaceObject.printHtml)("".concat(metadata.scriptHelp));
      (0,external_kolmafia_namespaceObject.printHtml)("");
      (0,external_kolmafia_namespaceObject.printHtml)("<b>".concat((_a = metadata.options.defaultGroupName) !== null && _a !== void 0 ? _a : "Options", ":</b>"));
      metadata.traverse((arg, key) => {
        var _a, _b, _c, _d, _e;
        if (arg.hidden) return;
        var nameText = "<font color='".concat((0,external_kolmafia_namespaceObject.isDarkMode)() ? "yellow" : "blue", "'>").concat((_a = arg.key) !== null && _a !== void 0 ? _a : key, "</font>");
        var valueText = arg.valueHelpName === "FLAG" ? "" : "<font color='purple'>".concat(arg.valueHelpName, "</font>");
        var helpText = (_b = arg.help) !== null && _b !== void 0 ? _b : "";
        var defaultText = "default" in arg ? "<font color='#888888'>[default: ".concat(arg.default, "]</font>") : "";
        var settingText = arg.setting === "" ? "" : "<font color='#888888'>[setting: ".concat((_c = arg.setting) !== null && _c !== void 0 ? _c : "".concat(metadata.scriptName, "_").concat((_d = arg.key) !== null && _d !== void 0 ? _d : key), "]</font>");
        (0,external_kolmafia_namespaceObject.printHtml)("&nbsp;&nbsp;".concat([nameText, valueText, "-", helpText, defaultText, settingText].join(" ")));
        var valueOptions = (_e = arg.options) !== null && _e !== void 0 ? _e : [];
        if (valueOptions.length < (maxOptionsToDisplay !== null && maxOptionsToDisplay !== void 0 ? maxOptionsToDisplay : Number.MAX_VALUE)) {
          var _iterator3 = args_createForOfIteratorHelper(valueOptions),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var option = _step3.value;
              if (option.length === 1 || option[1] === undefined) {
                (0,external_kolmafia_namespaceObject.printHtml)("&nbsp;&nbsp;&nbsp;&nbsp;<font color='blue'>".concat(nameText, "</font> ").concat(option[0]));
              } else {
                (0,external_kolmafia_namespaceObject.printHtml)("&nbsp;&nbsp;&nbsp;&nbsp;<font color='blue'>".concat(nameText, "</font> ").concat(option[0], " - ").concat(option[1]));
              }
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      }, group => {
        (0,external_kolmafia_namespaceObject.printHtml)("");
        (0,external_kolmafia_namespaceObject.printHtml)("<b>".concat(group.name, ":</b>"));
      });
    }
    /**
     * Load the metadata information for a set of arguments. Only for advanced usage.
     *
     * @param args A JS object specifying the script arguments. Its values should
     *    be {@link Arg} objects (created by Args.string, Args.number, or others)
     *    or groups of arguments (created by Args.group).
     * @returns A class containing metadata information.
     */
  }, {
    key: "getMetadata",
    value: function getMetadata(args) {
      return new WrappedArgMetadata(args);
    }
  }]);
  return Args;
}();
var ParseError = /*#__PURE__*/args_createClass(function ParseError(message) {
  args_classCallCheck(this, ParseError);
  this.message = message;
});
/**
 * Metadata for the parsed arguments.
 *
 * This information is hidden within the parsed argument object so that it
 * is invisible to the user but available to fill(*) and showHelp(*).
 */
var specSymbol = Symbol("spec");
var scriptSymbol = Symbol("script");
var scriptHelpSymbol = Symbol("scriptHelp");
var optionsSymbol = Symbol("options");
/**
 * Parse a string into a value for a given argument, throwing if the parsing fails.
 * @param arg An argument that takes values in T.
 * @param source A description of where this value came from, for the error message.
 * @param value The value to parse.
 * @returns the parsed value.
 */
function parseAndValidate(arg, source, value) {
  var parsed_value;
  try {
    parsed_value = arg.parser(value);
  } catch (_a) {
    parsed_value = undefined;
  }
  if (parsed_value === undefined) throw "".concat(source, " expected ").concat(arg.valueHelpName, " but could not parse ").concat(value);
  if (parsed_value instanceof ParseError) throw "".concat(source, " ").concat(parsed_value.message);
  return parsed_value;
}
/**
 * A class that reveals the hidden metadata and specs for arguments.
 *
 * Only for advanced usage.
 */
var WrappedArgMetadata = /*#__PURE__*/function () {
  function WrappedArgMetadata(args) {
    args_classCallCheck(this, WrappedArgMetadata);
    this.spec = args[specSymbol];
    this.scriptName = args[scriptSymbol];
    this.scriptHelp = args[scriptHelpSymbol];
    this.options = args[optionsSymbol];
  }
  /**
   * Create a parsed args object from this spec using all default values.
   */
  args_createClass(WrappedArgMetadata, [{
    key: "loadDefaultValues",
    value: function loadDefaultValues() {
      return _loadDefaultValues(this.spec);
    }
    /**
     * Traverse the spec and possibly generate a value for each argument.
     *
     * @param result The object to hold the resulting argument values, typically
     *    the result of loadDefaultValues().
     * @param setTo A function to generate an argument value from each arg spec.
     *    If this function returns undefined, then the argument value is unchanged.
     */
  }, {
    key: "traverseAndMaybeSet",
    value: function traverseAndMaybeSet(result, setTo) {
      return _traverseAndMaybeSet(this.spec, result, setTo);
    }
    /**
     * Traverse the spec and call a method for each argument.
     *
     * @param process A function to call at each arg spec.
     */
  }, {
    key: "traverse",
    value: function traverse(process, onGroup) {
      return _traverse(this.spec, process, onGroup);
    }
  }]);
  return WrappedArgMetadata;
}();
/**
 * Create a parsed args object from a spec using all default values.
 *
 * @param spec The spec for all arguments.
 */
function _loadDefaultValues(spec) {
  var result = {};
  for (var k in spec) {
    var argSpec = spec[k];
    if ("args" in argSpec) {
      result[k] = _loadDefaultValues(argSpec.args);
    } else {
      if ("default" in argSpec) result[k] = argSpec.default;else result[k] = undefined;
    }
  }
  return result;
}
/**
 * Traverse the spec and possibly generate a value for each argument.
 *
 * @param spec The spec for all arguments.
 * @param result The object to hold the resulting argument values.
 * @param setTo A function to generate an argument value from each arg spec.
 *    If this function returns undefined, then the argument value is unchanged.
 */
function _traverseAndMaybeSet(spec, result, setTo) {
  var groups = [];
  for (var k in spec) {
    var argSpec = spec[k];
    if ("args" in argSpec) {
      groups.push([argSpec, k]);
    } else {
      var value = setTo(argSpec, k);
      if (value === undefined) continue;
      result[k] = value;
    }
  }
  for (var _i = 0, _groups = groups; _i < _groups.length; _i++) {
    var group_and_key = _groups[_i];
    _traverseAndMaybeSet(group_and_key[0].args, result[group_and_key[1]], setTo);
  }
}
/**
 * Traverse the spec and possibly generate a value for each argument.
 *
 * @param spec The spec for all arguments.
 * @param process A function to call at each arg spec.
 */
function _traverse(spec, process, onGroup) {
  var groups = [];
  for (var k in spec) {
    var argSpec = spec[k];
    if ("args" in argSpec) {
      groups.push([argSpec, k]);
    } else {
      process(argSpec, k);
    }
  }
  for (var _i2 = 0, _groups2 = groups; _i2 < _groups2.length; _i2++) {
    var group_and_key = _groups2[_i2];
    onGroup === null || onGroup === void 0 ? void 0 : onGroup(group_and_key[0], group_and_key[1]);
    _traverse(group_and_key[0].args, process, onGroup);
  }
}
/**
 * A parser to extract key/value pairs from a command line input.
 * @member command The command line input.
 * @member keys The set of valid keys that can appear.
 * @member flags The set of valid flags that can appear.
 * @member index An internal marker for the progress of the parser over the input.
 */
var CommandParser = /*#__PURE__*/function () {
  function CommandParser(command, keys, flags, positionalArgs) {
    args_classCallCheck(this, CommandParser);
    this.command = command;
    this.index = 0;
    this.keys = keys;
    this.flags = flags;
    this.positionalArgs = positionalArgs;
    this.positionalArgsParsed = 0;
  }
  /**
   * Perform the parsing of (key, value) pairs.
   * @returns The set of extracted (key, value) pairs.
   */
  args_createClass(CommandParser, [{
    key: "parse",
    value: function parse() {
      var _a, _b, _c, _d;
      this.index = 0; // reset the parser
      var result = new Map();
      while (!this.finished()) {
        // A flag F may appear as !F to be parsed as false.
        var parsing_negative_flag = false;
        if (this.peek() === "!") {
          parsing_negative_flag = true;
          this.consume(["!"]);
        }
        var startIndex = this.index;
        var key = this.parseKey();
        if (result.has(key)) {
          throw "Duplicate key ".concat(key, " (first set to ").concat((_a = result.get(key)) !== null && _a !== void 0 ? _a : "", ")");
        }
        if (this.flags.has(key)) {
          // The key corresponds to a flag.
          // Parse [key] as true and ![key] as false.
          result.set(key, parsing_negative_flag ? "false" : "true");
          if (this.peek() === "=") throw "Flag ".concat(key, " cannot be assigned a value");
          if (!this.finished()) this.consume([" "]);
          this.prevUnquotedKey = undefined;
        } else if (this.keys.has(key)) {
          // Parse [key]=[value] or [key] [value]
          this.consume(["=", " "]);
          var value = this.parseValue();
          if (["'", '"'].includes((_b = this.prev()) !== null && _b !== void 0 ? _b : "")) this.prevUnquotedKey = undefined;else this.prevUnquotedKey = key;
          if (!this.finished()) this.consume([" "]);
          result.set(key, value);
        } else if (this.positionalArgsParsed < this.positionalArgs.length && this.peek() !== "=") {
          // Parse [value] as the next positional arg
          var positionalKey = this.positionalArgs[this.positionalArgsParsed];
          this.positionalArgsParsed++;
          this.index = startIndex; // back up to reparse the key as a value
          var _value = this.parseValue();
          if (["'", '"'].includes((_c = this.prev()) !== null && _c !== void 0 ? _c : "")) this.prevUnquotedKey = undefined;else this.prevUnquotedKey = key;
          if (!this.finished()) this.consume([" "]);
          if (result.has(positionalKey)) throw "Cannot assign ".concat(_value, " to ").concat(positionalKey, " (positionally) since ").concat(positionalKey, " was already set to ").concat((_d = result.get(positionalKey)) !== null && _d !== void 0 ? _d : "");
          result.set(positionalKey, _value);
        } else {
          // Key not found; include a better error message if it is possible for quotes to have been missed
          if (this.prevUnquotedKey && this.peek() !== "=") throw "Unknown argument: ".concat(key, " (if this should have been parsed as part of ").concat(this.prevUnquotedKey, ", you should surround the entire value in quotes)");else throw "Unknown argument: ".concat(key);
        }
      }
      return result;
    }
    /**
     * @returns True if the entire command has been parsed.
     */
  }, {
    key: "finished",
    value: function finished() {
      return this.index >= this.command.length;
    }
    /**
     * @returns The next character to parse, if it exists.
     */
  }, {
    key: "peek",
    value: function peek() {
      if (this.index >= this.command.length) return undefined;
      return this.command.charAt(this.index);
    }
    /**
     * @returns The character just parsed, if it exists.
     */
  }, {
    key: "prev",
    value: function prev() {
      if (this.index <= 0) return undefined;
      if (this.index >= this.command.length + 1) return undefined;
      return this.command.charAt(this.index - 1);
    }
    /**
     * Advance the internal marker over the next expected character.
     * Throws an error on unexpected characters.
     *
     * @param allowed Characters that are expected.
     */
  }, {
    key: "consume",
    value: function consume(allowed) {
      var _a;
      if (this.finished()) throw "Expected ".concat(allowed);
      if (allowed.includes((_a = this.peek()) !== null && _a !== void 0 ? _a : "")) {
        this.index += 1;
      }
    }
    /**
     * Find the next occurance of one of the provided characters, or the end of
     * the string if the characters never appear again.
     *
     * @param searchValue The characters to locate.
     */
  }, {
    key: "findNext",
    value: function findNext(searchValue) {
      var result = this.command.length;
      var _iterator4 = args_createForOfIteratorHelper(searchValue),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var value = _step4.value;
          var index = this.command.indexOf(value, this.index);
          if (index !== -1 && index < result) result = index;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      return result;
    }
    /**
     * Starting from the internal marker, parse a single key.
     * This also advances the internal marker.
     *
     * @returns The next key.
     */
  }, {
    key: "parseKey",
    value: function parseKey() {
      var keyEnd = this.findNext(["=", " "]);
      var key = this.command.substring(this.index, keyEnd);
      this.index = keyEnd;
      return key;
    }
    /**
     * Starting from the internal marker, parse a single value.
     * This also advances the internal marker.
     *
     * Values are a single word or enclosed in matching quotes, i.e. one of:
     *    "[^"]*"
     *    '[^']*"
     *    [^'"][^ ]*
     *
     * @returns The next value.
     */
  }, {
    key: "parseValue",
    value: function parseValue() {
      var _a, _b;
      var valueEnder = " ";
      var quotes = ["'", '"'];
      if (quotes.includes((_a = this.peek()) !== null && _a !== void 0 ? _a : "")) {
        valueEnder = (_b = this.peek()) !== null && _b !== void 0 ? _b : ""; // The value is everything until the next quote
        this.consume([valueEnder]); // Consume opening quote
      }

      var valueEnd = this.findNext([valueEnder]);
      var value = this.command.substring(this.index, valueEnd);
      if (valueEnder !== " " && valueEnd === this.command.length) {
        throw "No closing ".concat(valueEnder, " found for ").concat(valueEnder).concat(value);
      }
      // Consume the value (and closing quote)
      this.index = valueEnd;
      if (valueEnder !== " ") this.consume([valueEnder]);
      return value;
    }
  }]);
  return CommandParser;
}();
;// CONCATENATED MODULE: ./node_modules/libram/dist/combat.js
var combat_templateObject, combat_templateObject2;
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = combat_getPrototypeOf(object); if (object === null) break; } return object; }
function combat_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = combat_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function combat_toConsumableArray(arr) { return combat_arrayWithoutHoles(arr) || combat_iterableToArray(arr) || combat_unsupportedIterableToArray(arr) || combat_nonIterableSpread(); }
function combat_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function combat_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return combat_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return combat_arrayLikeToArray(o, minLen); }
function combat_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function combat_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return combat_arrayLikeToArray(arr); }
function combat_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function combat_defineProperty(obj, key, value) { key = combat_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function combat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, combat_toPropertyKey(descriptor.key), descriptor); } }
function combat_createClass(Constructor, protoProps, staticProps) { if (protoProps) combat_defineProperties(Constructor.prototype, protoProps); if (staticProps) combat_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function combat_toPropertyKey(arg) { var key = combat_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function combat_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function combat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function combat_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) combat_setPrototypeOf(subClass, superClass); }
function combat_createSuper(Derived) { var hasNativeReflectConstruct = combat_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = combat_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = combat_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return combat_possibleConstructorReturn(this, result); }; }
function combat_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return combat_assertThisInitialized(self); }
function combat_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function combat_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; combat_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !combat_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return combat_construct(Class, arguments, combat_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return combat_setPrototypeOf(Wrapper, Class); }; return combat_wrapNativeSuper(Class); }
function combat_construct(Parent, args, Class) { if (combat_isNativeReflectConstruct()) { combat_construct = Reflect.construct.bind(); } else { combat_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) combat_setPrototypeOf(instance, Class.prototype); return instance; }; } return combat_construct.apply(null, arguments); }
function combat_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function combat_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function combat_setPrototypeOf(o, p) { combat_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return combat_setPrototypeOf(o, p); }
function combat_getPrototypeOf(o) { combat_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return combat_getPrototypeOf(o); }
function combat_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var MACRO_NAME = "Script Autoattack Macro";
/**
 * Get the KoL native ID of the macro with name name.
 *
 * @category Combat
 * @returns {number} The macro ID.
 */
function getMacroId() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MACRO_NAME;
  var macroMatches = (0,external_kolmafia_namespaceObject.xpath)((0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php"), "//select[@name=\"macroid\"]/option[text()=\"".concat(name, "\"]/@value"));
  if (macroMatches.length === 0) {
    (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?action=new");
    var newMacroText = (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?macroid=0&name=".concat(name, "&macrotext=abort&action=save"));
    return parseInt((0,external_kolmafia_namespaceObject.xpath)(newMacroText, "//input[@name=".concat(name, "]/@value"))[0], 10);
  } else {
    return parseInt(macroMatches[0], 10);
  }
}
function itemOrNameToItem(itemOrName) {
  return typeof itemOrName === "string" ? external_kolmafia_namespaceObject.Item.get(itemOrName) : itemOrName;
}
// The list of all combat items whose name is a strict substring of another combat item
var substringCombatItems = template_string_$items(combat_templateObject || (combat_templateObject = combat_taggedTemplateLiteral(["spider web, really sticky spider web, dictionary, NG, Cloaca-Cola, yo-yo, top, ball, kite, yo, red potion, blue potion, bowling ball, adder, red button, pile of sand, mushroom, deluxe mushroom"])));
// The list of all combat skills whose name is a strict substring of another combat skill
var substringCombatSkills = $skills(combat_templateObject2 || (combat_templateObject2 = combat_taggedTemplateLiteral(["Shoot, Thrust-Smack, Headbutt, Toss, Sing, Disarm, LIGHT, BURN, Extract, Meteor Shower, Snipe, Cleave, Boil, Slice, Rainbow"])));
function itemOrItemsBallsMacroName(itemOrItems) {
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.map(itemOrItemsBallsMacroName).join(", ");
  } else {
    var item = itemOrNameToItem(itemOrItems);
    return !substringCombatItems.includes(item) ? item.name : (0,external_kolmafia_namespaceObject.toInt)(item).toString();
  }
}
function itemOrItemsBallsMacroPredicate(itemOrItems) {
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.map(itemOrItemsBallsMacroPredicate).join(" && ");
  } else {
    return "hascombatitem ".concat(itemOrItems);
  }
}
function skillOrNameToSkill(skillOrName) {
  if (typeof skillOrName === "string") {
    return external_kolmafia_namespaceObject.Skill.get(skillOrName);
  } else {
    return skillOrName;
  }
}
function skillBallsMacroName(skillOrName) {
  var skill = skillOrNameToSkill(skillOrName);
  return skill.name.match(/^[A-Za-z ]+$/) && !substringCombatSkills.includes(skill) ? skill.name : (0,external_kolmafia_namespaceObject.toInt)(skill);
}
var InvalidMacroError = /*#__PURE__*/function (_Error) {
  combat_inherits(InvalidMacroError, _Error);
  var _super = combat_createSuper(InvalidMacroError);
  function InvalidMacroError() {
    combat_classCallCheck(this, InvalidMacroError);
    return _super.apply(this, arguments);
  }
  return combat_createClass(InvalidMacroError);
}( /*#__PURE__*/combat_wrapNativeSuper(Error));
/**
 * BALLS macro builder for direct submission to KoL.
 * Create a new macro with `new Macro()` and add steps using the instance methods.
 * Uses a fluent interface, so each step returns the object for easy chaining of steps.
 * Each method is also defined as a static method that creates a new Macro with only that step.
 * For example, you can do `Macro.skill('Saucestorm').attack()`.
 */
var Macro = /*#__PURE__*/function () {
  function Macro() {
    combat_classCallCheck(this, Macro);
    combat_defineProperty(this, "components", []);
    combat_defineProperty(this, "name", MACRO_NAME);
  }
  combat_createClass(Macro, [{
    key: "toString",
    value:
    /**
     * Convert macro to string.
     */
    function toString() {
      return (this.components.join(";") + ";").replace(/;;+/g, ";");
    }
    /**
     * Gives your macro a new name to be used when saving an autoattack.
     * @param name The name to be used when saving as an autoattack.
     * @returns The macro in question
     */
  }, {
    key: "rename",
    value: function rename(name) {
      this.name = name;
      return this;
    }
    /**
     * Creates a new Macro with a name other than the default name.
     * @param name The name to assign this macro.
     * @returns A new Macro with the assigned name.
     */
  }, {
    key: "save",
    value:
    /**
     * Save a macro to a Mafia property for use in a consult script.
     */
    function save() {
      _set(Macro.SAVED_MACRO_PROPERTY, this.toString());
    }
    /**
     * Load a saved macro from the Mafia property.
     */
  }, {
    key: "step",
    value:
    /**
     * Statefully add one or several steps to a macro.
     * @param nextSteps The steps to add to the macro.
     * @returns {Macro} This object itself.
     */
    function step() {
      var _ref, _this$components;
      for (var _len = arguments.length, nextSteps = new Array(_len), _key = 0; _key < _len; _key++) {
        nextSteps[_key] = arguments[_key];
      }
      var nextStepsStrings = (_ref = []).concat.apply(_ref, combat_toConsumableArray(nextSteps.map(x => x instanceof Macro ? x.components : [x])));
      (_this$components = this.components).push.apply(_this$components, combat_toConsumableArray(nextStepsStrings.filter(s => s.length > 0)));
      return this;
    }
    /**
     * Statefully add one or several steps to a macro.
     * @param nextSteps The steps to add to the macro.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "submit",
    value:
    /**
     * Submit the built macro to KoL. Only works inside combat.
     */
    function submit() {
      var final = this.toString();
      return (0,external_kolmafia_namespaceObject.visitUrl)("fight.php?action=macro&macrotext=".concat((0,external_kolmafia_namespaceObject.urlEncode)(final)), true, true);
    }
    /**
     * Set this macro as a KoL native autoattack.
     */
  }, {
    key: "setAutoAttack",
    value: function setAutoAttack() {
      var id = Macro.cachedMacroIds.get(this.name);
      if (id === undefined) {
        id = getMacroId(this.name);
        Macro.cachedMacroIds.set(this.name, id);
      }
      if ((0,external_kolmafia_namespaceObject.getAutoAttack)() === 99000000 + id && this.toString() === Macro.cachedAutoAttacks.get(this.name)) {
        // This macro is already set. Don"t make the server request.
        return;
      }
      (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?macroid=".concat(id, "&name=").concat((0,external_kolmafia_namespaceObject.urlEncode)(this.name), "&macrotext=").concat((0,external_kolmafia_namespaceObject.urlEncode)(this.toString()), "&action=save"), true, true);
      (0,external_kolmafia_namespaceObject.visitUrl)("account.php?am=1&action=autoattack&value=".concat(99000000 + id, "&ajax=1"));
      Macro.cachedAutoAttacks.set(this.name, this.toString());
    }
    /**
     * Renames the macro, then sets it as an autoattack.
     * @param name The name to save the macro under as an autoattack.
     */
  }, {
    key: "setAutoAttackAs",
    value: function setAutoAttackAs(name) {
      this.name = name;
      this.setAutoAttack();
    }
    /**
     * Clear all cached autoattacks, and delete all stored macros server-side.
     */
  }, {
    key: "abort",
    value:
    /**
     * Add an "abort" step to this macro.
     * @returns {Macro} This object itself.
     */
    function abort() {
      return this.step("abort");
    }
    /**
     * Create a new macro with an "abort" step.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "runaway",
    value:
    /**
     * Add a "runaway" step to this macro.
     * @returns {Macro} This object itself.
     */
    function runaway() {
      return this.step("runaway");
    }
    /**
     * Create a new macro with an "runaway" step.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "if_",
    value:
    /**
     * Add an "if" statement to this macro.
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */
    function if_(condition, ifTrue) {
      return this.step("if ".concat(Macro.makeBALLSPredicate(condition))).step(ifTrue).step("endif");
    }
    /**
     * Create a new macro with an "if" statement.
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "ifNot",
    value:
    /**
     * Add an "if" statement to this macro, inverting the condition.
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */
    function ifNot(condition, ifTrue) {
      return this.step("if !(".concat(Macro.makeBALLSPredicate(condition), ")")).step(ifTrue).step("endif");
    }
    /**
     * Create a new macro with an "if" statement, inverting the condition.
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "while_",
    value:
    /**
     * Add a "while" statement to this macro.
     * @param condition The BALLS condition for the if statement.
     * @param contents Loop to repeat while the condition is true.
     * @returns {Macro} This object itself.
     */
    function while_(condition, contents) {
      return this.step("while ".concat(condition)).step(contents).step("endwhile");
    }
    /**
     * Create a new macro with a "while" statement.
     * @param condition The BALLS condition for the if statement.
     * @param contents Loop to repeat while the condition is true.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "externalIf",
    value:
    /**
     * Conditionally add a step to a macro based on a condition evaluated at the time of building the macro.
     * @param condition The JS condition.
     * @param ifTrue Continuation to add if the condition is true.
     * @param ifFalse Optional input to turn this into an if...else statement.
     * @returns {Macro} This object itself.
     */
    function externalIf(condition, ifTrue, ifFalse) {
      if (condition) return this.step(ifTrue);else if (ifFalse) return this.step(ifFalse);else return this;
    }
    /**
     * Create a new macro with a condition evaluated at the time of building the macro.
     * @param condition The JS condition.
     * @param ifTrue Continuation to add if the condition is true.
     * @param ifFalse Optional input to turn this into an if...else statement.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "repeat",
    value:
    /**
     * Add a repeat step to the macro.
     * @returns {Macro} This object itself.
     */
    function repeat() {
      return this.step("repeat");
    }
    /**
     * Add one or more skill cast steps to the macro.
     * @param skills Skills to cast.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "skill",
    value: function skill() {
      for (var _len2 = arguments.length, skills = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        skills[_key2] = arguments[_key2];
      }
      return this.step.apply(this, combat_toConsumableArray(skills.map(skill => {
        return "skill ".concat(skillBallsMacroName(skill));
      })));
    }
    /**
     * Create a new macro with one or more skill cast steps.
     * @param skills Skills to cast.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "trySkill",
    value:
    /**
     * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {Macro} This object itself.
     */
    function trySkill() {
      for (var _len3 = arguments.length, skills = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        skills[_key3] = arguments[_key3];
      }
      return this.step.apply(this, combat_toConsumableArray(skills.map(skill => {
        return Macro.if_("hasskill ".concat(skillBallsMacroName(skill)), Macro.skill(skill));
      })));
    }
    /**
     * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "trySkillRepeat",
    value:
    /**
     * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {Macro} This object itself.
     */
    function trySkillRepeat() {
      for (var _len4 = arguments.length, skills = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        skills[_key4] = arguments[_key4];
      }
      return this.step.apply(this, combat_toConsumableArray(skills.map(skill => {
        return Macro.if_("hasskill ".concat(skillBallsMacroName(skill)), Macro.skill(skill).repeat());
      })));
    }
    /**
     * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "item",
    value:
    /**
     * Add one or more item steps to the macro.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
    function item() {
      for (var _len5 = arguments.length, items = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        items[_key5] = arguments[_key5];
      }
      return this.step.apply(this, combat_toConsumableArray(items.map(itemOrItems => {
        return "use ".concat(itemOrItemsBallsMacroName(itemOrItems));
      })));
    }
    /**
     * Create a new macro with one or more item steps.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "tryItem",
    value:
    /**
     * Add one or more item steps to the macro, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
    function tryItem() {
      for (var _len6 = arguments.length, items = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        items[_key6] = arguments[_key6];
      }
      return this.step.apply(this, combat_toConsumableArray(items.map(item => {
        return Macro.if_(itemOrItemsBallsMacroPredicate(item), "use ".concat(itemOrItemsBallsMacroName(item)));
      })));
    }
    /**
     * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "attack",
    value:
    /**
     * Add an attack step to the macro.
     * @returns {Macro} This object itself.
     */
    function attack() {
      return this.step("attack");
    }
    /**
     * Create a new macro with an attack step.
     * @returns {Macro} This object itself.
     */
  }, {
    key: "ifHolidayWanderer",
    value:
    /**
     * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, unmutated.
     * @param macro The macro to place in the if_ statement
     */
    function ifHolidayWanderer(macro) {
      var todaysWanderers = getTodaysHolidayWanderers();
      if (todaysWanderers.length === 0) return this;
      return this.if_(todaysWanderers.map(monster => "monsterid ".concat(monster.id)).join(" || "), macro);
    }
    /**
     * Create a new macro starting with an ifHolidayWanderer step.
     * @param macro The macro to place inside the if_ statement
     */
  }, {
    key: "ifNotHolidayWanderer",
    value:
    /**
     * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, with the input macro appended.
     * @param macro The macro to place in the if_ statement.
     */
    function ifNotHolidayWanderer(macro) {
      var todaysWanderers = getTodaysHolidayWanderers();
      if (todaysWanderers.length === 0) return this.step(macro);
      return this.if_(todaysWanderers.map(monster => "!monsterid ".concat(monster.id)).join(" && "), macro);
    }
    /**
     * Create a new macro starting with an ifNotHolidayWanderer step.
     * @param macro The macro to place inside the if_ statement
     */
  }], [{
    key: "rename",
    value: function rename(name) {
      return new this().rename(name);
    }
  }, {
    key: "load",
    value: function load() {
      var _this;
      return (_this = new this()).step.apply(_this, combat_toConsumableArray(property_get(Macro.SAVED_MACRO_PROPERTY).split(";")));
    }
    /**
     * Clear the saved macro in the Mafia property.
     */
  }, {
    key: "clearSaved",
    value: function clearSaved() {
      (0,external_kolmafia_namespaceObject.removeProperty)(Macro.SAVED_MACRO_PROPERTY);
    }
  }, {
    key: "step",
    value: function step() {
      var _this2;
      return (_this2 = new this()).step.apply(_this2, arguments);
    }
  }, {
    key: "clearAutoAttackMacros",
    value: function clearAutoAttackMacros() {
      var _iterator = combat_createForOfIteratorHelper(Macro.cachedAutoAttacks.keys()),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _Macro$cachedMacroIds;
          var name = _step.value;
          var id = (_Macro$cachedMacroIds = Macro.cachedMacroIds.get(name)) !== null && _Macro$cachedMacroIds !== void 0 ? _Macro$cachedMacroIds : getMacroId(name);
          (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?macroid=".concat(id, "&action=edit&what=Delete&confirm=1"));
          Macro.cachedAutoAttacks.delete(name);
          Macro.cachedMacroIds.delete(name);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "abort",
    value: function abort() {
      return new this().abort();
    }
  }, {
    key: "runaway",
    value: function runaway() {
      return new this().runaway();
    }
  }, {
    key: "makeBALLSPredicate",
    value: function makeBALLSPredicate(condition) {
      var ballsCondition = "";
      if (condition instanceof external_kolmafia_namespaceObject.Monster) {
        ballsCondition = "monsterid ".concat(condition.id);
      } else if (condition instanceof Array) {
        ballsCondition = condition.map(mon => "monsterid ".concat(mon.id)).join(" || ");
        ballsCondition = "(".concat(ballsCondition, ")");
      } else if (condition instanceof external_kolmafia_namespaceObject.Effect) {
        ballsCondition = "haseffect ".concat((0,external_kolmafia_namespaceObject.toInt)(condition));
      } else if (condition instanceof external_kolmafia_namespaceObject.Skill) {
        ballsCondition = "hasskill ".concat(skillBallsMacroName(condition));
      } else if (condition instanceof external_kolmafia_namespaceObject.Item) {
        if (!condition.combat) {
          throw new InvalidMacroError("Item ".concat(condition, " cannot be made a valid BALLS predicate (it is not combat-usable)"));
        }
        ballsCondition = "hascombatitem ".concat(itemOrItemsBallsMacroName(condition));
      } else if (condition instanceof external_kolmafia_namespaceObject.Location) {
        var snarfblat = condition.id;
        if (snarfblat < 1) {
          throw new InvalidMacroError("Location ".concat(condition, " cannot be made a valid BALLS predicate (it has no location id)"));
        }
        ballsCondition = "snarfblat ".concat(snarfblat);
      } else if (condition instanceof external_kolmafia_namespaceObject.Class) {
        if ((0,external_kolmafia_namespaceObject.toInt)(condition) > 6) {
          throw new InvalidMacroError("Class ".concat(condition, " cannot be made a valid BALLS predicate (it is not a standard class)"));
        }
        ballsCondition = condition.toString().replaceAll(" ", "").toLowerCase();
      } else if (condition instanceof external_kolmafia_namespaceObject.Stat) {
        ballsCondition = "".concat(condition.toString().toLowerCase(), "class");
      } else {
        ballsCondition = condition;
      }
      return ballsCondition;
    }
  }, {
    key: "if_",
    value: function if_(condition, ifTrue) {
      return new this().if_(condition, ifTrue);
    }
  }, {
    key: "ifNot",
    value: function ifNot(condition, ifTrue) {
      return new this().ifNot(condition, ifTrue);
    }
  }, {
    key: "while_",
    value: function while_(condition, contents) {
      return new this().while_(condition, contents);
    }
  }, {
    key: "externalIf",
    value: function externalIf(condition, ifTrue, ifFalse) {
      return new this().externalIf(condition, ifTrue, ifFalse);
    }
  }, {
    key: "skill",
    value: function skill() {
      var _this3;
      return (_this3 = new this()).skill.apply(_this3, arguments);
    }
  }, {
    key: "trySkill",
    value: function trySkill() {
      var _this4;
      return (_this4 = new this()).trySkill.apply(_this4, arguments);
    }
  }, {
    key: "trySkillRepeat",
    value: function trySkillRepeat() {
      var _this5;
      return (_this5 = new this()).trySkillRepeat.apply(_this5, arguments);
    }
  }, {
    key: "item",
    value: function item() {
      var _this6;
      return (_this6 = new this()).item.apply(_this6, arguments);
    }
  }, {
    key: "tryItem",
    value: function tryItem() {
      var _this7;
      return (_this7 = new this()).tryItem.apply(_this7, arguments);
    }
  }, {
    key: "attack",
    value: function attack() {
      return new this().attack();
    }
  }, {
    key: "ifHolidayWanderer",
    value: function ifHolidayWanderer(macro) {
      return new this().ifHolidayWanderer(macro);
    }
  }, {
    key: "ifNotHolidayWanderer",
    value: function ifNotHolidayWanderer(macro) {
      return new this().ifNotHolidayWanderer(macro);
    }
  }]);
  return Macro;
}();
/**
 * Adventure in a location and handle all combats with a given macro.
 * To use this function you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
 * See examples/consult.ts for an example.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param macro Macro to execute.
 */
combat_defineProperty(Macro, "SAVED_MACRO_PROPERTY", "libram_savedMacro");
combat_defineProperty(Macro, "cachedMacroIds", new Map());
combat_defineProperty(Macro, "cachedAutoAttacks", new Map());
function adventureMacro(loc, macro) {
  macro.save();
  setAutoAttack(0);
  try {
    adv1(loc, 0, "");
    while (inMultiFight()) runCombat();
    if (choiceFollowsFight()) visitUrl("choice.php");
  } finally {
    Macro.clearSaved();
  }
}
/**
 * Adventure in a location and handle all combats with a given autoattack and manual macro.
 * To use the nextMacro parameter you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
 * See examples/consult.ts for an example.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param autoMacro Macro to execute via KoL autoattack.
 * @param nextMacro Macro to execute manually after autoattack completes.
 */
function adventureMacroAuto(loc, autoMacro) {
  var _nextMacro;
  var nextMacro = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  nextMacro = (_nextMacro = nextMacro) !== null && _nextMacro !== void 0 ? _nextMacro : Macro.abort();
  autoMacro.setAutoAttack();
  nextMacro.save();
  try {
    adv1(loc, 0, "");
    while (inMultiFight()) runCombat();
    if (choiceFollowsFight()) visitUrl("choice.php");
  } finally {
    Macro.clearSaved();
  }
}
var StrictMacro = /*#__PURE__*/function (_Macro) {
  combat_inherits(StrictMacro, _Macro);
  var _super2 = combat_createSuper(StrictMacro);
  function StrictMacro() {
    combat_classCallCheck(this, StrictMacro);
    return _super2.apply(this, arguments);
  }
  combat_createClass(StrictMacro, [{
    key: "skill",
    value:
    /**
     * Add one or more skill cast steps to the macro.
     * @param skills Skills to cast.
     * @returns {StrictMacro} This object itself.
     */
    function skill() {
      var _get2;
      for (var _len7 = arguments.length, skills = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        skills[_key7] = arguments[_key7];
      }
      return (_get2 = _get(combat_getPrototypeOf(StrictMacro.prototype), "skill", this)).call.apply(_get2, [this].concat(skills));
    }
    /**
     * Create a new macro with one or more skill cast steps.
     * @param skills Skills to cast.
     * @returns {StrictMacro} This object itself.
     */
  }, {
    key: "item",
    value:
    /**
     * Add one or more item steps to the macro.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
    function item() {
      var _get3;
      for (var _len8 = arguments.length, items = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        items[_key8] = arguments[_key8];
      }
      return (_get3 = _get(combat_getPrototypeOf(StrictMacro.prototype), "item", this)).call.apply(_get3, [this].concat(items));
    }
    /**
     * Create a new macro with one or more item steps.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
  }, {
    key: "trySkill",
    value:
    /**
     * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {StrictMacro} This object itself.
     */
    function trySkill() {
      var _get4;
      for (var _len9 = arguments.length, skills = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        skills[_key9] = arguments[_key9];
      }
      return (_get4 = _get(combat_getPrototypeOf(StrictMacro.prototype), "trySkill", this)).call.apply(_get4, [this].concat(skills));
    }
    /**
     * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {StrictMacro} This object itself.
     */
  }, {
    key: "tryItem",
    value:
    /**
     * Add one or more item steps to the macro, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
    function tryItem() {
      var _get5;
      for (var _len10 = arguments.length, items = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        items[_key10] = arguments[_key10];
      }
      return (_get5 = _get(combat_getPrototypeOf(StrictMacro.prototype), "tryItem", this)).call.apply(_get5, [this].concat(items));
    }
    /**
     * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
  }, {
    key: "trySkillRepeat",
    value:
    /**
     * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {StrictMacro} This object itself.
     */
    function trySkillRepeat() {
      var _get6;
      for (var _len11 = arguments.length, skills = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        skills[_key11] = arguments[_key11];
      }
      return (_get6 = _get(combat_getPrototypeOf(StrictMacro.prototype), "trySkillRepeat", this)).call.apply(_get6, [this].concat(skills));
    }
    /**
     * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {StrictMacro} This object itself.
     */
  }], [{
    key: "skill",
    value: function skill() {
      var _this8;
      return (_this8 = new this()).skill.apply(_this8, arguments);
    }
  }, {
    key: "item",
    value: function item() {
      var _this9;
      return (_this9 = new this()).item.apply(_this9, arguments);
    }
  }, {
    key: "trySkill",
    value: function trySkill() {
      var _this10;
      return (_this10 = new this()).trySkill.apply(_this10, arguments);
    }
  }, {
    key: "tryItem",
    value: function tryItem() {
      var _this11;
      return (_this11 = new this()).tryItem.apply(_this11, arguments);
    }
  }, {
    key: "trySkillRepeat",
    value: function trySkillRepeat() {
      var _this12;
      return (_this12 = new this()).trySkillRepeat.apply(_this12, arguments);
    }
  }]);
  return StrictMacro;
}(Macro);
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/combat.js
function dist_combat_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) dist_combat_setPrototypeOf(subClass, superClass); }
function dist_combat_setPrototypeOf(o, p) { dist_combat_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return dist_combat_setPrototypeOf(o, p); }
function dist_combat_createSuper(Derived) { var hasNativeReflectConstruct = dist_combat_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = dist_combat_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = dist_combat_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return dist_combat_possibleConstructorReturn(this, result); }; }
function dist_combat_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return dist_combat_assertThisInitialized(self); }
function dist_combat_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function dist_combat_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function dist_combat_getPrototypeOf(o) { dist_combat_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return dist_combat_getPrototypeOf(o); }
function dist_combat_toConsumableArray(arr) { return dist_combat_arrayWithoutHoles(arr) || dist_combat_iterableToArray(arr) || dist_combat_unsupportedIterableToArray(arr) || dist_combat_nonIterableSpread(); }
function dist_combat_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function dist_combat_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function dist_combat_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return dist_combat_arrayLikeToArray(arr); }
function dist_combat_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = dist_combat_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function dist_combat_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dist_combat_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dist_combat_arrayLikeToArray(o, minLen); }
function dist_combat_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function dist_combat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function dist_combat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, dist_combat_toPropertyKey(descriptor.key), descriptor); } }
function dist_combat_createClass(Constructor, protoProps, staticProps) { if (protoProps) dist_combat_defineProperties(Constructor.prototype, protoProps); if (staticProps) dist_combat_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function dist_combat_toPropertyKey(arg) { var key = dist_combat_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function dist_combat_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


function undelay(macro) {
  if (macro instanceof Macro) return macro;else return macro();
}
/**
 * The strategy to use for combat for a task, which indicates what to do
 * for each monster.
 *
 * There are two ways to specify in a task what to do for a given monster:
 *   1. Provide a macro directly through .macro(macro, ...monsters)
 *   2. Provide an action through .action(action, ...monsters)
 *
 * An action is a strategy for dealing with a monster that is not fully
 * defined in the task. The possible actions are set with the type parameter A.
 * Actions should typically end the fight.
 *
 * For example, a task may want to banish a monster but not necessarily know or
 * care which banisher is used. Instead, it is best for the engine to determine
 * which banisher to use on the monster. To facilitate this, "banish" can be
 * defined as an action, e.g. with CombatStrategy<"banish">;
 *
 * Each action can be resolved by the engine by:
 *   1. Providing a default macro for the action through ActionDefaults<A>,
 *      which can be done through combat_defaults in Engine options, or
 *   2. Providing a CombatResource for the action through CombatResources<A>.
 *      This is typically done in Engine.customize() by checking if a given
 *      action is requested by the task with combat.can(.), and then providing
 *      an appropriate resource with resources.provide(.).
 *
 * A monster may have both a macro and an action defined, and a macro or action
 * can be specified to be done on all monsters. The order of combat is then:
 * 1. The macro(s) given in .startingMacro().
 * 2. The monster-specific macro(s) from .macro().
 * 3. The general macro(s) from .macro().
 * 4. The monster-specific action from .action().
 * 5. The general action from .action().
 *
 * If an autoattack is set with .autoattack(), the order of the autoattack is:
 * 1. The monster-specific macro(s) from .autoattack().
 * 2. The general macro(s) from .autoattack().
 */
var CombatStrategy = /*#__PURE__*/function () {
  function CombatStrategy() {
    dist_combat_classCallCheck(this, CombatStrategy);
    this.macros = new Map();
    this.autoattacks = new Map();
    this.actions = new Map();
    this.ccs_entries = new Map();
  }
  /**
   * Add a macro to perform for this monster. If multiple macros are given
   * for the same monster, they are concatinated.
   *
   * @param macro The macro to perform.
   * @param monsters Which monsters to use the macro on. If not given, add the
   *  macro as a general macro.
   * @param prepend If true, add the macro before all previous macros for
   *    the same monster. If false, add after all previous macros.
   * @returns this
   */
  dist_combat_createClass(CombatStrategy, [{
    key: "macro",
    value: function macro(_macro, monsters, prepend) {
      var _a, _b;
      if (monsters === undefined) {
        if (this.default_macro === undefined) this.default_macro = [];
        if (prepend) this.default_macro.unshift(_macro);else this.default_macro.push(_macro);
      } else {
        if (monsters instanceof external_kolmafia_namespaceObject.Monster) monsters = [monsters];
        var _iterator = dist_combat_createForOfIteratorHelper(monsters),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var monster = _step.value;
            if (!this.macros.has(monster)) this.macros.set(monster, []);
            if (prepend) (_a = this.macros.get(monster)) === null || _a === void 0 ? void 0 : _a.unshift(_macro);else (_b = this.macros.get(monster)) === null || _b === void 0 ? void 0 : _b.push(_macro);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return this;
    }
    /**
     * Add a macro to perform as an autoattack for this monster. If multiple
     * macros are given for the same monster, they are concatinated.
     *
     * @param macro The macro to perform as autoattack.
     * @param monsters Which monsters to use the macro on. If not given, add the
     *  macro as a general macro.
     * @param prepend If true, add the macro before all previous autoattack
     *    macros for the same monster. If false, add after all previous macros.
     * @returns this
     */
  }, {
    key: "autoattack",
    value: function autoattack(macro, monsters, prepend) {
      var _a, _b;
      if (monsters === undefined) {
        if (this.default_autoattack === undefined) this.default_autoattack = [];
        if (prepend) this.default_autoattack.unshift(macro);else this.default_autoattack.push(macro);
      } else {
        if (monsters instanceof external_kolmafia_namespaceObject.Monster) monsters = [monsters];
        var _iterator2 = dist_combat_createForOfIteratorHelper(monsters),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var monster = _step2.value;
            if (!this.autoattacks.has(monster)) this.autoattacks.set(monster, []);
            if (prepend) (_a = this.autoattacks.get(monster)) === null || _a === void 0 ? void 0 : _a.unshift(macro);else (_b = this.autoattacks.get(monster)) === null || _b === void 0 ? void 0 : _b.push(macro);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      return this;
    }
    /**
     * Add a macro to perform at the start of combat.
     * @param macro The macro to perform.
     * @param prepend If true, add the macro before all previous starting
     *    macros. If false, add after all previous starting macros.
     * @returns this
     */
  }, {
    key: "startingMacro",
    value: function startingMacro(macro, prepend) {
      if (this.starting_macro === undefined) this.starting_macro = [];
      if (prepend) this.starting_macro.unshift(macro);else this.starting_macro.push(macro);
      return this;
    }
    /**
     * Add an action to perform for this monster. Only one action can be set for
     * each monster; any previous actions are overwritten.
     *
     * @param action The action to perform.
     * @param monsters Which monsters to use the action on. If not given, set the
     *  action as the general action for all monsters.
     * @returns this
     */
  }, {
    key: "action",
    value: function action(_action, monsters) {
      if (monsters === undefined) {
        this.default_action = _action;
      } else if (monsters instanceof external_kolmafia_namespaceObject.Monster) {
        this.actions.set(monsters, _action);
      } else {
        var _iterator3 = dist_combat_createForOfIteratorHelper(monsters),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var monster = _step3.value;
            this.actions.set(monster, _action);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      return this;
    }
    /**
     * Add a separate entry in the grimoire-generated CCS file for the specified
     * monster. If multiple entries are given for the same monster, they are
     * concatinated.
     *
     * This should typically be only used rarely, on monsters for which KoL does
     * not support macros in combat (e.g. rampaging adding machine).
     *
     * @param entry The entry to add for the given monster.
     * @param monsters Which monsters to add the entry to.
     * @param prepend If true, add the entry before all previous entries. If
     *   false, add after all previous entries.
     */
  }, {
    key: "ccs",
    value: function ccs(entry, monsters, prepend) {
      var _a, _b;
      if (monsters instanceof external_kolmafia_namespaceObject.Monster) monsters = [monsters];
      var _iterator4 = dist_combat_createForOfIteratorHelper(monsters),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var monster = _step4.value;
          if (!this.ccs_entries.has(monster)) this.ccs_entries.set(monster, []);
          if (prepend) (_a = this.ccs_entries.get(monster)) === null || _a === void 0 ? void 0 : _a.unshift(entry);else (_b = this.ccs_entries.get(monster)) === null || _b === void 0 ? void 0 : _b.push(entry);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      return this;
    }
    /**
     * Check if the provided action was requested for any monsters, or for the
     * general action.
     */
  }, {
    key: "can",
    value: function can(action) {
      if (action === this.default_action) return true;
      return Array.from(this.actions.values()).includes(action);
    }
    /**
     * Return the general action (if it exists).
     */
  }, {
    key: "getDefaultAction",
    value: function getDefaultAction() {
      return this.default_action;
    }
    /**
     * Return all monsters where the provided action was requested.
     */
  }, {
    key: "where",
    value: function where(action) {
      return Array.from(this.actions.keys()).filter(key => this.actions.get(key) === action);
    }
    /**
     * Return the requested action (if it exists) for the provided monster.
     */
  }, {
    key: "currentStrategy",
    value: function currentStrategy(monster) {
      var _a;
      return (_a = this.actions.get(monster)) !== null && _a !== void 0 ? _a : this.default_action;
    }
    /**
     * Perform a deep copy of this combat strategy.
     */
  }, {
    key: "clone",
    value: function clone() {
      var result = new CombatStrategy();
      if (this.starting_macro) result.starting_macro = dist_combat_toConsumableArray(this.starting_macro);
      if (this.default_macro) result.default_macro = dist_combat_toConsumableArray(this.default_macro);
      var _iterator5 = dist_combat_createForOfIteratorHelper(this.macros),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var pair = _step5.value;
          result.macros.set(pair[0], dist_combat_toConsumableArray(pair[1]));
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (this.default_autoattack) result.default_autoattack = dist_combat_toConsumableArray(this.default_autoattack);
      var _iterator6 = dist_combat_createForOfIteratorHelper(this.autoattacks),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var _pair = _step6.value;
          result.autoattacks.set(_pair[0], dist_combat_toConsumableArray(_pair[1]));
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      result.default_action = this.default_action;
      var _iterator7 = dist_combat_createForOfIteratorHelper(this.actions),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _pair2 = _step7.value;
          result.actions.set(_pair2[0], _pair2[1]);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      var _iterator8 = dist_combat_createForOfIteratorHelper(this.ccs_entries),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var _pair3 = _step8.value;
          result.ccs_entries.set(_pair3[0], dist_combat_toConsumableArray(_pair3[1]));
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      return result;
    }
    /**
     * Compile this combat strategy into a complete macro.
     *
     * @param resources The resources to use to fulfil actions.
     * @param defaults Macros to perform for each action without a resource.
     * @param location The adventuring location, if known.
     * @returns The compiled macro.
     */
  }, {
    key: "compile",
    value: function compile(resources, defaults, location) {
      var _a, _b;
      var result = new Macro();
      // If there is macro precursor, do it now
      if (this.starting_macro) {
        result.step.apply(result, dist_combat_toConsumableArray(this.starting_macro.map(undelay)));
      }
      // Perform any monster-specific macros (these may or may not end the fight)
      var monster_macros = new CompressedMacro();
      this.macros.forEach((value, key) => {
        var _Macro;
        monster_macros.add(key, (_Macro = new Macro()).step.apply(_Macro, dist_combat_toConsumableArray(value.map(undelay))));
      });
      result.step(monster_macros.compile());
      // Perform the non-monster specific macro
      if (this.default_macro) result.step.apply(result, dist_combat_toConsumableArray(this.default_macro.map(undelay)));
      // Perform any monster-specific actions (these should end the fight)
      var monster_actions = new CompressedMacro();
      this.actions.forEach((action, key) => {
        var _a, _b;
        var macro = (_a = resources.getMacro(action)) !== null && _a !== void 0 ? _a : (_b = defaults === null || defaults === void 0 ? void 0 : defaults[action]) === null || _b === void 0 ? void 0 : _b.call(defaults, key);
        if (macro) monster_actions.add(key, new Macro().step(macro));
      });
      result.step(monster_actions.compile());
      // Perform the non-monster specific action (these should end the fight)
      if (this.default_action) {
        var macro = (_a = resources.getMacro(this.default_action)) !== null && _a !== void 0 ? _a : (_b = defaults === null || defaults === void 0 ? void 0 : defaults[this.default_action]) === null || _b === void 0 ? void 0 : _b.call(defaults, location);
        if (macro) result.step(macro);
      }
      return result;
    }
    /**
     * Compile the autoattack of this combat strategy into a complete macro.
     *
     * @returns The compiled autoattack macro.
     */
  }, {
    key: "compileAutoattack",
    value: function compileAutoattack() {
      var result = new Macro();
      // Perform any monster-specific autoattacks (these may or may not end the fight)
      var monster_macros = new CompressedMacro();
      this.autoattacks.forEach((value, key) => {
        var _Macro2;
        monster_macros.add(key, (_Macro2 = new Macro()).step.apply(_Macro2, dist_combat_toConsumableArray(value.map(undelay))));
      });
      result.step(monster_macros.compile());
      // Perform the non-monster specific macro
      if (this.default_autoattack) result.step.apply(result, dist_combat_toConsumableArray(this.default_autoattack.map(undelay)));
      return result;
    }
    /**
     * Compile the CCS entries of this combat strategy into a single array.
     *
     * @returns The lines of a CCS file, not including the [default] macro.
     */
  }, {
    key: "compileCcs",
    value: function compileCcs() {
      var result = [];
      var _iterator9 = dist_combat_createForOfIteratorHelper(this.ccs_entries),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var ccs_entry = _step9.value;
          result.push.apply(result, ["[".concat(ccs_entry[0].name, "]")].concat(dist_combat_toConsumableArray(ccs_entry[1])));
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      return result;
    }
    /**
     * For advanced users, this method will generate a fluent API for requesting
     * actions. That is, it allows you to do
     *   combat.banish(monster1).kill(monster2)
     * instead of
     *   combat.action("banish", monster1).action("kill", monster2)
     *
     * Example usage:
     *   const myActions = ["kill", "banish"] as const;
     *   class MyCombatStrategy extends CombatStrategy.withActions(myActions) {}
     *
     *   const foo: MyCombatStrategy = new MyCombatStrategy();
     *   const bar: MyCombatStrategy = foo.banish($monster`crate`).kill($monster`tumbleweed`);
     */
  }], [{
    key: "withActions",
    value: function withActions(actions) {
      var CombatStrategyWithActions = /*#__PURE__*/function (_this) {
        dist_combat_inherits(CombatStrategyWithActions, _this);
        var _super = dist_combat_createSuper(CombatStrategyWithActions);
        function CombatStrategyWithActions() {
          dist_combat_classCallCheck(this, CombatStrategyWithActions);
          return _super.apply(this, arguments);
        }
        return dist_combat_createClass(CombatStrategyWithActions);
      }(this); // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var proto = CombatStrategyWithActions.prototype;
      var _iterator10 = dist_combat_createForOfIteratorHelper(actions),
        _step10;
      try {
        var _loop = function _loop() {
          var action = _step10.value;
          proto[action] = function (monsters) {
            return this.action(action, monsters);
          };
        };
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          _loop();
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      return CombatStrategyWithActions;
    }
  }]);
  return CombatStrategy;
}();
/**
 * A class to build a macro that combines if statements (keyed on monster) with
 * identical body into a single if statement, to avoid the 37-action limit.
 * Ex: [if x; A; if y; B; if z; A;] will turn into [if x || z; A; if y; B]
 */
var CompressedMacro = /*#__PURE__*/function () {
  function CompressedMacro() {
    dist_combat_classCallCheck(this, CompressedMacro);
    this.components = new Map();
  }
  /**
   * Set the macro for a given monster (replacing any previous macros).
   */
  dist_combat_createClass(CompressedMacro, [{
    key: "add",
    value: function add(monster, macro) {
      var _a;
      var macro_text = macro.toString();
      if (macro_text.length === 0) return;
      if (!this.components.has(macro_text)) this.components.set(macro_text, [monster]);else (_a = this.components.get(macro_text)) === null || _a === void 0 ? void 0 : _a.push(monster);
    }
    /**
     * Compile the compressed form of the macro.
     */
  }, {
    key: "compile",
    value: function compile() {
      var result = new Macro();
      this.components.forEach((monsters, macro) => {
        var condition = monsters.map(mon => "monsterid ".concat(mon.id)).join(" || ");
        result.if_(condition, macro);
      });
      return result;
    }
  }]);
  return CompressedMacro;
}();
/**
 * A class for providing resources to fulfil combat actions.
 */
var CombatResources = /*#__PURE__*/function () {
  function CombatResources() {
    dist_combat_classCallCheck(this, CombatResources);
    this.resources = new Map();
  }
  /**
   * Use the provided resource to fulfil the provided action.
   * (If the resource is undefined, this does nothing).
   */
  dist_combat_createClass(CombatResources, [{
    key: "provide",
    value: function provide(action, resource) {
      if (resource === undefined) return;
      this.resources.set(action, resource);
    }
    /**
     * Return true if the provided action has a resource provided.
     */
  }, {
    key: "has",
    value: function has(action) {
      return this.resources.has(action);
    }
    /**
     * Return all provided combat resources.
     */
  }, {
    key: "all",
    value: function all() {
      return Array.from(this.resources.values());
    }
    /**
     * Get the macro provided by the resource for this action, or undefined if
     * no resource was provided.
     */
  }, {
    key: "getMacro",
    value: function getMacro(action) {
      var resource = this.resources.get(action);
      if (resource === undefined) return undefined;
      if (resource.do instanceof external_kolmafia_namespaceObject.Item) return new Macro().item(resource.do);
      if (resource.do instanceof external_kolmafia_namespaceObject.Skill) return new Macro().skill(resource.do);
      return resource.do;
    }
  }]);
  return CombatResources;
}();
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/outfit.js
var outfit_templateObject, outfit_templateObject2, outfit_templateObject3, outfit_templateObject4, outfit_templateObject5, outfit_templateObject6, outfit_templateObject7, outfit_templateObject8, outfit_templateObject9, outfit_templateObject10, outfit_templateObject11, outfit_templateObject12, outfit_templateObject13, outfit_templateObject14, outfit_templateObject15, outfit_templateObject16, outfit_templateObject17, outfit_templateObject18, outfit_templateObject19, outfit_templateObject20, outfit_templateObject21, outfit_templateObject22, outfit_templateObject23, outfit_templateObject24, outfit_templateObject25, outfit_templateObject26, outfit_templateObject27, outfit_templateObject28, outfit_templateObject29, outfit_templateObject30, outfit_templateObject31, outfit_templateObject32, outfit_templateObject33, outfit_templateObject34, outfit_templateObject35, outfit_templateObject36, outfit_templateObject37, outfit_templateObject38, outfit_templateObject39, outfit_templateObject40, outfit_templateObject41, outfit_templateObject42, outfit_templateObject43, outfit_templateObject44, outfit_templateObject45, outfit_templateObject46, outfit_templateObject47, outfit_templateObject48, outfit_templateObject49, outfit_templateObject50;
function outfit_slicedToArray(arr, i) { return outfit_arrayWithHoles(arr) || outfit_iterableToArrayLimit(arr, i) || outfit_unsupportedIterableToArray(arr, i) || outfit_nonIterableRest(); }
function outfit_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function outfit_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function outfit_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function outfit_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function outfit_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? outfit_ownKeys(Object(source), !0).forEach(function (key) { outfit_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : outfit_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function outfit_defineProperty(obj, key, value) { key = outfit_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function outfit_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = outfit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function outfit_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function outfit_toConsumableArray(arr) { return outfit_arrayWithoutHoles(arr) || outfit_iterableToArray(arr) || outfit_unsupportedIterableToArray(arr) || outfit_nonIterableSpread(); }
function outfit_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function outfit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return outfit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return outfit_arrayLikeToArray(o, minLen); }
function outfit_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function outfit_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return outfit_arrayLikeToArray(arr); }
function outfit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function outfit_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function outfit_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, outfit_toPropertyKey(descriptor.key), descriptor); } }
function outfit_createClass(Constructor, protoProps, staticProps) { if (protoProps) outfit_defineProperties(Constructor.prototype, protoProps); if (staticProps) outfit_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function outfit_toPropertyKey(arg) { var key = outfit_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function outfit_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var outfitSlots = ["hat", "back", "weapon", "offhand", "shirt", "pants", "acc1", "acc2", "acc3", "famequip"];
var riderSlots = (/* unused pure expression or super */ null && (["buddy-bjorn", "crown-of-thrones"]));
var weaponHands = i => i ? (0,external_kolmafia_namespaceObject.weaponHands)(i) : 0;
var outfit_modeableCommands = ["backupcamera", "umbrella", "snowsuit", "edpiece", "retrocape", "parka"];
var Outfit = /*#__PURE__*/function () {
  function Outfit() {
    outfit_classCallCheck(this, Outfit);
    this.equips = new Map();
    this.riders = new Map();
    this.modes = {};
    this.skipDefaults = false;
    this.modifier = "";
    this.avoid = [];
  }
  /**
   * Create an outfit from your current player state.
   */
  outfit_createClass(Outfit, [{
    key: "equippedAmount",
    value:
    /**
     * Check how many of an item is equipped on the outfit.
     */
    function equippedAmount(item) {
      return outfit_toConsumableArray(this.equips.values()).filter(i => i === item).length;
    }
  }, {
    key: "isAvailable",
    value: function isAvailable(item) {
      var _a;
      if ((_a = this.avoid) === null || _a === void 0 ? void 0 : _a.includes(item)) return false;
      if (!lib_have(item, this.equippedAmount(item) + 1)) return false;
      if ((0,external_kolmafia_namespaceObject.booleanModifier)(item, "Single Equip") && this.equippedAmount(item) > 0) return false;
      return true;
    }
    /**
     * Check whether an item is equipped on the outfit, optionally in a specific slot.
     */
  }, {
    key: "haveEquipped",
    value: function haveEquipped(item, slot) {
      if (slot === undefined) return this.equippedAmount(item) > 0;
      return this.equips.get(slot) === item;
    }
  }, {
    key: "equipItemNone",
    value: function equipItemNone(item, slot) {
      if (item !== template_string_$item.none) return false;
      if (slot === undefined) return true;
      if (this.equips.has(slot)) return false;
      this.equips.set(slot, item);
      return true;
    }
  }, {
    key: "equipNonAccessory",
    value: function equipNonAccessory(item, slot) {
      if ($slots(outfit_templateObject || (outfit_templateObject = outfit_taggedTemplateLiteral(["acc1, acc2, acc3"]))).includes((0,external_kolmafia_namespaceObject.toSlot)(item))) return false;
      if (slot !== undefined && slot !== (0,external_kolmafia_namespaceObject.toSlot)(item)) return false;
      if (this.equips.has((0,external_kolmafia_namespaceObject.toSlot)(item))) return false;
      switch ((0,external_kolmafia_namespaceObject.toSlot)(item)) {
        case $slot(outfit_templateObject2 || (outfit_templateObject2 = outfit_taggedTemplateLiteral(["off-hand"]))):
          if (this.equips.has($slot(outfit_templateObject3 || (outfit_templateObject3 = outfit_taggedTemplateLiteral(["weapon"])))) && weaponHands(this.equips.get($slot(outfit_templateObject4 || (outfit_templateObject4 = outfit_taggedTemplateLiteral(["weapon"]))))) !== 1) {
            return false;
          }
          break;
        case $slot(outfit_templateObject5 || (outfit_templateObject5 = outfit_taggedTemplateLiteral(["familiar"]))):
          if (this.familiar !== undefined && !(0,external_kolmafia_namespaceObject.canEquip)(this.familiar, item)) return false;
      }
      if ((0,external_kolmafia_namespaceObject.toSlot)(item) !== $slot(outfit_templateObject6 || (outfit_templateObject6 = outfit_taggedTemplateLiteral(["familiar"]))) && !(0,external_kolmafia_namespaceObject.canEquip)(item)) return false;
      this.equips.set((0,external_kolmafia_namespaceObject.toSlot)(item), item);
      return true;
    }
  }, {
    key: "equipAccessory",
    value: function equipAccessory(item, slot) {
      if (![undefined].concat(outfit_toConsumableArray($slots(outfit_templateObject7 || (outfit_templateObject7 = outfit_taggedTemplateLiteral(["acc1, acc2, acc3"]))))).includes(slot)) return false;
      if ((0,external_kolmafia_namespaceObject.toSlot)(item) !== $slot(outfit_templateObject8 || (outfit_templateObject8 = outfit_taggedTemplateLiteral(["acc1"])))) return false;
      if (!(0,external_kolmafia_namespaceObject.canEquip)(item)) return false;
      if (slot === undefined) {
        // We don't care which of the accessory slots we equip in
        var empty = $slots(outfit_templateObject9 || (outfit_templateObject9 = outfit_taggedTemplateLiteral(["acc1, acc2, acc3"]))).find(s => !this.equips.has(s));
        if (empty === undefined) return false;
        this.equips.set(empty, item);
      } else {
        if (this.equips.has(slot)) return false;
        this.equips.set(slot, item);
      }
      return true;
    }
  }, {
    key: "equipUsingDualWield",
    value: function equipUsingDualWield(item, slot) {
      if (![undefined, $slot(outfit_templateObject10 || (outfit_templateObject10 = outfit_taggedTemplateLiteral(["off-hand"])))].includes(slot)) return false;
      if ((0,external_kolmafia_namespaceObject.toSlot)(item) !== $slot(outfit_templateObject11 || (outfit_templateObject11 = outfit_taggedTemplateLiteral(["weapon"])))) return false;
      if (this.equips.has($slot(outfit_templateObject12 || (outfit_templateObject12 = outfit_taggedTemplateLiteral(["weapon"])))) && weaponHands(this.equips.get($slot(outfit_templateObject13 || (outfit_templateObject13 = outfit_taggedTemplateLiteral(["weapon"]))))) !== 1) {
        return false;
      }
      if (this.equips.has($slot(outfit_templateObject14 || (outfit_templateObject14 = outfit_taggedTemplateLiteral(["off-hand"]))))) return false;
      if (!lib_have($skill(outfit_templateObject15 || (outfit_templateObject15 = outfit_taggedTemplateLiteral(["Double-Fisted Skull Smashing"]))))) return false;
      if (weaponHands(item) !== 1) return false;
      if (!(0,external_kolmafia_namespaceObject.canEquip)(item)) return false;
      this.equips.set($slot(outfit_templateObject16 || (outfit_templateObject16 = outfit_taggedTemplateLiteral(["off-hand"]))), item);
      return true;
    }
  }, {
    key: "getHoldingFamiliar",
    value: function getHoldingFamiliar(item) {
      switch ((0,external_kolmafia_namespaceObject.toSlot)(item)) {
        case $slot(outfit_templateObject17 || (outfit_templateObject17 = outfit_taggedTemplateLiteral(["weapon"]))):
          return $familiar(outfit_templateObject18 || (outfit_templateObject18 = outfit_taggedTemplateLiteral(["Disembodied Hand"])));
        case $slot(outfit_templateObject19 || (outfit_templateObject19 = outfit_taggedTemplateLiteral(["off-hand"]))):
          return $familiar(outfit_templateObject20 || (outfit_templateObject20 = outfit_taggedTemplateLiteral(["Left-Hand Man"])));
        default:
          return undefined;
      }
    }
  }, {
    key: "equipUsingFamiliar",
    value: function equipUsingFamiliar(item, slot) {
      if (![undefined, $slot(outfit_templateObject21 || (outfit_templateObject21 = outfit_taggedTemplateLiteral(["familiar"])))].includes(slot)) return false;
      if (this.equips.has($slot(outfit_templateObject22 || (outfit_templateObject22 = outfit_taggedTemplateLiteral(["familiar"]))))) return false;
      if ((0,external_kolmafia_namespaceObject.booleanModifier)(item, "Single Equip")) return false;
      var familiar = this.getHoldingFamiliar(item);
      if (familiar === undefined || !this.equip(familiar)) return false;
      this.equips.set($slot(outfit_templateObject23 || (outfit_templateObject23 = outfit_taggedTemplateLiteral(["familiar"]))), item);
      return true;
    }
  }, {
    key: "equipItem",
    value: function equipItem(item, slot) {
      return this.haveEquipped(item, slot) || this.equipItemNone(item, slot) || this.isAvailable(item) && (this.equipNonAccessory(item, slot) || this.equipAccessory(item, slot) || this.equipUsingDualWield(item, slot) || this.equipUsingFamiliar(item, slot));
    }
  }, {
    key: "equipFamiliar",
    value: function equipFamiliar(familiar) {
      if (familiar === this.familiar) return true;
      if (this.familiar !== undefined) return false;
      if (familiar !== $familiar.none) {
        if (!lib_have(familiar)) return false;
        if (Array.from(this.riders.values()).includes(familiar)) return false;
      }
      var item = this.equips.get($slot(outfit_templateObject24 || (outfit_templateObject24 = outfit_taggedTemplateLiteral(["familiar"]))));
      if (item !== undefined && item !== template_string_$item.none && !(0,external_kolmafia_namespaceObject.canEquip)(familiar, item)) return false;
      this.familiar = familiar;
      return true;
    }
  }, {
    key: "equipSpec",
    value: function equipSpec(spec) {
      var _this$avoid;
      var _a, _b, _c, _d;
      var succeeded = true;
      for (var _i = 0, _outfitSlots = outfitSlots; _i < _outfitSlots.length; _i++) {
        var slotName = _outfitSlots[_i];
        var slot = (_a = new Map([["famequip", $slot(outfit_templateObject25 || (outfit_templateObject25 = outfit_taggedTemplateLiteral(["familiar"])))], ["offhand", $slot(outfit_templateObject26 || (outfit_templateObject26 = outfit_taggedTemplateLiteral(["off-hand"])))]]).get(slotName)) !== null && _a !== void 0 ? _a : (0,external_kolmafia_namespaceObject.toSlot)(slotName);
        var itemOrItems = spec[slotName];
        if (itemOrItems !== undefined && !this.equip(itemOrItems, slot)) succeeded = false;
      }
      var _iterator = outfit_createForOfIteratorHelper((_b = spec === null || spec === void 0 ? void 0 : spec.equip) !== null && _b !== void 0 ? _b : []),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          if (!this.equip(item)) succeeded = false;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if ((spec === null || spec === void 0 ? void 0 : spec.familiar) !== undefined) {
        if (!this.equip(spec.familiar)) succeeded = false;
      }
      (_this$avoid = this.avoid).push.apply(_this$avoid, outfit_toConsumableArray((_c = spec === null || spec === void 0 ? void 0 : spec.avoid) !== null && _c !== void 0 ? _c : []));
      this.skipDefaults = this.skipDefaults || ((_d = spec.skipDefaults) !== null && _d !== void 0 ? _d : false);
      if (spec.modifier) {
        this.modifier = this.modifier + (this.modifier ? ", " : "") + spec.modifier;
      }
      if (spec.modes) {
        if (!this.setModes(spec.modes)) {
          succeeded = false;
        }
      }
      return succeeded;
    }
    /**
     * Equip the first thing that can be equipped to the outfit.
     *
     * @param things The things to equip.
     * @param slot The slot to equip them.
     * @returns True if one of the things is equipped, and false otherwise.
     */
  }, {
    key: "equipFirst",
    value: function equipFirst(things, slot) {
      return things.some(val => this.equip(val, slot));
    }
    /**
     * Equip a thing to the outfit.
     *
     * If no slot is given, then the thing will be equipped wherever possible
     * (possibly using dual-wielding, any of the accessory slots, or as
     * familiar equipment). If it is impossible to add this thing anywhere to
     * the outfit, this function will return false.
     *
     * If a slot is given, the item will be equipped only in that slot. If the
     * slot is filled with a different item, this function will return false.
     *
     * If the thing is already equipped in the provided slot, or if no slot is
     * given and the thing is already equipped in any slot, this function will
     * return true and not change the outfit.
     *
     * @param thing The thing or things to equip.
     * @param slot The slot to equip them.
     * @returns True if the thing was sucessfully equipped, and false otherwise.
     */
  }, {
    key: "equip",
    value: function equip(thing, slot) {
      if (Array.isArray(thing)) {
        if (slot !== undefined) return this.equipFirst(thing, slot);
        return thing.every(val => this.equip(val));
      }
      if (thing instanceof external_kolmafia_namespaceObject.Item) return this.equipItem(thing, slot);
      if (thing instanceof external_kolmafia_namespaceObject.Familiar) return this.equipFamiliar(thing);
      if (thing instanceof Outfit) return this.equipSpec(thing.spec());
      return this.equipSpec(thing);
    }
  }, {
    key: "bjornify",
    value:
    /**
     * Add a bjornified familiar to the outfit.
     *
     * This function does *not* equip the buddy bjorn itself; it must be equipped separately.
     *
     * If a familiar is already specified for the buddy bjorn that is different from the provided target, this function will return false and not change the buddy bjorn.
     * @param target The familiar to bjornify, or a ranked list of familiars to try to bjornify.
     * @returns True if we successfully set the bjorn to a valid target.
     */
    function bjornify(target) {
      var current = this.riders.get($slot(outfit_templateObject27 || (outfit_templateObject27 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))));
      if (current) {
        if (Array.isArray(target) ? target.includes(current) : current === target) {
          return true;
        }
        return false;
      }
      if (Array.isArray(target)) {
        var fam = target.find(f => lib_have(f) && this.familiar !== f && this.riders.get($slot(outfit_templateObject28 || (outfit_templateObject28 = outfit_taggedTemplateLiteral(["crown-of-thrones"])))) !== f);
        if (fam) {
          this.riders.set($slot(outfit_templateObject29 || (outfit_templateObject29 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))), fam);
          return true;
        }
        return false;
      } else {
        if (lib_have(target) && this.familiar !== target && !Array.from(this.riders.values()).includes(target)) {
          this.riders.set($slot(outfit_templateObject30 || (outfit_templateObject30 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))), target);
          return true;
        }
        return false;
      }
    }
    /**
     * Add anenthroned familiar to the outfit.
     *
     * This function does *not* equip the crown of thrones itself; it must be equipped separately.
     *
     * If a familiar is already specified for the crown of thrones that is different from the provided target, this function will return false and not change the crown of thrones.
     * @param target The familiar to enthrone, or a ranked list of familiars to try to enthrone.
     * @returns True if we successfully set the enthrone to a valid target.
     */
  }, {
    key: "enthrone",
    value: function enthrone(target) {
      var current = this.riders.get($slot(outfit_templateObject31 || (outfit_templateObject31 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))));
      if (current) {
        if (Array.isArray(target) ? target.includes(current) : current === target) {
          return true;
        }
        return false;
      }
      if (Array.isArray(target)) {
        var fam = target.find(f => lib_have(f) && this.familiar !== f && this.riders.get($slot(outfit_templateObject32 || (outfit_templateObject32 = outfit_taggedTemplateLiteral(["buddy-bjorn"])))) !== f);
        if (fam) {
          this.riders.set($slot(outfit_templateObject33 || (outfit_templateObject33 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))), fam);
          return true;
        }
        return false;
      } else {
        if (lib_have(target) && this.familiar !== target && !Array.from(this.riders.values()).includes(target)) {
          this.riders.set($slot(outfit_templateObject34 || (outfit_templateObject34 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))), target);
          return true;
        }
        return false;
      }
    }
    /**
     * Set the provided modes for items that may be equipped in the outfit.
     *
     * This function does *not* equip items for the set modes; they must be
     * equipped separately.
     *
     * If a mode is already set for an item that is different from the provided
     * mode, this function will return false and not change the mode for that
     * item. (But other modes might still be changed if they are compatible.)
     *
     * Note that the superhero and instuctions of a retrocape can be set
     * independently (`undefined` is treated as "don't care").
     *
     * @param modes Modes to set in this outfit.
     * @returns True if all modes were sucessfully set, and false otherwise.
     */
  }, {
    key: "setModes",
    value: function setModes(modes) {
      var _a, _b;
      var compatible = true;
      // Check if the new modes are compatible with existing modes
      for (var _i2 = 0, _modeableCommands = outfit_modeableCommands; _i2 < _modeableCommands.length; _i2++) {
        var mode = _modeableCommands[_i2];
        if (mode === "retrocape") continue; // checked below
        if (this.modes[mode] && modes[mode] && this.modes[mode] !== modes[mode]) {
          compatible = false;
        }
      }
      // Check if retrocape modes are compatible
      // (Parts that are undefined are compatible with everything)
      if (this.modes["retrocape"] && modes["retrocape"]) {
        if (this.modes["retrocape"][0] && modes["retrocape"][0] && this.modes["retrocape"][0] !== modes["retrocape"][0]) {
          compatible = false;
        }
        if (this.modes["retrocape"][1] && modes["retrocape"][1] && this.modes["retrocape"][1] !== modes["retrocape"][1]) {
          compatible = false;
        }
        this.modes["retrocape"][0] = (_a = this.modes["retrocape"][0]) !== null && _a !== void 0 ? _a : modes["retrocape"][0];
        this.modes["retrocape"][1] = (_b = this.modes["retrocape"][1]) !== null && _b !== void 0 ? _b : modes["retrocape"][1];
      }
      this.modes = outfit_objectSpread(outfit_objectSpread({}, modes), this.modes);
      return compatible;
    }
    /**
     * Check if it is possible to equip a thing to this outfit using .equip().
     *
     * This does not change the current outfit.
     *
     * @param thing The thing to equip.
     * @param slot The slot to equip them.
     * @returns True if this thing can be equipped.
     */
  }, {
    key: "canEquip",
    value: function canEquip(thing, slot) {
      var outfit = this.clone();
      return outfit.equip(thing, slot);
    }
    /**
     * Equip this outfit.
     * @param extraOptions Passed to any maximizer calls made.
     */
  }, {
    key: "dress",
    value: function dress(extraOptions) {
      if (this.familiar) (0,external_kolmafia_namespaceObject.useFamiliar)(this.familiar);
      var targetEquipment = Array.from(this.equips.values());
      var usedSlots = new Set();
      // First, we equip non-accessory equipment.
      var nonaccessorySlots = $slots(outfit_templateObject35 || (outfit_templateObject35 = outfit_taggedTemplateLiteral(["weapon, off-hand, hat, back, shirt, pants, familiar"])));
      // We must manually remove equipment that we want to use in a different
      // slot than where it is currently equipped, to avoid a mafia issue.
      // Order is anchored here to prevent DFSS shenanigans
      var _iterator2 = outfit_createForOfIteratorHelper(nonaccessorySlots),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var slot = _step2.value;
          if (targetEquipment.includes((0,external_kolmafia_namespaceObject.equippedItem)(slot)) && this.equips.get(slot) !== (0,external_kolmafia_namespaceObject.equippedItem)(slot) || this.avoid.includes((0,external_kolmafia_namespaceObject.equippedItem)(slot))) (0,external_kolmafia_namespaceObject.equip)(slot, template_string_$item.none);
        }
        // Then we equip all the non-accessory equipment.
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var _iterator3 = outfit_createForOfIteratorHelper(nonaccessorySlots),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _slot = _step3.value;
          var equipment = this.equips.get(_slot);
          if (equipment) {
            (0,external_kolmafia_namespaceObject.equip)(_slot, equipment);
            usedSlots.add(_slot);
          }
        }
        // Next, we equip accessories
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var accessorySlots = $slots(outfit_templateObject36 || (outfit_templateObject36 = outfit_taggedTemplateLiteral(["acc1, acc2, acc3"])));
      var accessoryEquips = accessorySlots.map(slot => this.equips.get(slot)).filter(item => item !== undefined);
      // To plan how to equip accessories, first check which accessories are
      // already equipped in some accessory slot. There is no need to move them,
      // since KoL doesn't care what order accessories are equipped in.
      var missingAccessories = []; // accessories that are not already equipped
      var _iterator4 = outfit_createForOfIteratorHelper(accessoryEquips),
        _step4;
      try {
        var _loop = function _loop() {
          var accessory = _step4.value;
          var alreadyEquipped = accessorySlots.find(slot => !usedSlots.has(slot) && (0,external_kolmafia_namespaceObject.equippedItem)(slot) === accessory);
          if (alreadyEquipped) {
            usedSlots.add(alreadyEquipped);
          } else {
            missingAccessories.push(accessory);
          }
        };
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          _loop();
        }
        // Then, for all accessories that are not currently equipped, use the first
        // open slot to place them.
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      for (var _i3 = 0, _missingAccessories = missingAccessories; _i3 < _missingAccessories.length; _i3++) {
        var accessory = _missingAccessories[_i3];
        var unusedSlot = accessorySlots.find(slot => !usedSlots.has(slot));
        if (unusedSlot === undefined) {
          // This should only occur if there is a bug in .dress()
          throw "No accessory slots remaining";
        }
        (0,external_kolmafia_namespaceObject.equip)(unusedSlot, accessory);
        usedSlots.add(unusedSlot);
      }
      // Handle the rider slots next
      var bjorn = this.riders.get($slot(outfit_templateObject37 || (outfit_templateObject37 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))));
      if (bjorn) {
        if ((0,external_kolmafia_namespaceObject.myEnthronedFamiliar)() === bjorn) (0,external_kolmafia_namespaceObject.enthroneFamiliar)($familiar.none);
        if ((0,external_kolmafia_namespaceObject.myBjornedFamiliar)() !== bjorn) (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(bjorn);
        usedSlots.add($slot(outfit_templateObject38 || (outfit_templateObject38 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))));
      }
      var crown = this.riders.get($slot(outfit_templateObject39 || (outfit_templateObject39 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))));
      if (crown) {
        if ((0,external_kolmafia_namespaceObject.myBjornedFamiliar)() === crown) (0,external_kolmafia_namespaceObject.bjornifyFamiliar)($familiar.none);
        if ((0,external_kolmafia_namespaceObject.myEnthronedFamiliar)() !== crown) (0,external_kolmafia_namespaceObject.enthroneFamiliar)(crown);
        usedSlots.add($slot(outfit_templateObject40 || (outfit_templateObject40 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))));
      }
      // Remaining slots are filled by the maximizer
      var modes = convertToLibramModes(this.modes);
      if (this.modifier) {
        var allRequirements = [new Requirement([this.modifier], {
          preventSlot: outfit_toConsumableArray(usedSlots),
          preventEquip: this.avoid,
          modes: modes
        })];
        if (extraOptions) allRequirements.push(new Requirement([], extraOptions));
        if (!Requirement.merge(allRequirements).maximize()) {
          throw "Unable to maximize ".concat(this.modifier);
        }
        (0,external_kolmafia_namespaceObject.logprint)("Maximize: ".concat(this.modifier));
      }
      // Set the modes of any equipped items.
      applyModes(modes);
      // Verify that all equipment was indeed equipped
      if (this.familiar !== undefined && (0,external_kolmafia_namespaceObject.myFamiliar)() !== this.familiar) throw "Failed to fully dress (expected: familiar ".concat(this.familiar, ")");
      var _iterator5 = outfit_createForOfIteratorHelper(nonaccessorySlots),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _slot2 = _step5.value;
          if (this.equips.has(_slot2) && (0,external_kolmafia_namespaceObject.equippedItem)(_slot2) !== this.equips.get(_slot2)) {
            throw "Failed to fully dress (expected: ".concat(_slot2, " ").concat(this.equips.get(_slot2), ")");
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      var _iterator6 = outfit_createForOfIteratorHelper(accessoryEquips),
        _step6;
      try {
        var _loop2 = function _loop2() {
          var accessory = _step6.value;
          if ((0,external_kolmafia_namespaceObject.equippedAmount)(accessory) < accessoryEquips.filter(acc => acc === accessory).length) {
            throw "Failed to fully dress (expected: acc ".concat(accessory, ")");
          }
        };
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      for (var _i4 = 0, _arr = [[$slot(outfit_templateObject41 || (outfit_templateObject41 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))), external_kolmafia_namespaceObject.myBjornedFamiliar], [$slot(outfit_templateObject42 || (outfit_templateObject42 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))), external_kolmafia_namespaceObject.myEnthronedFamiliar]]; _i4 < _arr.length; _i4++) {
        var _arr$_i = outfit_slicedToArray(_arr[_i4], 2),
          rider = _arr$_i[0],
          checkingFunction = _arr$_i[1];
        var wanted = this.riders.get(rider);
        if (wanted && checkingFunction() !== wanted) {
          throw "Failed to fully dress: (expected ".concat(rider, " ").concat(wanted, ")");
        }
      }
    }
    /**
     * Build an Outfit identical to this outfit.
     */
  }, {
    key: "clone",
    value: function clone() {
      var result = new Outfit();
      result.equips = new Map(this.equips);
      result.skipDefaults = this.skipDefaults;
      result.familiar = this.familiar;
      result.modifier = this.modifier;
      result.avoid = outfit_toConsumableArray(this.avoid);
      result.modes = outfit_objectSpread({}, this.modes);
      return result;
    }
    /**
     * Build an OutfitSpec identical to this outfit.
     */
  }, {
    key: "spec",
    value: function spec() {
      var _a;
      var result = {
        modifier: this.modifier,
        familiar: this.familiar,
        avoid: outfit_toConsumableArray(this.avoid),
        skipDefaults: this.skipDefaults,
        modes: outfit_objectSpread({}, this.modes)
      };
      // Add all equipment forced in a particular slot
      for (var _i5 = 0, _outfitSlots2 = outfitSlots; _i5 < _outfitSlots2.length; _i5++) {
        var slotName = _outfitSlots2[_i5];
        result[slotName] = this.equips.get((_a = new Map([["famequip", $slot(outfit_templateObject43 || (outfit_templateObject43 = outfit_taggedTemplateLiteral(["familiar"])))], ["offhand", $slot(outfit_templateObject44 || (outfit_templateObject44 = outfit_taggedTemplateLiteral(["off-hand"])))]]).get(slotName)) !== null && _a !== void 0 ? _a : (0,external_kolmafia_namespaceObject.toSlot)(slotName));
      }
      return result;
    }
  }], [{
    key: "current",
    value: function current() {
      var _a;
      var outfit = new Outfit();
      var familiar = (0,external_kolmafia_namespaceObject.myFamiliar)();
      if (outfit.equip(familiar)) {
        throw "Failed to create outfit from current state (expected: familiar ".concat(familiar, ")");
      }
      for (var _i6 = 0, _outfitSlots3 = outfitSlots; _i6 < _outfitSlots3.length; _i6++) {
        var slotName = _outfitSlots3[_i6];
        var slot = (_a = new Map([["famequip", $slot(outfit_templateObject45 || (outfit_templateObject45 = outfit_taggedTemplateLiteral(["familiar"])))], ["offhand", $slot(outfit_templateObject46 || (outfit_templateObject46 = outfit_taggedTemplateLiteral(["off-hand"])))]]).get(slotName)) !== null && _a !== void 0 ? _a : (0,external_kolmafia_namespaceObject.toSlot)(slotName);
        var item = (0,external_kolmafia_namespaceObject.equippedItem)(slot);
        if (!outfit.equip(item, slot)) {
          throw "Failed to create outfit from current state (expected: ".concat(slot, " ").concat(item, ")");
        }
      }
      if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject47 || (outfit_templateObject47 = outfit_taggedTemplateLiteral(["Crown of Thrones"]))))) outfit.riders.set($slot(outfit_templateObject48 || (outfit_templateObject48 = outfit_taggedTemplateLiteral(["crown-of-thrones"]))), (0,external_kolmafia_namespaceObject.myEnthronedFamiliar)());
      if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject49 || (outfit_templateObject49 = outfit_taggedTemplateLiteral(["Buddy Bjorn"]))))) outfit.riders.set($slot(outfit_templateObject50 || (outfit_templateObject50 = outfit_taggedTemplateLiteral(["buddy-bjorn"]))), (0,external_kolmafia_namespaceObject.myBjornedFamiliar)());
      outfit.setModes(outfit_getCurrentModes());
      return outfit;
    }
  }, {
    key: "from",
    value: function from(spec) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var outfit = new Outfit();
      var success = outfit.equip(spec);
      if (!success && error) throw error;
      return success ? outfit : null;
    }
  }]);
  return Outfit;
}();
/**
 * Get the modes of this outfit in a type compatible with Libram.
 *
 * This conversion is needed since we store the retrocape modes
 * internally as an array, but libram uses a string.
 *
 * @returns The modes equipped to this outfit.
 */
function convertToLibramModes(modes) {
  var _a;
  return {
    backupcamera: modes["backupcamera"],
    umbrella: modes["umbrella"],
    snowsuit: modes["snowsuit"],
    edpiece: modes["edpiece"],
    retrocape: (_a = modes["retrocape"]) === null || _a === void 0 ? void 0 : _a.filter(s => s !== undefined).join(" "),
    parka: modes["parka"]
  };
}
/**
 * Get the current modes of all items.
 *
 * @returns The current mode settings for all items, equipped or not.
 */
function outfit_getCurrentModes() {
  return {
    backupcamera: getMode("backupCameraMode", ["ml", "meat", "init"]),
    umbrella: getMode("umbrellaState", ["broken", "forward-facing", "bucket style", "pitchfork style", "constantly twirling", "cocoon"]),
    snowsuit: getMode("snowsuit", ["eyebrows", "smirk", "nose", "goatee", "hat"]),
    edpiece: getMode("edPiece", ["bear", "owl", "puma", "hyena", "mouse", "weasel", "fish"]),
    retrocape: [getMode("retroCapeSuperhero", ["vampire", "heck", "robot"]), getMode("retroCapeWashingInstructions", ["hold", "thrill", "kiss", "kill"])],
    parka: getMode("parkaMode", ["kachungasaur", "dilophosaur", "ghostasaurus", "spikolodon", "pterodactyl"])
  };
}
/**
 * Get the current value for a mode in a type-safe way.
 *
 * @param property The mafia property for the mode.
 * @param options A typed list of options for the mode.
 * @returns The mode if the property value matched a valid option, or undefined.
 */
function getMode(property, options) {
  var val = property_get(property, "");
  return options.find(s => s === val); // .includes has type issues
}
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/engine.js
var engine_templateObject;
function engine_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function engine_toConsumableArray(arr) { return engine_arrayWithoutHoles(arr) || engine_iterableToArray(arr) || engine_unsupportedIterableToArray(arr) || engine_nonIterableSpread(); }
function engine_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function engine_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function engine_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return engine_arrayLikeToArray(arr); }
function engine_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = engine_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function engine_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return engine_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return engine_arrayLikeToArray(o, minLen); }
function engine_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function engine_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, engine_toPropertyKey(descriptor.key), descriptor); } }
function engine_createClass(Constructor, protoProps, staticProps) { if (protoProps) engine_defineProperties(Constructor.prototype, protoProps); if (staticProps) engine_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function engine_toPropertyKey(arg) { var key = engine_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function engine_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function engine_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var EngineOptions = /*#__PURE__*/(/* unused pure expression or super */ null && (engine_createClass(function EngineOptions() {
  engine_classCallCheck(this, EngineOptions);
})));
var grimoireCCS = "grimoire_macro";
var Engine = /*#__PURE__*/function () {
  /**
   * Create the engine.
   * @param tasks A list of tasks for looking up task dependencies.
   * @param options Basic configuration of the engine.
   */
  function Engine(tasks, options) {
    engine_classCallCheck(this, Engine);
    this.attempts = {};
    this.propertyManager = new PropertiesManager();
    this.tasks_by_name = new Map();
    this.cachedCcsContents = "";
    this.tasks = tasks;
    this.options = options !== null && options !== void 0 ? options : {};
    var _iterator = engine_createForOfIteratorHelper(tasks),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var task = _step.value;
        this.tasks_by_name.set(task.name, task);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    this.initPropertiesManager(this.propertyManager);
  }
  /**
   * Determine the next task to perform.
   * By default, this is the first task in the task list that is available.
   * @returns The next task to perform, or undefined if no tasks are available.
   */
  engine_createClass(Engine, [{
    key: "getNextTask",
    value: function getNextTask() {
      return this.tasks.find(task => this.available(task));
    }
    /**
     * Continually get the next task and execute it.
     * @param actions If given, only perform up to this many tasks.
     */
  }, {
    key: "run",
    value: function run(actions) {
      for (var i = 0; i < (actions !== null && actions !== void 0 ? actions : Infinity); i++) {
        var task = this.getNextTask();
        if (!task) return;
        this.execute(task);
      }
    }
    /**
     * Close the engine and reset all properties.
     * After this has been called, this object should not be used.
     */
  }, {
    key: "destruct",
    value: function destruct() {
      this.propertyManager.resetAll();
      (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
    }
    /**
     * Check if the given task is available at this moment.
     * @returns true if all dependencies are complete and the task is ready.
     *  Note that dependencies are not checked transitively. That is, if
     *  A depends on B which depends on C, then A is ready if B is complete
     *  (regardless of if C is complete or not).
     */
  }, {
    key: "available",
    value: function available(task) {
      var _a;
      var _iterator2 = engine_createForOfIteratorHelper((_a = task.after) !== null && _a !== void 0 ? _a : []),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var after = _step2.value;
          var after_task = this.tasks_by_name.get(after);
          if (after_task === undefined) throw "Unknown task dependency ".concat(after, " on ").concat(task.name);
          if (!after_task.completed()) return false;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (task.ready && !task.ready()) return false;
      if (task.completed()) return false;
      return true;
    }
    /**
     * Perform all steps to execute the provided task.
     * This is the main entry point for the Engine.
     * @param task The current executing task.
     */
  }, {
    key: "execute",
    value: function execute(task) {
      var _a, _b, _c, _d, _e;
      (0,external_kolmafia_namespaceObject.print)("");
      (0,external_kolmafia_namespaceObject.print)("Executing ".concat(task.name), "blue");
      // Determine the proper postcondition for after the task executes.
      var postcondition = (_b = (_a = task.limit) === null || _a === void 0 ? void 0 : _a.guard) === null || _b === void 0 ? void 0 : _b.call(_a);
      // Acquire any items and effects first, possibly for later execution steps.
      this.acquireItems(task);
      this.acquireEffects(task);
      // Prepare the outfit, with resources.
      var task_combat = (_d = (_c = task.combat) === null || _c === void 0 ? void 0 : _c.clone()) !== null && _d !== void 0 ? _d : new CombatStrategy();
      var outfit = this.createOutfit(task);
      var task_resources = new CombatResources();
      this.customize(task, outfit, task_combat, task_resources);
      this.dress(task, outfit);
      // Prepare combat and choices
      this.setCombat(task, task_combat, task_resources);
      this.setChoices(task, this.propertyManager);
      // Actually perform the task
      var _iterator3 = engine_createForOfIteratorHelper(task_resources.all()),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var resource = _step3.value;
          (_e = resource.prepare) === null || _e === void 0 ? void 0 : _e.call(resource);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      this.prepare(task);
      this.do(task);
      while (this.shouldRepeatAdv(task)) {
        _set("lastEncounter", "");
        this.do(task);
      }
      this.post(task);
      // Mark that we tried the task, and apply limits
      this.markAttempt(task);
      this.checkLimits(task, postcondition);
    }
    /**
     * Acquire all items for the task.
     * @param task The current executing task.
     */
  }, {
    key: "acquireItems",
    value: function acquireItems(task) {
      var _a;
      var acquire = task.acquire instanceof Function ? task.acquire() : task.acquire;
      var _iterator4 = engine_createForOfIteratorHelper(acquire || []),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var to_get = _step4.value;
          var num_needed = (_a = to_get.num) !== null && _a !== void 0 ? _a : 1;
          var num_have = (0,external_kolmafia_namespaceObject.itemAmount)(to_get.item) + (0,external_kolmafia_namespaceObject.equippedAmount)(to_get.item);
          if (num_needed <= num_have) continue;
          if (to_get.useful !== undefined && !to_get.useful()) continue;
          if (to_get.get) {
            to_get.get();
          } else if (to_get.price !== undefined) {
            (0,external_kolmafia_namespaceObject.buy)(to_get.item, num_needed - num_have, to_get.price);
          } else if (Object.keys((0,external_kolmafia_namespaceObject.getRelated)(to_get.item, "fold")).length > 0) {
            (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(to_get.item));
          } else {
            (0,external_kolmafia_namespaceObject.retrieveItem)(to_get.item, num_needed);
          }
          if ((0,external_kolmafia_namespaceObject.itemAmount)(to_get.item) + (0,external_kolmafia_namespaceObject.equippedAmount)(to_get.item) < num_needed && !to_get.optional) {
            throw "Task ".concat(task.name, " was unable to acquire ").concat(num_needed, " ").concat(to_get.item);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
    /**
     * Acquire all effects for the task.
     * @param task The current executing task.
     */
  }, {
    key: "acquireEffects",
    value: function acquireEffects(task) {
      var _a;
      var effects = typeof task.effects === "function" ? task.effects() : (_a = task.effects) !== null && _a !== void 0 ? _a : [];
      var songs = effects.filter(effect => isSong(effect));
      if (songs.length > maxSongs()) throw "Too many AT songs";
      var extraSongs = Object.keys((0,external_kolmafia_namespaceObject.myEffects)()).map(effectName => (0,external_kolmafia_namespaceObject.toEffect)(effectName)).filter(effect => isSong(effect) && !songs.includes(effect));
      while (songs.length + extraSongs.length > maxSongs()) {
        var toRemove = extraSongs.pop();
        if (toRemove === undefined) {
          break;
        } else {
          lib_uneffect(toRemove);
        }
      }
      var _iterator5 = engine_createForOfIteratorHelper(effects),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var effect = _step5.value;
          ensureEffect(effect);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
    /**
     * Create an outfit for the task with all required equipment.
     * @param task The current executing task.
     */
  }, {
    key: "createOutfit",
    value: function createOutfit(task) {
      var spec = typeof task.outfit === "function" ? task.outfit() : task.outfit;
      if (spec instanceof Outfit) return spec.clone();
      var outfit = new Outfit();
      if (spec !== undefined) {
        if (!outfit.equip(spec)) {
          throw "Unable to equip all items for ".concat(task.name);
        }
      }
      return outfit;
    }
    /**
     * Equip the outfit for the task.
     * @param task The current executing task.
     * @param outfit The outfit for the task, possibly augmented by the engine.
     */
  }, {
    key: "dress",
    value: function dress(task, outfit) {
      if (task.do instanceof external_kolmafia_namespaceObject.Location) (0,external_kolmafia_namespaceObject.setLocation)(task.do);
      outfit.dress();
    }
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /**
     * Perform any engine-specific customization for the outfit and combat plan.
     *
     * This is a natural method to override in order to:
     *   * Enable the use of any resources in the outfit or combat (e.g., allocate banishers).
     *   * Equip a default outfit.
     *   * Determine additional monster macros at a global level (e.g., use flyers).
     * @param task The current executing task.
     * @param outfit The outfit for the task.
     * @param combat The combat strategy so far for the task.
     * @param resources The combat resources assigned so far for the task.
     */
  }, {
    key: "customize",
    value: function customize(task, outfit, combat, resources) {
      // do nothing by default
    }
    /* eslint-enable @typescript-eslint/no-unused-vars */
    /**
     * Set the choice settings for the task.
     * @param task The current executing task.
     * @param manager The property manager to use.
     */
  }, {
    key: "setChoices",
    value: function setChoices(task, manager) {
      var choices = {};
      for (var choice_id_str in task.choices) {
        var choice_id = parseInt(choice_id_str);
        var choice = task.choices[choice_id];
        if (typeof choice === "number") choices[choice_id] = choice;else choices[choice_id] = choice();
      }
      manager.setChoices(choices);
    }
    /**
     * Save the combat macro for this task.
     * @param task The current executing task.
     * @param task_combat The completed combat strategy far for the task.
     * @param task_resources The combat resources assigned for the task.
     */
  }, {
    key: "setCombat",
    value: function setCombat(task, task_combat, task_resources) {
      var _a;
      // Save regular combat macro
      var macro = task_combat.compile(task_resources, (_a = this.options) === null || _a === void 0 ? void 0 : _a.combat_defaults, task.do instanceof external_kolmafia_namespaceObject.Location ? task.do : undefined);
      macro.save();
      if (!this.options.ccs) {
        // Use the macro through a CCS file
        var otherCCSEntries = task_combat.compileCcs();
        var ccsContents = ["[default]", "\"".concat(macro.toString(), "\"")].concat(engine_toConsumableArray(otherCCSEntries)).join("\n");
        // Log Macro + other CCS
        (0,external_kolmafia_namespaceObject.logprint)("CCS: ".concat(ccsContents.replace("\n", "\\n ")));
        if (ccsContents !== this.cachedCcsContents) {
          (0,external_kolmafia_namespaceObject.writeCcs)(ccsContents, grimoireCCS);
          (0,external_kolmafia_namespaceObject.cliExecute)("ccs ".concat(grimoireCCS)); // force Mafia to reparse the ccs
          this.cachedCcsContents = ccsContents;
        }
      }
      // Save autoattack combat macro
      var autoattack = task_combat.compileAutoattack();
      if (autoattack.toString().length > 1) {
        (0,external_kolmafia_namespaceObject.logprint)("Autoattack macro: ".concat(autoattack.toString()));
        autoattack.setAutoAttack();
      } else {
        (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
      }
    }
    /**
     * Do any task-specific preparation.
     * @param task The current executing task.
     */
  }, {
    key: "prepare",
    value: function prepare(task) {
      var _a;
      (_a = task.prepare) === null || _a === void 0 ? void 0 : _a.call(task);
    }
    /**
     * Actually perform the task.
     * @param task The current executing task.
     */
  }, {
    key: "do",
    value: function _do(task) {
      if (typeof task.do === "function") {
        task.do();
      } else {
        (0,external_kolmafia_namespaceObject.adv1)(task.do, 0, "");
      }
      (0,external_kolmafia_namespaceObject.runCombat)();
      while ((0,external_kolmafia_namespaceObject.inMultiFight)()) (0,external_kolmafia_namespaceObject.runCombat)();
      if ((0,external_kolmafia_namespaceObject.choiceFollowsFight)()) (0,external_kolmafia_namespaceObject.runChoice)(-1);
    }
    /**
     * Check if the task.do should be immediately repeated without any prep.
     *
     * By default, this is only used to repeat a task if we hit one of:
     *   1. Halloweener dog noncombats,
     *   2. June cleaver noncombats, or
     *   3. Lil' Doctor™ bag noncombt.
     * @param task The current executing task.
     * @returns True if the task should be immediately repeated.
     */
  }, {
    key: "shouldRepeatAdv",
    value: function shouldRepeatAdv(task) {
      return task.do instanceof external_kolmafia_namespaceObject.Location && lastEncounterWasWanderingNC();
    }
    /**
     * Do any task-specific wrapup activities.
     * @param task The current executing task.
     */
  }, {
    key: "post",
    value: function post(task) {
      var _a;
      (_a = task.post) === null || _a === void 0 ? void 0 : _a.call(task);
    }
    /**
     * Mark that an attempt was made on the current task.
     * @param task The current executing task.
     */
  }, {
    key: "markAttempt",
    value: function markAttempt(task) {
      if (!(task.name in this.attempts)) this.attempts[task.name] = 0;
      this.attempts[task.name]++;
    }
    /**
     * Check if the task has passed any of its internal limits.
     * @param task The task to check.
     * @throws An error if any of the internal limits have been passed.
     */
  }, {
    key: "checkLimits",
    value: function checkLimits(task, postcondition) {
      var _a;
      if (!task.limit) return;
      var failureMessage = task.limit.message ? " ".concat(task.limit.message) : "";
      if (!task.completed()) {
        if (task.limit.tries && this.attempts[task.name] >= task.limit.tries) throw "Task ".concat(task.name, " did not complete within ").concat(task.limit.tries, " attempts. Please check what went wrong.").concat(failureMessage);
        if (task.limit.soft && this.attempts[task.name] >= task.limit.soft) throw "Task ".concat(task.name, " did not complete within ").concat(task.limit.soft, " attempts. Please check what went wrong (you may just be unlucky).").concat(failureMessage);
        if (task.limit.turns && task.do instanceof external_kolmafia_namespaceObject.Location && task.do.turnsSpent >= task.limit.turns) throw "Task ".concat(task.name, " did not complete within ").concat(task.limit.turns, " turns. Please check what went wrong.").concat(failureMessage);
        if (task.limit.unready && ((_a = task.ready) === null || _a === void 0 ? void 0 : _a.call(task))) throw "Task ".concat(task.name, " is still ready, but it should not be. Please check what went wrong.").concat(failureMessage);
      }
      if (postcondition && !postcondition()) {
        throw "Task ".concat(task.name, " failed its guard. Please check what went wrong.").concat(failureMessage);
      }
    }
    /**
     * Initialize properties for the script.
     * @param manager The properties manager to use.
     */
  }, {
    key: "initPropertiesManager",
    value: function initPropertiesManager(manager) {
      var _a;
      // Properties adapted from garbo
      manager.set({
        logPreferenceChange: true,
        logPreferenceChangeFilter: engine_toConsumableArray(new Set([].concat(engine_toConsumableArray(property_get("logPreferenceChangeFilter").split(",")), ["libram_savedMacro", "maximizerMRUList", "testudinalTeachings", "_lastCombatStarted"]))).sort().filter(a => a).join(","),
        battleAction: "custom combat script",
        autoSatisfyWithMall: true,
        autoSatisfyWithNPCs: true,
        autoSatisfyWithCoinmasters: true,
        autoSatisfyWithStash: false,
        dontStopForCounters: true,
        maximizerFoldables: true,
        hpAutoRecovery: "-0.05",
        hpAutoRecoveryTarget: "0.0",
        mpAutoRecovery: "-0.05",
        mpAutoRecoveryTarget: "0.0",
        afterAdventureScript: "",
        betweenBattleScript: "",
        choiceAdventureScript: "",
        familiarScript: "",
        currentMood: "apathetic",
        autoTuxedo: true,
        autoPinkyRing: true,
        autoGarish: true,
        allowNonMoodBurning: false,
        allowSummonBurning: true,
        libramSkillsSoftcore: "none"
      });
      if (this.options.ccs !== "") {
        if (this.options.ccs === undefined && (0,external_kolmafia_namespaceObject.readCcs)(grimoireCCS) === "") {
          // Write a simple CCS so we can switch to it
          (0,external_kolmafia_namespaceObject.writeCcs)("[ default ]\nabort", grimoireCCS);
        }
        manager.set({
          customCombatScript: (_a = this.options.ccs) !== null && _a !== void 0 ? _a : grimoireCCS
        });
      }
    }
  }]);
  return Engine;
}();
function maxSongs() {
  return lib_have($skill(engine_templateObject || (engine_templateObject = engine_taggedTemplateLiteral(["Mariachi Memory"])))) ? 4 : 3;
}
var wanderingNCs = new Set(["Wooof! Wooooooof!", "Playing Fetch*", "A Pound of Cure", "Aunts not Ants", "Bath Time", "Beware of Aligator", "Delicious Sprouts", "Hypnotic Master", "Lost and Found", "Poetic Justice", "Summer Days", "Teacher's Pet"]);
/**
 * Return true if the last adv was one of:
 *   1. Halloweener dog noncombats,
 *   2. June cleaver noncombats, or
 *   3. Lil' Doctor™ bag noncombt.
 */
function lastEncounterWasWanderingNC() {
  return wanderingNCs.has(property_get("lastEncounter"));
}
;// CONCATENATED MODULE: ./node_modules/grimoire-kolmafia/dist/index.js







;// CONCATENATED MODULE: ./src/config.ts
var config_templateObject, config_templateObject2, config_templateObject3, config_templateObject4;
function config_toConsumableArray(arr) { return config_arrayWithoutHoles(arr) || config_iterableToArray(arr) || config_unsupportedIterableToArray(arr) || config_nonIterableSpread(); }
function config_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function config_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return config_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return config_arrayLikeToArray(o, minLen); }
function config_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function config_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return config_arrayLikeToArray(arr); }
function config_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function config_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var workshedAliases = [{
  item: template_string_$item(config_templateObject || (config_templateObject = config_taggedTemplateLiteral(["model train set"]))),
  aliases: ["trainrealm"]
}, {
  item: template_string_$item(config_templateObject2 || (config_templateObject2 = config_taggedTemplateLiteral(["Asdon Martin keyfob"]))),
  aliases: ["breadcar", "car", "aston"]
}, {
  item: template_string_$item(config_templateObject3 || (config_templateObject3 = config_taggedTemplateLiteral(["Little Geneticist DNA-Splicing Lab"]))),
  aliases: ["dnalab"]
}];
var unaliasedSheds = template_string_$items(config_templateObject4 || (config_templateObject4 = config_taggedTemplateLiteral(["cold medicine cabinet, diabolic pizza cube, portable Mayo Clinic, spinning wheel, warbear auto-anvil, warbear chemistry lab, warbear high-efficiency still, warbear induction oven, warbear jackhammer drill press, warbear LP-ROM burner"])));
var allWorkshedAliases = [].concat(config_toConsumableArray(workshedAliases.map(_ref => {
  var item = _ref.item,
    aliases = _ref.aliases;
  return {
    item: item,
    aliases: [].concat(config_toConsumableArray(aliases), [item.name.toLowerCase()])
  };
})), config_toConsumableArray(unaliasedSheds.map(item => {
  return {
    item: item,
    aliases: [item.name.toLowerCase()]
  };
})));
function toInitials(s) {
  var initials = s.split(" ").map(term => term[0]).join("");
  return initials.length >= 3 ? initials : "";
}
function stripString(s) {
  if (s.includes(" ")) return stripString(s.replace(" ", ""));else if (s.includes("-")) return stripString(s.replace("-", ""));
  return s;
}
function stringToWorkshedItem(s) {
  // An empty string is a subset of every string and will match all the worksheds
  // So we explicitly handle this case here
  if (s === "") return null;
  var lowerCaseWorkshed = s.toLowerCase();
  var strippedWorkshed = stripString(lowerCaseWorkshed);
  var validWorksheds = allWorkshedAliases.filter(_ref2 => {
    var item = _ref2.item,
      aliases = _ref2.aliases;
    return toInitials(item.name.toLowerCase()) === lowerCaseWorkshed || item.name.toLowerCase().includes(lowerCaseWorkshed) || stripString(item.name.toLowerCase()).includes(strippedWorkshed) || aliases.some(alias => alias === lowerCaseWorkshed);
  });

  // grimoire catches the errors and throws its own errors
  // so throw new Error(text) would result in the text not getting printed.
  if (validWorksheds.length > 1) {
    (0,external_kolmafia_namespaceObject.print)("Invalid Workshed: ".concat(s, " matches multiple worksheds! Matched:"), "red");
    validWorksheds.forEach(_ref3 => {
      var item = _ref3.item;
      return (0,external_kolmafia_namespaceObject.print)("".concat(item), "red");
    });
    throw new Error();
  } else if (validWorksheds.length === 0) {
    (0,external_kolmafia_namespaceObject.print)("Invalid Workshed: ".concat(s, " does not match any worksheds!"), "red");
    throw new Error();
  }
  return validWorksheds[0].item;
}
var config_globalOptions = Args.create("garbo", 'This script is an automated turn-burning script for the Kingdom of Loathing that spends a day\'s resources and adventures on farming\n\
You can use multiple options in conjunction, e.g. "garbo nobarf ascend"', {
  ascend: Args.flag({
    setting: "",
    help: "operate under the assumption that you're ascending after running it, rather than experiencing rollover. It will use borrowed time, it won't charge stinky cheese items, etc.",
    default: false
  }),
  loginvalidwishes: Args.flag({
    setting: "",
    help: "Logs any invalid wishes at the end of the day.",
    hidden: true
  }),
  nobarf: Args.flag({
    setting: "",
    help: "do beginning of the day setup, embezzlers, and various daily flags, but will terminate before normal Barf Mountain turns. May close NEP for the day.",
    default: false
  }),
  nodiet: Args.flag({
    setting: "",
    help: "skip eating and drinking anything as a part of its run (including pantsgiving).",
    default: false
  }),
  quick: Args.flag({
    setting: "",
    help: "*EXPERIMENTAL* garbo will sacrifice some optimal behaviors to run quicker. Estimated and actual profits may be less accurate in this mode.",
    default: false
  }),
  returnstash: Args.flag({
    setting: "",
    help: "return all items to your stash clan's stash, then quit",
    default: false
  }),
  simdiet: Args.flag({
    setting: "",
    help: "print out what it computes as an optimal diet and then exit.",
    default: false
  }),
  turns: Args.number({
    setting: "",
    help: 'terminate after the specified number of turns, e.g. "garbo 200" or "garbo turns=200" will terminate after 200 turns are spent. Negative inputs will cause garbo to terminate when the specified number of turns remain.',
    default: 0
  }),
  version: Args.flag({
    setting: "",
    help: "Print the current version and exit."
  }),
  workshed: Args.custom({
    default: null,
    help: "Intelligently switch into the workshed whose item name you give us. Also accepts substrings of the item name (e.g. dna, trainset), certain shorthand aliases (e.g. car) and initials of length >= 3 (e.g. cmc).",
    options: [].concat(config_toConsumableArray(allWorkshedAliases.map(_ref4 => {
      var item = _ref4.item,
        aliases = _ref4.aliases;
      return [item, "".concat([].concat(config_toConsumableArray(aliases), [toInitials(item.name.toLowerCase())]).filter(alias => alias !== "").join(", "))];
    })), [[null, "leave this field blank"]])
  }, stringToWorkshedItem, "Item"),
  prefs: Args.group("You can manually set the properties below, but it's recommended that you use the relay interface (dropdown menu at the top left in the browser)", {
    valueOfAdventure: Args.number({
      setting: "valueOfAdventure",
      help: "This is a native mafia property, garbo will make purchasing decisions based on this value. Recommended to be at least 3501."
    }),
    valueOfFreeFight: Args.number({
      setting: "garbo_valueOfFreeFight",
      help: "Set to whatever you estimate the value of a free fight/run to be for you. (Default 2000)",
      default: 2000
    }),
    yachtzeechain: Args.flag({
      setting: "garbo_yachtzeechain",
      help: "only diets after free fights, and attempts to estimate if Yachtzee! chaining is profitable for you - if so, it consumes a specific diet which uses ~0-36 spleen;\
      if not it automatically continues with the regular diet. Requires Spring Break Beach access (it will not grab a one-day pass for you, but will make an attempt if one is used).\
      Sweet Synthesis is strongly recommended, as with access to other meat% buffs from Source Terminal, Fortune Teller, KGB and the summoning chamber. Having access to a PYEC (on hand or in the clan stash) is a plus.",
      default: false
    }),
    candydish: Args.flag({
      setting: "garbo_candydish",
      help: "*DANGEROUS* garbo will consider using porcelain candy dishes. This could result in potentially destructive behavior in the instance that the user does not have sufficient meat (1-2 million) to purchase as many dishes as garbo desires or there is a price cliff.",
      default: false,
      hidden: true
    }),
    embezzlerMultiplier: Args.number({
      setting: "garbo_embezzlerMultiplier",
      help: "The amount we multiply our valueOfAdventure by when estimating marginal Embezzler profit. (Default 2.5)",
      default: 2.5,
      hidden: true
    }),
    stashClan: Args.string({
      setting: "garbo_stashClan",
      help: "If set, garbo will attempt to switch to this clan to take and return useful clan stash item, i.e. a Haiku Katana or Repaid Diaper. Leave blank to disable.",
      default: ""
    }),
    vipClan: Args.string({
      setting: "garbo_vipClan",
      help: "If set, garbo will attempt to switch to this clan to utilize VIP furniture if you have a key. Leave blank to disable",
      default: ""
    }),
    skipAscensionCheck: Args.boolean({
      setting: "garbo_skipAscensionCheck",
      help: "Set to true to skip verifying that your account has broken the prism, otherwise you will be warned upon starting the script."
    }),
    fightGlitch: Args.boolean({
      setting: "garbo_fightGlitch",
      help: "Set to true to fight the glitch season reward. You need certain skills, see relay for info."
    }),
    buyPass: Args.boolean({
      setting: "garbo_buyPass",
      help: "Set to true to buy a Dinsey day pass with FunFunds at the end of the day, if possible."
    }),
    autoUserConfirm: Args.boolean({
      setting: "garbo_autoUserConfirm",
      help: "**WARNING: Experimental** Don't show user confirm dialogs, instead automatically select yes/no in a way that will allow garbo to continue executing. Useful for scripting/headless. Risky and potentially destructive."
    }),
    restoreHpTarget: Args.number({
      setting: "garbo_restoreHpTarget",
      help: "If you're a very high level, what HP threshold should garbo aim to maintain?",
      default: 2000
    })
  }),
  /*
    Hidden preferences, CLI input ignored
  */
  stopTurncount: Args.custom({
    hidden: true,
    default: null
  }, () => null, ""),
  saveTurns: Args.custom({
    hidden: true,
    default: 0
  }, () => 0, ""),
  askedAboutWish: Args.custom({
    hidden: true,
    default: false
  }, () => false, ""),
  triedToUnlockHiddenTavern: Args.custom({
    hidden: true,
    default: false
  }, () => false, ""),
  wishAnswer: Args.custom({
    hidden: true,
    default: false
  }, () => false, ""),
  clarasBellClaimed: Args.custom({
    hidden: true,
    setting: "_claraBellUsed"
  }, () => property_get("_claraBellUsed"), "")
}, {
  positionalArgs: ["turns"]
});
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2018/SongBoom.js
var SongBoom_templateObject;
function SongBoom_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var item = template_string_$item(SongBoom_templateObject || (SongBoom_templateObject = SongBoom_taggedTemplateLiteral(["SongBoom\u2122 BoomBox"])));
function SongBoom_have() {
  return lib_have(item);
}
var keywords = {
  "Eye of the Giger": "spooky",
  "Food Vibrations": "food",
  "Remainin' Alive": "dr",
  "These Fists Were Made for Punchin'": "damage",
  "Total Eclipse of Your Meat": "meat"
};
var songBoomSongs = new Set(Object.keys(keywords));
/**
 * Current song.
 */
function song() {
  var stored = property_get("boomBoxSong");
  return songBoomSongs.has(stored) ? stored : null;
}
/**
 * Song changes left today.
 */
function songChangesLeft() {
  return property_get("_boomBoxSongsLeft");
}
/**
 * Change the song.
 * @param newSong Song to change to.
 */
function setSong(newSong) {
  if (song() !== newSong) {
    if (songChangesLeft() === 0) throw new Error("Out of song changes!");
    (0,external_kolmafia_namespaceObject.cliExecute)("boombox ".concat(newSong ? keywords[newSong] : "none"));
    return true;
  } else {
    return false;
  }
}
/**
 * Progress to next song drop (e.g. gathered meat-clip).
 */
function dropProgress() {
  return get("_boomBoxFights");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2009/Bandersnatch.js
var Bandersnatch_templateObject, Bandersnatch_templateObject2, Bandersnatch_templateObject3;
function Bandersnatch_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = Bandersnatch_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function Bandersnatch_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Bandersnatch_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Bandersnatch_arrayLikeToArray(o, minLen); }
function Bandersnatch_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Bandersnatch_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var familiar = $familiar(Bandersnatch_templateObject || (Bandersnatch_templateObject = Bandersnatch_taggedTemplateLiteral(["Frumious Bandersnatch"])));
/**
 * Returns true if the player has the Frumious Bandersnatch in their
 * terrarium
 */
function Bandersnatch_have() {
  return lib_have(familiar);
}
/**
 * Returns the number of free runaways that have already been used
 * @see StompingBoots with which the Bandersnatch shares a counter
 */
function getRunaways() {
  return property_get("_banderRunaways");
}
/**
 * Returns the total number of free runaways that the player can
 * get from their Bandersnatch
 *
 * @param considerWeightAdjustment Include familiar weight modifiers
 */
function getMaxRunaways() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var weightBuffs = considerWeightAdjustment ? (0,external_kolmafia_namespaceObject.weightAdjustment)() : 0;
  return Math.floor(((0,external_kolmafia_namespaceObject.familiarWeight)(familiar) + weightBuffs) / 5);
}
/**
 * Returns the number of remaining free runaways the player can
 * get from their Bandersnatch
 *
 * @param considerWeightAdjustment
 */
function getRemainingRunaways() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return Math.max(0, getMaxRunaways(considerWeightAdjustment) - getRunaways());
}
/**
 * Returns true if the player could use their Bandersnatch to
 * get a free run in theory
 *
 * @param considerWeightAdjustment Include familiar weight modifiers
 */
function couldRunaway() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return Bandersnatch_have() && getRemainingRunaways(considerWeightAdjustment) > 0;
}
var odeSkill = $skill(Bandersnatch_templateObject2 || (Bandersnatch_templateObject2 = Bandersnatch_taggedTemplateLiteral(["The Ode to Booze"])));
var odeEffect = template_string_$effect(Bandersnatch_templateObject3 || (Bandersnatch_templateObject3 = Bandersnatch_taggedTemplateLiteral(["Ode to Booze"])));
/**
 * Returns true if the player can use their Bandersnatch to get a
 * free run right now
 */
function canRunaway() {
  return isCurrentFamiliar(familiar) && couldRunaway() && _have(odeEffect);
}
/**
 * Prepare a Bandersnatch runaway.
 *
 * This will cast Ode to Booze and take your Bandersnatch with you.
 * If any of those steps fail, it will return false.
 *
 * @param songsToRemove Ordered list of songs that could be shrugged to make room for Ode to Booze
 */
function prepareRunaway(songsToRemove) {
  if (!_have(odeEffect)) {
    if (!_have(odeSkill)) {
      return false;
    }
    if (!canRememberSong()) {
      var activeSongs = getActiveSongs();
      var _iterator = Bandersnatch_createForOfIteratorHelper(songsToRemove),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var song = _step.value;
          if (activeSongs.includes(song) && uneffect(song)) {
            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    if (!useSkill(odeSkill)) {
      return false;
    }
  }
  return useFamiliar(familiar);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2011/StompingBoots.js
var StompingBoots_templateObject;
function StompingBoots_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var StompingBoots_familiar = $familiar(StompingBoots_templateObject || (StompingBoots_templateObject = StompingBoots_taggedTemplateLiteral(["Pair of Stomping Boots"])));
/**
 * Returns true if the player has the Pair of Stomping Boots in their
 * terrarium
 */
function StompingBoots_have() {
  return lib_have(StompingBoots_familiar);
}
/**
 * Returns the number of free runaways that have already been used
 * @see Bandersnatch with which the Stomping Boots shares a counter
 */
function StompingBoots_getRunaways() {
  return property_get("_banderRunaways");
}
/**
 * Returns the total number of free runaways that the player can
 * get from their Stomping Boots
 *
 * @param considerWeightAdjustment Include familiar weight modifiers
 */
function StompingBoots_getMaxRunaways() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var weightBuffs = considerWeightAdjustment ? (0,external_kolmafia_namespaceObject.weightAdjustment)() : 0;
  return Math.floor(((0,external_kolmafia_namespaceObject.familiarWeight)(StompingBoots_familiar) + weightBuffs) / 5);
}
/**
 * Returns the number of remaining free runaways the player can
 * get from their Stomping Boots
 *
 * @param considerWeightAdjustment
 */
function StompingBoots_getRemainingRunaways() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return Math.max(0, StompingBoots_getMaxRunaways(considerWeightAdjustment) - StompingBoots_getRunaways());
}
/**
 * Returns true if the player could use their Stomping Boots to
 * get a free run in theory
 *
 * @param considerWeightAdjustment Include familiar weight modifiers
 */
function StompingBoots_couldRunaway() {
  var considerWeightAdjustment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return StompingBoots_have() && StompingBoots_getRemainingRunaways(considerWeightAdjustment) > 0;
}
/**
 * Returns true if the player can use their Stomping Boots to get a
 * free run right now
 */
function StompingBoots_canRunaway() {
  return isCurrentFamiliar(StompingBoots_familiar) && StompingBoots_couldRunaway();
}
/**
 * Prepare a Stomping Boots runaway.
 *
 * This will take your Stomping Boots with you.
 * If any of those steps fail, it will return false.
 */
function StompingBoots_prepareRunaway() {
  return useFamiliar(StompingBoots_familiar);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/AsdonMartin.js
var AsdonMartin_templateObject, AsdonMartin_templateObject2, AsdonMartin_templateObject3, AsdonMartin_templateObject4, AsdonMartin_templateObject5, AsdonMartin_templateObject6, AsdonMartin_templateObject7, AsdonMartin_templateObject8, AsdonMartin_templateObject9, AsdonMartin_templateObject10, AsdonMartin_templateObject11, AsdonMartin_templateObject12, AsdonMartin_templateObject13;
function AsdonMartin_slicedToArray(arr, i) { return AsdonMartin_arrayWithHoles(arr) || AsdonMartin_iterableToArrayLimit(arr, i) || AsdonMartin_unsupportedIterableToArray(arr, i) || AsdonMartin_nonIterableRest(); }
function AsdonMartin_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function AsdonMartin_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AsdonMartin_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AsdonMartin_arrayLikeToArray(o, minLen); }
function AsdonMartin_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function AsdonMartin_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function AsdonMartin_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function AsdonMartin_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var PriceAge;
(function (PriceAge) {
  PriceAge[PriceAge["HISTORICAL"] = 0] = "HISTORICAL";
  PriceAge[PriceAge["RECENT"] = 1] = "RECENT";
  PriceAge[PriceAge["TODAY"] = 2] = "TODAY";
})(PriceAge || (PriceAge = {}));
/**
 * Returns whether or not we have the Asdon installed in the workshed at present.
 */
function AsdonMartin_installed() {
  return (0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(AsdonMartin_templateObject || (AsdonMartin_templateObject = AsdonMartin_taggedTemplateLiteral(["Asdon Martin keyfob"])));
}
/**
 * Returns true if we have the Asdon or if it's installed.
 */
function AsdonMartin_have() {
  return AsdonMartin_installed() || haveItem($item(AsdonMartin_templateObject2 || (AsdonMartin_templateObject2 = AsdonMartin_taggedTemplateLiteral(["Asdon Martin keyfob"]))));
}
var fuelSkiplist = template_string_$items(AsdonMartin_templateObject3 || (AsdonMartin_templateObject3 = AsdonMartin_taggedTemplateLiteral(["cup of \"tea\", thermos of \"whiskey\", Lucky Lindy, Bee's Knees, Sockdollager, Ish Kabibble, Hot Socks, Phonus Balonus, Flivver, Sloppy Jalopy, glass of \"milk\""])));
function priceTooOld(item) {
  return (0,external_kolmafia_namespaceObject.historicalPrice)(item) === 0 || (0,external_kolmafia_namespaceObject.historicalAge)(item) >= 7;
}
// Return mall max if historicalPrice returns -1.
function historicalPriceOrMax(item) {
  var historical = (0,external_kolmafia_namespaceObject.historicalPrice)(item);
  return historical < 0 ? 999999999 : historical;
}
// Return mall max if mallPrice returns -1.
function mallPriceOrMax(item) {
  var mall = (0,external_kolmafia_namespaceObject.mallPrice)(item);
  return mall < 0 ? 999999999 : mall;
}
function price(item, priceAge) {
  switch (priceAge) {
    case PriceAge.HISTORICAL:
      {
        var historical = historicalPriceOrMax(item);
        return historical === 0 ? mallPriceOrMax(item) : historical;
      }
    case PriceAge.RECENT:
      return priceTooOld(item) ? mallPriceOrMax(item) : historicalPriceOrMax(item);
    case PriceAge.TODAY:
      return mallPriceOrMax(item);
  }
}
function inventoryItems() {
  return external_kolmafia_namespaceObject.Item.all().filter(isFuelItem).filter(item => lib_have(item) && [100, (0,external_kolmafia_namespaceObject.autosellPrice)(item)].includes(price(item, PriceAge.RECENT)));
}
// Efficiency in meat per fuel.
function calculateFuelUnitCost(it) {
  var priceAge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PriceAge.RECENT;
  var units = getAverageAdventures(it);
  return price(it, priceAge) / units;
}
function isFuelItem(it) {
  return !(0,external_kolmafia_namespaceObject.isNpcItem)(it) && it.fullness + it.inebriety > 0 && getAverageAdventures(it) > 0 && it.tradeable && it.discardable && !fuelSkiplist.includes(it);
}
function getBestFuels() {
  // Three stages.
  // 1. Filter to reasonable items using historical cost (within 5x of historical best).
  var allFuel = external_kolmafia_namespaceObject.Item.all().filter(isFuelItem);
  if (allFuel.filter(item => (0,external_kolmafia_namespaceObject.historicalPrice)(item) === 0).length > 100) {
    (0,external_kolmafia_namespaceObject.mallPrices)("food");
    (0,external_kolmafia_namespaceObject.mallPrices)("booze");
  }
  var keyHistorical = item => calculateFuelUnitCost(item, PriceAge.HISTORICAL);
  allFuel.sort((x, y) => keyHistorical(x) - keyHistorical(y));
  var bestUnitCost = keyHistorical(allFuel[0]);
  var firstBadIndex = allFuel.findIndex(item => keyHistorical(item) > 5 * bestUnitCost);
  var potentialFuel = firstBadIndex > 0 ? allFuel.slice(0, firstBadIndex) : allFuel;
  // 2. Filter to top 10 candidates using prices at most a week old.
  if (potentialFuel.filter(item => priceTooOld(item)).length > 100) {
    (0,external_kolmafia_namespaceObject.mallPrices)("food");
    (0,external_kolmafia_namespaceObject.mallPrices)("booze");
  }
  var key1 = item => -getAverageAdventures(item);
  var key2 = item => calculateFuelUnitCost(item, PriceAge.RECENT);
  potentialFuel.sort((x, y) => key1(x) - key1(y));
  potentialFuel.sort((x, y) => key2(x) - key2(y));
  // 3. Find result using precise price for those top candidates.
  var candidates = potentialFuel.slice(0, 10);
  var key3 = item => calculateFuelUnitCost(item, PriceAge.TODAY);
  candidates.sort((x, y) => key3(x) - key3(y));
  if (calculateFuelUnitCost(candidates[0], PriceAge.TODAY) > 100) {
    throw new Error("Could not identify any fuel with efficiency better than 100 meat per fuel. " + "This means something went wrong.");
  }
  return candidates;
}
/**
 * Fuel your Asdon Martin with a given quantity of a given item
 * @param it Item to fuel with.
 * @param quantity Number of items to fuel with.
 * @returns Whether we succeeded at fueling with the given items.
 */
function insertFuel(it) {
  var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var result = (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=fuelconvertor&pwd&qty=".concat(quantity, "&iid=").concat((0,external_kolmafia_namespaceObject.toInt)(it), "&go=Convert%21"));
  return result.includes("The display updates with a");
}
/**
 * Fill your Asdon Martin to the given fuel level in the cheapest way possible
 * @param targetUnits Fuel level to attempt to reach.
 * @returns Whether we succeeded at filling to the target fuel level.
 */
function fillTo(targetUnits) {
  if (!AsdonMartin_installed()) return false;
  while ((0,external_kolmafia_namespaceObject.getFuel)() < targetUnits) {
    // if in Hardcore/ronin, skip the price calculation and just use soda bread
    var _ref = (0,external_kolmafia_namespaceObject.canInteract)() ? getBestFuels() : [template_string_$item(AsdonMartin_templateObject4 || (AsdonMartin_templateObject4 = AsdonMartin_taggedTemplateLiteral(["loaf of soda bread"]))), undefined],
      _ref2 = AsdonMartin_slicedToArray(_ref, 2),
      bestFuel = _ref2[0],
      secondBest = _ref2[1];
    var count = Math.ceil(targetUnits / getAverageAdventures(bestFuel));
    var ceiling = undefined;
    if (secondBest) {
      var efficiencyOfSecondBest = (0,external_kolmafia_namespaceObject.mallPrice)(secondBest) / getAverageAdventures(secondBest);
      ceiling = Math.ceil(efficiencyOfSecondBest * getAverageAdventures(bestFuel));
    }
    if (!(0,external_kolmafia_namespaceObject.canInteract)()) (0,external_kolmafia_namespaceObject.retrieveItem)(count, bestFuel);else ceiling ? (0,external_kolmafia_namespaceObject.buy)(count, bestFuel, ceiling) : (0,external_kolmafia_namespaceObject.buy)(count, bestFuel);
    if (!insertFuel(bestFuel, Math.min((0,external_kolmafia_namespaceObject.itemAmount)(bestFuel), count))) {
      throw new Error("Failed to fuel Asdon Martin.");
    }
  }
  return (0,external_kolmafia_namespaceObject.getFuel)() >= targetUnits;
}
function fillWithBestInventoryItem(targetUnits) {
  var options = inventoryItems().sort((a, b) => getAverageAdventures(b) / (0,external_kolmafia_namespaceObject.autosellPrice)(b) - getAverageAdventures(a) / (0,external_kolmafia_namespaceObject.autosellPrice)(a));
  if (options.length === 0) return false;
  var best = options[0];
  if ((0,external_kolmafia_namespaceObject.autosellPrice)(best) / getAverageAdventures(best) > 100) return false;
  var amountToUse = utils_clamp(Math.ceil(targetUnits / getAverageAdventures(best)), 0, (0,external_kolmafia_namespaceObject.itemAmount)(best));
  return insertFuel(best, amountToUse);
}
/**
 * Fill your Asdon Martin by prioritizing mallmin items in your inventory. Default to the behavior of fillTo.
 * @param targetUnits Fuel level to attempt to reach.
 * @returns Whether we succeeded at filling to the target fuel level.
 */
function fillWithInventoryTo(targetUnits) {
  if (!AsdonMartin_installed()) return false;
  var continueFuelingFromInventory = true;
  while ((0,external_kolmafia_namespaceObject.getFuel)() < targetUnits && continueFuelingFromInventory) {
    continueFuelingFromInventory && (continueFuelingFromInventory = fillWithBestInventoryItem(targetUnits));
  }
  return fillTo(targetUnits);
}
/**
 * Object consisting of the various Asdon driving styles
 */
var Driving = {
  Obnoxiously: template_string_$effect(AsdonMartin_templateObject5 || (AsdonMartin_templateObject5 = AsdonMartin_taggedTemplateLiteral(["Driving Obnoxiously"]))),
  Stealthily: template_string_$effect(AsdonMartin_templateObject6 || (AsdonMartin_templateObject6 = AsdonMartin_taggedTemplateLiteral(["Driving Stealthily"]))),
  Wastefully: template_string_$effect(AsdonMartin_templateObject7 || (AsdonMartin_templateObject7 = AsdonMartin_taggedTemplateLiteral(["Driving Wastefully"]))),
  Safely: template_string_$effect(AsdonMartin_templateObject8 || (AsdonMartin_templateObject8 = AsdonMartin_taggedTemplateLiteral(["Driving Safely"]))),
  Recklessly: template_string_$effect(AsdonMartin_templateObject9 || (AsdonMartin_templateObject9 = AsdonMartin_taggedTemplateLiteral(["Driving Recklessly"]))),
  Intimidatingly: template_string_$effect(AsdonMartin_templateObject10 || (AsdonMartin_templateObject10 = AsdonMartin_taggedTemplateLiteral(["Driving Intimidatingly"]))),
  Quickly: template_string_$effect(AsdonMartin_templateObject11 || (AsdonMartin_templateObject11 = AsdonMartin_taggedTemplateLiteral(["Driving Quickly"]))),
  Observantly: template_string_$effect(AsdonMartin_templateObject12 || (AsdonMartin_templateObject12 = AsdonMartin_taggedTemplateLiteral(["Driving Observantly"]))),
  Waterproofly: template_string_$effect(AsdonMartin_templateObject13 || (AsdonMartin_templateObject13 = AsdonMartin_taggedTemplateLiteral(["Driving Waterproofly"])))
};
/**
 * Attempt to drive with a particular style for a particular number of turns.
 * @param style The driving style to use.
 * @param turns The number of turns to attempt to get.
 * @param preferInventory Whether we should preferentially value items currently in our inventory.
 * @returns Whether we have at least as many turns as requested of said driving style.
 */
function drive(style) {
  var turns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var preferInventory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (!Object.values(Driving).includes(style)) return false;
  if (!AsdonMartin_installed()) return false;
  if ((0,external_kolmafia_namespaceObject.haveEffect)(style) >= turns) return true;
  var fuelNeeded = 37 * Math.ceil((turns - (0,external_kolmafia_namespaceObject.haveEffect)(style)) / 30);
  (preferInventory ? fillWithInventoryTo : fillTo)(fuelNeeded);
  while ((0,external_kolmafia_namespaceObject.getFuel)() >= 37 && (0,external_kolmafia_namespaceObject.haveEffect)(style) < turns) {
    (0,external_kolmafia_namespaceObject.cliExecute)("asdonmartin drive ".concat(style.name.replace("Driving ", "")));
  }
  return (0,external_kolmafia_namespaceObject.haveEffect)(style) >= turns;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/actions/ActionSource.js
function ActionSource_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function ActionSource_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ActionSource_toPropertyKey(descriptor.key), descriptor); } }
function ActionSource_createClass(Constructor, protoProps, staticProps) { if (protoProps) ActionSource_defineProperties(Constructor.prototype, protoProps); if (staticProps) ActionSource_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function ActionSource_defineProperty(obj, key, value) { key = ActionSource_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function ActionSource_toPropertyKey(arg) { var key = ActionSource_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function ActionSource_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function ActionSource_toConsumableArray(arr) { return ActionSource_arrayWithoutHoles(arr) || ActionSource_iterableToArray(arr) || ActionSource_unsupportedIterableToArray(arr) || ActionSource_nonIterableSpread(); }
function ActionSource_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function ActionSource_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ActionSource_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ActionSource_arrayLikeToArray(o, minLen); }
function ActionSource_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function ActionSource_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return ActionSource_arrayLikeToArray(arr); }
function ActionSource_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }




function mergeConstraints() {
  for (var _len = arguments.length, allConstraints = new Array(_len), _key = 0; _key < _len; _key++) {
    allConstraints[_key] = arguments[_key];
  }
  var familiars = allConstraints.map(constraints => constraints.familiar).filter(familiar => familiar);
  if (familiars.length > 1) {
    // Inconsistent requirements.
    return null;
  }
  return {
    equipmentRequirements: () => Requirement.merge(ActionSource_toConsumableArray(allConstraints.map(constraints => {
      var _constraints$equipmen, _constraints$equipmen2;
      return (_constraints$equipmen = (_constraints$equipmen2 = constraints.equipmentRequirements) === null || _constraints$equipmen2 === void 0 ? void 0 : _constraints$equipmen2.call(constraints)) !== null && _constraints$equipmen !== void 0 ? _constraints$equipmen : new Requirement([], {});
    }))),
    preparation: () => {
      var success = true;
      for (var _i = 0, _allConstraints = allConstraints; _i < _allConstraints.length; _i++) {
        var constraints = _allConstraints[_i];
        success = success && (!constraints.preparation || constraints.preparation());
      }
      return success;
    },
    familiar: familiars.find(familiar => familiar),
    cost: () => utils_sum(allConstraints, constraints => {
      var _constraints$cost, _constraints$cost2;
      return (_constraints$cost = (_constraints$cost2 = constraints.cost) === null || _constraints$cost2 === void 0 ? void 0 : _constraints$cost2.call(constraints)) !== null && _constraints$cost !== void 0 ? _constraints$cost : 0;
    })
  };
}
/**
 * A combat-based action resource in the game (e.g. a free run or free kill).
 */
var ActionSource = /*#__PURE__*/function () {
  // Infinity: unlimited

  /**
   * @param source Source(s) of the action (e.g. item, skill, or familiar needed).
   * @param potential Function returning how many times this action can be used.
   * @param macro Macro to execute this action in combat.
   * @param constraints Constraints required for this action to be available.
   */
  function ActionSource(source, potential, macro) {
    var constraints = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    ActionSource_classCallCheck(this, ActionSource);
    ActionSource_defineProperty(this, "source", void 0);
    ActionSource_defineProperty(this, "potential", void 0);
    ActionSource_defineProperty(this, "macro", void 0);
    ActionSource_defineProperty(this, "constraints", void 0);
    this.source = source;
    this.potential = potential;
    this.macro = macro;
    this.constraints = constraints;
  }
  /**
   * @returns Name of the action source.
   */
  ActionSource_createClass(ActionSource, [{
    key: "name",
    value: function name() {
      return this.source.toString();
    }
    /**
     * @returns Whether the action is available.
     */
  }, {
    key: "available",
    value: function available() {
      return this.potential() > 0;
    }
    /**
     * @returns Cost in meat per usage of the action.
     */
  }, {
    key: "cost",
    value: function cost() {
      return this.constraints.cost ? this.constraints.cost() : 0;
    }
    /**
     * @returns Whether the action costs 0 meat to use.
     */
  }, {
    key: "isFree",
    value: function isFree() {
      return !this.cost || this.cost() === 0;
    }
    /**
     * @returns Whether unlimited uses of the action are available.
     */
  }, {
    key: "isUnlimited",
    value: function isUnlimited() {
      return this.potential() === Infinity;
    }
    /**
     * Create a compound action source with merged constraints.
     * @param others Other actions to have available.
     * @returns Merged constraints, or null if they are inconsistent.
     */
  }, {
    key: "merge",
    value: function merge() {
      for (var _len2 = arguments.length, others = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        others[_key2] = arguments[_key2];
      }
      var actions = [this].concat(others);
      var constraints = mergeConstraints.apply(void 0, ActionSource_toConsumableArray(actions.map(action => action.constraints)));
      if (constraints === null) {
        // Inconsistent constraints - no path forward here.
        return null;
      }
      return new ActionSource(ActionSource_toConsumableArray(actions.map(action => action.source).flat()), () => utils_sum(actions, action => action.potential()), Macro.step.apply(Macro, ActionSource_toConsumableArray(actions.map(action => action.macro))), constraints);
    }
    /**
     * Perform all preparation necessary to make this action available.
     * @param otherRequirements Any other equipment requirements.
     * @returns Whether preparation succeeded.
     */
  }, {
    key: "prepare",
    value: function prepare(otherRequirements) {
      var _this$constraints$fam, _this$constraints;
      if ((_this$constraints$fam = (_this$constraints = this.constraints).familiar) !== null && _this$constraints$fam !== void 0 && _this$constraints$fam.call(_this$constraints)) {
        if (!(0,external_kolmafia_namespaceObject.useFamiliar)(this.constraints.familiar())) return false;
      }
      if (this.constraints.equipmentRequirements) {
        var requirement = otherRequirements ? otherRequirements.merge(this.constraints.equipmentRequirements()) : this.constraints.equipmentRequirements();
        if (!requirement.maximize()) return false;
      }
      if (this.constraints.preparation) return this.constraints.preparation();
      return true;
    }
    /**
     * Perform all preparation necessary to make this action available.
     * Throws an error if preparation fails.
     * @param otherRequirements Any other equipment requirements.
     */
  }, {
    key: "ensure",
    value: function ensure(otherRequirements) {
      if (!this.prepare(otherRequirements)) {
        throw new Error("Failed to prepare action ".concat(this.name(), "."));
      }
    }
  }]);
  return ActionSource;
}();
ActionSource_defineProperty(ActionSource, "defaultPriceFunction", item => (0,external_kolmafia_namespaceObject.mallPrice)(item) > 0 ? (0,external_kolmafia_namespaceObject.mallPrice)(item) : Infinity);
function filterAction(action, constraints) {
  var _constraints$requireF, _constraints$requireU, _constraints$noFamili, _constraints$noRequir, _constraints$noPrepar, _constraints$maximumC, _constraints$maximumC2;
  return action.available() && (constraints.allowedAction === undefined || constraints.allowedAction(action)) && !((_constraints$requireF = constraints.requireFamiliar) !== null && _constraints$requireF !== void 0 && _constraints$requireF.call(constraints) && !action.constraints.familiar) && !((_constraints$requireU = constraints.requireUnlimited) !== null && _constraints$requireU !== void 0 && _constraints$requireU.call(constraints) && !action.isUnlimited()) && !((_constraints$noFamili = constraints.noFamiliar) !== null && _constraints$noFamili !== void 0 && _constraints$noFamili.call(constraints) && action.constraints.familiar) && !((_constraints$noRequir = constraints.noRequirements) !== null && _constraints$noRequir !== void 0 && _constraints$noRequir.call(constraints) && action.constraints.equipmentRequirements) && !((_constraints$noPrepar = constraints.noPreparation) !== null && _constraints$noPrepar !== void 0 && _constraints$noPrepar.call(constraints) && action.constraints.preparation) && action.cost() <= ((_constraints$maximumC = (_constraints$maximumC2 = constraints.maximumCost) === null || _constraints$maximumC2 === void 0 ? void 0 : _constraints$maximumC2.call(constraints)) !== null && _constraints$maximumC !== void 0 ? _constraints$maximumC : 0);
}
/**
 * Find an available action source subject to constraints.
 * @param actions Action source list.
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Available action source satisfying constraints, or null.
 */
function findActionSource(actions) {
  var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var validActions = actions.filter(actions => filterAction(actions, constraints));
  if (validActions.length < 1) return null;
  return validActions.reduce((a, b) => a.cost() <= b.cost() ? a : b);
}
/**
 * Count available action sources subject to constraints. Note that, if
 * constraints.maximumCost is high enough, this will return Infinity.
 * @param actions Action source list.
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Count of available action sources.
 */
function actionSourcesAvailable(actions) {
  var constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // TODO: This will overcount if any Actions share a counter
  return sum(actions.filter(action => filterAction(action, constraints !== null && constraints !== void 0 ? constraints : {})), action => action.potential());
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/actions/FreeRun.js
var FreeRun_templateObject, FreeRun_templateObject2, FreeRun_templateObject3, FreeRun_templateObject4, FreeRun_templateObject5, FreeRun_templateObject6, FreeRun_templateObject7, FreeRun_templateObject8, FreeRun_templateObject9, FreeRun_templateObject10, FreeRun_templateObject11, FreeRun_templateObject12, FreeRun_templateObject13, FreeRun_templateObject14, FreeRun_templateObject15, FreeRun_templateObject16, FreeRun_templateObject17, FreeRun_templateObject18, FreeRun_templateObject19, FreeRun_templateObject20, FreeRun_templateObject21, FreeRun_templateObject22, FreeRun_templateObject23, FreeRun_templateObject24, FreeRun_templateObject25, FreeRun_templateObject26, FreeRun_templateObject27, FreeRun_templateObject28, FreeRun_templateObject29, FreeRun_templateObject30, FreeRun_templateObject31, FreeRun_templateObject32, FreeRun_templateObject33, FreeRun_templateObject34, FreeRun_templateObject35, FreeRun_templateObject36, FreeRun_templateObject37, FreeRun_templateObject38, FreeRun_templateObject39, FreeRun_templateObject40, FreeRun_templateObject41, FreeRun_templateObject42, FreeRun_templateObject43, FreeRun_templateObject44, FreeRun_templateObject45, FreeRun_templateObject46, FreeRun_templateObject47, FreeRun_templateObject48, FreeRun_templateObject49, FreeRun_templateObject50, FreeRun_templateObject51, FreeRun_templateObject52, FreeRun_templateObject53, FreeRun_templateObject54, FreeRun_templateObject55, FreeRun_templateObject56, FreeRun_templateObject57, FreeRun_templateObject58;
function FreeRun_toConsumableArray(arr) { return FreeRun_arrayWithoutHoles(arr) || FreeRun_iterableToArray(arr) || FreeRun_unsupportedIterableToArray(arr) || FreeRun_nonIterableSpread(); }
function FreeRun_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function FreeRun_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FreeRun_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FreeRun_arrayLikeToArray(o, minLen); }
function FreeRun_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function FreeRun_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return FreeRun_arrayLikeToArray(arr); }
function FreeRun_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function FreeRun_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }










// Value of _lastCombatStarted the last time we updated scrapbook charges.
var scrapbookChargesLastUpdated = property_get("_lastCombatStarted");
// Free unlimited source every 30 turns.
// Does not work on special monsters so needs a backup, see tryFindFreeRun.
// banishedMonsters isn't updated if the free run succeeds on an unbanishable monster
var asdonMartinSource = new ActionSource($skill(FreeRun_templateObject || (FreeRun_templateObject = FreeRun_taggedTemplateLiteral(["Asdon Martin: Spring-Loaded Front Bumper"]))), () => {
  if (!AsdonMartin_installed()) return 0;
  var banishes = property_get("banishedMonsters").split(":");
  var bumperIndex = banishes.map(string => string.toLowerCase()).indexOf("spring-loaded front bumper");
  if (bumperIndex === -1) return 1;
  return (0,external_kolmafia_namespaceObject.myTurncount)() - parseInt(banishes[bumperIndex + 1]) > 30 ? 1 : 0;
}, Macro.trySkill($skill(FreeRun_templateObject2 || (FreeRun_templateObject2 = FreeRun_taggedTemplateLiteral(["Asdon Martin: Spring-Loaded Front Bumper"])))), {
  preparation: () => fillTo(50)
});
var freeRunSources = [
// Free limited sources
new ActionSource(familiar, () => (lib_have(template_string_$effect(FreeRun_templateObject3 || (FreeRun_templateObject3 = FreeRun_taggedTemplateLiteral(["Ode to Booze"])))) || getSongCount() < getSongLimit()) && couldRunaway() ? getRemainingRunaways() : 0, Macro.step("runaway"), {
  equipmentRequirements: () => new Requirement(["Familiar Weight"], {}),
  preparation: () => {
    ensureEffect(template_string_$effect(FreeRun_templateObject4 || (FreeRun_templateObject4 = FreeRun_taggedTemplateLiteral(["Ode to Booze"]))));
    return lib_have(template_string_$effect(FreeRun_templateObject5 || (FreeRun_templateObject5 = FreeRun_taggedTemplateLiteral(["Ode to Booze"]))));
  },
  familiar: () => familiar
}), new ActionSource(StompingBoots_familiar, () => StompingBoots_couldRunaway() ? StompingBoots_getRemainingRunaways() : 0, Macro.step("runaway"), {
  equipmentRequirements: () => new Requirement(["Familiar Weight"], {}),
  familiar: () => StompingBoots_familiar
}), new ActionSource($skill(FreeRun_templateObject6 || (FreeRun_templateObject6 = FreeRun_taggedTemplateLiteral(["Snokebomb"]))), () => lib_have($skill(FreeRun_templateObject7 || (FreeRun_templateObject7 = FreeRun_taggedTemplateLiteral(["Snokebomb"])))) ? 3 - property_get("_snokebombUsed") : 0, Macro.skill($skill(FreeRun_templateObject8 || (FreeRun_templateObject8 = FreeRun_taggedTemplateLiteral(["Snokebomb"])))), {
  preparation: () => (0,external_kolmafia_namespaceObject.restoreMp)(50)
}), new ActionSource($skill(FreeRun_templateObject9 || (FreeRun_templateObject9 = FreeRun_taggedTemplateLiteral(["Emotionally Chipped"]))), () => lib_have($skill(FreeRun_templateObject10 || (FreeRun_templateObject10 = FreeRun_taggedTemplateLiteral(["Emotionally Chipped"])))) ? 3 - property_get("_feelHatredUsed") : 0, Macro.skill($skill(FreeRun_templateObject11 || (FreeRun_templateObject11 = FreeRun_taggedTemplateLiteral(["Feel Hatred"]))))), new ActionSource(template_string_$item(FreeRun_templateObject12 || (FreeRun_templateObject12 = FreeRun_taggedTemplateLiteral(["Kremlin's Greatest Briefcase"]))), () => lib_have(template_string_$item(FreeRun_templateObject13 || (FreeRun_templateObject13 = FreeRun_taggedTemplateLiteral(["Kremlin's Greatest Briefcase"])))) ? 3 - property_get("_kgbTranquilizerDartUses") : 0, Macro.skill($skill(FreeRun_templateObject14 || (FreeRun_templateObject14 = FreeRun_taggedTemplateLiteral(["KGB tranquilizer dart"])))), {
  equipmentRequirements: () => new Requirement([], {
    forceEquip: template_string_$items(FreeRun_templateObject15 || (FreeRun_templateObject15 = FreeRun_taggedTemplateLiteral(["Kremlin's Greatest Briefcase"])))
  })
}), new ActionSource(template_string_$item(FreeRun_templateObject16 || (FreeRun_templateObject16 = FreeRun_taggedTemplateLiteral(["latte lovers member's mug"]))), () => lib_have(template_string_$item(FreeRun_templateObject17 || (FreeRun_templateObject17 = FreeRun_taggedTemplateLiteral(["latte lovers member's mug"])))) && !property_get("_latteBanishUsed") ? 1 : 0, Macro.skill($skill(FreeRun_templateObject18 || (FreeRun_templateObject18 = FreeRun_taggedTemplateLiteral(["Throw Latte on Opponent"])))), {
  equipmentRequirements: () => new Requirement([], {
    forceEquip: template_string_$items(FreeRun_templateObject19 || (FreeRun_templateObject19 = FreeRun_taggedTemplateLiteral(["latte lovers member's mug"])))
  })
}), new ActionSource(template_string_$item(FreeRun_templateObject20 || (FreeRun_templateObject20 = FreeRun_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"]))), () => lib_have(template_string_$item(FreeRun_templateObject21 || (FreeRun_templateObject21 = FreeRun_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))) ? 3 - property_get("_reflexHammerUsed") : 0, Macro.skill($skill(FreeRun_templateObject22 || (FreeRun_templateObject22 = FreeRun_taggedTemplateLiteral(["Reflex Hammer"])))), {
  equipmentRequirements: () => new Requirement([], {
    forceEquip: template_string_$items(FreeRun_templateObject23 || (FreeRun_templateObject23 = FreeRun_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))
  })
}), new ActionSource(template_string_$item(FreeRun_templateObject24 || (FreeRun_templateObject24 = FreeRun_taggedTemplateLiteral(["mafia middle finger ring"]))), () => lib_have(template_string_$item(FreeRun_templateObject25 || (FreeRun_templateObject25 = FreeRun_taggedTemplateLiteral(["mafia middle finger ring"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(FreeRun_templateObject26 || (FreeRun_templateObject26 = FreeRun_taggedTemplateLiteral(["mafia middle finger ring"])))) && !property_get("_mafiaMiddleFingerRingUsed") ? 1 : 0, Macro.skill($skill(FreeRun_templateObject27 || (FreeRun_templateObject27 = FreeRun_taggedTemplateLiteral(["Show them your ring"])))), {
  equipmentRequirements: () => new Requirement([], {
    forceEquip: template_string_$items(FreeRun_templateObject28 || (FreeRun_templateObject28 = FreeRun_taggedTemplateLiteral(["mafia middle finger ring"])))
  })
}), new ActionSource(template_string_$item(FreeRun_templateObject29 || (FreeRun_templateObject29 = FreeRun_taggedTemplateLiteral(["V for Vivala mask"]))), () => lib_have(template_string_$item(FreeRun_templateObject30 || (FreeRun_templateObject30 = FreeRun_taggedTemplateLiteral(["V for Vivala mask"])))) && !property_get("_vmaskBanisherUsed") ? 1 : 0, Macro.skill($skill(FreeRun_templateObject31 || (FreeRun_templateObject31 = FreeRun_taggedTemplateLiteral(["Creepy Grin"])))), {
  equipmentRequirements: () => new Requirement([], {
    forceEquip: template_string_$items(FreeRun_templateObject32 || (FreeRun_templateObject32 = FreeRun_taggedTemplateLiteral(["V for Vivala mask"])))
  }),
  preparation: () => (0,external_kolmafia_namespaceObject.restoreMp)(30)
}), new ActionSource(template_string_$item(FreeRun_templateObject33 || (FreeRun_templateObject33 = FreeRun_taggedTemplateLiteral(["stinky cheese eye"]))), () => getFoldGroup(template_string_$item(FreeRun_templateObject34 || (FreeRun_templateObject34 = FreeRun_taggedTemplateLiteral(["stinky cheese eye"])))).some(item => lib_have(item)) && !property_get("_stinkyCheeseBanisherUsed") ? 1 : 0, Macro.skill($skill(FreeRun_templateObject35 || (FreeRun_templateObject35 = FreeRun_taggedTemplateLiteral(["Give Your Opponent the Stinkeye"])))), {
  equipmentRequirements: () => new Requirement([], {
    forceEquip: template_string_$items(FreeRun_templateObject36 || (FreeRun_templateObject36 = FreeRun_taggedTemplateLiteral(["stinky cheese eye"])))
  }),
  preparation: () => {
    if (!lib_have(template_string_$item(FreeRun_templateObject37 || (FreeRun_templateObject37 = FreeRun_taggedTemplateLiteral(["stinky cheese eye"]))))) {
      (0,external_kolmafia_namespaceObject.cliExecute)("fold stinky cheese eye");
    }
    return lib_have(template_string_$item(FreeRun_templateObject38 || (FreeRun_templateObject38 = FreeRun_taggedTemplateLiteral(["stinky cheese eye"]))));
  }
}), new ActionSource(template_string_$item(FreeRun_templateObject39 || (FreeRun_templateObject39 = FreeRun_taggedTemplateLiteral(["navel ring of navel gazing"]))), () => lib_have(template_string_$item(FreeRun_templateObject40 || (FreeRun_templateObject40 = FreeRun_taggedTemplateLiteral(["navel ring of navel gazing"])))) ? Math.max(0, 3 - property_get("_navelRunaways")) : 0, Macro.step("runaway"), {
  equipmentRequirements: () => new Requirement([], {
    forceEquip: template_string_$items(FreeRun_templateObject41 || (FreeRun_templateObject41 = FreeRun_taggedTemplateLiteral(["navel ring of navel gazing"])))
  })
}), new ActionSource(template_string_$item(FreeRun_templateObject42 || (FreeRun_templateObject42 = FreeRun_taggedTemplateLiteral(["Greatest American Pants"]))), () => lib_have(template_string_$item(FreeRun_templateObject43 || (FreeRun_templateObject43 = FreeRun_taggedTemplateLiteral(["Greatest American Pants"])))) ? Math.max(0, 3 - property_get("_navelRunaways")) : 0, Macro.step("runaway"), {
  equipmentRequirements: () => new Requirement([], {
    forceEquip: template_string_$items(FreeRun_templateObject44 || (FreeRun_templateObject44 = FreeRun_taggedTemplateLiteral(["Greatest American Pants"])))
  })
}), new ActionSource($skill(FreeRun_templateObject45 || (FreeRun_templateObject45 = FreeRun_taggedTemplateLiteral(["Show your boring familiar pictures"]))), () => {
  if (lib_have(template_string_$item(FreeRun_templateObject46 || (FreeRun_templateObject46 = FreeRun_taggedTemplateLiteral(["familiar scrapbook"]))))) {
    if (scrapbookChargesLastUpdated !== property_get("_lastCombatStarted")) {
      (0,external_kolmafia_namespaceObject.visitUrl)("desc_item.php?whichitem=463063785");
      scrapbookChargesLastUpdated = property_get("_lastCombatStarted");
    }
    return Math.floor(property_get("scrapbookCharges") / 100);
  }
  return 0;
}, Macro.skill($skill(FreeRun_templateObject47 || (FreeRun_templateObject47 = FreeRun_taggedTemplateLiteral(["Show your boring familiar pictures"])))), {
  equipmentRequirements: () => new Requirement([], {
    forceEquip: template_string_$items(FreeRun_templateObject48 || (FreeRun_templateObject48 = FreeRun_taggedTemplateLiteral(["familiar scrapbook"])))
  })
}), new ActionSource(template_string_$item(FreeRun_templateObject49 || (FreeRun_templateObject49 = FreeRun_taggedTemplateLiteral(["peppermint parasol"]))), () => Math.max(0, 3 - property_get("_navelRunaways")), Macro.item(template_string_$item(FreeRun_templateObject50 || (FreeRun_templateObject50 = FreeRun_taggedTemplateLiteral(["peppermint parasol"])))), {
  preparation: () => (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(FreeRun_templateObject51 || (FreeRun_templateObject51 = FreeRun_taggedTemplateLiteral(["peppermint parasol"])))),
  cost: () => Math.min(ActionSource.defaultPriceFunction(template_string_$item(FreeRun_templateObject52 || (FreeRun_templateObject52 = FreeRun_taggedTemplateLiteral(["peppermint sprout"])))) * 5, ActionSource.defaultPriceFunction(template_string_$item(FreeRun_templateObject53 || (FreeRun_templateObject53 = FreeRun_taggedTemplateLiteral(["peppermint parasol"]))))) / 10 // Breaks after 10 successful runaways.
}), new ActionSource(template_string_$item(FreeRun_templateObject54 || (FreeRun_templateObject54 = FreeRun_taggedTemplateLiteral(["human musk"]))), () => Math.max(0, 3 - property_get("_humanMuskUses")), Macro.item(template_string_$item(FreeRun_templateObject55 || (FreeRun_templateObject55 = FreeRun_taggedTemplateLiteral(["human musk"])))), {
  preparation: () => (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(FreeRun_templateObject56 || (FreeRun_templateObject56 = FreeRun_taggedTemplateLiteral(["human musk"])))),
  cost: () => ActionSource.defaultPriceFunction(template_string_$item(FreeRun_templateObject57 || (FreeRun_templateObject57 = FreeRun_taggedTemplateLiteral(["human musk"]))))
})].concat(FreeRun_toConsumableArray(template_string_$items(FreeRun_templateObject58 || (FreeRun_templateObject58 = FreeRun_taggedTemplateLiteral(["Louder Than Bomb, divine champagne popper, tennis ball"]))).map(item => new ActionSource(item, () => Infinity, Macro.item(item), {
  preparation: () => (0,external_kolmafia_namespaceObject.retrieveItem)(item),
  cost: () => ActionSource.defaultPriceFunction(item)
}))));
/**
 * Find an available free run source subject to constraints.
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Free run source satisfying constraints, or null.
 */
function tryFindFreeRun(constraints) {
  var source = findActionSource(freeRunSources, constraints);
  // Always try to use Asdon Martin: Spring-Loaded Front Bumper first,
  // but only if another source has been found.
  if (source && asdonMartinSource.available()) {
    source = asdonMartinSource.merge(source);
  }
  return source;
}
/**
 * Ensure an available free run source subject to constraints.
 * Throws an error if no source can be found.
 * @param constraints Preexisting constraints that restrict possible sources.
 * @returns Free run source satisfying constraints.
 */
function ensureFreeRun(constraints) {
  var source = tryFindFreeRun(constraints);
  if (!source) {
    throw new Error("Failed to ensure Free Run source");
  }
  return source;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/CombatLoversLocket.js
var CombatLoversLocket_templateObject;
function CombatLoversLocket_slicedToArray(arr, i) { return CombatLoversLocket_arrayWithHoles(arr) || CombatLoversLocket_iterableToArrayLimit(arr, i) || CombatLoversLocket_unsupportedIterableToArray(arr, i) || CombatLoversLocket_nonIterableRest(); }
function CombatLoversLocket_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function CombatLoversLocket_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CombatLoversLocket_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CombatLoversLocket_arrayLikeToArray(o, minLen); }
function CombatLoversLocket_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function CombatLoversLocket_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function CombatLoversLocket_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function CombatLoversLocket_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





// eslint-disable-next-line libram/verify-constants
var locket = template_string_$item(CombatLoversLocket_templateObject || (CombatLoversLocket_templateObject = CombatLoversLocket_taggedTemplateLiteral(["Combat Lover's Locket"])));
function CombatLoversLocket_have() {
  return lib_have(locket);
}
/**
 * Filters the set of all unlocked locket monsters to only the ones available to be locketed right now.
 * @returns An array consisting of all Monsters you can fight with your locket right now.
 */
function availableLocketMonsters() {
  if (reminiscesLeft() === 0) return [];
  return Object.entries((0,external_kolmafia_namespaceObject.getLocketMonsters)()).filter(_ref => {
    var _ref2 = CombatLoversLocket_slicedToArray(_ref, 2),
      unused = _ref2[1];
    return unused;
  }).map(_ref3 => {
    var _ref4 = CombatLoversLocket_slicedToArray(_ref3, 1),
      name = _ref4[0];
    return (0,external_kolmafia_namespaceObject.toMonster)(name);
  });
}
/**
 * Parses getLocketMonsters and returns the collection of all Monsters as an Array.
 * @returns An array consisting of all Monsters you can hypothetically fight, regardless of whether they've been fought today.
 */
function unlockedLocketMonsters() {
  return Object.entries((0,external_kolmafia_namespaceObject.getLocketMonsters)()).map(_ref5 => {
    var _ref6 = CombatLoversLocket_slicedToArray(_ref5, 1),
      name = _ref6[0];
    return (0,external_kolmafia_namespaceObject.toMonster)(name);
  });
}
function parseLocketProperty() {
  return property_get("_locketMonstersFought").split(",").filter(id => id.trim().length > 0);
}
/**
 * Determines how many reminisces remain by parsing the _locketMonstersFought property.
 * @returns The number of reminisces a player has available; 0 if they lack the Locket.
 */
function reminiscesLeft() {
  return CombatLoversLocket_have() ? utils_clamp(3 - parseLocketProperty().length, 0, 3) : 0;
}
/**
 * Determines which monsters were reminisced today by parsing the _locketMonstersFought property.
 * @returns An array consisting of the Monsters reminisced today.
 */
function monstersReminisced() {
  return parseLocketProperty().map(id => (0,external_kolmafia_namespaceObject.toMonster)(id));
}
/**
 * Fight a Monster using the Combat Lover's Locket
 * @param monster The Monster to fight
 * @returns false if we are unable to reminisce about this monster. Else, returns whether, at the end of all things, we have reminisced about this monster.
 */
function reminisce(monster) {
  if (!CombatLoversLocket_have() || reminiscesLeft() === 0 || !(0,external_kolmafia_namespaceObject.getLocketMonsters)()[monster.name]) {
    return false;
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("reminisce ".concat(monster));
  (0,external_kolmafia_namespaceObject.runCombat)();
  return monstersReminisced().includes(monster);
}
/**
 * This function efficiently evaluates all of an adventurer's possibly reminiscable monsters, placing them through a filtering criteria and evaluating them based on a passed function.
 * @param criteria A filtering function for delineating which monsters are "fair game" for the search, such as "is this monster free".
 * @param value A function for deciding which monsters are "better" than others.
 * @returns A singular monster that fulfills the criteria function and maximizes the value function.
 */
function findMonster(criteria) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => 1;
  if (!CombatLoversLocket_have() || reminiscesLeft() === 0) return null;
  var options = availableLocketMonsters().filter(criteria);
  if (!options.length) return null;
  return options.reduce((a, b) => value(a) > value(b) ? a : b);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2015/ChateauMantegna.js


function ChateauMantegna_have() {
  return property_get("chateauAvailable");
}
function paintingMonster() {
  return property_get("chateauMonster");
}
function paintingFought() {
  return property_get("_chateauMonsterFought");
}
function fightPainting() {
  (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=chateau&action=chateau_painting", false);
  return (0,external_kolmafia_namespaceObject.runCombat)();
}
var desks = (/* unused pure expression or super */ null && (["fancy stationery set", "Swiss piggy bank", "continental juice bar"]));
var ceilings = (/* unused pure expression or super */ null && (["antler chandelier", "ceiling fan", "artificial skylight"]));
var nightstands = (/* unused pure expression or super */ null && (["foreign language tapes", "bowl of potpourri", "electric muscle stimulator"]));
function getDesk() {
  var _desks$find;
  return (_desks$find = desks.find(desk => Object.keys(getChateau()).includes(desk))) !== null && _desks$find !== void 0 ? _desks$find : null;
}
function getCeiling() {
  var _ceilings$find;
  return (_ceilings$find = ceilings.find(ceiling => Object.keys(getChateau()).includes(ceiling))) !== null && _ceilings$find !== void 0 ? _ceilings$find : null;
}
function getNightstand() {
  var _nightstands$find;
  return (_nightstands$find = nightstands.find(nightstand => Object.keys(getChateau()).includes(nightstand))) !== null && _nightstands$find !== void 0 ? _nightstands$find : null;
}
function changeDesk(desk) {
  if (getDesk() === desk) return true;
  if (!desks.includes(desk)) return false;
  buy(Item.get(desk));
  return getDesk() === desk;
}
function changeCeiling(ceiling) {
  if (getCeiling() === ceiling) return true;
  if (!ceilings.includes(ceiling)) return false;
  buy(Item.get(ceiling));
  return getCeiling() === ceiling;
}
function changeNightstand(nightstand) {
  if (getNightstand() === nightstand) return true;
  if (!nightstands.includes(nightstand)) return false;
  buy(Item.get(nightstand));
  return getNightstand() === nightstand;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2007/CandyHearts.js
var CandyHearts_templateObject, CandyHearts_templateObject2, CandyHearts_templateObject3, CandyHearts_templateObject4, CandyHearts_templateObject5, CandyHearts_templateObject6, CandyHearts_templateObject7;
function CandyHearts_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


var summonSkill = $skill(CandyHearts_templateObject || (CandyHearts_templateObject = CandyHearts_taggedTemplateLiteral(["Summon Candy Heart"])));
var libramChance = 1.0 / 6;
var libramExpected = new Map([[template_string_$item(CandyHearts_templateObject2 || (CandyHearts_templateObject2 = CandyHearts_taggedTemplateLiteral(["green candy heart"]))), libramChance], [template_string_$item(CandyHearts_templateObject3 || (CandyHearts_templateObject3 = CandyHearts_taggedTemplateLiteral(["lavender candy heart"]))), libramChance], [template_string_$item(CandyHearts_templateObject4 || (CandyHearts_templateObject4 = CandyHearts_taggedTemplateLiteral(["orange candy heart"]))), libramChance], [template_string_$item(CandyHearts_templateObject5 || (CandyHearts_templateObject5 = CandyHearts_taggedTemplateLiteral(["pink candy heart"]))), libramChance], [template_string_$item(CandyHearts_templateObject6 || (CandyHearts_templateObject6 = CandyHearts_taggedTemplateLiteral(["white candy heart"]))), libramChance], [template_string_$item(CandyHearts_templateObject7 || (CandyHearts_templateObject7 = CandyHearts_taggedTemplateLiteral(["yellow candy heart"]))), libramChance]]);
/**
 * @returns true if the player can Summon Candy Heart
 */
function CandyHearts_have() {
  return lib_have(summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */
function expected() {
  return libramExpected;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2008/DivineFavors.js
var DivineFavors_templateObject, DivineFavors_templateObject2, DivineFavors_templateObject3, DivineFavors_templateObject4, DivineFavors_templateObject5, DivineFavors_templateObject6, DivineFavors_templateObject7;
function DivineFavors_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var DivineFavors_summonSkill = $skill(DivineFavors_templateObject || (DivineFavors_templateObject = DivineFavors_taggedTemplateLiteral(["Summon Party Favor"])));
/**
 * @returns true if the player can Summon Party Favors
 */
function DivineFavors_have() {
  return lib_have(DivineFavors_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */
function DivineFavors_expected() {
  var rareSummons = property_get("_favorRareSummons");
  var totalRareChance = 1.0 / Math.pow(2, rareSummons + 1);
  var commonChance = (1.0 - totalRareChance) / 3;
  var rareChance = totalRareChance / 3;
  return new Map([[template_string_$item(DivineFavors_templateObject2 || (DivineFavors_templateObject2 = DivineFavors_taggedTemplateLiteral(["divine blowout"]))), commonChance], [template_string_$item(DivineFavors_templateObject3 || (DivineFavors_templateObject3 = DivineFavors_taggedTemplateLiteral(["divine can of silly string"]))), commonChance], [template_string_$item(DivineFavors_templateObject4 || (DivineFavors_templateObject4 = DivineFavors_taggedTemplateLiteral(["divine noisemaker"]))), commonChance], [template_string_$item(DivineFavors_templateObject5 || (DivineFavors_templateObject5 = DivineFavors_taggedTemplateLiteral(["divine champagne flute"]))), rareChance], [template_string_$item(DivineFavors_templateObject6 || (DivineFavors_templateObject6 = DivineFavors_taggedTemplateLiteral(["divine champagne popper"]))), rareChance], [template_string_$item(DivineFavors_templateObject7 || (DivineFavors_templateObject7 = DivineFavors_taggedTemplateLiteral(["divine cracker"]))), rareChance]]);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2009/LoveSongs.js
var LoveSongs_templateObject, LoveSongs_templateObject2, LoveSongs_templateObject3, LoveSongs_templateObject4, LoveSongs_templateObject5, LoveSongs_templateObject6, LoveSongs_templateObject7;
function LoveSongs_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


var LoveSongs_summonSkill = $skill(LoveSongs_templateObject || (LoveSongs_templateObject = LoveSongs_taggedTemplateLiteral(["Summon Love Song"])));
var LoveSongs_libramChance = 1.0 / 6;
var LoveSongs_libramExpected = new Map([[template_string_$item(LoveSongs_templateObject2 || (LoveSongs_templateObject2 = LoveSongs_taggedTemplateLiteral(["love song of disturbing obsession"]))), LoveSongs_libramChance], [template_string_$item(LoveSongs_templateObject3 || (LoveSongs_templateObject3 = LoveSongs_taggedTemplateLiteral(["love song of icy revenge"]))), LoveSongs_libramChance], [template_string_$item(LoveSongs_templateObject4 || (LoveSongs_templateObject4 = LoveSongs_taggedTemplateLiteral(["love song of naughty innuendo"]))), LoveSongs_libramChance], [template_string_$item(LoveSongs_templateObject5 || (LoveSongs_templateObject5 = LoveSongs_taggedTemplateLiteral(["love song of smoldering passion"]))), LoveSongs_libramChance], [template_string_$item(LoveSongs_templateObject6 || (LoveSongs_templateObject6 = LoveSongs_taggedTemplateLiteral(["love song of sugary cuteness"]))), LoveSongs_libramChance], [template_string_$item(LoveSongs_templateObject7 || (LoveSongs_templateObject7 = LoveSongs_taggedTemplateLiteral(["love song of vague ambiguity"]))), LoveSongs_libramChance]]);
/**
 * @returns true if the player can Summon Love Song
 */
function LoveSongs_have() {
  return lib_have(LoveSongs_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */
function LoveSongs_expected() {
  return LoveSongs_libramExpected;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2010/Brickos.js
var Brickos_templateObject, Brickos_templateObject2, Brickos_templateObject3;
function Brickos_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var Brickos_summonSkill = $skill(Brickos_templateObject || (Brickos_templateObject = Brickos_taggedTemplateLiteral(["Summon BRICKOs"])));
/**
 * @returns true if the player can Summon BRICKOs
 */
function Brickos_have() {
  return lib_have(Brickos_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */
function Brickos_expected() {
  var eyeSummons = property_get("_brickoEyeSummons");
  var eyeChance = eyeSummons === 3 ? 0.0 : eyeSummons === 0 ? 0.5 : 1.0 / 3.0;
  return new Map([[template_string_$item(Brickos_templateObject2 || (Brickos_templateObject2 = Brickos_taggedTemplateLiteral(["BRICKO eye brick"]))), eyeChance], [template_string_$item(Brickos_templateObject3 || (Brickos_templateObject3 = Brickos_taggedTemplateLiteral(["BRICKO brick"]))), 3.0 - eyeChance]]);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2011/Gygaxian.js
var Gygaxian_templateObject, Gygaxian_templateObject2, Gygaxian_templateObject3, Gygaxian_templateObject4, Gygaxian_templateObject5, Gygaxian_templateObject6, Gygaxian_templateObject7;
function Gygaxian_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


var Gygaxian_summonSkill = $skill(Gygaxian_templateObject || (Gygaxian_templateObject = Gygaxian_taggedTemplateLiteral(["Summon Dice"])));
var Gygaxian_libramChance = 1.0 / 6;
var Gygaxian_libramExpected = new Map([[template_string_$item(Gygaxian_templateObject2 || (Gygaxian_templateObject2 = Gygaxian_taggedTemplateLiteral(["d4"]))), Gygaxian_libramChance], [template_string_$item(Gygaxian_templateObject3 || (Gygaxian_templateObject3 = Gygaxian_taggedTemplateLiteral(["d6"]))), Gygaxian_libramChance], [template_string_$item(Gygaxian_templateObject4 || (Gygaxian_templateObject4 = Gygaxian_taggedTemplateLiteral(["d8"]))), Gygaxian_libramChance], [template_string_$item(Gygaxian_templateObject5 || (Gygaxian_templateObject5 = Gygaxian_taggedTemplateLiteral(["d10"]))), Gygaxian_libramChance], [template_string_$item(Gygaxian_templateObject6 || (Gygaxian_templateObject6 = Gygaxian_taggedTemplateLiteral(["d12"]))), Gygaxian_libramChance], [template_string_$item(Gygaxian_templateObject7 || (Gygaxian_templateObject7 = Gygaxian_taggedTemplateLiteral(["d20"]))), Gygaxian_libramChance]]);
/**
 * @returns true if the player can Summon Dice
 */
function Gygaxian_have() {
  return lib_have(Gygaxian_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */
function Gygaxian_expected() {
  return Gygaxian_libramExpected;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2012/Resolutions.js
var Resolutions_templateObject, Resolutions_templateObject2, Resolutions_templateObject3, Resolutions_templateObject4, Resolutions_templateObject5, Resolutions_templateObject6, Resolutions_templateObject7, Resolutions_templateObject8, Resolutions_templateObject9, Resolutions_templateObject10;
function Resolutions_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


var Resolutions_summonSkill = $skill(Resolutions_templateObject || (Resolutions_templateObject = Resolutions_taggedTemplateLiteral(["Summon Resolutions"])));
var commonChance = 0.98 / 6;
var rareChance = 0.02 / 3;
var Resolutions_libramExpected = new Map([[template_string_$item(Resolutions_templateObject2 || (Resolutions_templateObject2 = Resolutions_taggedTemplateLiteral(["resolution: be feistier"]))), commonChance], [template_string_$item(Resolutions_templateObject3 || (Resolutions_templateObject3 = Resolutions_taggedTemplateLiteral(["resolution: be happier"]))), commonChance], [template_string_$item(Resolutions_templateObject4 || (Resolutions_templateObject4 = Resolutions_taggedTemplateLiteral(["resolution: be sexier"]))), commonChance], [template_string_$item(Resolutions_templateObject5 || (Resolutions_templateObject5 = Resolutions_taggedTemplateLiteral(["resolution: be smarter"]))), commonChance], [template_string_$item(Resolutions_templateObject6 || (Resolutions_templateObject6 = Resolutions_taggedTemplateLiteral(["resolution: be stronger"]))), commonChance], [template_string_$item(Resolutions_templateObject7 || (Resolutions_templateObject7 = Resolutions_taggedTemplateLiteral(["resolution: be wealthier"]))), commonChance], [template_string_$item(Resolutions_templateObject8 || (Resolutions_templateObject8 = Resolutions_taggedTemplateLiteral(["resolution: be kinder"]))), rareChance], [template_string_$item(Resolutions_templateObject9 || (Resolutions_templateObject9 = Resolutions_taggedTemplateLiteral(["resolution: be luckier"]))), rareChance], [template_string_$item(Resolutions_templateObject10 || (Resolutions_templateObject10 = Resolutions_taggedTemplateLiteral(["resolution: be more adventurous"]))), rareChance]]);
/**
 * @returns true if the player can Summon Resolutions
 */
function Resolutions_have() {
  return lib_have(Resolutions_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */
function Resolutions_expected() {
  return Resolutions_libramExpected;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2013/PulledTaffy.js
var PulledTaffy_templateObject, PulledTaffy_templateObject2, PulledTaffy_templateObject3, PulledTaffy_templateObject4, PulledTaffy_templateObject5, PulledTaffy_templateObject6, PulledTaffy_templateObject7, PulledTaffy_templateObject8;
function PulledTaffy_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var PulledTaffy_summonSkill = $skill(PulledTaffy_templateObject || (PulledTaffy_templateObject = PulledTaffy_taggedTemplateLiteral(["Summon Taffy"])));
/**
 * @returns true if the player can Summon Taffy
 */
function PulledTaffy_have() {
  return lib_have(PulledTaffy_summonSkill);
}
/**
 * @returns map containing the chance of an item to be summoned
 */
function PulledTaffy_expected() {
  var rareSummons = property_get("_taffyRareSummons");
  var yellowSummons = property_get("_taffyYellowSummons");
  var onlyYellow = yellowSummons === 0 && rareSummons === 3;
  var totalRareChance = rareSummons < 4 ? 1.0 / Math.pow(2, rareSummons + 1) : 0.0;
  var commonChance = (1.0 - totalRareChance) / 4;
  var rareChance = onlyYellow ? 0.0 : totalRareChance / (3 - property_get("_taffyYellowSummons"));
  var yellowChance = yellowSummons === 1 ? 0.0 : onlyYellow ? totalRareChance : rareChance;
  return new Map([[template_string_$item(PulledTaffy_templateObject2 || (PulledTaffy_templateObject2 = PulledTaffy_taggedTemplateLiteral(["pulled blue taffy"]))), commonChance], [template_string_$item(PulledTaffy_templateObject3 || (PulledTaffy_templateObject3 = PulledTaffy_taggedTemplateLiteral(["pulled orange taffy"]))), commonChance], [template_string_$item(PulledTaffy_templateObject4 || (PulledTaffy_templateObject4 = PulledTaffy_taggedTemplateLiteral(["pulled violet taffy"]))), commonChance], [template_string_$item(PulledTaffy_templateObject5 || (PulledTaffy_templateObject5 = PulledTaffy_taggedTemplateLiteral(["pulled red taffy"]))), commonChance], [template_string_$item(PulledTaffy_templateObject6 || (PulledTaffy_templateObject6 = PulledTaffy_taggedTemplateLiteral(["pulled indigo taffy"]))), rareChance], [template_string_$item(PulledTaffy_templateObject7 || (PulledTaffy_templateObject7 = PulledTaffy_taggedTemplateLiteral(["pulled green taffy"]))), rareChance], [template_string_$item(PulledTaffy_templateObject8 || (PulledTaffy_templateObject8 = PulledTaffy_taggedTemplateLiteral(["pulled yellow taffy"]))), yellowChance]]);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/LibramSummon.js
function LibramSummon_slicedToArray(arr, i) { return LibramSummon_arrayWithHoles(arr) || LibramSummon_iterableToArrayLimit(arr, i) || LibramSummon_unsupportedIterableToArray(arr, i) || LibramSummon_nonIterableRest(); }
function LibramSummon_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function LibramSummon_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return LibramSummon_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return LibramSummon_arrayLikeToArray(o, minLen); }
function LibramSummon_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function LibramSummon_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function LibramSummon_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }









/**
 *
 * @param summonSkill The libram summoning skill
 * @returns map containing the chance of an item to be summoned
 */
function expectedLibramSummon(summonSkill) {
  switch (summonSkill) {
    case candyHeartsSkill:
      return candyHeartsExpected();
    case divineFavorsSkill:
      return divineFavorsExpected();
    case loveSongsSkill:
      return loveSongsExpected();
    case brickosSkill:
      return brickosExpected();
    case diceSkill:
      return diceExpected();
    case resolutionsSkill:
      return resolutionsExpected();
    case taffySkill:
      return taffyExpected();
  }
  return new Map();
}
/**
 *
 * @returns map containing the chance of items to be summoned for each libram summoning skill available
 */
function possibleLibramSummons() {
  var results = new Map();
  if (CandyHearts_have()) {
    results.set(summonSkill, expected());
  }
  if (DivineFavors_have()) {
    results.set(DivineFavors_summonSkill, DivineFavors_expected());
  }
  if (LoveSongs_have()) {
    results.set(LoveSongs_summonSkill, LoveSongs_expected());
  }
  if (Brickos_have()) {
    results.set(Brickos_summonSkill, Brickos_expected());
  }
  if (Gygaxian_have()) {
    results.set(Gygaxian_summonSkill, Gygaxian_expected());
  }
  if (Resolutions_have()) {
    results.set(Resolutions_summonSkill, Resolutions_expected());
  }
  if (PulledTaffy_have()) {
    results.set(PulledTaffy_summonSkill, PulledTaffy_expected());
  }
  return results;
}
function bestLibramToCast() {
  var arr = Array.from(possibleLibramSummons().entries());
  if (!arr.length) return null;
  return maxBy(arr, _ref => {
    var _ref2 = LibramSummon_slicedToArray(_ref, 2),
      itemMap = _ref2[1];
    return utils_sum(Array.from(itemMap.entries()), _ref3 => {
      var _ref4 = LibramSummon_slicedToArray(_ref3, 2),
        item = _ref4[0],
        weight = _ref4[1];
      return weight * getSaleValue(item);
    });
  })[0];
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/counter.js

/**
 * Returns Infinity for counters that do not exist, and otherwise returns the duration of the counter
 * @param counter The name of the counter in question
 * @returns Infinity if the counter does not exist; otherwise returns the duration of the counter
 */
function counter_get(counter) {
  var value = (0,external_kolmafia_namespaceObject.getCounter)(counter);
  // getCounter returns -1 for counters that don't exist, but it also returns -1 for counters whose value is -1
  if (value === -1) {
    // if we have a counter with value -1, we check to see if that counter exists via getCounters()
    // We return null if it doesn't exist
    return (0,external_kolmafia_namespaceObject.getCounters)(counter, -1, -1).trim() === "" ? Infinity : -1;
  }
  return value;
}
/**
 * The world is everything that is the case. This determines which counters are the case.
 * @param counter The name of the counter in question
 * @returns True for counters which currently exist; false for those which do not
 */
function exists(counter) {
  return getCounter(counter) !== -1 || getCounters(counter, -1, -1).trim() !== "";
}
/**
 * Creates a manual counter with specified name and duration
 * @param counter Name of the counter to manually create
 * @param duration Duration of counter to manually set
 * @returns Whether the counter was successfully set
 */
function set(counter, duration) {
  cliExecute("counters add ".concat(duration, " ").concat(counter));
  return counter_get(counter) !== null;
}
;// CONCATENATED MODULE: ./src/lib.ts
var lib_templateObject, lib_templateObject2, lib_templateObject3, lib_templateObject4, lib_templateObject5, lib_templateObject6, lib_templateObject7, lib_templateObject8, lib_templateObject9, lib_templateObject10, lib_templateObject11, lib_templateObject12, lib_templateObject13, lib_templateObject14, lib_templateObject15, lib_templateObject16, lib_templateObject17, lib_templateObject18, lib_templateObject19, lib_templateObject20, lib_templateObject21, lib_templateObject22, lib_templateObject23, lib_templateObject24, lib_templateObject25, lib_templateObject26, lib_templateObject27, lib_templateObject28, lib_templateObject29, lib_templateObject30, lib_templateObject31, lib_templateObject32, lib_templateObject33, lib_templateObject34, lib_templateObject35, lib_templateObject36;
function src_lib_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = src_lib_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function lib_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function lib_toConsumableArray(arr) { return lib_arrayWithoutHoles(arr) || lib_iterableToArray(arr) || src_lib_unsupportedIterableToArray(arr) || lib_nonIterableSpread(); }
function lib_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function src_lib_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_lib_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_lib_arrayLikeToArray(o, minLen); }
function lib_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function lib_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return src_lib_arrayLikeToArray(arr); }
function src_lib_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function lib_defineProperty(obj, key, value) { key = src_lib_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function src_lib_toPropertyKey(arg) { var key = src_lib_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function src_lib_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




var embezzlerLog = {
  initialEmbezzlersFought: 0,
  digitizedEmbezzlersFought: 0,
  sources: []
};
var WISH_VALUE = 50000;
var HIGHLIGHT = (0,external_kolmafia_namespaceObject.isDarkMode)() ? "yellow" : "blue";
var ESTIMATED_OVERDRUNK_TURNS = 60;
var EMBEZZLER_MULTIPLIER = () => config_globalOptions.prefs.embezzlerMultiplier;
var propertyManager = new PropertiesManager();
var baseMeat = SongBoom_have() && (songChangesLeft() > 0 || song() === "Total Eclipse of Your Meat" && (0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)()) ? 275 : 250;
function averageEmbezzlerNet() {
  return (baseMeat + 750) * (0,external_kolmafia_namespaceObject.meatDropModifier)() / 100;
}
function averageTouristNet() {
  return baseMeat * (0,external_kolmafia_namespaceObject.meatDropModifier)() / 100;
}
function expectedEmbezzlerProfit() {
  return averageEmbezzlerNet() - averageTouristNet();
}
function safeInterrupt() {
  if (property_get("garbo_interrupt", false)) {
    _set("garbo_interrupt", false);
    throw new Error("User interrupt requested. Stopping Garbage Collector.");
  }
}
function resetDailyPreference(trackingPreference) {
  var today = (0,external_kolmafia_namespaceObject.todayToString)();
  if (getString(trackingPreference) !== today) {
    _set(trackingPreference, today);
    return true;
  } else {
    return false;
  }
}
function setChoice(adventure, value) {
  propertyManager.setChoices(lib_defineProperty({}, adventure, value));
}

/**
 * Shuffle a copy of {array}.
 * @param array Array to shuffle.
 */
function shuffle(array) {
  var shuffledArray = lib_toConsumableArray(array);
  for (var i = shuffledArray.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = shuffledArray[i];
    shuffledArray[i] = shuffledArray[j];
    shuffledArray[j] = temp;
  }
  return shuffledArray;
}
function mapMonster(location, monster) {
  if ((0,external_kolmafia_namespaceObject.haveSkill)($skill(lib_templateObject || (lib_templateObject = lib_taggedTemplateLiteral(["Map the Monsters"])))) && !property_get("mappingMonsters") && property_get("_monstersMapped") < 3) {
    (0,external_kolmafia_namespaceObject.useSkill)($skill(lib_templateObject2 || (lib_templateObject2 = lib_taggedTemplateLiteral(["Map the Monsters"]))));
  }
  if (!property_get("mappingMonsters")) throw "Failed to setup Map the Monsters.";
  var myTurns = (0,external_kolmafia_namespaceObject.myTurncount)();
  var mapPage = "";
  // Handle zone intros and holiday wanderers
  for (var tries = 0; tries < 10; tries++) {
    mapPage = (0,external_kolmafia_namespaceObject.visitUrl)((0,external_kolmafia_namespaceObject.toUrl)(location), false, true);
    if (mapPage.includes("Leading Yourself Right to Them")) break;
    // Time-pranks can show up here, annoyingly
    if (mapPage.includes("<!-- MONSTERID: 1965 -->") || mapPage.includes("<!-- MONSTERID: 1622  -->")) {
      (0,external_kolmafia_namespaceObject.runCombat)(Macro.attack().repeat().toString());
    }
    if ((0,external_kolmafia_namespaceObject.handlingChoice)()) (0,external_kolmafia_namespaceObject.runChoice)(-1);
    if ((0,external_kolmafia_namespaceObject.myTurncount)() > myTurns + 1) throw "Map the monsters unsuccessful?";
    if (tries === 9) throw "Stuck trying to Map the monsters.";
  }
  var fightPage = (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd&whichchoice=1435&option=1&heyscriptswhatsupwinkwink=".concat(monster.id));
  if (!fightPage.includes(monster.name)) {
    throw "Something went wrong starting the fight.";
  }
  if ((0,external_kolmafia_namespaceObject.choiceFollowsFight)()) (0,external_kolmafia_namespaceObject.runChoice)(-1);
}

/**
 * Returns true if the arguments have all elements equal.
 * @param array1 First array.
 * @param array2 Second array.
 */
function lib_arrayEquals(array1, array2) {
  return array1.length === array2.length && array1.every((element, index) => element === array2[index]);
}
function lib_questStep(questName) {
  var stringStep = getString(questName);
  if (stringStep === "unstarted" || stringStep === "") return -1;else if (stringStep === "started") return 0;else if (stringStep === "finished") return 999;else {
    if (stringStep.substring(0, 4) !== "step") {
      throw "Quest state parsing error.";
    }
    return parseInt(stringStep.substring(4), 10);
  }
}
function tryFeast(familiar) {
  if (lib_have(familiar)) {
    (0,external_kolmafia_namespaceObject.useFamiliar)(familiar);
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(lib_templateObject3 || (lib_templateObject3 = lib_taggedTemplateLiteral(["moveable feast"]))));
  }
}
var ltbRun = () => {
  return ensureFreeRun({
    requireUnlimited: () => true,
    noFamiliar: () => true,
    noRequirements: () => true,
    maximumCost: () => {
      var _get;
      return (_get = property_get("autoBuyPriceLimit")) !== null && _get !== void 0 ? _get : 20000;
    }
  });
};
function coinmasterPrice(item) {
  // TODO: Get this from coinmasters.txt if more are needed
  switch (item) {
    case template_string_$item(lib_templateObject4 || (lib_templateObject4 = lib_taggedTemplateLiteral(["viral video"]))):
      return 20;
    case template_string_$item(lib_templateObject5 || (lib_templateObject5 = lib_taggedTemplateLiteral(["plus one"]))):
      return 74;
    case template_string_$item(lib_templateObject6 || (lib_templateObject6 = lib_taggedTemplateLiteral(["gallon of milk"]))):
      return 100;
    case template_string_$item(lib_templateObject7 || (lib_templateObject7 = lib_taggedTemplateLiteral(["print screen button"]))):
      return 111;
    case template_string_$item(lib_templateObject8 || (lib_templateObject8 = lib_taggedTemplateLiteral(["daily dungeon malware"]))):
      return 150;
  }
  return 0;
}
function kramcoGuaranteed() {
  return lib_have(template_string_$item(lib_templateObject9 || (lib_templateObject9 = lib_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) && getKramcoWandererChance() >= 1;
}
var log = [];
function logMessage(message) {
  log.push(message);
}
function printLog(color) {
  var _iterator = src_lib_createForOfIteratorHelper(log),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var message = _step.value;
      (0,external_kolmafia_namespaceObject.print)(message, color);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

/**
 * Prints Garbo's help menu to the GCLI.
 */
function printHelpMenu() {
  var helpData = JSON.parse(fileToBuffer("garbo_help.json"));
  var tableMaxCharWidth = 82;
  var tableRows = helpData.map(_ref => {
    var tableItem = _ref.tableItem,
      description = _ref.description;
    var croppedDescription = description.length > tableMaxCharWidth ? description.replace(/(.{82}\s)/g, "$&\n") : description;
    return "<tr><td width=200><pre> ".concat(tableItem, "</pre></td><td width=600><pre>").concat(croppedDescription, "</pre></td></tr>");
  });
  printHtml("<table border=2 width=800 style=\"font-family:monospace;\">".concat(tableRows.join(""), "</table>"));
}

/**
 * Determines the opportunity cost of not using the Pillkeeper to fight an embezzler
 * @returns The expected value of using a pillkeeper charge to fight an embezzler
 */
function pillkeeperOpportunityCost() {
  var canTreasury = (0,external_kolmafia_namespaceObject.canAdventure)($location(lib_templateObject10 || (lib_templateObject10 = lib_taggedTemplateLiteral(["Cobb's Knob Treasury"]))));
  var alternateUses = [{
    can: canTreasury,
    value: EMBEZZLER_MULTIPLIER() * property_get("valueOfAdventure")
  }, {
    can: realmAvailable("sleaze"),
    value: 40000
  }].filter(x => x.can);
  var alternateUse = alternateUses.length ? lib_maxBy(alternateUses, "value") : undefined;
  var alternateUseValue = alternateUse === null || alternateUse === void 0 ? void 0 : alternateUse.value;
  if (!alternateUseValue) return 0;
  if (!canTreasury) return alternateUseValue;
  var embezzler = $monster(lib_templateObject11 || (lib_templateObject11 = lib_taggedTemplateLiteral(["Knob Goblin Embezzler"])));
  var canStartChain = [CombatLoversLocket_have() && (0,external_kolmafia_namespaceObject.getLocketMonsters)()[embezzler.name], ChateauMantegna_have() && paintingMonster() === embezzler && !paintingFought(), lib_have(template_string_$item(lib_templateObject12 || (lib_templateObject12 = lib_taggedTemplateLiteral(["Clan VIP Lounge key"])))) && !property_get("_photocopyUsed")].some(x => x);
  return canStartChain ? alternateUseValue : WISH_VALUE;
}

/**
 * Burns existing MP on the mall-optimal libram skill until unable to cast any more.
 */
function burnLibrams() {
  var mpTarget = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var libramToCast = bestLibramToCast();
  while (libramToCast && (0,external_kolmafia_namespaceObject.mpCost)(libramToCast) <= (0,external_kolmafia_namespaceObject.myMp)() - mpTarget) {
    (0,external_kolmafia_namespaceObject.useSkill)(libramToCast);
    libramToCast = bestLibramToCast();
  }
  if (mpTarget > 0) {
    (0,external_kolmafia_namespaceObject.cliExecute)("burn -".concat(mpTarget));
  } else {
    (0,external_kolmafia_namespaceObject.cliExecute)("burn *");
  }
}
function safeRestoreMpTarget() {
  //  If our max MP is close to 200, we could be restoring every turn even if we don't need to, avoid that case.
  if (Math.abs((0,external_kolmafia_namespaceObject.myMaxmp)() - 200) < 40) {
    return Math.min((0,external_kolmafia_namespaceObject.myMaxmp)(), 100);
  }
  return Math.min((0,external_kolmafia_namespaceObject.myMaxmp)(), 200);
}
function safeRestore() {
  if (lib_have(template_string_$effect(lib_templateObject13 || (lib_templateObject13 = lib_taggedTemplateLiteral(["Beaten Up"]))))) {
    if (property_get("lastEncounter") === "Sssshhsssblllrrggghsssssggggrrgglsssshhssslblgl") {
      lib_uneffect(template_string_$effect(lib_templateObject14 || (lib_templateObject14 = lib_taggedTemplateLiteral(["Beaten Up"]))));
    } else {
      throw new Error("Hey, you're beaten up, and that's a bad thing. Lick your wounds, handle your problems, and run me again when you feel ready.");
    }
  }
  if ((0,external_kolmafia_namespaceObject.myHp)() < Math.min((0,external_kolmafia_namespaceObject.myMaxhp)() * 0.5, property_get("garbo_restoreHpTarget", 2000))) {
    (0,external_kolmafia_namespaceObject.restoreHp)(Math.min((0,external_kolmafia_namespaceObject.myMaxhp)() * 0.9, property_get("garbo_restoreHpTarget", 2000)));
  }
  var mpTarget = safeRestoreMpTarget();
  var shouldRestoreMp = () => (0,external_kolmafia_namespaceObject.myMp)() < mpTarget;
  if (shouldRestoreMp() && lib_have(template_string_$item(lib_templateObject15 || (lib_templateObject15 = lib_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) && (lib_have(template_string_$item(lib_templateObject16 || (lib_templateObject16 = lib_taggedTemplateLiteral(["magical sausage"])))) || lib_have(template_string_$item(lib_templateObject17 || (lib_templateObject17 = lib_taggedTemplateLiteral(["magical sausage casing"]))))) && property_get("_sausagesEaten") < 23) {
    (0,external_kolmafia_namespaceObject.eat)(template_string_$item(lib_templateObject18 || (lib_templateObject18 = lib_taggedTemplateLiteral(["magical sausage"]))));
  }
  var soulFoodCasts = Math.floor((0,external_kolmafia_namespaceObject.mySoulsauce)() / (0,external_kolmafia_namespaceObject.soulsauceCost)($skill(lib_templateObject19 || (lib_templateObject19 = lib_taggedTemplateLiteral(["Soul Food"])))));
  if (shouldRestoreMp() && soulFoodCasts > 0) (0,external_kolmafia_namespaceObject.useSkill)(soulFoodCasts, $skill(lib_templateObject20 || (lib_templateObject20 = lib_taggedTemplateLiteral(["Soul Food"]))));
  if (shouldRestoreMp()) (0,external_kolmafia_namespaceObject.restoreMp)(mpTarget);
  burnLibrams(mpTarget * 2); // Leave a mp buffer when burning
}

/**
 * Compares the local version of Garbo against the most recent release branch, printing results to the CLI
 */
function checkGithubVersion() {
  if (false) {} else {
    if ((0,external_kolmafia_namespaceObject.gitAtHead)("Loathing-Associates-Scripting-Society-garbage-collector-release")) {
      (0,external_kolmafia_namespaceObject.print)("Garbo is up to date!", HIGHLIGHT);
    } else {
      var _gitBranches$find;
      var gitBranches = JSON.parse((0,external_kolmafia_namespaceObject.visitUrl)("https://api.github.com/repos/".concat("pstalcup/garbage-collector", "/branches")));
      var releaseCommit = (_gitBranches$find = gitBranches.find(branchInfo => branchInfo.name === "release")) === null || _gitBranches$find === void 0 ? void 0 : _gitBranches$find.commit;
      (0,external_kolmafia_namespaceObject.print)("Garbo is out of date. Please run 'git update!'", "red");
      (0,external_kolmafia_namespaceObject.print)("Local Version: ".concat((0,external_kolmafia_namespaceObject.gitInfo)("Loathing-Associates-Scripting-Society-garbage-collector-release").commit, "."));
      (0,external_kolmafia_namespaceObject.print)("Release Version: ".concat(releaseCommit === null || releaseCommit === void 0 ? void 0 : releaseCommit.sha, "."));
    }
  }
}
function realmAvailable(identifier) {
  if (identifier === "fantasy") {
    return property_get("_frToday") || property_get("frAlways");
  } else if (identifier === "pirate") {
    return property_get("_prToday") || property_get("prAlways");
  }
  return property_get("_".concat(identifier, "AirportToday"), false) || property_get("".concat(identifier, "AirportAlways"), false);
}
function formatNumber(num) {
  return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
}
function getChoiceOption(partialText) {
  if (handlingChoice()) {
    var findResults = Object.entries(availableChoiceOptions()).find(value => value[1].indexOf(partialText) > -1);
    if (findResults) {
      return parseInt(findResults[0]);
    }
  }
  return -1;
}

/**
 * Confirmation dialog that supports automatic resolution via garbo_autoUserConfirm preference
 * @param msg string to display in confirmation dialog
 * @param defaultValue default answer if user doesn't provide one
 * @param timeOut time to show dialog before submitting default value
 * @returns answer to confirmation dialog
 */
function userConfirmDialog(msg, defaultValue, timeOut) {
  if (property_get("garbo_autoUserConfirm", false)) {
    (0,external_kolmafia_namespaceObject.print)("Automatically selected ".concat(defaultValue, " for ").concat(msg), "red");
    return defaultValue;
  }
  if (timeOut) return (0,external_kolmafia_namespaceObject.userConfirm)(msg, timeOut, defaultValue);
  return (0,external_kolmafia_namespaceObject.userConfirm)(msg);
}
var latteActionSourceFinderConstraints = {
  allowedAction: action => {
    var _action$constraints$e, _action$constraints, _action$constraints$e2;
    if (!lib_have(template_string_$item(lib_templateObject21 || (lib_templateObject21 = lib_taggedTemplateLiteral(["latte lovers member's mug"]))))) return true;
    var forceEquipsOtherThanLatte = ((_action$constraints$e = action === null || action === void 0 ? void 0 : (_action$constraints = action.constraints) === null || _action$constraints === void 0 ? void 0 : (_action$constraints$e2 = _action$constraints.equipmentRequirements) === null || _action$constraints$e2 === void 0 ? void 0 : _action$constraints$e2.call(_action$constraints).maximizeOptions.forceEquip) !== null && _action$constraints$e !== void 0 ? _action$constraints$e : []).filter(equipment => equipment !== template_string_$item(lib_templateObject22 || (lib_templateObject22 = lib_taggedTemplateLiteral(["latte lovers member's mug"]))));
    return forceEquipsOtherThanLatte.every(equipment => (0,external_kolmafia_namespaceObject.toSlot)(equipment) !== $slot(lib_templateObject23 || (lib_templateObject23 = lib_taggedTemplateLiteral(["off-hand"])))) && utils_sum(forceEquipsOtherThanLatte, external_kolmafia_namespaceObject.weaponHands) < 2;
  }
};
var today = Date.now() - (0,external_kolmafia_namespaceObject.gametimeToInt)() - 1000 * 60 * 3.5;

// Barf setup info
var olfactionCopies = lib_have($skill(lib_templateObject24 || (lib_templateObject24 = lib_taggedTemplateLiteral(["Transcendent Olfaction"])))) ? 3 : 0;
var gallapagosCopies = lib_have($skill(lib_templateObject25 || (lib_templateObject25 = lib_taggedTemplateLiteral(["Gallapagosian Mating Call"])))) ? 1 : 0;
var garbageTourists = 1 + olfactionCopies + gallapagosCopies,
  touristFamilies = 1,
  angryTourists = 1;
var barfTourists = garbageTourists + touristFamilies + angryTourists;
var garbageTouristRatio = garbageTourists / barfTourists;
var touristFamilyRatio = touristFamilies / barfTourists;
// 30 tourists till NC, with families counting as 3
// Estimate number of turns till the counter hits 27
// then estimate the expected number of turns required to hit a counter of >= 30
var turnsToNC = 27 * barfTourists / (garbageTourists + angryTourists + 3 * touristFamilies) + 1 * touristFamilyRatio + 2 * (1 - touristFamilyRatio) * touristFamilyRatio + 3 * (1 - touristFamilyRatio) * (1 - touristFamilyRatio);
function dogOrHolidayWanderer() {
  var extraEncounters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return [].concat(lib_toConsumableArray(extraEncounters), ["Wooof! Wooooooof!", "Playing Fetch*", "Your Dog Found Something Again"], lib_toConsumableArray(getTodaysHolidayWanderers().map(monster => monster.name))).includes(property_get("lastEncounter"));
}
var juneCleaverChoiceValues = {
  1467: {
    1: 0,
    2: 0,
    3: 5 * property_get("valueOfAdventure")
  },
  1468: {
    1: 0,
    2: 5,
    3: 0
  },
  1469: {
    1: 0,
    2: template_string_$item(lib_templateObject26 || (lib_templateObject26 = lib_taggedTemplateLiteral(["Dad's brandy"]))),
    3: 1500
  },
  1470: {
    1: 0,
    2: template_string_$item(lib_templateObject27 || (lib_templateObject27 = lib_taggedTemplateLiteral(["teacher's pen"]))),
    3: 0
  },
  1471: {
    1: template_string_$item(lib_templateObject28 || (lib_templateObject28 = lib_taggedTemplateLiteral(["savings bond"]))),
    2: 250,
    3: 0
  },
  1472: {
    1: template_string_$item(lib_templateObject29 || (lib_templateObject29 = lib_taggedTemplateLiteral(["trampled ticket stub"]))),
    2: template_string_$item(lib_templateObject30 || (lib_templateObject30 = lib_taggedTemplateLiteral(["fire-roasted lake trout"]))),
    3: 0
  },
  1473: {
    1: template_string_$item(lib_templateObject31 || (lib_templateObject31 = lib_taggedTemplateLiteral(["gob of wet hair"]))),
    2: 0,
    3: 0
  },
  1474: {
    1: 0,
    2: template_string_$item(lib_templateObject32 || (lib_templateObject32 = lib_taggedTemplateLiteral(["guilty sprout"]))),
    3: 0
  },
  1475: {
    1: template_string_$item(lib_templateObject33 || (lib_templateObject33 = lib_taggedTemplateLiteral(["mother's necklace"]))),
    2: 0,
    3: 0
  }
};
function valueJuneCleaverOption(result) {
  return result instanceof external_kolmafia_namespaceObject.Item ? garboValue(result) : result;
}
function bestJuneCleaverOption(id) {
  var options = [1, 2, 3];
  return lib_maxBy(options, option => valueJuneCleaverOption(juneCleaverChoiceValues[id][option]));
}
var romanticMonsterImpossible = () => counter_get("Romantic Monster Window end") === Infinity || counter_get("Romantic Monster Window begin") > 0 && counter_get("Romantic Monster window begin") !== Infinity || property_get("_romanticFightsLeft") <= 0;
function sober() {
  return (0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)() + ((0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(lib_templateObject34 || (lib_templateObject34 = lib_taggedTemplateLiteral(["Stooper"]))) ? -1 : 0);
}
function freeCrafts() {
  return (lib_have($skill(lib_templateObject35 || (lib_templateObject35 = lib_taggedTemplateLiteral(["Rapid Prototyping"])))) ? 5 - property_get("_rapidPrototypingUsed") : 0) + (lib_have($skill(lib_templateObject36 || (lib_templateObject36 = lib_taggedTemplateLiteral(["Expert Corner-Cutter"])))) ? 5 - property_get("_expertCornerCutterUsed") : 0);
}

/**
 * Find the best element of an array, where "best" is defined by some given criteria.
 * @param array The array to traverse and find the best element of.
 * @param optimizer Either a key on the objects we're looking at that corresponds to numerical values, or a function for mapping these objects to numbers. Essentially, some way of assigning value to the elements of the array.
 * @param reverse Make this true to find the worst element of the array, and false to find the best. Defaults to false.
 */

function lib_maxBy(array, optimizer) {
  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (!array.length) throw new Error("Don't call maxBy on an empty array!");
  if (typeof optimizer === "function") {
    return lib_toConsumableArray(array).reduce((_ref2, other) => {
      var value = _ref2.value,
        item = _ref2.item;
      var otherValue = optimizer(other);
      return value >= otherValue !== reverse ? {
        value: value,
        item: item
      } : {
        value: otherValue,
        item: other
      };
    }, {
      item: array[0],
      value: optimizer(array[0])
    }).item;
  } else {
    return array.reduce((a, b) => a[optimizer] >= b[optimizer] !== reverse ? a : b);
  }
}
var asArray = singleOrArray => Array.isArray(singleOrArray) ? singleOrArray : [singleOrArray];
;// CONCATENATED MODULE: ./node_modules/libram/dist/mood.js
var mood_templateObject, mood_templateObject2, mood_templateObject3, mood_templateObject4, mood_templateObject5, mood_templateObject6, mood_templateObject7, mood_templateObject8, mood_templateObject9, mood_templateObject10;
function mood_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function mood_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? mood_ownKeys(Object(source), !0).forEach(function (key) { mood_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : mood_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function mood_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = mood_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function mood_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return mood_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return mood_arrayLikeToArray(o, minLen); }
function mood_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function mood_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function mood_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) mood_setPrototypeOf(subClass, superClass); }
function mood_setPrototypeOf(o, p) { mood_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return mood_setPrototypeOf(o, p); }
function mood_createSuper(Derived) { var hasNativeReflectConstruct = mood_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = mood_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = mood_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return mood_possibleConstructorReturn(this, result); }; }
function mood_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return mood_assertThisInitialized(self); }
function mood_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function mood_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function mood_getPrototypeOf(o) { mood_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return mood_getPrototypeOf(o); }
function mood_defineProperty(obj, key, value) { key = mood_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function mood_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function mood_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, mood_toPropertyKey(descriptor.key), descriptor); } }
function mood_createClass(Constructor, protoProps, staticProps) { if (protoProps) mood_defineProperties(Constructor.prototype, protoProps); if (staticProps) mood_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function mood_toPropertyKey(arg) { var key = mood_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function mood_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }







var MpSource = /*#__PURE__*/function () {
  function MpSource() {
    mood_classCallCheck(this, MpSource);
  }
  mood_createClass(MpSource, [{
    key: "usesRemaining",
    value: function usesRemaining() {
      return 0;
    }
  }, {
    key: "availableMpMax",
    value: function availableMpMax() {
      return this.availableMpMin();
    }
  }]);
  return MpSource;
}();
var OscusSoda = /*#__PURE__*/function (_MpSource) {
  mood_inherits(OscusSoda, _MpSource);
  var _super = mood_createSuper(OscusSoda);
  function OscusSoda() {
    mood_classCallCheck(this, OscusSoda);
    return _super.apply(this, arguments);
  }
  mood_createClass(OscusSoda, [{
    key: "available",
    value: function available() {
      return lib_have(template_string_$item(mood_templateObject || (mood_templateObject = mood_taggedTemplateLiteral(["Oscus's neverending soda"]))));
    }
  }, {
    key: "usesRemaining",
    value: function usesRemaining() {
      return property_get("oscusSodaUsed") ? 0 : 1;
    }
  }, {
    key: "availableMpMin",
    value: function availableMpMin() {
      return this.available() && this.usesRemaining() > 0 ? 200 : 0;
    }
  }, {
    key: "availableMpMax",
    value: function availableMpMax() {
      return this.available() && this.usesRemaining() > 0 ? 300 : 0;
    }
  }, {
    key: "execute",
    value: function execute() {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(mood_templateObject2 || (mood_templateObject2 = mood_taggedTemplateLiteral(["Oscus's neverending soda"]))));
    }
  }]);
  return OscusSoda;
}(MpSource);
mood_defineProperty(OscusSoda, "instance", new OscusSoda());
var MagicalSausages = /*#__PURE__*/function (_MpSource2) {
  mood_inherits(MagicalSausages, _MpSource2);
  var _super2 = mood_createSuper(MagicalSausages);
  function MagicalSausages() {
    mood_classCallCheck(this, MagicalSausages);
    return _super2.apply(this, arguments);
  }
  mood_createClass(MagicalSausages, [{
    key: "available",
    value: function available() {
      return lib_have(template_string_$item(mood_templateObject3 || (mood_templateObject3 = mood_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))));
    }
  }, {
    key: "usesRemaining",
    value: function usesRemaining() {
      var maxSausages = (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(mood_templateObject4 || (mood_templateObject4 = mood_taggedTemplateLiteral(["magical sausage"])))) + (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(mood_templateObject5 || (mood_templateObject5 = mood_taggedTemplateLiteral(["magical sausage casing"]))));
      return this.available() ? utils_clamp(23 - property_get("_sausagesEaten"), 0, maxSausages) : 0;
    }
  }, {
    key: "availableMpMin",
    value: function availableMpMin() {
      return this.available() ? Math.min((0,external_kolmafia_namespaceObject.myMaxmp)(), 999) * this.usesRemaining() : 0;
    }
  }, {
    key: "execute",
    value: function execute() {
      var mpSpaceAvailable = (0,external_kolmafia_namespaceObject.myMaxmp)() - (0,external_kolmafia_namespaceObject.myMp)();
      if (mpSpaceAvailable < 700) return;
      var maxSausages = Math.min(this.usesRemaining(), Math.floor(((0,external_kolmafia_namespaceObject.myMaxmp)() - (0,external_kolmafia_namespaceObject.myMp)()) / Math.min((0,external_kolmafia_namespaceObject.myMaxmp)() - (0,external_kolmafia_namespaceObject.myMp)(), 999)));
      (0,external_kolmafia_namespaceObject.retrieveItem)(maxSausages, template_string_$item(mood_templateObject6 || (mood_templateObject6 = mood_taggedTemplateLiteral(["magical sausage"]))));
      (0,external_kolmafia_namespaceObject.eat)(maxSausages, template_string_$item(mood_templateObject7 || (mood_templateObject7 = mood_taggedTemplateLiteral(["magical sausage"]))));
    }
  }]);
  return MagicalSausages;
}(MpSource);
mood_defineProperty(MagicalSausages, "instance", new MagicalSausages());
var MoodElement = /*#__PURE__*/function () {
  function MoodElement() {
    mood_classCallCheck(this, MoodElement);
  }
  mood_createClass(MoodElement, [{
    key: "mpCostPerTurn",
    value: function mpCostPerTurn() {
      return 0;
    }
  }, {
    key: "turnIncrement",
    value: function turnIncrement() {
      return 1;
    }
  }]);
  return MoodElement;
}();
var SkillMoodElement = /*#__PURE__*/function (_MoodElement) {
  mood_inherits(SkillMoodElement, _MoodElement);
  var _super3 = mood_createSuper(SkillMoodElement);
  function SkillMoodElement(skill) {
    var _this;
    mood_classCallCheck(this, SkillMoodElement);
    _this = _super3.call(this);
    mood_defineProperty(mood_assertThisInitialized(_this), "skill", void 0);
    _this.skill = skill;
    return _this;
  }
  mood_createClass(SkillMoodElement, [{
    key: "mpCostPerTurn",
    value: function mpCostPerTurn() {
      var turns = (0,external_kolmafia_namespaceObject.turnsPerCast)(this.skill);
      return turns > 0 ? (0,external_kolmafia_namespaceObject.mpCost)(this.skill) / turns : 0;
    }
  }, {
    key: "turnIncrement",
    value: function turnIncrement() {
      return (0,external_kolmafia_namespaceObject.turnsPerCast)(this.skill);
    }
  }, {
    key: "execute",
    value: function execute(mood, ensureTurns) {
      var effect = (0,external_kolmafia_namespaceObject.toEffect)(this.skill);
      var initialTurns = (0,external_kolmafia_namespaceObject.haveEffect)(effect);
      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.skill)) return false;
      if (initialTurns >= ensureTurns) return true;
      // Deal with song slots.
      if (mood.options.songSlots.length > 0 && isSong(this.skill) && !lib_have(effect)) {
        var activeSongs = lib_getActiveSongs();
        var _iterator = mood_createForOfIteratorHelper(activeSongs),
          _step;
        try {
          var _loop = function _loop() {
            var song = _step.value;
            var slot = mood.options.songSlots.find(slot => slot.includes(song));
            if (!slot || slot.includes(effect)) {
              (0,external_kolmafia_namespaceObject.cliExecute)("shrug ".concat(song));
              return "break";
            }
          };
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _ret = _loop();
            if (_ret === "break") break;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      var oldRemainingCasts = -1;
      var remainingCasts = Math.ceil((ensureTurns - (0,external_kolmafia_namespaceObject.haveEffect)(effect)) / (0,external_kolmafia_namespaceObject.turnsPerCast)(this.skill));
      while (remainingCasts > 0 && oldRemainingCasts !== remainingCasts) {
        var maxCasts = void 0;
        if ((0,external_kolmafia_namespaceObject.hpCost)(this.skill) > 0) {
          // FIXME: restore HP
          maxCasts = Math.max(0, Math.floor(((0,external_kolmafia_namespaceObject.myHp)() - 1) / (0,external_kolmafia_namespaceObject.hpCost)(this.skill))); // Do not allow ourselves to hit 0 hp
        } else {
          var cost = (0,external_kolmafia_namespaceObject.mpCost)(this.skill);
          maxCasts = Math.floor(Math.min(mood.availableMp(), (0,external_kolmafia_namespaceObject.myMp)()) / cost);
          if (maxCasts < remainingCasts) {
            var bestMp = Math.min(remainingCasts * (0,external_kolmafia_namespaceObject.mpCost)(this.skill), (0,external_kolmafia_namespaceObject.myMaxmp)());
            mood.moreMp(bestMp);
            maxCasts = Math.floor(Math.min(mood.availableMp(), (0,external_kolmafia_namespaceObject.myMp)()) / cost);
          }
        }
        var casts = utils_clamp(remainingCasts, 0, Math.min(100, maxCasts));
        (0,external_kolmafia_namespaceObject.useSkill)(casts, this.skill);
        oldRemainingCasts = remainingCasts;
        remainingCasts = Math.ceil((ensureTurns - (0,external_kolmafia_namespaceObject.haveEffect)(effect)) / (0,external_kolmafia_namespaceObject.turnsPerCast)(this.skill));
      }
      return (0,external_kolmafia_namespaceObject.haveEffect)(effect) > ensureTurns;
    }
  }]);
  return SkillMoodElement;
}(MoodElement);
var PotionMoodElement = /*#__PURE__*/function (_MoodElement2) {
  mood_inherits(PotionMoodElement, _MoodElement2);
  var _super4 = mood_createSuper(PotionMoodElement);
  function PotionMoodElement(potion, maxPricePerTurn) {
    var _this2;
    mood_classCallCheck(this, PotionMoodElement);
    _this2 = _super4.call(this);
    mood_defineProperty(mood_assertThisInitialized(_this2), "potion", void 0);
    mood_defineProperty(mood_assertThisInitialized(_this2), "maxPricePerTurn", void 0);
    _this2.potion = potion;
    _this2.maxPricePerTurn = maxPricePerTurn;
    return _this2;
  }
  mood_createClass(PotionMoodElement, [{
    key: "execute",
    value: function execute(mood, ensureTurns) {
      // FIXME: Smarter buying logic.
      // FIXME: Allow constructing stuff (e.g. snow cleats)
      var effect = (0,external_kolmafia_namespaceObject.effectModifier)(this.potion, "Effect");
      var effectTurns = (0,external_kolmafia_namespaceObject.haveEffect)(effect);
      var turnsPerUse = (0,external_kolmafia_namespaceObject.numericModifier)(this.potion, "Effect Duration");
      if ((0,external_kolmafia_namespaceObject.mallPrice)(this.potion) > this.maxPricePerTurn * turnsPerUse) {
        return false;
      }
      // integer part
      if (effectTurns < ensureTurns) {
        var uses = Math.floor((ensureTurns - effectTurns) / turnsPerUse);
        var quantityToBuy = utils_clamp(uses - (0,external_kolmafia_namespaceObject.availableAmount)(this.potion), 0, 100);
        (0,external_kolmafia_namespaceObject.buy)(quantityToBuy, this.potion, Math.floor(this.maxPricePerTurn * turnsPerUse));
        var quantityToUse = utils_clamp(uses, 0, (0,external_kolmafia_namespaceObject.availableAmount)(this.potion));
        (0,external_kolmafia_namespaceObject.use)(quantityToUse, this.potion);
      }
      // fractional part
      var remainingDifference = ensureTurns - (0,external_kolmafia_namespaceObject.haveEffect)(effect);
      if (remainingDifference > 0) {
        var price = Math.floor(this.maxPricePerTurn * remainingDifference);
        if (price <= (0,external_kolmafia_namespaceObject.mallPrice)(this.potion)) {
          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.potion) || (0,external_kolmafia_namespaceObject.buy)(1, this.potion, price)) {
            (0,external_kolmafia_namespaceObject.use)(1, this.potion);
          }
        }
      }
      return (0,external_kolmafia_namespaceObject.haveEffect)(effect) >= ensureTurns;
    }
  }]);
  return PotionMoodElement;
}(MoodElement);
var GenieMoodElement = /*#__PURE__*/function (_MoodElement3) {
  mood_inherits(GenieMoodElement, _MoodElement3);
  var _super5 = mood_createSuper(GenieMoodElement);
  function GenieMoodElement(effect) {
    var _this3;
    mood_classCallCheck(this, GenieMoodElement);
    _this3 = _super5.call(this);
    mood_defineProperty(mood_assertThisInitialized(_this3), "effect", void 0);
    _this3.effect = effect;
    return _this3;
  }
  mood_createClass(GenieMoodElement, [{
    key: "execute",
    value: function execute(mood, ensureTurns) {
      if ((0,external_kolmafia_namespaceObject.haveEffect)(this.effect) >= ensureTurns) return true;
      var neededWishes = Math.ceil(((0,external_kolmafia_namespaceObject.haveEffect)(this.effect) - ensureTurns) / 20);
      var wishesToBuy = utils_clamp(neededWishes - (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(mood_templateObject8 || (mood_templateObject8 = mood_taggedTemplateLiteral(["pocket wish"])))), 0, 20);
      (0,external_kolmafia_namespaceObject.buy)(wishesToBuy, template_string_$item(mood_templateObject9 || (mood_templateObject9 = mood_taggedTemplateLiteral(["pocket wish"]))), 50000);
      var wishesToUse = utils_clamp(neededWishes, 0, (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(mood_templateObject10 || (mood_templateObject10 = mood_taggedTemplateLiteral(["pocket wish"])))));
      for (; wishesToUse > 0; wishesToUse--) {
        (0,external_kolmafia_namespaceObject.cliExecute)("genie effect ".concat(this.effect.name));
      }
      return (0,external_kolmafia_namespaceObject.haveEffect)(this.effect) >= ensureTurns;
    }
  }]);
  return GenieMoodElement;
}(MoodElement);
var CustomMoodElement = /*#__PURE__*/function (_MoodElement4) {
  mood_inherits(CustomMoodElement, _MoodElement4);
  var _super6 = mood_createSuper(CustomMoodElement);
  function CustomMoodElement(effect, gainEffect) {
    var _this4;
    mood_classCallCheck(this, CustomMoodElement);
    _this4 = _super6.call(this);
    mood_defineProperty(mood_assertThisInitialized(_this4), "effect", void 0);
    mood_defineProperty(mood_assertThisInitialized(_this4), "gainEffect", void 0);
    _this4.effect = effect;
    _this4.gainEffect = gainEffect !== null && gainEffect !== void 0 ? gainEffect : () => (0,external_kolmafia_namespaceObject.cliExecute)(effect.default);
    return _this4;
  }
  mood_createClass(CustomMoodElement, [{
    key: "execute",
    value: function execute(mood, ensureTurns) {
      var currentTurns = (0,external_kolmafia_namespaceObject.haveEffect)(this.effect);
      var lastCurrentTurns = -1;
      while (currentTurns < ensureTurns && currentTurns !== lastCurrentTurns) {
        this.gainEffect();
        lastCurrentTurns = currentTurns;
        currentTurns = (0,external_kolmafia_namespaceObject.haveEffect)(this.effect);
      }
      return (0,external_kolmafia_namespaceObject.haveEffect)(this.effect) > ensureTurns;
    }
  }]);
  return CustomMoodElement;
}(MoodElement);
var AsdonMoodElement = /*#__PURE__*/function (_MoodElement5) {
  mood_inherits(AsdonMoodElement, _MoodElement5);
  var _super7 = mood_createSuper(AsdonMoodElement);
  function AsdonMoodElement(effect) {
    var _this5;
    var preferInventory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    mood_classCallCheck(this, AsdonMoodElement);
    _this5 = _super7.call(this);
    mood_defineProperty(mood_assertThisInitialized(_this5), "effect", void 0);
    mood_defineProperty(mood_assertThisInitialized(_this5), "preferInventory", void 0);
    _this5.effect = effect;
    _this5.preferInventory = preferInventory;
    return _this5;
  }
  mood_createClass(AsdonMoodElement, [{
    key: "execute",
    value: function execute(mood, ensureTurns) {
      return drive(this.effect, ensureTurns, this.preferInventory);
    }
  }]);
  return AsdonMoodElement;
}(MoodElement);
/**
 * Class representing a mood object. Add mood elements using the instance methods, which can be chained.
 */
var Mood = /*#__PURE__*/function () {
  /**
   * Construct a new Mood instance.
   * @param options Options for mood.
   */
  function Mood() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    mood_classCallCheck(this, Mood);
    mood_defineProperty(this, "options", void 0);
    mood_defineProperty(this, "elements", []);
    this.options = mood_objectSpread(mood_objectSpread({}, Mood.defaultOptions), options);
  }
  /**
   * Get the MP available for casting skills.
   */
  mood_createClass(Mood, [{
    key: "availableMp",
    value: function availableMp() {
      return this.options.useNativeRestores ? Infinity : utils_sum(this.options.mpSources, mpSource => mpSource.availableMpMin()) + Math.max((0,external_kolmafia_namespaceObject.myMp)() - this.options.reserveMp, 0);
    }
  }, {
    key: "moreMp",
    value: function moreMp(minimumTarget) {
      if ((0,external_kolmafia_namespaceObject.myMp)() >= minimumTarget) return;
      var _iterator2 = mood_createForOfIteratorHelper(this.options.mpSources),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var mpSource = _step2.value;
          if (mpSource.usesRemaining() > 0) {
            mpSource.execute();
            if ((0,external_kolmafia_namespaceObject.myMp)() >= minimumTarget) break;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (this.options.useNativeRestores) {
        (0,external_kolmafia_namespaceObject.restoreMp)(minimumTarget);
      }
    }
    /**
     * Add a skill to the mood.
     * @param skill Skill to add.
     */
  }, {
    key: "skill",
    value: function skill(_skill) {
      this.elements.push(new SkillMoodElement(_skill));
      return this;
    }
    /**
     * Add an effect to the mood, with casting based on {effect.default}.
     * @param effect Effect to add.
     * @param gainEffect How to gain the effect. Only runs if we don't have the effect.
     */
  }, {
    key: "effect",
    value: function effect(_effect, gainEffect) {
      var skill = (0,external_kolmafia_namespaceObject.toSkill)(_effect);
      if (!gainEffect && skill !== $skill.none) {
        this.skill(skill);
      } else {
        this.elements.push(new CustomMoodElement(_effect, gainEffect));
      }
      return this;
    }
    /**
     * Add a potion to the mood.
     * @param potion Potion to add.
     * @param maxPricePerTurn Maximum price to pay per turn of the effect.
     */
  }, {
    key: "potion",
    value: function potion(_potion, maxPricePerTurn) {
      this.elements.push(new PotionMoodElement(_potion, maxPricePerTurn));
      return this;
    }
    /**
     * Add an effect to acquire via pocket wishes to the mood.
     * @param effect Effect to wish for in the mood.
     */
  }, {
    key: "genie",
    value: function genie(effect) {
      this.elements.push(new GenieMoodElement(effect));
      return this;
    }
    /**
     * Add an Asdon Martin driving style to the mood.
     * @param effect Driving style to add to the mood.
     */
  }, {
    key: "drive",
    value: function drive(effect) {
      if (Object.values(Driving).includes(effect) && AsdonMartin_installed()) {
        this.elements.push(new AsdonMoodElement(effect));
      }
      return this;
    }
    /**
     * Execute the mood, trying to ensure {ensureTurns} of each effect.
     * @param ensureTurns Turns of each effect to try and achieve.
     * @returns Whether or not we successfully got this many turns of every effect in the mood.
     */
  }, {
    key: "execute",
    value: function execute() {
      var ensureTurns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var availableMp = this.availableMp();
      var totalMpPerTurn = utils_sum(this.elements, element => element.mpCostPerTurn());
      var potentialTurns = Math.floor(availableMp / totalMpPerTurn);
      var completeSuccess = true;
      var _iterator3 = mood_createForOfIteratorHelper(this.elements),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var element = _step3.value;
          var elementTurns = ensureTurns;
          if (element.mpCostPerTurn() > 0) {
            var elementPotentialTurns = Math.floor(potentialTurns / element.turnIncrement()) * element.turnIncrement();
            elementTurns = Math.min(ensureTurns, elementPotentialTurns);
          }
          completeSuccess = element.execute(this, elementTurns) && completeSuccess;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      this.moreMp(this.options.reserveMp);
      return completeSuccess;
    }
  }], [{
    key: "setDefaultOptions",
    value:
    /**
     * Set default options for new Mood instances.
     * @param options Default options for new Mood instances.
     */
    function setDefaultOptions(options) {
      Mood.defaultOptions = mood_objectSpread(mood_objectSpread({}, Mood.defaultOptions), options);
    }
  }]);
  return Mood;
}();
mood_defineProperty(Mood, "defaultOptions", {
  songSlots: [],
  mpSources: [MagicalSausages.instance, OscusSoda.instance],
  reserveMp: 0,
  useNativeRestores: false
});
;// CONCATENATED MODULE: ./node_modules/libram/dist/Copier.js
function Copier_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Copier_toPropertyKey(descriptor.key), descriptor); } }
function Copier_createClass(Constructor, protoProps, staticProps) { if (protoProps) Copier_defineProperties(Constructor.prototype, protoProps); if (staticProps) Copier_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Copier_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Copier_defineProperty(obj, key, value) { key = Copier_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Copier_toPropertyKey(arg) { var key = Copier_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function Copier_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Copier = /*#__PURE__*/Copier_createClass(function Copier(couldCopy, prepare, canCopy, copiedMonster, fightCopy) {
  Copier_classCallCheck(this, Copier);
  Copier_defineProperty(this, "couldCopy", void 0);
  Copier_defineProperty(this, "prepare", void 0);
  Copier_defineProperty(this, "canCopy", void 0);
  Copier_defineProperty(this, "copiedMonster", void 0);
  Copier_defineProperty(this, "fightCopy", null);
  this.couldCopy = couldCopy;
  this.prepare = prepare;
  this.canCopy = canCopy;
  this.copiedMonster = copiedMonster;
  if (fightCopy) this.fightCopy = fightCopy;
});
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2016/SourceTerminal.js
var SourceTerminal_templateObject, SourceTerminal_templateObject2, SourceTerminal_templateObject3, SourceTerminal_templateObject4, SourceTerminal_templateObject5, SourceTerminal_templateObject6, SourceTerminal_templateObject7, SourceTerminal_templateObject8, SourceTerminal_templateObject9, SourceTerminal_templateObject10, SourceTerminal_templateObject11, SourceTerminal_templateObject12, SourceTerminal_templateObject13, SourceTerminal_templateObject14, SourceTerminal_templateObject15, SourceTerminal_templateObject16, SourceTerminal_templateObject17, SourceTerminal_templateObject18, SourceTerminal_templateObject19, SourceTerminal_templateObject20, SourceTerminal_templateObject21, SourceTerminal_templateObject22, SourceTerminal_templateObject23, SourceTerminal_templateObject24, SourceTerminal_templateObject25, SourceTerminal_templateObject26, SourceTerminal_templateObject27;
function SourceTerminal_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = SourceTerminal_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function SourceTerminal_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return SourceTerminal_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return SourceTerminal_arrayLikeToArray(o, minLen); }
function SourceTerminal_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function SourceTerminal_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }







var SourceTerminal_item = template_string_$item(SourceTerminal_templateObject || (SourceTerminal_templateObject = SourceTerminal_taggedTemplateLiteral(["Source terminal"])));
function SourceTerminal_have() {
  return haveInCampground(SourceTerminal_item);
}
/**
 * Buffs that can be acquired from Enhance
 *
 * - Items: +30% Item Drop
 * - Meat: +60% Meat Drop
 * - Init: +50% Initiative
 * - Critical: +10% chance of Critical Hit, +10% chance of Spell Critical Hit
 * - Damage: +5 Prismatic Damage
 * - Substats: +3 Stats Per Fight
 */
var Buffs = {
  Items: template_string_$effect(SourceTerminal_templateObject2 || (SourceTerminal_templateObject2 = SourceTerminal_taggedTemplateLiteral(["items.enh"]))),
  Meat: template_string_$effect(SourceTerminal_templateObject3 || (SourceTerminal_templateObject3 = SourceTerminal_taggedTemplateLiteral(["meat.enh"]))),
  Init: template_string_$effect(SourceTerminal_templateObject4 || (SourceTerminal_templateObject4 = SourceTerminal_taggedTemplateLiteral(["init.enh"]))),
  Critical: template_string_$effect(SourceTerminal_templateObject5 || (SourceTerminal_templateObject5 = SourceTerminal_taggedTemplateLiteral(["critical.enh"]))),
  Damage: template_string_$effect(SourceTerminal_templateObject6 || (SourceTerminal_templateObject6 = SourceTerminal_taggedTemplateLiteral(["damage.enh"]))),
  Substats: template_string_$effect(SourceTerminal_templateObject7 || (SourceTerminal_templateObject7 = SourceTerminal_taggedTemplateLiteral(["substats.enh"])))
};
/**
 * Acquire a buff from the Source Terminal
 * @param buff The buff to acquire
 * @see Buffs
 */
function enhance(buff) {
  if (!Object.values(Buffs).includes(buff)) {
    return false;
  }
  return (0,external_kolmafia_namespaceObject.cliExecute)("terminal enhance ".concat(buff.name));
}
/**
 * Rollover buffs that can be acquired from Enquiry
 */
var RolloverBuffs = {
  /** +5 Familiar Weight */
  Familiar: template_string_$effect(SourceTerminal_templateObject8 || (SourceTerminal_templateObject8 = SourceTerminal_taggedTemplateLiteral(["familiar.enq"]))),
  /** +25 ML */
  Monsters: template_string_$effect(SourceTerminal_templateObject9 || (SourceTerminal_templateObject9 = SourceTerminal_taggedTemplateLiteral(["monsters.enq"]))),
  /** +5 Prismatic Resistance */
  Protect: template_string_$effect(SourceTerminal_templateObject10 || (SourceTerminal_templateObject10 = SourceTerminal_taggedTemplateLiteral(["protect.enq"]))),
  /** +100% Muscle, +100% Mysticality, +100% Moxie */
  Stats: template_string_$effect(SourceTerminal_templateObject11 || (SourceTerminal_templateObject11 = SourceTerminal_taggedTemplateLiteral(["stats.enq"])))
};
/**
 * Acquire a buff from the Source Terminal
 * @param buff The buff to acquire
 * @see RolloverBuffs
 */
function enquiry(rolloverBuff) {
  if (!Object.values(RolloverBuffs).includes(rolloverBuff)) {
    return false;
  }
  return (0,external_kolmafia_namespaceObject.cliExecute)("terminal enquiry ".concat(rolloverBuff.name));
}
/**
 * Skills that can be acquired from Enhance
 */
var Skills = {
  /** Collect Source essence from enemies once per combat */
  Extract: $skill(SourceTerminal_templateObject12 || (SourceTerminal_templateObject12 = SourceTerminal_taggedTemplateLiteral(["Extract"]))),
  /** Stagger and create a wandering monster 1-3 times per day */
  Digitize: $skill(SourceTerminal_templateObject13 || (SourceTerminal_templateObject13 = SourceTerminal_taggedTemplateLiteral(["Digitize"]))),
  /** Stagger and deal 25% of enemy HP in damage once per combat */
  Compress: $skill(SourceTerminal_templateObject14 || (SourceTerminal_templateObject14 = SourceTerminal_taggedTemplateLiteral(["Compress"]))),
  /** Double monster's HP, attack, defence, attacks per round and item drops once per fight and once per day (five in The Source) */
  Duplicate: $skill(SourceTerminal_templateObject15 || (SourceTerminal_templateObject15 = SourceTerminal_taggedTemplateLiteral(["Duplicate"]))),
  /** Causes government agent/Source Agent wanderer next turn once per combat and three times per day */
  Portscan: $skill(SourceTerminal_templateObject16 || (SourceTerminal_templateObject16 = SourceTerminal_taggedTemplateLiteral(["Portscan"]))),
  /** Increase Max MP by 100% and recover 1000 MP once per combat with a 30 turn cooldown */
  Turbo: $skill(SourceTerminal_templateObject17 || (SourceTerminal_templateObject17 = SourceTerminal_taggedTemplateLiteral(["Turbo"])))
};
/**
 * Make a skill available.
 * The Source Terminal can give the player access to two skills at any time
 * @param skill Skill to learn
 * @see Skills
 */
function educate(skills) {
  var skillsArray = Array.isArray(skills) ? skills.slice(0, 2) : [skills];
  if (arrayEquals(skillsArray, getSkills())) return true;
  var _iterator = SourceTerminal_createForOfIteratorHelper(skillsArray),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var skill = _step.value;
      if (!Object.values(Skills).includes(skill)) return false;
      (0,external_kolmafia_namespaceObject.cliExecute)("terminal educate ".concat(skill.name.toLowerCase(), ".edu"));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return true;
}
/**
 * Return the Skills currently available from Source Terminal
 */
function getSkills() {
  return ["sourceTerminalEducate1", "sourceTerminalEducate2"].map(p => property_get(p)).filter(s => s !== "").map(s => external_kolmafia_namespaceObject.Skill.get(s.slice(0, -4)));
}
function isCurrentSkill(skills) {
  var currentSkills = getSkills();
  var skillsArray = Array.isArray(skills) ? skills.slice(0, 2) : [skills];
  return skillsArray.every(skill => currentSkills.includes(skill));
}
/**
 * Items that can be generated by the Source Terminal
 */
var Items = new Map([[template_string_$item(SourceTerminal_templateObject18 || (SourceTerminal_templateObject18 = SourceTerminal_taggedTemplateLiteral(["browser cookie"]))), "food.ext"], [template_string_$item(SourceTerminal_templateObject19 || (SourceTerminal_templateObject19 = SourceTerminal_taggedTemplateLiteral(["hacked gibson"]))), "booze.ext"], [template_string_$item(SourceTerminal_templateObject20 || (SourceTerminal_templateObject20 = SourceTerminal_taggedTemplateLiteral(["Source shades"]))), "goggles.ext"], [template_string_$item(SourceTerminal_templateObject21 || (SourceTerminal_templateObject21 = SourceTerminal_taggedTemplateLiteral(["Source terminal GRAM chip"]))), "gram.ext"], [template_string_$item(SourceTerminal_templateObject22 || (SourceTerminal_templateObject22 = SourceTerminal_taggedTemplateLiteral(["Source terminal PRAM chip"]))), "pram.ext"], [template_string_$item(SourceTerminal_templateObject23 || (SourceTerminal_templateObject23 = SourceTerminal_taggedTemplateLiteral(["Source terminal SPAM chip"]))), "spam.ext"], [template_string_$item(SourceTerminal_templateObject24 || (SourceTerminal_templateObject24 = SourceTerminal_taggedTemplateLiteral(["Source terminal CRAM chip"]))), "cram.ext"], [template_string_$item(SourceTerminal_templateObject25 || (SourceTerminal_templateObject25 = SourceTerminal_taggedTemplateLiteral(["Source terminal DRAM chip"]))), "dram.ext"], [template_string_$item(SourceTerminal_templateObject26 || (SourceTerminal_templateObject26 = SourceTerminal_taggedTemplateLiteral(["Source terminal TRAM chip"]))), "tram.ext"], [template_string_$item(SourceTerminal_templateObject27 || (SourceTerminal_templateObject27 = SourceTerminal_taggedTemplateLiteral(["software bug"]))), "familiar.ext"]]);
/**
 * Collect an item from the Source Terminal (up to three times a day)
 * @param item Item to collect
 * @see Items
 */
function extrude(item) {
  var fileName = Items.get(item);
  if (!fileName) return false;
  return (0,external_kolmafia_namespaceObject.cliExecute)("terminal extrude ".concat(fileName));
}
/**
 * Return chips currently installed to player's Source Terminal
 */
function getChips() {
  return property_get("sourceTerminalChips").split(",");
}
/**
 * Return number of times digitize was cast today
 */
function getDigitizeUses() {
  return property_get("_sourceTerminalDigitizeUses");
}
/**
 * Return Monster that is currently digitized, else null
 */
function getDigitizeMonster() {
  return property_get("_sourceTerminalDigitizeMonster");
}
/**
 * Return number of digitized monsters encountered since it was last cast
 */
function getDigitizeMonsterCount() {
  return property_get("_sourceTerminalDigitizeMonsterCount");
}
/**
 * Return maximum number of digitizes player can cast
 */
function getMaximumDigitizeUses() {
  var chips = getChips();
  return 1 + (chips.includes("TRAM") ? 1 : 0) + (chips.includes("TRIGRAM") ? 1 : 0);
}
/**
 * Returns the current day's number of remaining digitize uses
 */
function getDigitizeUsesRemaining() {
  return getMaximumDigitizeUses() - getDigitizeUses();
}
/**
 * Returns whether the player could theoretically cast Digitize
 */
function couldDigitize() {
  return getDigitizeUses() < getMaximumDigitizeUses();
}
function prepareDigitize() {
  if (!isCurrentSkill(Skills.Digitize)) {
    return educate(Skills.Digitize);
  }
  return true;
}
/**
 * Returns whether the player can cast Digitize immediately
 * This only considers whether the player has learned the skill
 * and has sufficient daily casts remaining, not whether they have sufficient MP
 */
function canDigitize() {
  return couldDigitize() && getSkills().includes(Skills.Digitize);
}
var Digitize = new Copier(() => couldDigitize(), () => prepareDigitize(), () => canDigitize(), () => getDigitizeMonster());
/**
 * Return number of times duplicate was cast today
 */
function getDuplicateUses() {
  return property_get("_sourceTerminalDuplicateUses");
}
/**
 * Return number of times enhance was cast today
 */
function getEnhanceUses() {
  return property_get("_sourceTerminalEnhanceUses");
}
/**
 * Return number of times portscan was cast today
 */
function getPortscanUses() {
  return get("_sourceTerminalPortscanUses");
}
/**
 * Returns maximum number of times duplicate can be used
 */
function maximumDuplicateUses() {
  return (0,external_kolmafia_namespaceObject.myPath)() === external_kolmafia_namespaceObject.Path.get("The Source") ? 5 : 1;
}
/**
 * Returns number of remaining times duplicate can be used today
 */
function duplicateUsesRemaining() {
  return maximumDuplicateUses() - getDuplicateUses();
}
/**
 * Return number of times enhance can be used per day
 */
function maximumEnhanceUses() {
  return 1 + getChips().filter(chip => ["CRAM", "SCRAM"].includes(chip)).length;
}
/**
 * Returns number of remaining times enahce can be used today
 */
function enhanceUsesRemaining() {
  return maximumEnhanceUses() - getEnhanceUses();
}
/**
 * Returns expected duration of an enhance buff
 */
function enhanceBuffDuration() {
  return 25 + get("sourceTerminalPram") * 5 + (getChips().includes("INGRAM") ? 25 : 0);
}
/**
 * Returns expected duration of an enquiry buff
 */
function enquiryBuffDuration() {
  return 50 + 10 * get("sourceTerminalGram") + (getChips().includes("DIAGRAM") ? 50 : 0);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2021/CrystalBall.js
function CrystalBall_slicedToArray(arr, i) { return CrystalBall_arrayWithHoles(arr) || CrystalBall_iterableToArrayLimit(arr, i) || CrystalBall_unsupportedIterableToArray(arr, i) || CrystalBall_nonIterableRest(); }
function CrystalBall_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function CrystalBall_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CrystalBall_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CrystalBall_arrayLikeToArray(o, minLen); }
function CrystalBall_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function CrystalBall_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function CrystalBall_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



var orb = external_kolmafia_namespaceObject.Item.get("miniature crystal ball");
function CrystalBall_have() {
  return (0,external_kolmafia_namespaceObject.availableAmount)(orb) > 0;
}
var parsedProp = () => property_get("crystalBallPredictions").split("|").map(element => element.split(":")).map(_ref => {
  var _ref2 = CrystalBall_slicedToArray(_ref, 3),
    location = _ref2[1],
    monster = _ref2[2];
  return [(0,external_kolmafia_namespaceObject.toLocation)(location), (0,external_kolmafia_namespaceObject.toMonster)(monster)];
});
/**
 * Ponders your orb (if it is able to do so safely) and then returns a Map keyed by location consisting of extant predictions
 * @returns A map of all predictions currently active in an adventurer's miniature crystal ball, after visiting the "ponder" URL to refresh them.
 */
function ponder() {
  if (!CrystalBall_have()) return new Map();
  if (canVisitUrl()) (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?ponder=1", false);
  return new Map(parsedProp());
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2021/DaylightShavings.js
var DaylightShavings_templateObject, DaylightShavings_templateObject2;
function DaylightShavings_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var helmet = template_string_$item(DaylightShavings_templateObject || (DaylightShavings_templateObject = DaylightShavings_taggedTemplateLiteral(["Daylight Shavings Helmet"])));
/**
 * Returns whether the player owns an unpackaged Daylight Shavings Helmet, and it's available in either the inventory or other zones as determined by autoSatisfy settings.
 * @returns whether we have the Daylight Shavings Helmet.
 */
function DaylightShavings_have() {
  return lib_have(helmet);
}
var buffs = $effects(DaylightShavings_templateObject2 || (DaylightShavings_templateObject2 = DaylightShavings_taggedTemplateLiteral(["Spectacle Moustache, Toiletbrush Moustache, Barbell Moustache, Grizzly Beard, Surrealist's Moustache, Musician's Musician's Moustache, Gull-Wing Moustache, Space Warlord's Beard, Pointy Wizard Beard, Cowboy Stache, Friendly Chops"])));
/**
 * Tells you whether you currently have a beardbuff active. Warning: because of spaghetti, this does not determine buff eligibility.
 * @returns Whether you currently have a beardbuff active
 */
function hasBuff() {
  return buffs.some(buff => haveItem(buff));
}
/**
 * Checks to see if there are any beardbuffs you have more than 1 turn of, determining whether you are eligible to receive a buff post-combat.
 * @returns Whether you current are able to get a buff from the Daylight Shaving Helmet.
 */
function buffAvailable() {
  return !buffs.some(buff => haveItem(buff, 2));
}
/**
 * Calculates and returns the cycle of buffs that the hat should cycle through.
 * @param playerclass The class to generate a cycle for
 * @returns An ordered array consisting of the cycle for this class. The first element of the array will be the first buff a player should expect to get in a given ascension.
 */
function buffCycle() {
  var playerclass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_namespaceObject.myClass)();
  if ((0,external_kolmafia_namespaceObject.toInt)(playerclass) <= 0) return [];
  var returnValue = [];
  var id = (0,external_kolmafia_namespaceObject.toInt)(playerclass);
  var seed = id > 6 ? id % 6 + 1 : id;
  for (var i = 1; i < 12; i++) {
    var index = i * seed % 11;
    returnValue.push(buffs[index]);
  }
  return returnValue;
}
/**
 * Returns the next buff we expect to get from the shaving hat.
 * @returns The next buff we expect to get from the shaving hat.
 */
function nextBuff() {
  var currentBuff = (0,external_kolmafia_namespaceObject.toEffect)(property_get("lastBeardBuff").toFixed(0));
  var cycle = buffCycle();
  var index = cycle.indexOf(currentBuff);
  var newIndex = (1 + index) % 11;
  return cycle[newIndex];
}
/**
 * Returns the number of buffs we expect it'll take to get to a given buff. Returns 1 for the next buff, 2 for the one after that, and so on. Returns 11 for the most recent buff.
 * @param buff The shaving buff in question
 * @returns The number of buffs we expect it'll take to get to the inputted buff; null if said buff is not granted by the shaving hat.
 */
function buffsUntil(buff) {
  if (!buffs.includes(buff)) return null;
  var currentIndex = buffs.indexOf(nextBuff()) - 1;
  var newIndex = buffs.indexOf(buff);
  var diff = (newIndex - currentIndex) % 11;
  return diff === 0 ? 11 : diff;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2010/CrownOfThrones.js
var CrownOfThrones_templateObject, CrownOfThrones_templateObject2, _modifier, CrownOfThrones_templateObject3, CrownOfThrones_templateObject4, _modifier2, CrownOfThrones_templateObject5, CrownOfThrones_templateObject6, CrownOfThrones_templateObject7, CrownOfThrones_templateObject8, CrownOfThrones_templateObject9, CrownOfThrones_templateObject10, CrownOfThrones_templateObject11, CrownOfThrones_templateObject12, _modifier7, CrownOfThrones_templateObject13, CrownOfThrones_templateObject14, _modifier8, CrownOfThrones_templateObject15, CrownOfThrones_templateObject16, _modifier9, CrownOfThrones_templateObject17, CrownOfThrones_templateObject18, CrownOfThrones_templateObject19, CrownOfThrones_templateObject20, CrownOfThrones_templateObject21, CrownOfThrones_templateObject22, CrownOfThrones_templateObject23, CrownOfThrones_templateObject24, CrownOfThrones_templateObject25, CrownOfThrones_templateObject26, CrownOfThrones_templateObject27, CrownOfThrones_templateObject28, _modifier15, CrownOfThrones_templateObject29, CrownOfThrones_templateObject30, CrownOfThrones_templateObject31, CrownOfThrones_templateObject32, CrownOfThrones_templateObject33, CrownOfThrones_templateObject34, CrownOfThrones_templateObject35, CrownOfThrones_templateObject36, CrownOfThrones_templateObject37, CrownOfThrones_templateObject38, CrownOfThrones_templateObject39, CrownOfThrones_templateObject40, CrownOfThrones_templateObject41, CrownOfThrones_templateObject42, CrownOfThrones_templateObject43, CrownOfThrones_templateObject44, CrownOfThrones_templateObject45, CrownOfThrones_templateObject46, CrownOfThrones_templateObject47, CrownOfThrones_templateObject48, CrownOfThrones_templateObject49, CrownOfThrones_templateObject50, _modifier26, CrownOfThrones_templateObject51, CrownOfThrones_templateObject52, _modifier27, CrownOfThrones_templateObject53, CrownOfThrones_templateObject54, _modifier28, CrownOfThrones_templateObject55, CrownOfThrones_templateObject56, CrownOfThrones_templateObject57, CrownOfThrones_templateObject58, CrownOfThrones_templateObject59, _templateObject60, _modifier31, _templateObject61, _templateObject62, _modifier32, _templateObject63, _templateObject64, _templateObject65, _templateObject66, _modifier34, _templateObject67, _templateObject68, _modifier35, _templateObject69, _templateObject70, _modifier36, _templateObject71, _templateObject72, _templateObject73, _templateObject74, _templateObject75, _templateObject76, _templateObject77, _templateObject78, _templateObject79, _templateObject80, _templateObject81, _templateObject82, _templateObject83, _templateObject84, _templateObject85, _templateObject86, _templateObject87, _templateObject88, _templateObject89, _templateObject90, _templateObject91, _templateObject92, _templateObject93, _templateObject94, _templateObject95, _templateObject96, _templateObject97, _templateObject98, _templateObject99, _templateObject100, _templateObject101, _templateObject102, _templateObject103, _templateObject104;
function CrownOfThrones_toConsumableArray(arr) { return CrownOfThrones_arrayWithoutHoles(arr) || CrownOfThrones_iterableToArray(arr) || CrownOfThrones_unsupportedIterableToArray(arr) || CrownOfThrones_nonIterableSpread(); }
function CrownOfThrones_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function CrownOfThrones_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return CrownOfThrones_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return CrownOfThrones_arrayLikeToArray(o, minLen); }
function CrownOfThrones_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function CrownOfThrones_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return CrownOfThrones_arrayLikeToArray(arr); }
function CrownOfThrones_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function CrownOfThrones_defineProperty(obj, key, value) { key = CrownOfThrones_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function CrownOfThrones_toPropertyKey(arg) { var key = CrownOfThrones_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function CrownOfThrones_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function CrownOfThrones_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var ridingFamiliars = [{
  familiar: $familiar(CrownOfThrones_templateObject || (CrownOfThrones_templateObject = CrownOfThrones_taggedTemplateLiteral(["Puck Man"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject2 || (CrownOfThrones_templateObject2 = CrownOfThrones_taggedTemplateLiteral(["yellow pixel"])))),
  probability: 0.25,
  modifier: (_modifier = {}, CrownOfThrones_defineProperty(_modifier, "Muscle", 10), CrownOfThrones_defineProperty(_modifier, "Mysticality", 10), CrownOfThrones_defineProperty(_modifier, "Moxie", 10), _modifier),
  dropPredicate: () => property_get("_yellowPixelDropsCrown") < 25
}, {
  familiar: $familiar(CrownOfThrones_templateObject3 || (CrownOfThrones_templateObject3 = CrownOfThrones_taggedTemplateLiteral(["Ms. Puck Man"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject4 || (CrownOfThrones_templateObject4 = CrownOfThrones_taggedTemplateLiteral(["yellow pixel"])))),
  probability: 0.25,
  modifier: (_modifier2 = {}, CrownOfThrones_defineProperty(_modifier2, "Muscle", 10), CrownOfThrones_defineProperty(_modifier2, "Mysticality", 10), CrownOfThrones_defineProperty(_modifier2, "Moxie", 10), _modifier2),
  dropPredicate: () => property_get("_yellowPixelDropsCrown") < 25
}, {
  familiar: $familiar(CrownOfThrones_templateObject5 || (CrownOfThrones_templateObject5 = CrownOfThrones_taggedTemplateLiteral(["Grimstone Golem"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject6 || (CrownOfThrones_templateObject6 = CrownOfThrones_taggedTemplateLiteral(["grimstone mask"])))),
  probability: 0.5,
  modifier: CrownOfThrones_defineProperty({}, "Combat Rate", -5),
  dropPredicate: () => property_get("_grimstoneMaskDropsCrown") < 1
}, {
  familiar: $familiar(CrownOfThrones_templateObject7 || (CrownOfThrones_templateObject7 = CrownOfThrones_taggedTemplateLiteral(["Knob Goblin Organ Grinder"]))),
  meatVal: () => 30,
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 25)
}, {
  familiar: $familiar(CrownOfThrones_templateObject8 || (CrownOfThrones_templateObject8 = CrownOfThrones_taggedTemplateLiteral(["Happy Medium"]))),
  meatVal: () => 30,
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 25)
}, {
  familiar: $familiar(CrownOfThrones_templateObject9 || (CrownOfThrones_templateObject9 = CrownOfThrones_taggedTemplateLiteral(["Garbage Fire"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject10 || (CrownOfThrones_templateObject10 = CrownOfThrones_taggedTemplateLiteral(["burning newspaper"])))),
  probability: 0.5,
  modifier: CrownOfThrones_defineProperty({}, "Hot Spell Damage", 25),
  dropPredicate: () => property_get("_garbageFireDropsCrown") < 3
}, {
  familiar: $familiar(CrownOfThrones_templateObject11 || (CrownOfThrones_templateObject11 = CrownOfThrones_taggedTemplateLiteral(["Machine Elf"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(CrownOfThrones_templateObject12 || (CrownOfThrones_templateObject12 = CrownOfThrones_taggedTemplateLiteral(["abstraction: sensation, abstraction: thought, abstraction: action, abstraction: category, abstraction: perception, abstraction: purpose"]))))),
  probability: 0.2,
  modifier: (_modifier7 = {}, CrownOfThrones_defineProperty(_modifier7, "Muscle", 7), CrownOfThrones_defineProperty(_modifier7, "Mysticality", 7), CrownOfThrones_defineProperty(_modifier7, "Moxie", 7), _modifier7),
  dropPredicate: () => property_get("_abstractionDropsCrown") < 25
}, {
  familiar: $familiar(CrownOfThrones_templateObject13 || (CrownOfThrones_templateObject13 = CrownOfThrones_taggedTemplateLiteral(["Trick-or-Treating Tot"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject14 || (CrownOfThrones_templateObject14 = CrownOfThrones_taggedTemplateLiteral(["hoarded candy wad"])))),
  probability: 0.5,
  modifier: (_modifier8 = {}, CrownOfThrones_defineProperty(_modifier8, "Muscle", 10), CrownOfThrones_defineProperty(_modifier8, "Mysticality", 10), CrownOfThrones_defineProperty(_modifier8, "Moxie", 10), _modifier8),
  dropPredicate: () => property_get("_hoardedCandyDropsCrown") < 3
}, {
  familiar: $familiar(CrownOfThrones_templateObject15 || (CrownOfThrones_templateObject15 = CrownOfThrones_taggedTemplateLiteral(["Warbear Drone"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject16 || (CrownOfThrones_templateObject16 = CrownOfThrones_taggedTemplateLiteral(["warbear whosit"])))),
  probability: 1 / 4.5,
  modifier: (_modifier9 = {}, CrownOfThrones_defineProperty(_modifier9, "Maximum HP", 15), CrownOfThrones_defineProperty(_modifier9, "Maximum MP", 15), _modifier9)
}, {
  familiar: $familiar(CrownOfThrones_templateObject17 || (CrownOfThrones_templateObject17 = CrownOfThrones_taggedTemplateLiteral(["Li'l Xenomorph"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject18 || (CrownOfThrones_templateObject18 = CrownOfThrones_taggedTemplateLiteral(["lunar isotope"])))),
  probability: 0.05,
  modifier: CrownOfThrones_defineProperty({}, "Item Drop", 15)
}, {
  familiar: $familiar(CrownOfThrones_templateObject19 || (CrownOfThrones_templateObject19 = CrownOfThrones_taggedTemplateLiteral(["Pottery Barn Owl"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject20 || (CrownOfThrones_templateObject20 = CrownOfThrones_taggedTemplateLiteral(["volcanic ash"])))),
  probability: 0.1,
  modifier: CrownOfThrones_defineProperty({}, "Hot Damage", 10)
}, {
  familiar: $familiar(CrownOfThrones_templateObject21 || (CrownOfThrones_templateObject21 = CrownOfThrones_taggedTemplateLiteral(["Grim Brother"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject22 || (CrownOfThrones_templateObject22 = CrownOfThrones_taggedTemplateLiteral(["grim fairy tale"])))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Combat Rate", 5),
  dropPredicate: () => property_get("_grimFairyTaleDropsCrown") < 2
}, {
  familiar: $familiar(CrownOfThrones_templateObject23 || (CrownOfThrones_templateObject23 = CrownOfThrones_taggedTemplateLiteral(["Optimistic Candle"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject24 || (CrownOfThrones_templateObject24 = CrownOfThrones_taggedTemplateLiteral(["glob of melted wax"])))),
  probability: 1,
  dropPredicate: () => property_get("_optimisticCandleDropsCrown") < 3,
  modifier: CrownOfThrones_defineProperty({}, "Item Drop", 15)
}, {
  familiar: $familiar(CrownOfThrones_templateObject25 || (CrownOfThrones_templateObject25 = CrownOfThrones_taggedTemplateLiteral(["Adventurous Spelunker"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(CrownOfThrones_templateObject26 || (CrownOfThrones_templateObject26 = CrownOfThrones_taggedTemplateLiteral(["teflon ore, velcro ore, vinyl ore, cardboard ore, styrofoam ore, bubblewrap ore"]))))),
  probability: 1,
  dropPredicate: () => property_get("_oreDropsCrown") < 6,
  modifier: CrownOfThrones_defineProperty({}, "Item Drop", 15)
}, {
  familiar: $familiar(CrownOfThrones_templateObject27 || (CrownOfThrones_templateObject27 = CrownOfThrones_taggedTemplateLiteral(["Twitching Space Critter"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject28 || (CrownOfThrones_templateObject28 = CrownOfThrones_taggedTemplateLiteral(["space beast fur"])))),
  probability: 1,
  modifier: (_modifier15 = {}, CrownOfThrones_defineProperty(_modifier15, "Hot Resistance", 2), CrownOfThrones_defineProperty(_modifier15, "Cold Resistance", 2), CrownOfThrones_defineProperty(_modifier15, "Spooky Resistance", 2), CrownOfThrones_defineProperty(_modifier15, "Sleaze Resistance", 2), CrownOfThrones_defineProperty(_modifier15, "Stench Resistance", 2), _modifier15),
  dropPredicate: () => property_get("_spaceFurDropsCrown") < 1
}, {
  familiar: $familiar(CrownOfThrones_templateObject29 || (CrownOfThrones_templateObject29 = CrownOfThrones_taggedTemplateLiteral(["Party Mouse"]))),
  meatVal: () => 50,
  /*
  The below code is more accurate. However, party mouse is virtually never going to be worthwhile and this causes so many useless mall hits it isn't funny.
         getSaleValue(
      ...Item.all().filter(
        (booze) =>
          ["decent", "good"].includes(booze.quality) &&
          booze.inebriety > 0 &&
          booze.tradeable &&
          booze.discardable &&
          !$items`glass of "milk", cup of "tea", thermos of "whiskey", Lucky Lindy, Bee's Knees, Sockdollager, Ish Kabibble, Hot Socks, Phonus Balonus, Flivver, Sloppy Jalopy`.includes(
            booze
          )
      )
    ),
    */
  probability: 0.05,
  modifier: CrownOfThrones_defineProperty({}, "Booze Drop", 25)
}, {
  familiar: $familiar(CrownOfThrones_templateObject30 || (CrownOfThrones_templateObject30 = CrownOfThrones_taggedTemplateLiteral(["Yule Hound"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject31 || (CrownOfThrones_templateObject31 = CrownOfThrones_taggedTemplateLiteral(["candy cane"])))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Candy Drop", 20)
}, {
  familiar: $familiar(CrownOfThrones_templateObject32 || (CrownOfThrones_templateObject32 = CrownOfThrones_taggedTemplateLiteral(["Gluttonous Green Ghost"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(CrownOfThrones_templateObject33 || (CrownOfThrones_templateObject33 = CrownOfThrones_taggedTemplateLiteral(["bean burrito, enchanted bean burrito, jumping bean burrito"]))))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Food Drop", 15)
}, {
  familiar: $familiar(CrownOfThrones_templateObject34 || (CrownOfThrones_templateObject34 = CrownOfThrones_taggedTemplateLiteral(["Reassembled Blackbird"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject35 || (CrownOfThrones_templateObject35 = CrownOfThrones_taggedTemplateLiteral(["blackberry"])))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Item Drop", 10)
}, {
  familiar: $familiar(CrownOfThrones_templateObject36 || (CrownOfThrones_templateObject36 = CrownOfThrones_taggedTemplateLiteral(["Reconstituted Crow"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject37 || (CrownOfThrones_templateObject37 = CrownOfThrones_taggedTemplateLiteral(["blackberry"])))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Item Drop", 10)
}, {
  familiar: $familiar(CrownOfThrones_templateObject38 || (CrownOfThrones_templateObject38 = CrownOfThrones_taggedTemplateLiteral(["Hunchbacked Minion"]))),
  meatVal: () => 0.02 * getSaleValue(template_string_$item(CrownOfThrones_templateObject39 || (CrownOfThrones_templateObject39 = CrownOfThrones_taggedTemplateLiteral(["disembodied brain"])))) + 0.98 * getSaleValue(template_string_$item(CrownOfThrones_templateObject40 || (CrownOfThrones_templateObject40 = CrownOfThrones_taggedTemplateLiteral(["skeleton bone"])))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Muscle Experience", 2)
}, {
  familiar: $familiar(CrownOfThrones_templateObject41 || (CrownOfThrones_templateObject41 = CrownOfThrones_taggedTemplateLiteral(["Reanimated Reanimator"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(CrownOfThrones_templateObject42 || (CrownOfThrones_templateObject42 = CrownOfThrones_taggedTemplateLiteral(["hot wing, broken skull"]))))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Mysticality Experience", 2)
}, {
  familiar: $familiar(CrownOfThrones_templateObject43 || (CrownOfThrones_templateObject43 = CrownOfThrones_taggedTemplateLiteral(["Attention-Deficit Demon"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(CrownOfThrones_templateObject44 || (CrownOfThrones_templateObject44 = CrownOfThrones_taggedTemplateLiteral(["chorizo brownies, white chocolate and tomato pizza, carob chunk noodles"]))))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(CrownOfThrones_templateObject45 || (CrownOfThrones_templateObject45 = CrownOfThrones_taggedTemplateLiteral(["Piano Cat"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(CrownOfThrones_templateObject46 || (CrownOfThrones_templateObject46 = CrownOfThrones_taggedTemplateLiteral(["beertini, papaya slung, salty slug, tomato daiquiri"]))))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(CrownOfThrones_templateObject47 || (CrownOfThrones_templateObject47 = CrownOfThrones_taggedTemplateLiteral(["Golden Monkey"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject48 || (CrownOfThrones_templateObject48 = CrownOfThrones_taggedTemplateLiteral(["gold nuggets"])))),
  probability: 0.5,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 25)
}, {
  familiar: $familiar(CrownOfThrones_templateObject49 || (CrownOfThrones_templateObject49 = CrownOfThrones_taggedTemplateLiteral(["Robot Reindeer"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(CrownOfThrones_templateObject50 || (CrownOfThrones_templateObject50 = CrownOfThrones_taggedTemplateLiteral(["candy cane, eggnog, fruitcake, gingerbread bugbear"]))))),
  probability: 0.3,
  modifier: (_modifier26 = {}, CrownOfThrones_defineProperty(_modifier26, "Muscle", 10), CrownOfThrones_defineProperty(_modifier26, "Mysticality", 10), CrownOfThrones_defineProperty(_modifier26, "Moxie", 10), _modifier26)
}, {
  familiar: $familiar(CrownOfThrones_templateObject51 || (CrownOfThrones_templateObject51 = CrownOfThrones_taggedTemplateLiteral(["Stocking Mimic"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(CrownOfThrones_templateObject52 || (CrownOfThrones_templateObject52 = CrownOfThrones_taggedTemplateLiteral(["Angry Farmer candy, Cold Hots candy, Rock Pops, Tasty Fun Good rice candy, Wint-O-Fresh mint"]))))),
  probability: 0.3,
  modifier: (_modifier27 = {}, CrownOfThrones_defineProperty(_modifier27, "Muscle", 10), CrownOfThrones_defineProperty(_modifier27, "Mysticality", 10), CrownOfThrones_defineProperty(_modifier27, "Moxie", 10), _modifier27)
}, {
  familiar: $familiar(CrownOfThrones_templateObject53 || (CrownOfThrones_templateObject53 = CrownOfThrones_taggedTemplateLiteral(["BRICKO chick"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject54 || (CrownOfThrones_templateObject54 = CrownOfThrones_taggedTemplateLiteral(["BRICKO brick"])))),
  probability: 1,
  modifier: (_modifier28 = {}, CrownOfThrones_defineProperty(_modifier28, "Muscle Percent", 10), CrownOfThrones_defineProperty(_modifier28, "Mysticality Percent", 10), CrownOfThrones_defineProperty(_modifier28, "Moxie Percent", 10), _modifier28)
}, {
  familiar: $familiar(CrownOfThrones_templateObject55 || (CrownOfThrones_templateObject55 = CrownOfThrones_taggedTemplateLiteral(["Cotton Candy Carnie"]))),
  meatVal: () => getSaleValue(template_string_$item(CrownOfThrones_templateObject56 || (CrownOfThrones_templateObject56 = CrownOfThrones_taggedTemplateLiteral(["cotton candy pinch"])))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Initiative", 20)
}, {
  familiar: $familiar(CrownOfThrones_templateObject57 || (CrownOfThrones_templateObject57 = CrownOfThrones_taggedTemplateLiteral(["Untamed Turtle"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(CrownOfThrones_templateObject58 || (CrownOfThrones_templateObject58 = CrownOfThrones_taggedTemplateLiteral(["snailmail bits, turtlemail bits, turtle wax"]))))),
  probability: 0.35,
  modifier: CrownOfThrones_defineProperty({}, "Initiative", 20)
}, {
  familiar: $familiar(CrownOfThrones_templateObject59 || (CrownOfThrones_templateObject59 = CrownOfThrones_taggedTemplateLiteral(["Astral Badger"]))),
  meatVal: () => 2 * getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(_templateObject60 || (_templateObject60 = CrownOfThrones_taggedTemplateLiteral(["spooky mushroom, Knob mushroom, Knoll mushroom"]))))),
  probability: 1,
  modifier: (_modifier31 = {}, CrownOfThrones_defineProperty(_modifier31, "Maximum HP", 10), CrownOfThrones_defineProperty(_modifier31, "Maximum MP", 10), _modifier31)
}, {
  familiar: $familiar(_templateObject61 || (_templateObject61 = CrownOfThrones_taggedTemplateLiteral(["Green Pixie"]))),
  meatVal: () => getSaleValue(template_string_$item(_templateObject62 || (_templateObject62 = CrownOfThrones_taggedTemplateLiteral(["bottle of tequila"])))),
  probability: 0.2,
  modifier: (_modifier32 = {}, CrownOfThrones_defineProperty(_modifier32, "Maximum HP", 10), CrownOfThrones_defineProperty(_modifier32, "Maximum MP", 10), _modifier32)
}, {
  familiar: $familiar(_templateObject63 || (_templateObject63 = CrownOfThrones_taggedTemplateLiteral(["Angry Goat"]))),
  meatVal: () => getSaleValue(template_string_$item(_templateObject64 || (_templateObject64 = CrownOfThrones_taggedTemplateLiteral(["goat cheese pizza"])))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Muscle Percent", 15)
}, {
  familiar: $familiar(_templateObject65 || (_templateObject65 = CrownOfThrones_taggedTemplateLiteral(["Adorable Seal Larva"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(_templateObject66 || (_templateObject66 = CrownOfThrones_taggedTemplateLiteral(["stench nuggets, spooky nuggets, hot nuggets, cold nuggets, sleaze nuggets"]))))),
  probability: 0.35,
  modifier: (_modifier34 = {}, CrownOfThrones_defineProperty(_modifier34, "HP Regen Min", 2), CrownOfThrones_defineProperty(_modifier34, "MP Regen Min", 2), CrownOfThrones_defineProperty(_modifier34, "HP Regen Max", 8), CrownOfThrones_defineProperty(_modifier34, "MP Regen Max", 8), _modifier34)
}, {
  familiar: $familiar(_templateObject67 || (_templateObject67 = CrownOfThrones_taggedTemplateLiteral(["Ancient Yuletide Troll"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(_templateObject68 || (_templateObject68 = CrownOfThrones_taggedTemplateLiteral(["candy cane, eggnog, fruitcake, gingerbread bugbear"]))))),
  probability: 0.3,
  modifier: (_modifier35 = {}, CrownOfThrones_defineProperty(_modifier35, "HP Regen Min", 2), CrownOfThrones_defineProperty(_modifier35, "MP Regen Min", 2), CrownOfThrones_defineProperty(_modifier35, "HP Regen Max", 8), CrownOfThrones_defineProperty(_modifier35, "MP Regen Max", 8), _modifier35)
}, {
  familiar: $familiar(_templateObject69 || (_templateObject69 = CrownOfThrones_taggedTemplateLiteral(["Sweet Nutcracker"]))),
  meatVal: () => getSaleValue.apply(void 0, CrownOfThrones_toConsumableArray(template_string_$items(_templateObject70 || (_templateObject70 = CrownOfThrones_taggedTemplateLiteral(["candy cane, eggnog, fruitcake, gingerbread bugbear"]))))),
  probability: 0.3,
  modifier: (_modifier36 = {}, CrownOfThrones_defineProperty(_modifier36, "HP Regen Min", 2), CrownOfThrones_defineProperty(_modifier36, "MP Regen Min", 2), CrownOfThrones_defineProperty(_modifier36, "HP Regen Max", 8), CrownOfThrones_defineProperty(_modifier36, "MP Regen Max", 8), _modifier36)
}, {
  familiar: $familiar(_templateObject71 || (_templateObject71 = CrownOfThrones_taggedTemplateLiteral(["Casagnova Gnome"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject72 || (_templateObject72 = CrownOfThrones_taggedTemplateLiteral(["Coffee Pixie"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject73 || (_templateObject73 = CrownOfThrones_taggedTemplateLiteral(["Dancing Frog"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject74 || (_templateObject74 = CrownOfThrones_taggedTemplateLiteral(["Grouper Groupie"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject75 || (_templateObject75 = CrownOfThrones_taggedTemplateLiteral(["Hand Turkey"]))),
  meatVal: () => 30,
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject76 || (_templateObject76 = CrownOfThrones_taggedTemplateLiteral(["Hippo Ballerina"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject77 || (_templateObject77 = CrownOfThrones_taggedTemplateLiteral(["Jitterbug"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject78 || (_templateObject78 = CrownOfThrones_taggedTemplateLiteral(["Leprechaun"]))),
  meatVal: () => 30,
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject79 || (_templateObject79 = CrownOfThrones_taggedTemplateLiteral(["Obtuse Angel"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject80 || (_templateObject80 = CrownOfThrones_taggedTemplateLiteral(["Psychedelic Bear"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject81 || (_templateObject81 = CrownOfThrones_taggedTemplateLiteral(["Robortender"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 20)
}, {
  familiar: $familiar(_templateObject82 || (_templateObject82 = CrownOfThrones_taggedTemplateLiteral(["Ghost of Crimbo Commerce"]))),
  meatVal: () => 30,
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 25)
}, {
  familiar: $familiar(_templateObject83 || (_templateObject83 = CrownOfThrones_taggedTemplateLiteral(["Hobo Monkey"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Meat Drop", 25)
}, {
  familiar: $familiar(_templateObject84 || (_templateObject84 = CrownOfThrones_taggedTemplateLiteral(["Rockin' Robin"]))),
  meatVal: () => 60,
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Item Drop", 15)
}, {
  familiar: $familiar(_templateObject85 || (_templateObject85 = CrownOfThrones_taggedTemplateLiteral(["Feral Kobold"]))),
  meatVal: () => 30,
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Item Drop", 15)
}, {
  familiar: $familiar(_templateObject86 || (_templateObject86 = CrownOfThrones_taggedTemplateLiteral(["Oily Woim"]))),
  meatVal: () => 30,
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Item Drop", 10)
}, {
  familiar: $familiar(_templateObject87 || (_templateObject87 = CrownOfThrones_taggedTemplateLiteral(["Cat Burglar"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Item Drop", 10)
}, {
  familiar: $familiar(_templateObject88 || (_templateObject88 = CrownOfThrones_taggedTemplateLiteral(["Misshapen Animal Skeleton"]))),
  meatVal: () => 30,
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Familiar Weight", 5)
}, {
  familiar: $familiar(_templateObject89 || (_templateObject89 = CrownOfThrones_taggedTemplateLiteral(["Gelatinous Cubeling"]))),
  meatVal: () => 0,
  probability: 0,
  modifier: CrownOfThrones_defineProperty({}, "Familiar Weight", 5)
}, {
  familiar: $familiar(_templateObject90 || (_templateObject90 = CrownOfThrones_taggedTemplateLiteral(["Frozen Gravy Fairy"]))),
  // drops a cold nugget every combat, 5 of which can be used to make a cold wad
  meatVal: () => Math.max(0.2 * getSaleValue(template_string_$item(_templateObject91 || (_templateObject91 = CrownOfThrones_taggedTemplateLiteral(["cold wad"])))), getSaleValue(template_string_$item(_templateObject92 || (_templateObject92 = CrownOfThrones_taggedTemplateLiteral(["cold nuggets"]))))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Cold Damage", 20)
}, {
  familiar: $familiar(_templateObject93 || (_templateObject93 = CrownOfThrones_taggedTemplateLiteral(["Stinky Gravy Fairy"]))),
  // drops a stench nugget every combat, 5 of which can be used to make a stench wad
  meatVal: () => Math.max(0.2 * getSaleValue(template_string_$item(_templateObject94 || (_templateObject94 = CrownOfThrones_taggedTemplateLiteral(["stench wad"])))), getSaleValue(template_string_$item(_templateObject95 || (_templateObject95 = CrownOfThrones_taggedTemplateLiteral(["stench nuggets"]))))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Stench Damage", 20)
}, {
  familiar: $familiar(_templateObject96 || (_templateObject96 = CrownOfThrones_taggedTemplateLiteral(["Sleazy Gravy Fairy"]))),
  // drops a sleaze nugget every combat, 5 of which can be used to make a sleaze wad
  meatVal: () => Math.max(0.2 * getSaleValue(template_string_$item(_templateObject97 || (_templateObject97 = CrownOfThrones_taggedTemplateLiteral(["sleaze wad"])))), getSaleValue(template_string_$item(_templateObject98 || (_templateObject98 = CrownOfThrones_taggedTemplateLiteral(["sleaze nuggets"]))))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Sleaze Damage", 20)
}, {
  familiar: $familiar(_templateObject99 || (_templateObject99 = CrownOfThrones_taggedTemplateLiteral(["Spooky Gravy Fairy"]))),
  // drops a spooky nugget every combat, 5 of which can be used to make a spooky wad
  meatVal: () => Math.max(0.2 * getSaleValue(template_string_$item(_templateObject100 || (_templateObject100 = CrownOfThrones_taggedTemplateLiteral(["spooky wad"])))), getSaleValue(template_string_$item(_templateObject101 || (_templateObject101 = CrownOfThrones_taggedTemplateLiteral(["spooky nuggets"]))))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Spooky Damage", 20)
}, {
  familiar: $familiar(_templateObject102 || (_templateObject102 = CrownOfThrones_taggedTemplateLiteral(["Flaming Gravy Fairy"]))),
  // drops a hot nugget every combat, 5 of which can be used to make a hot wad
  meatVal: () => Math.max(0.2 * getSaleValue(template_string_$item(_templateObject103 || (_templateObject103 = CrownOfThrones_taggedTemplateLiteral(["hot wad"])))), getSaleValue(template_string_$item(_templateObject104 || (_templateObject104 = CrownOfThrones_taggedTemplateLiteral(["hot nuggets"]))))),
  probability: 1,
  modifier: CrownOfThrones_defineProperty({}, "Hot Damage", 20)
}];
function valueRider(rider, modifierValueFunction) {
  var ignoreLimitedDrops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var dropValue = !rider.dropPredicate || rider.dropPredicate() && !ignoreLimitedDrops ? rider.probability * rider.meatVal() : 0;
  var modifierValue = modifierValueFunction(rider.modifier);
  return dropValue + modifierValue;
}
var riderModes = new Map();
function createRiderMode(name, modifierValueFunction) {
  var ignoreLimitedDrops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var excludeCurrentFamiliar = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  return riderModes.set(name, {
    modifierValueFunction: modifierValueFunction,
    ignoreLimitedDrops: ignoreLimitedDrops,
    excludeCurrentFamiliar: excludeCurrentFamiliar
  });
}
var riderLists = new Map();
function pickRider(mode) {
  var modeData = riderModes.get(mode);
  if (!modeData) return null;
  var modifierValueFunction = modeData.modifierValueFunction,
    ignoreLimitedDrops = modeData.ignoreLimitedDrops,
    excludeCurrentFamiliar = modeData.excludeCurrentFamiliar;
  if (!riderLists.has(mode)) {
    riderLists.set(mode, ridingFamiliars.filter(rider => lib_have(rider.familiar)).sort((a, b) => valueRider(b, modifierValueFunction, ignoreLimitedDrops) - valueRider(a, modifierValueFunction, ignoreLimitedDrops)));
  }
  var list = riderLists.get(mode);
  if (list) {
    var riderToReturn = list.find(rider => (!rider.dropPredicate || rider.dropPredicate()) && (!excludeCurrentFamiliar || (0,external_kolmafia_namespaceObject.myFamiliar)() !== rider.familiar));
    return riderToReturn !== null && riderToReturn !== void 0 ? riderToReturn : null;
  }
  return null;
}
;// CONCATENATED MODULE: ./src/dropsgear.ts
var dropsgear_templateObject, dropsgear_templateObject2, dropsgear_templateObject3, dropsgear_templateObject4, dropsgear_templateObject5, dropsgear_templateObject6, dropsgear_templateObject7, dropsgear_templateObject8, dropsgear_templateObject9, dropsgear_templateObject10, dropsgear_templateObject11, dropsgear_templateObject12, dropsgear_templateObject13, dropsgear_templateObject14, dropsgear_templateObject15, dropsgear_templateObject16, dropsgear_templateObject17, dropsgear_templateObject18, dropsgear_templateObject19, dropsgear_templateObject20, dropsgear_templateObject21, dropsgear_templateObject22, dropsgear_templateObject23, dropsgear_templateObject24, dropsgear_templateObject25, dropsgear_templateObject26, dropsgear_templateObject27, dropsgear_templateObject28, dropsgear_templateObject29, dropsgear_templateObject30, dropsgear_templateObject31, dropsgear_templateObject32, dropsgear_templateObject33, dropsgear_templateObject34, dropsgear_templateObject35, dropsgear_templateObject36, dropsgear_templateObject37, dropsgear_templateObject38, dropsgear_templateObject39, dropsgear_templateObject40, dropsgear_templateObject41, dropsgear_templateObject42, dropsgear_templateObject43, dropsgear_templateObject44, dropsgear_templateObject45, dropsgear_templateObject46, dropsgear_templateObject47, dropsgear_templateObject48, dropsgear_templateObject49, dropsgear_templateObject50, dropsgear_templateObject51, dropsgear_templateObject52, dropsgear_templateObject53, dropsgear_templateObject54, dropsgear_templateObject55, dropsgear_templateObject56, dropsgear_templateObject57, dropsgear_templateObject58, dropsgear_templateObject59, dropsgear_templateObject60, dropsgear_templateObject61, dropsgear_templateObject62, dropsgear_templateObject63, dropsgear_templateObject64, dropsgear_templateObject65, dropsgear_templateObject66, dropsgear_templateObject67, dropsgear_templateObject68, dropsgear_templateObject69, dropsgear_templateObject70, dropsgear_templateObject71, dropsgear_templateObject72, dropsgear_templateObject73, dropsgear_templateObject74, dropsgear_templateObject75, dropsgear_templateObject76, dropsgear_templateObject77, dropsgear_templateObject78, dropsgear_templateObject79;
function dropsgear_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = dropsgear_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function dropsgear_slicedToArray(arr, i) { return dropsgear_arrayWithHoles(arr) || dropsgear_iterableToArrayLimit(arr, i) || dropsgear_unsupportedIterableToArray(arr, i) || dropsgear_nonIterableRest(); }
function dropsgear_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function dropsgear_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function dropsgear_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function dropsgear_toConsumableArray(arr) { return dropsgear_arrayWithoutHoles(arr) || dropsgear_iterableToArray(arr) || dropsgear_unsupportedIterableToArray(arr) || dropsgear_nonIterableSpread(); }
function dropsgear_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function dropsgear_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dropsgear_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dropsgear_arrayLikeToArray(o, minLen); }
function dropsgear_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function dropsgear_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return dropsgear_arrayLikeToArray(arr); }
function dropsgear_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function dropsgear_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }










/**
 * Determine the meat value of the modifier bonuses a particular bjorned familiar grants
 * @param mode The BonusEquipMode of this fight: "free", "dmt", "embezzler", or "barf"
 * @param modifiers An object containing any and all modifier-value pairs that the potential familiar choice grants
 * @returns The meat value of the modifier bonuses given that mode
 */
function valueBjornModifiers(mode, modifiers) {
  var _modifiers$FamiliarW, _modifiers$MeatDrop, _modifiers$ItemDrop;
  var weight = (_modifiers$FamiliarW = modifiers["Familiar Weight"]) !== null && _modifiers$FamiliarW !== void 0 ? _modifiers$FamiliarW : 0;
  var meat = (_modifiers$MeatDrop = modifiers["Meat Drop"]) !== null && _modifiers$MeatDrop !== void 0 ? _modifiers$MeatDrop : 0;
  var item = (_modifiers$ItemDrop = modifiers["Item Drop"]) !== null && _modifiers$ItemDrop !== void 0 ? _modifiers$ItemDrop : 0;
  var meatValue = (!["dmt", "free"].includes(mode) ? baseMeat + mode === "embezzler" ? 750 : 0 : 0) / 100;
  var itemValue = mode === "barf" ? 0.72 : 0;
  var lepMult = findLeprechaunMultiplier(meatFamiliar());
  var lepBonus = weight * (2 * lepMult + Math.sqrt(lepMult));
  var fairyMult = findFairyMultiplier(meatFamiliar());
  var fairyBonus = weight * (fairyMult + Math.sqrt(fairyMult) / 2);
  var bjornMeatDropValue = meatValue * (meat + lepBonus);
  var bjornItemDropValue = itemValue * (item + fairyBonus);
  return bjornMeatDropValue + bjornItemDropValue;
}
createRiderMode("free", modifiers => valueBjornModifiers("free", modifiers), false);
createRiderMode("embezzler", modifiers => valueBjornModifiers("embezzler", modifiers), true);
createRiderMode("dmt", modifiers => valueBjornModifiers("dmt", modifiers), true);
createRiderMode("barf", modifiers => valueBjornModifiers("barf", modifiers), false, true);

/**
 * Determines the best familiar to bjornify given a particular fight mode
 * @param mode The BonusEquipMode of this fight: "free", "dmt", "embezzler", or "barf"
 * @returns The best familiar to bjornify given this fight mode
 */
function pickBjorn() {
  var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "free";
  var attempt = pickRider(mode);
  if (attempt) return attempt;
  throw new Error("Unable to make a sensible bjorn decision");
}
var pantsgivingBonuses = new Map();
function pantsgiving() {
  if (!lib_have(template_string_$item(dropsgear_templateObject || (dropsgear_templateObject = dropsgear_taggedTemplateLiteral(["Pantsgiving"]))))) return new Map();
  var count = property_get("_pantsgivingCount");
  var turnArray = [5, 50, 500, 5000];
  var index = (0,external_kolmafia_namespaceObject.myFullness)() === (0,external_kolmafia_namespaceObject.fullnessLimit)() ? property_get("_pantsgivingFullness") : turnArray.findIndex(x => count < x);
  var turns = turnArray[index] || 50000;
  if (turns - count > estimatedGarboTurns()) return new Map();
  var cachedBonus = pantsgivingBonuses.get(turns);
  if (cachedBonus) return new Map([[template_string_$item(dropsgear_templateObject2 || (dropsgear_templateObject2 = dropsgear_taggedTemplateLiteral(["Pantsgiving"]))), cachedBonus]]);
  var expectedSinusTurns = (0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(dropsgear_templateObject3 || (dropsgear_templateObject3 = dropsgear_taggedTemplateLiteral(["portable Mayo Clinic"]))) ? 100 : 50;
  var expectedUseableSinusTurns = config_globalOptions.ascend ? utils_clamp(estimatedGarboTurns() - (turns - count) - (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(dropsgear_templateObject4 || (dropsgear_templateObject4 = dropsgear_taggedTemplateLiteral(["Kicked in the Sinuses"])))), 0, expectedSinusTurns) : expectedSinusTurns;
  var sinusVal = expectedUseableSinusTurns * 1.0 * baseMeat;
  var fullnessValue = sinusVal + property_get("valueOfAdventure") * 6.5 - ((0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(dropsgear_templateObject5 || (dropsgear_templateObject5 = dropsgear_taggedTemplateLiteral(["jumping horseradish"])))) + (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(dropsgear_templateObject6 || (dropsgear_templateObject6 = dropsgear_taggedTemplateLiteral(["Special Seasoning"])))));
  var pantsgivingBonus = fullnessValue / (turns * 0.9);
  pantsgivingBonuses.set(turns, pantsgivingBonus);
  return new Map([[template_string_$item(dropsgear_templateObject7 || (dropsgear_templateObject7 = dropsgear_taggedTemplateLiteral(["Pantsgiving"]))), pantsgivingBonus]]);
}
function sweatpants(equipMode) {
  if (!lib_have(template_string_$item(dropsgear_templateObject8 || (dropsgear_templateObject8 = dropsgear_taggedTemplateLiteral(["designer sweatpants"])))) || equipMode === "embezzler") return new Map();
  var needSweat = !config_globalOptions.ascend && property_get("sweat", 0) < 75 || property_get("sweat", 0) < 25 * (3 - property_get("_sweatOutSomeBoozeUsed", 0));
  if (!needSweat) return new Map();
  var VOA = property_get("valueOfAdventure");
  var bestPerfectDrink = mallMin(template_string_$items(dropsgear_templateObject9 || (dropsgear_templateObject9 = dropsgear_taggedTemplateLiteral(["perfect cosmopolitan, perfect negroni, perfect dark and stormy, perfect mimosa, perfect old-fashioned, perfect paloma"]))));
  var perfectDrinkValuePerDrunk = ((getAverageAdventures(bestPerfectDrink) + 3) * VOA - (0,external_kolmafia_namespaceObject.mallPrice)(bestPerfectDrink)) / 3;
  var splendidMartiniValuePerDrunk = (getAverageAdventures(template_string_$item(dropsgear_templateObject10 || (dropsgear_templateObject10 = dropsgear_taggedTemplateLiteral(["splendid martini"])))) + 2) * VOA;
  var bonus = Math.max(perfectDrinkValuePerDrunk, splendidMartiniValuePerDrunk) * 2 / 25;
  return new Map([[template_string_$item(dropsgear_templateObject11 || (dropsgear_templateObject11 = dropsgear_taggedTemplateLiteral(["designer sweatpants"]))), bonus]]);
}
var alternativePants = external_kolmafia_namespaceObject.Item.all().filter(item => (0,external_kolmafia_namespaceObject.toSlot)(item) === $slot(dropsgear_templateObject12 || (dropsgear_templateObject12 = dropsgear_taggedTemplateLiteral(["pants"]))) && lib_have(item) && (0,external_kolmafia_namespaceObject.numericModifier)(item, "Adventures") > 0).map(pants => (0,external_kolmafia_namespaceObject.numericModifier)(pants, "Adventures"));
var bestAdventuresFromPants = Math.max.apply(Math, [0].concat(dropsgear_toConsumableArray(alternativePants)));
var haveSomeCheese = getFoldGroup(template_string_$item(dropsgear_templateObject13 || (dropsgear_templateObject13 = dropsgear_taggedTemplateLiteral(["stinky cheese diaper"])))).some(item => lib_have(item));
function cheeses(mode) {
  return haveSomeCheese && !config_globalOptions.ascend && property_get("_stinkyCheeseCount") < 100 && estimatedGarboTurns() >= 100 - property_get("_stinkyCheeseCount") && mode !== "embezzler" ? new Map(getFoldGroup(template_string_$item(dropsgear_templateObject14 || (dropsgear_templateObject14 = dropsgear_taggedTemplateLiteral(["stinky cheese diaper"])))).filter(item => (0,external_kolmafia_namespaceObject.toSlot)(item) !== $slot(dropsgear_templateObject15 || (dropsgear_templateObject15 = dropsgear_taggedTemplateLiteral(["weapon"])))).map(item => [item, property_get("valueOfAdventure") * (10 - bestAdventuresFromPants) * (1 / 100)])) : [];
}
function mafiaThumbRing(equipMode) {
  if (!lib_have(template_string_$item(dropsgear_templateObject16 || (dropsgear_templateObject16 = dropsgear_taggedTemplateLiteral(["mafia thumb ring"])))) || ["free", "dmt"].some(mode => mode === equipMode)) {
    return new Map([]);
  }
  return new Map([[template_string_$item(dropsgear_templateObject17 || (dropsgear_templateObject17 = dropsgear_taggedTemplateLiteral(["mafia thumb ring"]))), (1 / 0.96 - 1) * property_get("valueOfAdventure")]]);
}
function luckyGoldRing(equipMode) {
  // Ignore for DMT, assuming mafia might get confused about the volcoino drop by the weird combats
  if (!lib_have(template_string_$item(dropsgear_templateObject18 || (dropsgear_templateObject18 = dropsgear_taggedTemplateLiteral(["lucky gold ring"])))) || equipMode === "dmt") {
    return new Map([]);
  }

  // Volcoino has a low drop rate which isn't accounted for here
  // Overestimating until it drops is probably fine, don't @ me
  var dropValues = [100].concat(dropsgear_toConsumableArray([(0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(dropsgear_templateObject19 || (dropsgear_templateObject19 = dropsgear_taggedTemplateLiteral(["hobo nickel"])))) > 0 ? 100 : 0,
  // This should be closeted
  (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(dropsgear_templateObject20 || (dropsgear_templateObject20 = dropsgear_taggedTemplateLiteral(["sand dollar"])))) > 0 ? garboValue(template_string_$item(dropsgear_templateObject21 || (dropsgear_templateObject21 = dropsgear_taggedTemplateLiteral(["sand dollar"])))) : 0,
  // This should be closeted
  (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(dropsgear_templateObject22 || (dropsgear_templateObject22 = dropsgear_taggedTemplateLiteral(["Freddy Kruegerand"])))) > 0 ? garboValue(template_string_$item(dropsgear_templateObject23 || (dropsgear_templateObject23 = dropsgear_taggedTemplateLiteral(["Freddy Kruegerand"])))) : 0, realmAvailable("sleaze") ? garboValue(template_string_$item(dropsgear_templateObject24 || (dropsgear_templateObject24 = dropsgear_taggedTemplateLiteral(["Beach Buck"])))) : 0, realmAvailable("spooky") ? garboValue(template_string_$item(dropsgear_templateObject25 || (dropsgear_templateObject25 = dropsgear_taggedTemplateLiteral(["Coinspiracy"])))) : 0, realmAvailable("stench") ? garboValue(template_string_$item(dropsgear_templateObject26 || (dropsgear_templateObject26 = dropsgear_taggedTemplateLiteral(["FunFunds\u2122"])))) : 0, realmAvailable("hot") && !property_get("_luckyGoldRingVolcoino") ? garboValue(template_string_$item(dropsgear_templateObject27 || (dropsgear_templateObject27 = dropsgear_taggedTemplateLiteral(["Volcoino"])))) : 0, realmAvailable("cold") ? garboValue(template_string_$item(dropsgear_templateObject28 || (dropsgear_templateObject28 = dropsgear_taggedTemplateLiteral(["Wal-Mart gift certificate"])))) : 0, realmAvailable("fantasy") ? garboValue(template_string_$item(dropsgear_templateObject29 || (dropsgear_templateObject29 = dropsgear_taggedTemplateLiteral(["Rubee\u2122"])))) : 0].filter(value => value > 0)));

  // Items drop every ~10 turns
  return new Map([[template_string_$item(dropsgear_templateObject30 || (dropsgear_templateObject30 = dropsgear_taggedTemplateLiteral(["lucky gold ring"]))), sumNumbers(dropValues) / dropValues.length / 10]]);
}
function mrCheengsSpectacles() {
  if (!lib_have(template_string_$item(dropsgear_templateObject31 || (dropsgear_templateObject31 = dropsgear_taggedTemplateLiteral(["Mr. Cheeng's spectacles"]))))) {
    return new Map([]);
  }

  // Items drop every 4 turns
  // TODO: Possible drops are speculated to be any pvpable potion that will never be banned by standard
  return new Map([[template_string_$item(dropsgear_templateObject32 || (dropsgear_templateObject32 = dropsgear_taggedTemplateLiteral(["Mr. Cheeng's spectacles"]))), 220]]);
}
function mrScreegesSpectacles() {
  if (!lib_have(template_string_$item(dropsgear_templateObject33 || (dropsgear_templateObject33 = dropsgear_taggedTemplateLiteral(["Mr. Screege's spectacles"]))))) {
    return new Map([]);
  }

  // TODO: Calculate actual bonus value (good luck!)
  return new Map([[template_string_$item(dropsgear_templateObject34 || (dropsgear_templateObject34 = dropsgear_taggedTemplateLiteral(["Mr. Screege's spectacles"]))), 180]]);
}
function pantogramPants() {
  if (!lib_have(template_string_$item(dropsgear_templateObject35 || (dropsgear_templateObject35 = dropsgear_taggedTemplateLiteral(["pantogram pants"])))) || !property_get("_pantogramModifier").includes("Drops Items")) {
    return new Map([]);
  }

  // TODO: Calculate actual bonus value (good luck!)
  return new Map([[template_string_$item(dropsgear_templateObject36 || (dropsgear_templateObject36 = dropsgear_taggedTemplateLiteral(["pantogram pants"]))), 100]]);
}
function bagOfManyConfections() {
  if (!lib_have(template_string_$item(dropsgear_templateObject37 || (dropsgear_templateObject37 = dropsgear_taggedTemplateLiteral(["bag of many confections"])))) || !lib_have($familiar(dropsgear_templateObject38 || (dropsgear_templateObject38 = dropsgear_taggedTemplateLiteral(["Stocking Mimic"]))))) {
    return new Map([]);
  }
  return new Map([[template_string_$item(dropsgear_templateObject39 || (dropsgear_templateObject39 = dropsgear_taggedTemplateLiteral(["bag of many confections"]))), garboAverageValue.apply(void 0, dropsgear_toConsumableArray(template_string_$items(dropsgear_templateObject40 || (dropsgear_templateObject40 = dropsgear_taggedTemplateLiteral(["Polka Pop, BitterSweetTarts, Piddles"]))))) / 6]]);
}
function snowSuit(equipMode) {
  // Ignore for EMBEZZLER
  // Ignore for DMT, assuming mafia might get confused about the drop by the weird combats
  if (!lib_have(template_string_$item(dropsgear_templateObject41 || (dropsgear_templateObject41 = dropsgear_taggedTemplateLiteral(["Snow Suit"])))) || property_get("_carrotNoseDrops") >= 3 || ["embezzler", "dmt"].some(mode => mode === equipMode)) {
    return new Map([]);
  }
  return new Map([[template_string_$item(dropsgear_templateObject42 || (dropsgear_templateObject42 = dropsgear_taggedTemplateLiteral(["Snow Suit"]))), garboValue(template_string_$item(dropsgear_templateObject43 || (dropsgear_templateObject43 = dropsgear_taggedTemplateLiteral(["carrot nose"])))) / 10]]);
}
function mayflowerBouquet(equipMode) {
  // +40% meat drop 12.5% of the time (effectively 5%)
  // Drops flowers 50% of the time, wiki says 5-10 a day.
  // Theorized that flower drop rate drops off but no info on wiki.
  // During testing I got 4 drops then the 5th took like 40 more adventures
  // so let's just assume rate drops by 11% with a min of 1% ¯\_(ツ)_/¯

  // Ignore for EMBEZZLER
  // Ignore for DMT, assuming mafia might get confused about the drop by the weird combats
  if (!lib_have(template_string_$item(dropsgear_templateObject44 || (dropsgear_templateObject44 = dropsgear_taggedTemplateLiteral(["Mayflower bouquet"])))) || ["embezzler", "dmt"].some(mode => mode === equipMode)) {
    return new Map([]);
  }
  var sporadicMeatBonus = 40 * 0.125 * (equipMode === "barf" ? baseMeat : 0) / 100;
  var averageFlowerValue = garboAverageValue.apply(void 0, dropsgear_toConsumableArray(template_string_$items(dropsgear_templateObject45 || (dropsgear_templateObject45 = dropsgear_taggedTemplateLiteral(["tin magnolia, upsy daisy, lesser grodulated violet, half-orchid, begpwnia"]))))) * Math.max(0.01, 0.5 - property_get("_mayflowerDrops") * 0.11);
  return new Map([[template_string_$item(dropsgear_templateObject46 || (dropsgear_templateObject46 = dropsgear_taggedTemplateLiteral(["Mayflower bouquet"]))), (property_get("_mayflowerDrops") < 10 ? averageFlowerValue : 0) + sporadicMeatBonus]]);
}

/*
This is separate from bonusGear to prevent circular references
bonusGear() calls pantsgiving(), which calls estimatedGarboTurns(), which calls usingThumbRing()
If this isn't separated from bonusGear(), usingThumbRing() will call bonusGear(), creating a dangerous loop
*/
function bonusAccessories(equipMode) {
  return new Map([].concat(dropsgear_toConsumableArray(mafiaThumbRing(equipMode)), dropsgear_toConsumableArray(luckyGoldRing(equipMode)), dropsgear_toConsumableArray(mrCheengsSpectacles()), dropsgear_toConsumableArray(mrScreegesSpectacles())));
}
function magnifyingGlass() {
  if (!lib_have(template_string_$item(dropsgear_templateObject47 || (dropsgear_templateObject47 = dropsgear_taggedTemplateLiteral(["cursed magnifying glass"])))) || property_get("_voidFreeFights") >= 5 || property_get("cursedMagnifyingGlassCount") >= 13) {
    return new Map();
  }
  return new Map([[template_string_$item(dropsgear_templateObject48 || (dropsgear_templateObject48 = dropsgear_taggedTemplateLiteral(["cursed magnifying glass"]))), config_globalOptions.prefs.valueOfFreeFight / 13]]);
}
function bonusGear(equipMode) {
  var valueCircumstantialBonus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return new Map([].concat(dropsgear_toConsumableArray(cheeses(equipMode)), dropsgear_toConsumableArray(bonusAccessories(equipMode)), dropsgear_toConsumableArray(pantogramPants()), dropsgear_toConsumableArray(bagOfManyConfections()), dropsgear_toConsumableArray(stickers(equipMode)), dropsgear_toConsumableArray(powerGlove()), dropsgear_toConsumableArray(valueCircumstantialBonus ? new Map([].concat(dropsgear_toConsumableArray(!["embezzler", "dmt"].includes(equipMode) ? pantsgiving() : []), dropsgear_toConsumableArray(sweatpants(equipMode)), dropsgear_toConsumableArray(shavingBonus()), dropsgear_toConsumableArray(snowSuit(equipMode)), dropsgear_toConsumableArray(mayflowerBouquet(equipMode)), dropsgear_toConsumableArray(equipMode === "barf" ? magnifyingGlass() : []), dropsgear_toConsumableArray(juneCleaver(equipMode)))) : [])));
}
function bestBjornalike(existingForceEquips) {
  var bjornalikes = template_string_$items(dropsgear_templateObject49 || (dropsgear_templateObject49 = dropsgear_taggedTemplateLiteral(["Buddy Bjorn, Crown of Thrones"])));
  var slots = bjornalikes.map(bjornalike => (0,external_kolmafia_namespaceObject.toSlot)(bjornalike)).filter(slot => !existingForceEquips.some(equipment => (0,external_kolmafia_namespaceObject.toSlot)(equipment) === slot));
  if (!slots.length) return undefined;
  if (slots.length < 2 || bjornalikes.some(thing => !lib_have(thing))) {
    return bjornalikes.find(thing => lib_have(thing) && slots.includes((0,external_kolmafia_namespaceObject.toSlot)(thing)));
  }
  var hasStrongLep = findLeprechaunMultiplier(meatFamiliar()) >= 2;
  var goodRobortHats = template_string_$items(dropsgear_templateObject50 || (dropsgear_templateObject50 = dropsgear_taggedTemplateLiteral(["crumpled felt fedora"])));
  if ((0,external_kolmafia_namespaceObject.myClass)() === $class(dropsgear_templateObject51 || (dropsgear_templateObject51 = dropsgear_taggedTemplateLiteral(["Turtle Tamer"])))) goodRobortHats.push(template_string_$item(dropsgear_templateObject52 || (dropsgear_templateObject52 = dropsgear_taggedTemplateLiteral(["warbear foil hat"]))));
  if ((0,external_kolmafia_namespaceObject.numericModifier)(template_string_$item(dropsgear_templateObject53 || (dropsgear_templateObject53 = dropsgear_taggedTemplateLiteral(["shining star cap"]))), "Familiar Weight") === 10) {
    goodRobortHats.push(template_string_$item(dropsgear_templateObject54 || (dropsgear_templateObject54 = dropsgear_taggedTemplateLiteral(["shining star cap"]))));
  }
  if (lib_have(template_string_$item(dropsgear_templateObject55 || (dropsgear_templateObject55 = dropsgear_taggedTemplateLiteral(["carpe"])))) && (!hasStrongLep || !goodRobortHats.some(hat => lib_have(hat) && (0,external_kolmafia_namespaceObject.canEquip)(hat)))) {
    return template_string_$item(dropsgear_templateObject56 || (dropsgear_templateObject56 = dropsgear_taggedTemplateLiteral(["Crown of Thrones"])));
  }
  return template_string_$item(dropsgear_templateObject57 || (dropsgear_templateObject57 = dropsgear_taggedTemplateLiteral(["Buddy Bjorn"])));
}
function shavingBonus() {
  var _DaylightShavings$buf;
  if (!DaylightShavings_have() || buffs.some(buff => lib_have(buff, 2))) {
    return new Map();
  }
  var timeToMeatBuff = 11 * ((_DaylightShavings$buf = buffsUntil(template_string_$effect(dropsgear_templateObject58 || (dropsgear_templateObject58 = dropsgear_taggedTemplateLiteral(["Friendly Chops"]))))) !== null && _DaylightShavings$buf !== void 0 ? _DaylightShavings$buf : Infinity);
  if (config_globalOptions.ascend && timeToMeatBuff > estimatedGarboTurns()) {
    return new Map();
  }
  if (!config_globalOptions.ascend && nextBuff() === template_string_$effect(dropsgear_templateObject59 || (dropsgear_templateObject59 = dropsgear_taggedTemplateLiteral(["Friendly Chops"]))) && estimatedGarboTurns() < 11 * 11) {
    return new Map();
  }
  var bonusValue = (baseMeat * 100 + 72 * 50) / 100;
  return new Map([[template_string_$item(dropsgear_templateObject60 || (dropsgear_templateObject60 = dropsgear_taggedTemplateLiteral(["Daylight Shavings Helmet"]))), bonusValue]]);
}
var cachedUsingThumbRing = null;
/**
 * Calculates whether we expect to be wearing the thumb ring for most of the farming day.
 * This is used in functions that leverage projected turns; for instance, calculating the
 * number of turns of sweet synthesis required in our diet calcs or potion costs.
 * @returns boolean of whether we expect to be wearing the thumb ring for much of the day
 */
function usingThumbRing() {
  if (!lib_have(template_string_$item(dropsgear_templateObject61 || (dropsgear_templateObject61 = dropsgear_taggedTemplateLiteral(["mafia thumb ring"]))))) {
    return false;
  }
  if (cachedUsingThumbRing === null) {
    var gear = bonusAccessories("barf");
    var accessoryBonuses = dropsgear_toConsumableArray(gear.entries()).filter(_ref => {
      var _ref2 = dropsgear_slicedToArray(_ref, 1),
        item = _ref2[0];
      return lib_have(item);
    });
    (0,external_kolmafia_namespaceObject.setLocation)($location(dropsgear_templateObject62 || (dropsgear_templateObject62 = dropsgear_taggedTemplateLiteral(["Barf Mountain"]))));
    var meatAccessories = external_kolmafia_namespaceObject.Item.all().filter(item => lib_have(item) && (0,external_kolmafia_namespaceObject.toSlot)(item) === $slot(dropsgear_templateObject63 || (dropsgear_templateObject63 = dropsgear_taggedTemplateLiteral(["acc1"]))) && modifier_get("Meat Drop", item) > 0).map(item => [item, modifier_get("Meat Drop", item) * baseMeat / 100]);
    var accessoryValues = new Map(accessoryBonuses);
    var _iterator = dropsgear_createForOfIteratorHelper(meatAccessories),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _accessoryValues$get;
        var _step$value = dropsgear_slicedToArray(_step.value, 2),
          accessory = _step$value[0],
          value = _step$value[1];
        accessoryValues.set(accessory, value + ((_accessoryValues$get = accessoryValues.get(accessory)) !== null && _accessoryValues$get !== void 0 ? _accessoryValues$get : 0));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (lib_have(template_string_$item(dropsgear_templateObject64 || (dropsgear_templateObject64 = dropsgear_taggedTemplateLiteral(["mafia pointer finger ring"])))) && ((0,external_kolmafia_namespaceObject.myClass)() === $class(dropsgear_templateObject65 || (dropsgear_templateObject65 = dropsgear_taggedTemplateLiteral(["Seal Clubber"]))) && lib_have($skill(dropsgear_templateObject66 || (dropsgear_templateObject66 = dropsgear_taggedTemplateLiteral(["Furious Wallop"])))) || lib_have(template_string_$item(dropsgear_templateObject67 || (dropsgear_templateObject67 = dropsgear_taggedTemplateLiteral(["haiku katana"])))) || lib_have(template_string_$item(dropsgear_templateObject68 || (dropsgear_templateObject68 = dropsgear_taggedTemplateLiteral(["Operation Patriot Shield"])))) || lib_have(template_string_$item(dropsgear_templateObject69 || (dropsgear_templateObject69 = dropsgear_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"])))))) {
      accessoryValues.set(template_string_$item(dropsgear_templateObject70 || (dropsgear_templateObject70 = dropsgear_taggedTemplateLiteral(["mafia pointer finger ring"]))), 500);
    }
    var bestAccessories = dropsgear_toConsumableArray(accessoryValues.entries()).sort((_ref3, _ref4) => {
      var _ref5 = dropsgear_slicedToArray(_ref3, 2),
        aBonus = _ref5[1];
      var _ref6 = dropsgear_slicedToArray(_ref4, 2),
        bBonus = _ref6[1];
      return bBonus - aBonus;
    }).map(_ref7 => {
      var _ref8 = dropsgear_slicedToArray(_ref7, 1),
        item = _ref8[0];
      return item;
    });
    cachedUsingThumbRing = bestAccessories.slice(0, 2).includes(template_string_$item(dropsgear_templateObject71 || (dropsgear_templateObject71 = dropsgear_taggedTemplateLiteral(["mafia thumb ring"]))));
  }
  return cachedUsingThumbRing;
}
var juneCleaverEV = null;
function juneCleaver(equipMode) {
  var estimatedJuneCleaverTurns = remainingUserTurns() + estimatedGarboTurns();
  if (!lib_have(template_string_$item(dropsgear_templateObject72 || (dropsgear_templateObject72 = dropsgear_taggedTemplateLiteral(["June cleaver"])))) || property_get("_juneCleaverFightsLeft") > estimatedJuneCleaverTurns || !property_get("_juneCleaverFightsLeft")) {
    return new Map();
  }
  if (!juneCleaverEV) {
    juneCleaverEV = utils_sum(dropsgear_toConsumableArray(choices), choice => valueJuneCleaverOption(juneCleaverChoiceValues[choice][bestJuneCleaverOption(choice)])) / choices.length;
  }
  // If we're ascending then the chances of hitting choices in the queue is reduced
  if (config_globalOptions.ascend && estimatedJuneCleaverTurns <= 180 && getInterval() === 30) {
    var availEV = utils_sum(dropsgear_toConsumableArray(choicesAvailable()), choice => valueJuneCleaverOption(juneCleaverChoiceValues[choice][bestJuneCleaverOption(choice)])) / choicesAvailable().length;
    var queueEV = utils_sum(dropsgear_toConsumableArray(queue()), choice => {
      var choiceValue = valueJuneCleaverOption(juneCleaverChoiceValues[choice][bestJuneCleaverOption(choice)]);
      var cleaverEncountersLeft = Math.floor(estimatedJuneCleaverTurns / 30);
      var encountersToQueueExit = 1 + queue().indexOf(choice);
      var chancesLeft = Math.max(0, cleaverEncountersLeft - encountersToQueueExit);
      var encounterProbability = 1 - Math.pow(2 / 3, chancesLeft);
      return choiceValue * encounterProbability;
    }) / queue().length;
    juneCleaverEV = queueEV + availEV;
  }
  var interval = equipMode === "embezzler" ? 30 : getInterval();
  return new Map([[template_string_$item(dropsgear_templateObject73 || (dropsgear_templateObject73 = dropsgear_taggedTemplateLiteral(["June cleaver"]))), juneCleaverEV / interval]]);
}
function stickers(equipMode) {
  if (equipMode === "embezzler") return new Map();
  var cost = sumNumbers($slots(dropsgear_templateObject74 || (dropsgear_templateObject74 = dropsgear_taggedTemplateLiteral(["sticker1, sticker2, sticker3"]))).map(s => (0,external_kolmafia_namespaceObject.mallPrice)((0,external_kolmafia_namespaceObject.equippedItem)(s)) / 20));
  return new Map([[template_string_$item(dropsgear_templateObject75 || (dropsgear_templateObject75 = dropsgear_taggedTemplateLiteral(["scratch 'n' sniff sword"]))), -1 * cost], [template_string_$item(dropsgear_templateObject76 || (dropsgear_templateObject76 = dropsgear_taggedTemplateLiteral(["scratch 'n' sniff crossbow"]))), -1 * cost]]);
}
function powerGlove() {
  if (!lib_have(template_string_$item(dropsgear_templateObject77 || (dropsgear_templateObject77 = dropsgear_taggedTemplateLiteral(["Powerful Glove"]))))) return new Map();
  // 23% proc rate, according to the wiki
  // https://kol.coldfront.net/thekolwiki/index.php/Powerful_Glove
  return new Map([[template_string_$item(dropsgear_templateObject78 || (dropsgear_templateObject78 = dropsgear_taggedTemplateLiteral(["Powerful Glove"]))), 0.25 * garboAverageValue.apply(void 0, dropsgear_toConsumableArray(template_string_$items(dropsgear_templateObject79 || (dropsgear_templateObject79 = dropsgear_taggedTemplateLiteral(["blue pixel, green pixel, red pixel, white pixel"])))))]]);
}
;// CONCATENATED MODULE: ./src/turns.ts
var turns_templateObject, turns_templateObject2, turns_templateObject3, turns_templateObject4, turns_templateObject5, turns_templateObject6, turns_templateObject7, turns_templateObject8, turns_templateObject9, turns_templateObject10;
function turns_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }







/**
 * Computes the estimated number of turns during which garbo will run
 * @returns A guess of how many runs garbo will run in total
 */
function estimatedGarboTurns() {
  // Assume roughly 2 fullness from pantsgiving and 8 adventures/fullness.
  var pantsgivingAdventures = lib_have(template_string_$item(turns_templateObject || (turns_templateObject = turns_taggedTemplateLiteral(["Pantsgiving"])))) ? Math.max(0, 2 - property_get("_pantsgivingFullness")) * 8 : 0;
  var potentialSausages = (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(turns_templateObject2 || (turns_templateObject2 = turns_taggedTemplateLiteral(["magical sausage"])))) + (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(turns_templateObject3 || (turns_templateObject3 = turns_taggedTemplateLiteral(["magical sausage casing"]))));
  var sausageAdventures = lib_have(template_string_$item(turns_templateObject4 || (turns_templateObject4 = turns_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) ? Math.min(potentialSausages, 23 - property_get("_sausagesEaten")) : 0;
  var thesisAdventures = lib_have($familiar(turns_templateObject5 || (turns_templateObject5 = turns_taggedTemplateLiteral(["Pocket Professor"])))) && !property_get("_thesisDelivered") ? 11 : 0;
  var nightcapAdventures = config_globalOptions.ascend && (0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)() && lib_have(template_string_$item(turns_templateObject6 || (turns_templateObject6 = turns_taggedTemplateLiteral(["Drunkula's wineglass"])))) ? ESTIMATED_OVERDRUNK_TURNS : 0;
  var thumbRingMultiplier = usingThumbRing() ? 1 / 0.96 : 1;

  // We need to estimate adventures from our organs if we are only dieting after yachtzee chaining
  var yachtzeeTurns = 30; // guesstimate
  var adventuresAfterChaining = config_globalOptions.prefs.yachtzeechain && !property_get("_garboYachtzeeChainCompleted") ? Math.max(potentialFullnessAdventures() + potentialInebrietyAdventures() + potentialNonOrganAdventures() - yachtzeeTurns, 0) : 0;
  var turns;
  if (config_globalOptions.stopTurncount) turns = config_globalOptions.stopTurncount - (0,external_kolmafia_namespaceObject.myTurncount)();else if (config_globalOptions.nobarf) turns = embezzlerCount();else if (config_globalOptions.saveTurns > 0 || !config_globalOptions.ascend) {
    turns = ((0,external_kolmafia_namespaceObject.myAdventures)() + sausageAdventures + pantsgivingAdventures + thesisAdventures + adventuresAfterChaining - config_globalOptions.saveTurns) * thumbRingMultiplier;
  } else {
    turns = ((0,external_kolmafia_namespaceObject.myAdventures)() + sausageAdventures + pantsgivingAdventures + nightcapAdventures + thesisAdventures + adventuresAfterChaining) * thumbRingMultiplier;
  }
  return turns;
}

/**
 * Computes the estimated number of turns left that the user will use outside garbo
 * @returns A guess of how many turns will be used outside garbo
 */
function remainingUserTurns() {
  var dietAdventures = Math.max(potentialFullnessAdventures() + potentialInebrietyAdventures() + potentialNonOrganAdventures(), 0);
  var turns = (0,external_kolmafia_namespaceObject.myAdventures)() + dietAdventures - estimatedGarboTurns() + config_globalOptions.saveTurns;
  return turns;
}
var estimatedTurnsTomorrow = 400 + utils_clamp((property_get("valueOfAdventure") - 4000) / 8, 0, 600);
function untangleDigitizes(turnCount, chunks) {
  var turnsPerChunk = turnCount / chunks;
  var monstersPerChunk = Math.sqrt((turnsPerChunk + 3) / 5 + 1 / 4) - 1 / 2;
  return Math.round(chunks * monstersPerChunk);
}

/**
 *
 * @returns The number of digitized monsters that we expect to fight today
 */
function digitizedMonstersRemaining() {
  if (!SourceTerminal_have()) return 0;
  var digitizesLeft = getDigitizeUsesRemaining();
  if (digitizesLeft === getMaximumDigitizeUses()) {
    return untangleDigitizes(estimatedGarboTurns(), getMaximumDigitizeUses());
  }
  var monsterCount = getDigitizeMonsterCount() + 1;
  var turnsLeftAtNextMonster = estimatedGarboTurns() - counter_get("Digitize Monster");
  if (turnsLeftAtNextMonster <= 0) return 0;
  var turnsAtLastDigitize = turnsLeftAtNextMonster + ((monsterCount + 1) * monsterCount * 5 - 3);
  return untangleDigitizes(turnsAtLastDigitize, digitizesLeft + 1) - getDigitizeMonsterCount();
}
function potentialFullnessAdventures() {
  var distentionPillSpace = lib_have(template_string_$item(turns_templateObject7 || (turns_templateObject7 = turns_taggedTemplateLiteral(["distention pill"])))) && !property_get("_distentionPillUsed") ? 1 : 0;
  return ((0,external_kolmafia_namespaceObject.fullnessLimit)() - (0,external_kolmafia_namespaceObject.myFullness)() + distentionPillSpace) * 8;
}
function potentialInebrietyAdventures() {
  var syntheticPillSpace = lib_have(template_string_$item(turns_templateObject8 || (turns_templateObject8 = turns_taggedTemplateLiteral(["synthetic dog hair pill"])))) && !property_get("_syntheticDogHairPillUsed") ? 1 : 0;
  var shotglassSpace = lib_have(template_string_$item(turns_templateObject9 || (turns_templateObject9 = turns_taggedTemplateLiteral(["mime army shotglass"])))) && !property_get("_mimeArmyShotglassUsed") ? 1 : 0;
  var sweatSpace = lib_have(template_string_$item(turns_templateObject10 || (turns_templateObject10 = turns_taggedTemplateLiteral(["designer sweatpants"])))) ? 3 - property_get("_sweatOutSomeBoozeUsed") : 0;
  return ((0,external_kolmafia_namespaceObject.inebrietyLimit)() - (0,external_kolmafia_namespaceObject.myInebriety)() + syntheticPillSpace + sweatSpace + shotglassSpace) * 7;
}
function potentialNonOrganAdventures() {
  var borrowedTimeAdventures = config_globalOptions.ascend && !property_get("_borrowedTimeUsed") ? 20 : 0;
  var chocolateAdventures = (3 - property_get("_chocolatesUsed")) * (4 - property_get("_chocolatesUsed")) / 2;
  var bufferAdventures = 30; // We don't know if garbo would decide to use melange/voraci tea/sweet tooth to get more adventures

  return borrowedTimeAdventures + chocolateAdventures + bufferAdventures;
}
;// CONCATENATED MODULE: ./src/familiar/lib.ts
var familiar_lib_templateObject, familiar_lib_templateObject2, familiar_lib_templateObject3, familiar_lib_templateObject4, familiar_lib_templateObject5, familiar_lib_templateObject6, familiar_lib_templateObject7, familiar_lib_templateObject8, familiar_lib_templateObject9, familiar_lib_templateObject10, familiar_lib_templateObject11, familiar_lib_templateObject12;
function familiar_lib_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





function timeToMeatify() {
  if (!lib_have($familiar(familiar_lib_templateObject || (familiar_lib_templateObject = familiar_lib_taggedTemplateLiteral(["Grey Goose"])))) || property_get("_meatifyMatterUsed") || (0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
    return false;
  } else if ($familiar(familiar_lib_templateObject2 || (familiar_lib_templateObject2 = familiar_lib_taggedTemplateLiteral(["Grey Goose"]))).experience >= 400) return true;else if (!config_globalOptions.ascend || (0,external_kolmafia_namespaceObject.myAdventures)() > 50) return false;

  // Check Wanderers
  var totalTurns = (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
  var baseMeat = lib_have(template_string_$item(familiar_lib_templateObject3 || (familiar_lib_templateObject3 = familiar_lib_taggedTemplateLiteral(["SongBoom\u2122 BoomBox"])))) ? 275 : 250;
  var usingLatte = lib_have(template_string_$item(familiar_lib_templateObject4 || (familiar_lib_templateObject4 = familiar_lib_taggedTemplateLiteral(["latte lovers member's mug"])))) && property_get("latteModifier").split(",").includes("Meat Drop: 40");
  var nextProtonicGhost = lib_have(template_string_$item(familiar_lib_templateObject5 || (familiar_lib_templateObject5 = familiar_lib_taggedTemplateLiteral(["protonic accelerator pack"])))) ? Math.max(1, property_get("nextParanormalActivity") - totalTurns) : Infinity;
  var nextVoteMonster = lib_have(template_string_$item(familiar_lib_templateObject6 || (familiar_lib_templateObject6 = familiar_lib_taggedTemplateLiteral(["\"I Voted!\" sticker"])))) && property_get("_voteFreeFights") < 3 ? Math.max(0, (totalTurns % 11 - 1) % 11) : Infinity;
  var nextVoidMonster = lib_have(template_string_$item(familiar_lib_templateObject7 || (familiar_lib_templateObject7 = familiar_lib_taggedTemplateLiteral(["cursed magnifying glass"])))) && property_get("_voidFreeFights") < 5 && config_globalOptions.prefs.valueOfFreeFight / 13 > baseMeat * (usingLatte ? 0.75 : 0.6) ? -property_get("cursedMagnifyingGlassCount") % 13 : Infinity;

  // If any of the above are 0, then
  // (1) We should be fighting a free fight
  // (2) We meatify if Grey Goose is sufficiently heavy and we don't have another free wanderer in our remaining turns

  var freeFightNow = property_get("questPAGhost") !== "unstarted" || nextVoteMonster === 0 || nextVoidMonster === 0;
  var delay = Math.min(nextProtonicGhost, nextVoteMonster === 0 ? property_get("_voteFreeFights") < 2 ? 11 : Infinity : nextVoteMonster, nextVoidMonster === 0 ? 13 : nextVoidMonster);
  if (delay < (0,external_kolmafia_namespaceObject.myAdventures)()) return false;
  // We can wait for the next free fight
  else if (freeFightNow || $familiar(familiar_lib_templateObject8 || (familiar_lib_templateObject8 = familiar_lib_taggedTemplateLiteral(["Grey Goose"]))).experience >= 121) return true;
  return false;
}
function pocketProfessorLectures() {
  return 2 + Math.ceil(Math.sqrt((0,external_kolmafia_namespaceObject.familiarWeight)($familiar(familiar_lib_templateObject9 || (familiar_lib_templateObject9 = familiar_lib_taggedTemplateLiteral(["Pocket Professor"])))) + (0,external_kolmafia_namespaceObject.weightAdjustment)()));
}
function canOpenRedPresent() {
  return lib_have($familiar(familiar_lib_templateObject10 || (familiar_lib_templateObject10 = familiar_lib_taggedTemplateLiteral(["Crimbo Shrub"])))) && !lib_have(template_string_$effect(familiar_lib_templateObject11 || (familiar_lib_templateObject11 = familiar_lib_taggedTemplateLiteral(["Everything Looks Red"])))) && property_get("shrubGifts") === "meat" && (0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)();
}

/**
 * Rough estimate of the  number of barf combats we expect to do. Used for marginal familiar tabulation.
 * @returns A rough estimate of the number of barf combats we expect to do.
 */
function turnsAvailable() {
  var baseTurns = estimatedGarboTurns();
  var digitizes = digitizedMonstersRemaining();
  var mapTurns = config_globalOptions.ascend ? utils_clamp((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(familiar_lib_templateObject12 || (familiar_lib_templateObject12 = familiar_lib_taggedTemplateLiteral(["Map to Safety Shelter Grimace Prime"])))), 0, ESTIMATED_OVERDRUNK_TURNS) : 0;
  var barfTurns = baseTurns - digitizes - mapTurns;
  var barfCombatRate = 1 - 1 / turnsToNC;
  return barfTurns * barfCombatRate;
}
;// CONCATENATED MODULE: ./src/familiar/meatFamiliar.ts
var meatFamiliar_templateObject, meatFamiliar_templateObject2, meatFamiliar_templateObject3, meatFamiliar_templateObject4, meatFamiliar_templateObject5, meatFamiliar_templateObject6;
function meatFamiliar_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var fam;
function findBestLeprechauns() {
  var validFamiliars = external_kolmafia_namespaceObject.Familiar.all().filter(f => lib_have(f) && f !== $familiar(meatFamiliar_templateObject || (meatFamiliar_templateObject = meatFamiliar_taggedTemplateLiteral(["Ghost of Crimbo Commerce"]))));
  validFamiliars.sort((a, b) => findLeprechaunMultiplier(b) - findLeprechaunMultiplier(a));
  var bestLepMult = findLeprechaunMultiplier(validFamiliars[0]);
  var firstBadLeprechaun = validFamiliars.findIndex(f => findLeprechaunMultiplier(f) < bestLepMult);
  if (firstBadLeprechaun === -1) return validFamiliars;
  return validFamiliars.slice(0, firstBadLeprechaun);
}
function findBestLeprechaun() {
  return lib_maxBy(findBestLeprechauns(), findFairyMultiplier);
}
function setBestLeprechaunAsMeatFamiliar() {
  fam = findBestLeprechaun();
}
function meatFamiliar() {
  if (!fam) {
    if ((0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)() && lib_have($familiar(meatFamiliar_templateObject2 || (meatFamiliar_templateObject2 = meatFamiliar_taggedTemplateLiteral(["Trick-or-Treating Tot"])))) && lib_have(template_string_$item(meatFamiliar_templateObject3 || (meatFamiliar_templateObject3 = meatFamiliar_taggedTemplateLiteral(["li'l pirate costume"]))))) {
      fam = $familiar(meatFamiliar_templateObject4 || (meatFamiliar_templateObject4 = meatFamiliar_taggedTemplateLiteral(["Trick-or-Treating Tot"])));
    } else if (lib_have($familiar(meatFamiliar_templateObject5 || (meatFamiliar_templateObject5 = meatFamiliar_taggedTemplateLiteral(["Robortender"]))))) {
      fam = $familiar(meatFamiliar_templateObject6 || (meatFamiliar_templateObject6 = meatFamiliar_taggedTemplateLiteral(["Robortender"])));
    } else {
      setBestLeprechaunAsMeatFamiliar();
    }
  }
  return fam;
}
;// CONCATENATED MODULE: ./src/outfit.ts
var src_outfit_templateObject, src_outfit_templateObject2, src_outfit_templateObject3, src_outfit_templateObject4, src_outfit_templateObject5, src_outfit_templateObject6, src_outfit_templateObject7, src_outfit_templateObject8, src_outfit_templateObject9, src_outfit_templateObject10, src_outfit_templateObject11, src_outfit_templateObject12, src_outfit_templateObject13, src_outfit_templateObject14, src_outfit_templateObject15, src_outfit_templateObject16, src_outfit_templateObject17, src_outfit_templateObject18, src_outfit_templateObject19, src_outfit_templateObject20, src_outfit_templateObject21, src_outfit_templateObject22, src_outfit_templateObject23, src_outfit_templateObject24, src_outfit_templateObject25, src_outfit_templateObject26, src_outfit_templateObject27, src_outfit_templateObject28, src_outfit_templateObject29, src_outfit_templateObject30, src_outfit_templateObject31, src_outfit_templateObject32, src_outfit_templateObject33, src_outfit_templateObject34, src_outfit_templateObject35, src_outfit_templateObject36, src_outfit_templateObject37, src_outfit_templateObject38, src_outfit_templateObject39, src_outfit_templateObject40, src_outfit_templateObject41, src_outfit_templateObject42, src_outfit_templateObject43, src_outfit_templateObject44, src_outfit_templateObject45, src_outfit_templateObject46, src_outfit_templateObject47, src_outfit_templateObject48, src_outfit_templateObject49, src_outfit_templateObject50, outfit_templateObject51, outfit_templateObject52, outfit_templateObject53, outfit_templateObject54, outfit_templateObject55, outfit_templateObject56, outfit_templateObject57, outfit_templateObject58, outfit_templateObject59, outfit_templateObject60, outfit_templateObject61, outfit_templateObject62, outfit_templateObject63, outfit_templateObject64, outfit_templateObject65, outfit_templateObject66, outfit_templateObject67, outfit_templateObject68, outfit_templateObject69, outfit_templateObject70, outfit_templateObject71, outfit_templateObject72, outfit_templateObject73, outfit_templateObject74, outfit_templateObject75, outfit_templateObject76, outfit_templateObject77, outfit_templateObject78, outfit_templateObject79, outfit_templateObject80, outfit_templateObject81;
function src_outfit_toConsumableArray(arr) { return src_outfit_arrayWithoutHoles(arr) || src_outfit_iterableToArray(arr) || src_outfit_unsupportedIterableToArray(arr) || src_outfit_nonIterableSpread(); }
function src_outfit_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function src_outfit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_outfit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_outfit_arrayLikeToArray(o, minLen); }
function src_outfit_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function src_outfit_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return src_outfit_arrayLikeToArray(arr); }
function src_outfit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function src_outfit_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }









function freeFightOutfit(requirement) {
  var _requirement$maximize, _requirement$maximize2, _requirement$maximize3, _requirement$maximize4, _requirement$maximize5;
  var equipMode = (0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(src_outfit_templateObject || (src_outfit_templateObject = src_outfit_taggedTemplateLiteral(["Machine Elf"]))) ? "dmt" : "free";
  var bjornChoice = pickBjorn(equipMode);
  var parameters = [].concat(src_outfit_toConsumableArray((_requirement$maximize = requirement === null || requirement === void 0 ? void 0 : requirement.maximizeParameters) !== null && _requirement$maximize !== void 0 ? _requirement$maximize : []), ["-tie"]);
  var forceEquip = (_requirement$maximize2 = requirement === null || requirement === void 0 ? void 0 : requirement.maximizeOptions.forceEquip) !== null && _requirement$maximize2 !== void 0 ? _requirement$maximize2 : [];
  var bonusEquip = (_requirement$maximize3 = requirement === null || requirement === void 0 ? void 0 : requirement.maximizeOptions.bonusEquip) !== null && _requirement$maximize3 !== void 0 ? _requirement$maximize3 : new Map();
  var preventEquip = (_requirement$maximize4 = requirement === null || requirement === void 0 ? void 0 : requirement.maximizeOptions.preventEquip) !== null && _requirement$maximize4 !== void 0 ? _requirement$maximize4 : [];
  var preventSlot = (_requirement$maximize5 = requirement === null || requirement === void 0 ? void 0 : requirement.maximizeOptions.preventSlot) !== null && _requirement$maximize5 !== void 0 ? _requirement$maximize5 : [];
  parameters.push($familiars(src_outfit_templateObject2 || (src_outfit_templateObject2 = src_outfit_taggedTemplateLiteral(["Pocket Professor, Grey Goose"]))).includes((0,external_kolmafia_namespaceObject.myFamiliar)()) ? "Familiar Experience" : "Familiar Weight");
  [];
  if (lib_have(template_string_$item(src_outfit_templateObject3 || (src_outfit_templateObject3 = src_outfit_taggedTemplateLiteral(["vampyric cloake"])))) && property_get("_vampyreCloakeFormUses") < 10 && forceEquip.every(equip => (0,external_kolmafia_namespaceObject.toSlot)(equip) !== $slot(src_outfit_templateObject4 || (src_outfit_templateObject4 = src_outfit_taggedTemplateLiteral(["back"]))))) {
    forceEquip.push(template_string_$item(src_outfit_templateObject5 || (src_outfit_templateObject5 = src_outfit_taggedTemplateLiteral(["vampyric cloake"]))));
  }
  var bjornAlike = bestBjornalike(forceEquip);
  preventEquip.push(bjornAlike === template_string_$item(src_outfit_templateObject6 || (src_outfit_templateObject6 = src_outfit_taggedTemplateLiteral(["Buddy Bjorn"]))) ? template_string_$item(src_outfit_templateObject7 || (src_outfit_templateObject7 = src_outfit_taggedTemplateLiteral(["Crown of Thrones"]))) : template_string_$item(src_outfit_templateObject8 || (src_outfit_templateObject8 = src_outfit_taggedTemplateLiteral(["Buddy Bjorn"]))));
  if ((0,external_kolmafia_namespaceObject.myFamiliar)() !== $familiar(src_outfit_templateObject9 || (src_outfit_templateObject9 = src_outfit_taggedTemplateLiteral(["Grey Goose"])))) bonusEquip.set(template_string_$item(src_outfit_templateObject10 || (src_outfit_templateObject10 = src_outfit_taggedTemplateLiteral(["tiny stillsuit"]))), 69);
  var finalRequirement = new Requirement(parameters, {
    forceEquip: forceEquip,
    preventEquip: [].concat(src_outfit_toConsumableArray(preventEquip), [bjornAlike === template_string_$item(src_outfit_templateObject11 || (src_outfit_templateObject11 = src_outfit_taggedTemplateLiteral(["Buddy Bjorn"]))) ? template_string_$item(src_outfit_templateObject12 || (src_outfit_templateObject12 = src_outfit_taggedTemplateLiteral(["Crown of Thrones"]))) : template_string_$item(src_outfit_templateObject13 || (src_outfit_templateObject13 = src_outfit_taggedTemplateLiteral(["Buddy Bjorn"])))]).filter(item => !forceEquip.includes(item)),
    bonusEquip: new Map([].concat(src_outfit_toConsumableArray(bonusEquip), src_outfit_toConsumableArray(bonusGear(equipMode)), src_outfit_toConsumableArray(bjornAlike ? new Map([[bjornAlike, !bjornChoice.dropPredicate || bjornChoice.dropPredicate() ? bjornChoice.meatVal() * bjornChoice.probability : 0]]) : []))),
    preventSlot: preventSlot
  });
  var result = finalRequirement.maximize();
  var missingEquips = () => {
    var _finalRequirement$max;
    return ((_finalRequirement$max = finalRequirement.maximizeOptions.forceEquip) !== null && _finalRequirement$max !== void 0 ? _finalRequirement$max : []).filter(equipment => !(0,external_kolmafia_namespaceObject.haveEquipped)(equipment));
  };
  if (missingEquips().length > 0 || !result) {
    (0,external_kolmafia_namespaceObject.cliExecute)("refresh all");
    var newResult = new Requirement([], {
      forceUpdate: true
    }).merge(finalRequirement).maximize();
    if (missingEquips().length > 0 || !newResult) {
      throw new Error("Maximizer failed to equip the following equipment: ".concat(missingEquips().map(equipment => equipment.name).join(", "), ".?"));
    }
  }
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(src_outfit_templateObject14 || (src_outfit_templateObject14 = src_outfit_taggedTemplateLiteral(["Buddy Bjorn"]))))) (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(bjornChoice.familiar);
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(src_outfit_templateObject15 || (src_outfit_templateObject15 = src_outfit_taggedTemplateLiteral(["Crown of Thrones"]))))) (0,external_kolmafia_namespaceObject.enthroneFamiliar)(bjornChoice.familiar);
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(src_outfit_templateObject16 || (src_outfit_templateObject16 = src_outfit_taggedTemplateLiteral(["Snow Suit"])))) && property_get("snowsuit") !== "nose") (0,external_kolmafia_namespaceObject.cliExecute)("snowsuit nose");
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(src_outfit_templateObject17 || (src_outfit_templateObject17 = src_outfit_taggedTemplateLiteral(["Jurassic Parka"])))) && property_get("parkaMode") !== "dilophosaur") {
    (0,external_kolmafia_namespaceObject.cliExecute)("parka dilophosaur");
  }
}
function refreshLatte() {
  // Refresh unlocked latte ingredients
  if (have($item(src_outfit_templateObject18 || (src_outfit_templateObject18 = src_outfit_taggedTemplateLiteral(["latte lovers member's mug"]))))) {
    visitUrl("main.php?latte=1", false);
  }
  return have($item(src_outfit_templateObject19 || (src_outfit_templateObject19 = src_outfit_taggedTemplateLiteral(["latte lovers member's mug"]))));
}
function tryFillLatte() {
  if (lib_have(template_string_$item(src_outfit_templateObject20 || (src_outfit_templateObject20 = src_outfit_taggedTemplateLiteral(["latte lovers member's mug"])))) && property_get("_latteRefillsUsed") < 3 && (property_get("_latteCopyUsed") || property_get("latteUnlocks").includes("cajun") && property_get("latteUnlocks").includes("rawhide") && ((0,external_kolmafia_namespaceObject.numericModifier)(template_string_$item(src_outfit_templateObject21 || (src_outfit_templateObject21 = src_outfit_taggedTemplateLiteral(["latte lovers member's mug"]))), "Familiar Weight") !== 5 || (0,external_kolmafia_namespaceObject.numericModifier)(template_string_$item(src_outfit_templateObject22 || (src_outfit_templateObject22 = src_outfit_taggedTemplateLiteral(["latte lovers member's mug"]))), "Meat Drop") !== 40 || property_get("latteUnlocks").includes("carrot") && (0,external_kolmafia_namespaceObject.numericModifier)(template_string_$item(src_outfit_templateObject23 || (src_outfit_templateObject23 = src_outfit_taggedTemplateLiteral(["latte lovers member's mug"]))), "Item Drop") !== 20))) {
    var goodLatteIngredients = ["cajun", "rawhide", "carrot"];
    var latteIngredients = goodLatteIngredients.filter(ingredient => property_get("latteUnlocks").includes(ingredient));
    if (latteIngredients.length < 3) latteIngredients.push("pumpkin");
    if (latteIngredients.length < 3) latteIngredients.push("vanilla");
    if (latteIngredients.length < 3) latteIngredients.push("cinnamon");
    (0,external_kolmafia_namespaceObject.cliExecute)("latte refill ".concat(latteIngredients.join(" ")));
  }
  return (0,external_kolmafia_namespaceObject.numericModifier)(template_string_$item(src_outfit_templateObject24 || (src_outfit_templateObject24 = src_outfit_taggedTemplateLiteral(["latte lovers member's mug"]))), "Familiar Weight") === 5 && (0,external_kolmafia_namespaceObject.numericModifier)(template_string_$item(src_outfit_templateObject25 || (src_outfit_templateObject25 = src_outfit_taggedTemplateLiteral(["latte lovers member's mug"]))), "Meat Drop") === 40;
}
function meatOutfit(embezzlerUp, requirement, sea) {
  var _requirement$maximize6, _requirement$maximize7, _requirement$maximize8, _requirement$maximize9;
  var equipMode = embezzlerUp ? "embezzler" : "barf";
  var bjornChoice = pickBjorn(equipMode);
  var parameters = [].concat(src_outfit_toConsumableArray((_requirement$maximize6 = requirement === null || requirement === void 0 ? void 0 : requirement.maximizeParameters) !== null && _requirement$maximize6 !== void 0 ? _requirement$maximize6 : []), ["-tie"]);
  var forceEquip = (_requirement$maximize7 = requirement === null || requirement === void 0 ? void 0 : requirement.maximizeOptions.forceEquip) !== null && _requirement$maximize7 !== void 0 ? _requirement$maximize7 : [];
  var preventEquip = (_requirement$maximize8 = requirement === null || requirement === void 0 ? void 0 : requirement.maximizeOptions.preventEquip) !== null && _requirement$maximize8 !== void 0 ? _requirement$maximize8 : [];
  var preventSlot = (_requirement$maximize9 = requirement === null || requirement === void 0 ? void 0 : requirement.maximizeOptions.preventSlot) !== null && _requirement$maximize9 !== void 0 ? _requirement$maximize9 : [];
  if (!embezzlerUp) {
    if ((0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
      forceEquip.push(template_string_$item(src_outfit_templateObject26 || (src_outfit_templateObject26 = src_outfit_taggedTemplateLiteral(["Drunkula's wineglass"]))));
    } else {
      if (lib_have(template_string_$item(src_outfit_templateObject27 || (src_outfit_templateObject27 = src_outfit_taggedTemplateLiteral(["protonic accelerator pack"])))) && property_get("questPAGhost") === "unstarted" && property_get("nextParanormalActivity") <= (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() && !preventEquip.includes(template_string_$item(src_outfit_templateObject28 || (src_outfit_templateObject28 = src_outfit_taggedTemplateLiteral(["protonic accelerator pack"]))))) {
        forceEquip.push(template_string_$item(src_outfit_templateObject29 || (src_outfit_templateObject29 = src_outfit_taggedTemplateLiteral(["protonic accelerator pack"]))));
      }
      if (lib_have(template_string_$item(src_outfit_templateObject30 || (src_outfit_templateObject30 = src_outfit_taggedTemplateLiteral(["mafia pointer finger ring"]))))) {
        if ((0,external_kolmafia_namespaceObject.myClass)() === $class(src_outfit_templateObject31 || (src_outfit_templateObject31 = src_outfit_taggedTemplateLiteral(["Seal Clubber"]))) && lib_have($skill(src_outfit_templateObject32 || (src_outfit_templateObject32 = src_outfit_taggedTemplateLiteral(["Furious Wallop"]))))) {
          forceEquip.push(template_string_$item(src_outfit_templateObject33 || (src_outfit_templateObject33 = src_outfit_taggedTemplateLiteral(["mafia pointer finger ring"]))));
        } else if (lib_have(template_string_$item(src_outfit_templateObject34 || (src_outfit_templateObject34 = src_outfit_taggedTemplateLiteral(["Operation Patriot Shield"])))) && (0,external_kolmafia_namespaceObject.myClass)() === $class(src_outfit_templateObject35 || (src_outfit_templateObject35 = src_outfit_taggedTemplateLiteral(["Turtle Tamer"])))) {
          forceEquip.push.apply(forceEquip, src_outfit_toConsumableArray(template_string_$items(src_outfit_templateObject36 || (src_outfit_templateObject36 = src_outfit_taggedTemplateLiteral(["Operation Patriot Shield, mafia pointer finger ring"])))));
        } else if (lib_have(template_string_$item(src_outfit_templateObject37 || (src_outfit_templateObject37 = src_outfit_taggedTemplateLiteral(["haiku katana"]))))) {
          forceEquip.push.apply(forceEquip, src_outfit_toConsumableArray(template_string_$items(src_outfit_templateObject38 || (src_outfit_templateObject38 = src_outfit_taggedTemplateLiteral(["haiku katana, mafia pointer finger ring"])))));
        } else if (lib_have(template_string_$item(src_outfit_templateObject39 || (src_outfit_templateObject39 = src_outfit_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"])))) && forceEquip.every(equipment => (0,external_kolmafia_namespaceObject.toSlot)(equipment) !== $slot(src_outfit_templateObject40 || (src_outfit_templateObject40 = src_outfit_taggedTemplateLiteral(["back"]))))) {
          var gun = lib_have(template_string_$item(src_outfit_templateObject41 || (src_outfit_templateObject41 = src_outfit_taggedTemplateLiteral(["love"])))) && meatFamiliar() === $familiar(src_outfit_templateObject42 || (src_outfit_templateObject42 = src_outfit_taggedTemplateLiteral(["Robortender"]))) ? template_string_$item(src_outfit_templateObject43 || (src_outfit_templateObject43 = src_outfit_taggedTemplateLiteral(["love"]))) : template_string_$item(src_outfit_templateObject44 || (src_outfit_templateObject44 = src_outfit_taggedTemplateLiteral(["ice nine"])));
          if (gun === template_string_$item(src_outfit_templateObject45 || (src_outfit_templateObject45 = src_outfit_taggedTemplateLiteral(["ice nine"]))) && !lib_have(template_string_$item(src_outfit_templateObject46 || (src_outfit_templateObject46 = src_outfit_taggedTemplateLiteral(["ice nine"]))))) {
            (0,external_kolmafia_namespaceObject.cliExecute)("refresh inventory");
            (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(src_outfit_templateObject47 || (src_outfit_templateObject47 = src_outfit_taggedTemplateLiteral(["ice nine"]))));
          }
          forceEquip.push.apply(forceEquip, [gun].concat(src_outfit_toConsumableArray(template_string_$items(src_outfit_templateObject48 || (src_outfit_templateObject48 = src_outfit_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape, mafia pointer finger ring"]))))));
        } else if (lib_have(template_string_$item(src_outfit_templateObject49 || (src_outfit_templateObject49 = src_outfit_taggedTemplateLiteral(["Operation Patriot Shield"]))))) {
          forceEquip.push.apply(forceEquip, src_outfit_toConsumableArray(template_string_$items(src_outfit_templateObject50 || (src_outfit_templateObject50 = src_outfit_taggedTemplateLiteral(["Operation Patriot Shield, mafia pointer finger ring"])))));
        }
      }
      if (getKramcoWandererChance() > 0.05 && lib_have(template_string_$item(outfit_templateObject51 || (outfit_templateObject51 = src_outfit_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) && forceEquip.every(equipment => (0,external_kolmafia_namespaceObject.toSlot)(equipment) !== $slot(outfit_templateObject52 || (outfit_templateObject52 = src_outfit_taggedTemplateLiteral(["off-hand"])))) && !preventEquip.includes(template_string_$item(outfit_templateObject53 || (outfit_templateObject53 = src_outfit_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))))) {
        forceEquip.push(template_string_$item(outfit_templateObject54 || (outfit_templateObject54 = src_outfit_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"]))));
      }
    }
  }
  var stickerSlots = $slots(outfit_templateObject55 || (outfit_templateObject55 = src_outfit_taggedTemplateLiteral(["sticker1, sticker2, sticker3"])));
  var UPC = template_string_$item(outfit_templateObject56 || (outfit_templateObject56 = src_outfit_taggedTemplateLiteral(["scratch 'n' sniff UPC sticker"])));
  if (embezzlerUp) {
    var currentWeapon = 25 * findLeprechaunMultiplier(meatFamiliar());
    var embezzlers = config_globalOptions.ascend ? Math.min(20, embezzlerCount() || digitizedMonstersRemaining()) : 20;
    var addedValueOfFullSword = embezzlers * ((75 - currentWeapon) * (750 + baseMeat)) / 100;
    if (addedValueOfFullSword > 3 * (0,external_kolmafia_namespaceObject.mallPrice)(UPC)) {
      var needed = 3 - stickerSlots.filter(sticker => (0,external_kolmafia_namespaceObject.equippedItem)(sticker) === UPC).length;
      if (needed) acquire(needed, UPC, addedValueOfFullSword / 3, false);
      useUPCs();
    }
  }
  if (stickerSlots.map(s => (0,external_kolmafia_namespaceObject.equippedItem)(s)).includes(template_string_$item.none)) {
    preventEquip.push.apply(preventEquip, src_outfit_toConsumableArray(template_string_$items(outfit_templateObject57 || (outfit_templateObject57 = src_outfit_taggedTemplateLiteral(["scratch 'n' sniff sword, scratch 'n' sniff crossbow"])))));
  }
  if ((0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(outfit_templateObject58 || (outfit_templateObject58 = src_outfit_taggedTemplateLiteral(["Obtuse Angel"])))) {
    forceEquip.push(template_string_$item(outfit_templateObject59 || (outfit_templateObject59 = src_outfit_taggedTemplateLiteral(["quake of arrows"]))));
    if (!lib_have(template_string_$item(outfit_templateObject60 || (outfit_templateObject60 = src_outfit_taggedTemplateLiteral(["quake of arrows"]))))) (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(outfit_templateObject61 || (outfit_templateObject61 = src_outfit_taggedTemplateLiteral(["quake of arrows"]))));
  }
  if (sea) {
    if (!(0,external_kolmafia_namespaceObject.myFamiliar)().underwater) {
      var familiarEquip = familiarWaterBreathingEquipment.find(item => lib_have(item));
      if (familiarEquip) forceEquip.push(familiarEquip);
    }
    var airEquip = waterBreathingEquipment.find(item => lib_have(item) && (0,external_kolmafia_namespaceObject.canEquip)(item));
    if (airEquip) forceEquip.push(airEquip);else parameters.push("sea");
  }
  if (embezzlerUp && (0,external_kolmafia_namespaceObject.myFamiliar)() !== $familiar(outfit_templateObject62 || (outfit_templateObject62 = src_outfit_taggedTemplateLiteral(["Pocket Professor"]))) && CombatLoversLocket_have() && !unlockedLocketMonsters().includes($monster(outfit_templateObject63 || (outfit_templateObject63 = src_outfit_taggedTemplateLiteral(["Knob Goblin Embezzler"]))))) {
    forceEquip.push(locket);
  }
  var bjornAlike = bestBjornalike(forceEquip);
  var compiledRequirements = (requirement !== null && requirement !== void 0 ? requirement : new Requirement([], {})).merge(new Requirement(["".concat(((embezzlerUp ? baseMeat + 750 : baseMeat) / 100).toFixed(2), " Meat Drop"), "".concat(embezzlerUp ? 0 : 0.72, " Item Drop")].concat(src_outfit_toConsumableArray(parameters)), {
    forceEquip: forceEquip,
    preventEquip: [].concat(src_outfit_toConsumableArray(preventEquip), src_outfit_toConsumableArray(embezzlerUp ? template_string_$items(outfit_templateObject64 || (outfit_templateObject64 = src_outfit_taggedTemplateLiteral(["cheap sunglasses"]))) : []), [bjornAlike === template_string_$item(outfit_templateObject65 || (outfit_templateObject65 = src_outfit_taggedTemplateLiteral(["Buddy Bjorn"]))) ? template_string_$item(outfit_templateObject66 || (outfit_templateObject66 = src_outfit_taggedTemplateLiteral(["Crown of Thrones"]))) : template_string_$item(outfit_templateObject67 || (outfit_templateObject67 = src_outfit_taggedTemplateLiteral(["Buddy Bjorn"])))]).filter(item => !forceEquip.includes(item)),
    bonusEquip: new Map([].concat(src_outfit_toConsumableArray(bonusGear(equipMode)), src_outfit_toConsumableArray(bjornAlike ? new Map([[bjornAlike, (!bjornChoice.dropPredicate || bjornChoice.dropPredicate() ? bjornChoice.meatVal() * bjornChoice.probability : 0) + valueBjornModifiers(equipMode, bjornChoice.modifier)]]) : []))),
    preventSlot: preventSlot
  }));
  var result = compiledRequirements.maximize();
  var missingEquips = () => {
    var _compiledRequirements;
    return ((_compiledRequirements = compiledRequirements.maximizeOptions.forceEquip) !== null && _compiledRequirements !== void 0 ? _compiledRequirements : []).filter(equipment => !(0,external_kolmafia_namespaceObject.haveEquipped)(equipment));
  };
  if (missingEquips().length > 0 || !result) {
    (0,external_kolmafia_namespaceObject.cliExecute)("refresh all");
    var newResult = new Requirement([], {
      forceUpdate: true
    }).merge(compiledRequirements).maximize();
    if (missingEquips().length > 0 || !newResult) {
      throw new Error("Maximizer failed to equip the following equipment: ".concat(missingEquips().map(equipment => equipment.name).join(", "), ".?"));
    }
  }
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject68 || (outfit_templateObject68 = src_outfit_taggedTemplateLiteral(["Buddy Bjorn"]))))) (0,external_kolmafia_namespaceObject.bjornifyFamiliar)(bjornChoice.familiar);
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject69 || (outfit_templateObject69 = src_outfit_taggedTemplateLiteral(["Crown of Thrones"]))))) (0,external_kolmafia_namespaceObject.enthroneFamiliar)(bjornChoice.familiar);
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject70 || (outfit_templateObject70 = src_outfit_taggedTemplateLiteral(["Snow Suit"])))) && property_get("snowsuit") !== "nose") (0,external_kolmafia_namespaceObject.cliExecute)("snowsuit nose");
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject71 || (outfit_templateObject71 = src_outfit_taggedTemplateLiteral(["unwrapped knock-off retro superhero cape"])))) && (property_get("retroCapeSuperhero") !== "robot" || property_get("retroCapeWashingInstructions") !== "kill")) {
    (0,external_kolmafia_namespaceObject.cliExecute)("retrocape robot kill");
  }
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject72 || (outfit_templateObject72 = src_outfit_taggedTemplateLiteral(["Jurassic Parka"])))) && property_get("parkaMode") !== "kachungasaur") {
    (0,external_kolmafia_namespaceObject.cliExecute)("parka kachungasaur");
  }
  if (sea && (0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(outfit_templateObject73 || (outfit_templateObject73 = src_outfit_taggedTemplateLiteral(["The Crown of Ed the Undying"]))))) (0,external_kolmafia_namespaceObject.cliExecute)("edpiece fish");
}
var waterBreathingEquipment = template_string_$items(outfit_templateObject74 || (outfit_templateObject74 = src_outfit_taggedTemplateLiteral(["The Crown of Ed the Undying, aerated diving helmet, crappy Mer-kin mask, Mer-kin gladiator mask, Mer-kin scholar mask, old SCUBA tank"])));
var familiarWaterBreathingEquipment = template_string_$items(outfit_templateObject75 || (outfit_templateObject75 = src_outfit_taggedTemplateLiteral(["das boot, little bitty bathysphere"])));
var cachedUsingPurse = null;
function usingPurse() {
  if (cachedUsingPurse === null) {
    cachedUsingPurse = (0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)() && (!lib_have(template_string_$item(outfit_templateObject76 || (outfit_templateObject76 = src_outfit_taggedTemplateLiteral(["latte lovers member's mug"])))) || !lib_have($familiar(outfit_templateObject77 || (outfit_templateObject77 = src_outfit_taggedTemplateLiteral(["Robortender"])))) && !lib_have($familiar(outfit_templateObject78 || (outfit_templateObject78 = src_outfit_taggedTemplateLiteral(["Hobo Monkey"])))) || !(0,external_kolmafia_namespaceObject.canAdventure)($location(outfit_templateObject79 || (outfit_templateObject79 = src_outfit_taggedTemplateLiteral(["The Black Forest"])))));
  }
  return cachedUsingPurse;
}
function useUPCs() {
  var UPC = template_string_$item(outfit_templateObject80 || (outfit_templateObject80 = src_outfit_taggedTemplateLiteral(["scratch 'n' sniff UPC sticker"])));
  if (template_string_$items(outfit_templateObject81 || (outfit_templateObject81 = src_outfit_taggedTemplateLiteral(["scratch 'n' sniff sword, scratch 'n' sniff crossbow"]))).every(i => !lib_have(i))) {
    (0,external_kolmafia_namespaceObject.visitUrl)("bedazzle.php?action=juststick&sticker=".concat((0,external_kolmafia_namespaceObject.toInt)(UPC), "&pwd"));
  }
  for (var slotNumber = 1; slotNumber <= 3; slotNumber++) {
    var slot = (0,external_kolmafia_namespaceObject.toSlot)("sticker".concat(slotNumber));
    var sticker = (0,external_kolmafia_namespaceObject.equippedItem)(slot);
    if (sticker === UPC) continue;
    (0,external_kolmafia_namespaceObject.visitUrl)("bedazzle.php");
    if (sticker !== template_string_$item.none) {
      (0,external_kolmafia_namespaceObject.visitUrl)("bedazzle.php?action=peel&pwd&slot=".concat(slotNumber));
    }
    (0,external_kolmafia_namespaceObject.visitUrl)("bedazzle.php?action=stick&pwd&slot=".concat(slotNumber, "&sticker=").concat((0,external_kolmafia_namespaceObject.toInt)(UPC)));
  }
}
;// CONCATENATED MODULE: ./src/familiar/dropFamiliars.ts
var dropFamiliars_templateObject, dropFamiliars_templateObject2, dropFamiliars_templateObject3, dropFamiliars_templateObject4, dropFamiliars_templateObject5, dropFamiliars_templateObject6, dropFamiliars_templateObject7, dropFamiliars_templateObject8, dropFamiliars_templateObject9, dropFamiliars_templateObject10, dropFamiliars_templateObject11, dropFamiliars_templateObject12, dropFamiliars_templateObject13, dropFamiliars_templateObject14, dropFamiliars_templateObject15, dropFamiliars_templateObject16, dropFamiliars_templateObject17, dropFamiliars_templateObject18, dropFamiliars_templateObject19, dropFamiliars_templateObject20, dropFamiliars_templateObject21, dropFamiliars_templateObject22, dropFamiliars_templateObject23, dropFamiliars_templateObject24, dropFamiliars_templateObject25, dropFamiliars_templateObject26, dropFamiliars_templateObject27, dropFamiliars_templateObject28, dropFamiliars_templateObject29, dropFamiliars_templateObject30, dropFamiliars_templateObject31, dropFamiliars_templateObject32, dropFamiliars_templateObject33, dropFamiliars_templateObject34, dropFamiliars_templateObject35, dropFamiliars_templateObject36, dropFamiliars_templateObject37, dropFamiliars_templateObject38, dropFamiliars_templateObject39, dropFamiliars_templateObject40, dropFamiliars_templateObject41, dropFamiliars_templateObject42, dropFamiliars_templateObject43, dropFamiliars_templateObject44, dropFamiliars_templateObject45, dropFamiliars_templateObject46, dropFamiliars_templateObject47, dropFamiliars_templateObject48, dropFamiliars_templateObject49, dropFamiliars_templateObject50, dropFamiliars_templateObject51, dropFamiliars_templateObject52, dropFamiliars_templateObject53, dropFamiliars_templateObject54, dropFamiliars_templateObject55, dropFamiliars_templateObject56, dropFamiliars_templateObject57, dropFamiliars_templateObject58, dropFamiliars_templateObject59;
function dropFamiliars_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function dropFamiliars_toConsumableArray(arr) { return dropFamiliars_arrayWithoutHoles(arr) || dropFamiliars_iterableToArray(arr) || dropFamiliars_unsupportedIterableToArray(arr) || dropFamiliars_nonIterableSpread(); }
function dropFamiliars_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function dropFamiliars_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dropFamiliars_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dropFamiliars_arrayLikeToArray(o, minLen); }
function dropFamiliars_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function dropFamiliars_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return dropFamiliars_arrayLikeToArray(arr); }
function dropFamiliars_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }



function expectedTurnsValue(expected, index) {
  return Array.isArray(expected) ? expected[index] : expected(index);
}
function dropValue(drop) {
  return drop instanceof external_kolmafia_namespaceObject.Item ? garboValue(drop) : garboAverageValue.apply(void 0, dropFamiliars_toConsumableArray(drop));
}
function valueStandardDropFamiliar(_ref) {
  var _additionalValue;
  var familiar = _ref.familiar,
    expected = _ref.expected,
    drop = _ref.drop,
    additionalValue = _ref.additionalValue;
  var expectedTurns = expectedTurnsValue(expected, familiar.dropsToday) || Infinity;
  var expectedValue = dropValue(drop) / expectedTurns + ((_additionalValue = additionalValue === null || additionalValue === void 0 ? void 0 : additionalValue()) !== null && _additionalValue !== void 0 ? _additionalValue : 0);
  return {
    familiar: familiar,
    expectedValue: expectedValue,
    leprechaunMultiplier: findLeprechaunMultiplier(familiar),
    limit: "drops"
  };
}
var rotatingFamiliars = [{
  familiar: $familiar(dropFamiliars_templateObject || (dropFamiliars_templateObject = dropFamiliars_taggedTemplateLiteral(["Fist Turkey"]))),
  expected: [3.91, 4.52, 4.52, 5.29, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject2 || (dropFamiliars_templateObject2 = dropFamiliars_taggedTemplateLiteral(["Ambitious Turkey"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject3 || (dropFamiliars_templateObject3 = dropFamiliars_taggedTemplateLiteral(["Llama Lama"]))),
  expected: [3.42, 3.91, 4.52, 5.29, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject4 || (dropFamiliars_templateObject4 = dropFamiliars_taggedTemplateLiteral(["llama lama gong"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject5 || (dropFamiliars_templateObject5 = dropFamiliars_taggedTemplateLiteral(["Astral Badger"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject6 || (dropFamiliars_templateObject6 = dropFamiliars_taggedTemplateLiteral(["astral mushroom"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject7 || (dropFamiliars_templateObject7 = dropFamiliars_taggedTemplateLiteral(["Li'l Xenomorph"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject8 || (dropFamiliars_templateObject8 = dropFamiliars_taggedTemplateLiteral(["transporter transponder"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject9 || (dropFamiliars_templateObject9 = dropFamiliars_taggedTemplateLiteral(["Rogue Program"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject10 || (dropFamiliars_templateObject10 = dropFamiliars_taggedTemplateLiteral(["Game Grid token"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject11 || (dropFamiliars_templateObject11 = dropFamiliars_taggedTemplateLiteral(["Bloovian Groose"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject12 || (dropFamiliars_templateObject12 = dropFamiliars_taggedTemplateLiteral(["groose grease"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject13 || (dropFamiliars_templateObject13 = dropFamiliars_taggedTemplateLiteral(["Baby Sandworm"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject14 || (dropFamiliars_templateObject14 = dropFamiliars_taggedTemplateLiteral(["agua de vida"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject15 || (dropFamiliars_templateObject15 = dropFamiliars_taggedTemplateLiteral(["Green Pixie"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject16 || (dropFamiliars_templateObject16 = dropFamiliars_taggedTemplateLiteral(["tiny bottle of absinthe"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject17 || (dropFamiliars_templateObject17 = dropFamiliars_taggedTemplateLiteral(["Blavious Kloop"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject18 || (dropFamiliars_templateObject18 = dropFamiliars_taggedTemplateLiteral(["devilish folio"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject19 || (dropFamiliars_templateObject19 = dropFamiliars_taggedTemplateLiteral(["Galloping Grill"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject20 || (dropFamiliars_templateObject20 = dropFamiliars_taggedTemplateLiteral(["hot ashes"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject21 || (dropFamiliars_templateObject21 = dropFamiliars_taggedTemplateLiteral(["Grim Brother"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject22 || (dropFamiliars_templateObject22 = dropFamiliars_taggedTemplateLiteral(["grim fairy tale"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject23 || (dropFamiliars_templateObject23 = dropFamiliars_taggedTemplateLiteral(["Golden Monkey"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject24 || (dropFamiliars_templateObject24 = dropFamiliars_taggedTemplateLiteral(["powdered gold"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject25 || (dropFamiliars_templateObject25 = dropFamiliars_taggedTemplateLiteral(["Unconscious Collective"]))),
  expected: [3.03, 3.42, 3.91, 4.52, 5.29],
  drop: template_string_$item(dropFamiliars_templateObject26 || (dropFamiliars_templateObject26 = dropFamiliars_taggedTemplateLiteral(["Unconscious Collective Dream Jar"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject27 || (dropFamiliars_templateObject27 = dropFamiliars_taggedTemplateLiteral(["Ms. Puck Man"]))),
  expected: Array($familiar(dropFamiliars_templateObject28 || (dropFamiliars_templateObject28 = dropFamiliars_taggedTemplateLiteral(["Ms. Puck Man"]))).dropsLimit).fill(12.85),
  drop: template_string_$item(dropFamiliars_templateObject29 || (dropFamiliars_templateObject29 = dropFamiliars_taggedTemplateLiteral(["power pill"]))),
  additionalValue: () => garboValue(template_string_$item(dropFamiliars_templateObject30 || (dropFamiliars_templateObject30 = dropFamiliars_taggedTemplateLiteral(["yellow pixel"]))))
}, {
  familiar: $familiar(dropFamiliars_templateObject31 || (dropFamiliars_templateObject31 = dropFamiliars_taggedTemplateLiteral(["Puck Man"]))),
  expected: Array($familiar(dropFamiliars_templateObject32 || (dropFamiliars_templateObject32 = dropFamiliars_taggedTemplateLiteral(["Puck Man"]))).dropsLimit).fill(12.85),
  drop: template_string_$item(dropFamiliars_templateObject33 || (dropFamiliars_templateObject33 = dropFamiliars_taggedTemplateLiteral(["power pill"]))),
  additionalValue: () => garboValue(template_string_$item(dropFamiliars_templateObject34 || (dropFamiliars_templateObject34 = dropFamiliars_taggedTemplateLiteral(["yellow pixel"]))))
}, {
  familiar: $familiar(dropFamiliars_templateObject35 || (dropFamiliars_templateObject35 = dropFamiliars_taggedTemplateLiteral(["Adventurous Spelunker"]))),
  expected: [7.0],
  drop: template_string_$item(dropFamiliars_templateObject36 || (dropFamiliars_templateObject36 = dropFamiliars_taggedTemplateLiteral(["Tales of Spelunking"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject37 || (dropFamiliars_templateObject37 = dropFamiliars_taggedTemplateLiteral(["Angry Jung Man"]))),
  expected: [30.0],
  drop: template_string_$item(dropFamiliars_templateObject38 || (dropFamiliars_templateObject38 = dropFamiliars_taggedTemplateLiteral(["psychoanalytic jar"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject39 || (dropFamiliars_templateObject39 = dropFamiliars_taggedTemplateLiteral(["Grimstone Golem"]))),
  expected: [45.0],
  drop: template_string_$item(dropFamiliars_templateObject40 || (dropFamiliars_templateObject40 = dropFamiliars_taggedTemplateLiteral(["grimstone mask"])))
}, {
  familiar: $familiar(dropFamiliars_templateObject41 || (dropFamiliars_templateObject41 = dropFamiliars_taggedTemplateLiteral(["Cookbookbat"]))),
  expected: [33.0],
  drop: [template_string_$item(dropFamiliars_templateObject42 || (dropFamiliars_templateObject42 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: Deep Dish of Legend"]))), template_string_$item(dropFamiliars_templateObject43 || (dropFamiliars_templateObject43 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: Pizza of Legend"]))), template_string_$item(dropFamiliars_templateObject44 || (dropFamiliars_templateObject44 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: Calzone of Legend"]))), template_string_$item(dropFamiliars_templateObject45 || (dropFamiliars_templateObject45 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: plain calzone"]))), template_string_$item(dropFamiliars_templateObject46 || (dropFamiliars_templateObject46 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: roasted vegetable focaccia"]))), template_string_$item(dropFamiliars_templateObject47 || (dropFamiliars_templateObject47 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: baked veggie ricotta"]))), template_string_$item(dropFamiliars_templateObject48 || (dropFamiliars_templateObject48 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: roasted vegetable of J."]))), template_string_$item(dropFamiliars_templateObject49 || (dropFamiliars_templateObject49 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: Pete's rich ricotta"]))), template_string_$item(dropFamiliars_templateObject50 || (dropFamiliars_templateObject50 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: Boris's bread"]))), template_string_$item(dropFamiliars_templateObject51 || (dropFamiliars_templateObject51 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: Boris's beer"]))), template_string_$item(dropFamiliars_templateObject52 || (dropFamiliars_templateObject52 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: honey bun of Boris"]))), template_string_$item(dropFamiliars_templateObject53 || (dropFamiliars_templateObject53 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: ratatouille de Jarlsberg"]))), template_string_$item(dropFamiliars_templateObject54 || (dropFamiliars_templateObject54 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: Jarlsberg's vegetable soup"]))), template_string_$item(dropFamiliars_templateObject55 || (dropFamiliars_templateObject55 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: Pete's wily whey bar"]))), template_string_$item(dropFamiliars_templateObject56 || (dropFamiliars_templateObject56 = dropFamiliars_taggedTemplateLiteral(["Recipe of Before Yore: St. Pete's sneaky smoothie"])))],
  additionalValue: () => 3 * garboAverageValue.apply(void 0, dropFamiliars_toConsumableArray(template_string_$items(dropFamiliars_templateObject57 || (dropFamiliars_templateObject57 = dropFamiliars_taggedTemplateLiteral(["Vegetable of Jarlsberg, Yeast of Boris, St. Sneaky Pete's Whey"]))))) / 11
}, {
  familiar: $familiar(dropFamiliars_templateObject58 || (dropFamiliars_templateObject58 = dropFamiliars_taggedTemplateLiteral(["Hobo in Sheep's Clothing"]))),
  expected: i => 10 * i + 10,
  // faster with half-height cigar
  drop: template_string_$item(dropFamiliars_templateObject59 || (dropFamiliars_templateObject59 = dropFamiliars_taggedTemplateLiteral(["grubby wool"])))
}];
function getDropFamiliars() {
  return rotatingFamiliars.map(valueStandardDropFamiliar).filter(_ref2 => {
    var familiar = _ref2.familiar,
      expectedValue = _ref2.expectedValue,
      leprechaunMultiplier = _ref2.leprechaunMultiplier;
    return lib_have(familiar) && (expectedValue || leprechaunMultiplier);
  });
}
function getAllDrops(fam) {
  var target = rotatingFamiliars.find(_ref3 => {
    var familiar = _ref3.familiar;
    return familiar === fam;
  });
  if (!lib_have(fam) || !target) return [];
  var expected = target.expected,
    drop = target.drop,
    additionalValue = target.additionalValue;
  var current = fam.dropsToday;
  var returnValue = [];
  var length = Array.isArray(expected) ? expected.length : 11; // 11 seems a reasonable max
  for (var i = current; i < length; i++) {
    var _additionalValue2;
    var turns = expectedTurnsValue(target.expected, i);
    returnValue.push({
      expectedValue: dropValue(drop) / turns + ((_additionalValue2 = additionalValue === null || additionalValue === void 0 ? void 0 : additionalValue()) !== null && _additionalValue2 !== void 0 ? _additionalValue2 : 0),
      expectedTurns: turns
    });
  }
  return returnValue;
}
;// CONCATENATED MODULE: ./src/familiar/experienceFamiliars.ts
var experienceFamiliars_templateObject, experienceFamiliars_templateObject2, experienceFamiliars_templateObject3;
function experienceFamiliars_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var experienceFamiliars = [{
  familiar: $familiar(experienceFamiliars_templateObject || (experienceFamiliars_templateObject = experienceFamiliars_taggedTemplateLiteral(["Pocket Professor"]))),
  used: "_thesisDelivered",
  useValue: 11 * property_get("valueOfAdventure"),
  baseExp: 200
}, {
  familiar: $familiar(experienceFamiliars_templateObject2 || (experienceFamiliars_templateObject2 = experienceFamiliars_taggedTemplateLiteral(["Grey Goose"]))),
  used: "_meatifyMatterUsed",
  useValue: Math.pow(15, 4),
  baseExp: 25
}];
function valueExperienceFamiliar(_ref) {
  var familiar = _ref.familiar,
    useValue = _ref.useValue,
    baseExp = _ref.baseExp;
  var currentExp = familiar.experience || (lib_have($familiar(experienceFamiliars_templateObject3 || (experienceFamiliars_templateObject3 = experienceFamiliars_taggedTemplateLiteral(["Shorter-Order Cook"])))) ? 100 : 0);
  var experienceNeeded = 400 - (config_globalOptions.ascend ? currentExp : baseExp);
  var estimatedExperience = 12;
  return {
    familiar: familiar,
    expectedValue: useValue / (experienceNeeded / estimatedExperience),
    leprechaunMultiplier: findLeprechaunMultiplier(familiar),
    limit: "experience"
  };
}
function getExperienceFamiliars() {
  return experienceFamiliars.filter(_ref2 => {
    var used = _ref2.used,
      familiar = _ref2.familiar;
    return lib_have(familiar) && !property_get(used) && familiar.experience < 400;
  }).map(valueExperienceFamiliar);
}
function getExperienceFamiliarLimit(fam) {
  var target = experienceFamiliars.find(_ref3 => {
    var familiar = _ref3.familiar;
    return familiar === fam;
  });
  if (!lib_have(fam) || !target) return 0;
  return (400 - familiar.experience) / 5;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/Robortender.js
var Robortender_templateObject, Robortender_templateObject2, Robortender_templateObject3, Robortender_templateObject4, Robortender_templateObject5, Robortender_templateObject6, Robortender_templateObject7, Robortender_templateObject8, Robortender_templateObject9, Robortender_templateObject10, Robortender_templateObject11, Robortender_templateObject12, Robortender_templateObject13, Robortender_templateObject14, Robortender_templateObject15, Robortender_templateObject16, Robortender_templateObject17, Robortender_templateObject18, Robortender_templateObject19, Robortender_templateObject20, Robortender_templateObject21, Robortender_templateObject22, Robortender_templateObject23, Robortender_templateObject24, Robortender_templateObject25, Robortender_templateObject26, Robortender_templateObject27, Robortender_templateObject28, Robortender_templateObject29, Robortender_templateObject30, Robortender_templateObject31, Robortender_templateObject32, Robortender_templateObject33, Robortender_templateObject34, Robortender_templateObject35, Robortender_templateObject36, Robortender_templateObject37;
function Robortender_toConsumableArray(arr) { return Robortender_arrayWithoutHoles(arr) || Robortender_iterableToArray(arr) || Robortender_unsupportedIterableToArray(arr) || Robortender_nonIterableSpread(); }
function Robortender_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Robortender_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Robortender_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Robortender_arrayLikeToArray(o, minLen); }
function Robortender_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Robortender_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Robortender_arrayLikeToArray(arr); }
function Robortender_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Robortender_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



/**
 * The Robortender itself
 */
var Robortender_familiar = $familiar(Robortender_templateObject || (Robortender_templateObject = Robortender_taggedTemplateLiteral(["Robortender"])));
/**
 * @returns Whether you have the Robortender in your terrarium/available
 */
function Robortender_have() {
  return (0,external_kolmafia_namespaceObject.haveFamiliar)(Robortender_familiar);
}
var phylumDrops = new Map([[$phylum(Robortender_templateObject2 || (Robortender_templateObject2 = Robortender_taggedTemplateLiteral(["Bug"]))), template_string_$item(Robortender_templateObject3 || (Robortender_templateObject3 = Robortender_taggedTemplateLiteral(["pickled grasshopper"])))],
// bottle of anís
[$phylum(Robortender_templateObject4 || (Robortender_templateObject4 = Robortender_taggedTemplateLiteral(["Constellation"]))), external_kolmafia_namespaceObject.Item.get(9348)], [$phylum(Robortender_templateObject5 || (Robortender_templateObject5 = Robortender_taggedTemplateLiteral(["Demon"]))), template_string_$item(Robortender_templateObject6 || (Robortender_templateObject6 = Robortender_taggedTemplateLiteral(["bottle of novelty hot sauce"])))], [$phylum(Robortender_templateObject7 || (Robortender_templateObject7 = Robortender_taggedTemplateLiteral(["Elemental"]))), template_string_$item(Robortender_templateObject8 || (Robortender_templateObject8 = Robortender_taggedTemplateLiteral(["elemental sugarcube"])))], [$phylum(Robortender_templateObject9 || (Robortender_templateObject9 = Robortender_taggedTemplateLiteral(["Elf"]))), template_string_$item(Robortender_templateObject10 || (Robortender_templateObject10 = Robortender_taggedTemplateLiteral(["peppermint sprig"])))], [$phylum(Robortender_templateObject11 || (Robortender_templateObject11 = Robortender_taggedTemplateLiteral(["Fish"]))), template_string_$item(Robortender_templateObject12 || (Robortender_templateObject12 = Robortender_taggedTemplateLiteral(["bottle of clam juice"])))], [$phylum(Robortender_templateObject13 || (Robortender_templateObject13 = Robortender_taggedTemplateLiteral(["Goblin"]))), template_string_$item(Robortender_templateObject14 || (Robortender_templateObject14 = Robortender_taggedTemplateLiteral(["cocktail mushroom"])))], [$phylum(Robortender_templateObject15 || (Robortender_templateObject15 = Robortender_taggedTemplateLiteral(["Hippy"]))), template_string_$item(Robortender_templateObject16 || (Robortender_templateObject16 = Robortender_taggedTemplateLiteral(["shot of granola liqueur"])))], [$phylum(Robortender_templateObject17 || (Robortender_templateObject17 = Robortender_taggedTemplateLiteral(["Hobo"]))), template_string_$item(Robortender_templateObject18 || (Robortender_templateObject18 = Robortender_taggedTemplateLiteral(["can of cherry-flavored sterno"])))], [$phylum(Robortender_templateObject19 || (Robortender_templateObject19 = Robortender_taggedTemplateLiteral(["Horror"]))), template_string_$item(Robortender_templateObject20 || (Robortender_templateObject20 = Robortender_taggedTemplateLiteral(["lump of black ichor"])))], [$phylum(Robortender_templateObject21 || (Robortender_templateObject21 = Robortender_taggedTemplateLiteral(["Humanoid"]))), template_string_$item(Robortender_templateObject22 || (Robortender_templateObject22 = Robortender_taggedTemplateLiteral(["bottle of gregnadigne"])))],
// bottle of Crème de Fugu
[$phylum(Robortender_templateObject23 || (Robortender_templateObject23 = Robortender_taggedTemplateLiteral(["Mer-kin"]))), external_kolmafia_namespaceObject.Item.get(9358)], [$phylum(Robortender_templateObject24 || (Robortender_templateObject24 = Robortender_taggedTemplateLiteral(["Orc"]))), template_string_$item(Robortender_templateObject25 || (Robortender_templateObject25 = Robortender_taggedTemplateLiteral(["baby oil shooter"])))], [$phylum(Robortender_templateObject26 || (Robortender_templateObject26 = Robortender_taggedTemplateLiteral(["Penguin"]))), template_string_$item(Robortender_templateObject27 || (Robortender_templateObject27 = Robortender_taggedTemplateLiteral(["fish head"])))], [$phylum(Robortender_templateObject28 || (Robortender_templateObject28 = Robortender_taggedTemplateLiteral(["Pirate"]))), template_string_$item(Robortender_templateObject29 || (Robortender_templateObject29 = Robortender_taggedTemplateLiteral(["limepatch"])))], [$phylum(Robortender_templateObject30 || (Robortender_templateObject30 = Robortender_taggedTemplateLiteral(["Plant"]))), template_string_$item(Robortender_templateObject31 || (Robortender_templateObject31 = Robortender_taggedTemplateLiteral(["pile of dirt"])))], [$phylum(Robortender_templateObject32 || (Robortender_templateObject32 = Robortender_taggedTemplateLiteral(["Slime"]))), template_string_$item(Robortender_templateObject33 || (Robortender_templateObject33 = Robortender_taggedTemplateLiteral(["slime shooter"])))], [$phylum(Robortender_templateObject34 || (Robortender_templateObject34 = Robortender_taggedTemplateLiteral(["Weird"]))), template_string_$item(Robortender_templateObject35 || (Robortender_templateObject35 = Robortender_taggedTemplateLiteral(["imaginary lemon"])))]]);
/**
 *
 * @param target The phylum or monster you want to know the robortender drop of
 * @returns The robortender drop associated with that phylum or monster
 */
function dropFrom(target) {
  var _phylumDrops$get;
  var phylum = target instanceof external_kolmafia_namespaceObject.Monster ? target.phylum : target;
  return (_phylumDrops$get = phylumDrops.get(phylum)) !== null && _phylumDrops$get !== void 0 ? _phylumDrops$get : template_string_$item.none;
}
/**
 * Determines the probability of getting a robortender drop based on number of drops received
 * @param dropNumber The number of drops to assume you've already received; defaults to mafia's tracked amount
 * @returns The probability of getting a robort drop
 */
function dropChance() {
  var _dropNumber;
  var dropNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : property_get("_roboDrops");
  return (_dropNumber = [1, 0.5, 0.4, 0.4, 0.4, 0.3, 0.3, 0.3][dropNumber]) !== null && _dropNumber !== void 0 ? _dropNumber : 0.2;
}
var minorDrinks = template_string_$items(Robortender_templateObject36 || (Robortender_templateObject36 = Robortender_taggedTemplateLiteral(["literal grasshopper, double entendre, Phlegethon, Siberian sunrise, mentholated wine, low tide martini, shroomtini, morning dew, whiskey squeeze, great old fashioned, Gnomish sagngria, vodka stinger, extremely slippery nipple, piscatini, Churchill, soilzerac, London frog, nothingtini"])));
var majorDrinks = template_string_$items(Robortender_templateObject37 || (Robortender_templateObject37 = Robortender_taggedTemplateLiteral(["eighth plague, single entendre, reverse Tantalus, elemental caipiroska, Feliz Navidad, Bloody Nora, moreltini, hell in a bucket, Newark, R'lyeh, Gnollish sangria, vodka barracuda, Mysterious Island iced tea, drive-by shooting, gunner's daughter, dirt julep, Simepore slime, Phil Collins"])));
var drinks = [].concat(Robortender_toConsumableArray(minorDrinks), Robortender_toConsumableArray(majorDrinks));
/**
 * @returns An array consisting of the drinks you've fed your robortender today.
 */
function currentDrinks() {
  var pref = property_get("_roboDrinks");
  if (!pref) return [];
  return pref.split(",").filter(x => x.trim()).map(name => (0,external_kolmafia_namespaceObject.toItem)(name)).filter(drink => drinks.includes(drink));
}
/**
 * @param beverage A robortender-consumable drink of choice (i.e. Drive-By Shooting, Single Entendre, etc)
 * @returns A boolean; if true, the user's robortender has drunk that drink after execution. If false, it has not. This ALSO returns false if the user has not passed the function a robortender-consumable drink. If the user does not already have the beverage in their inventory, this function will not purchase the requested for you.
 */
function feed(beverage) {
  if (currentDrinks().includes(beverage)) return true;
  if (currentDrinks().length >= 5) return false;
  if (!drinks.includes(beverage)) return false;
  if (!(0,external_kolmafia_namespaceObject.itemAmount)(beverage)) return false;
  if (!Robortender_have()) return false;
  var priorFamiliar = (0,external_kolmafia_namespaceObject.myFamiliar)();
  (0,external_kolmafia_namespaceObject.useFamiliar)(Robortender_familiar); // must equip Robortender to feed it
  (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?action=robooze&which=1&whichitem=".concat((0,external_kolmafia_namespaceObject.toInt)(beverage)));
  (0,external_kolmafia_namespaceObject.useFamiliar)(priorFamiliar);
  return currentDrinks().includes(beverage);
}
;// CONCATENATED MODULE: ./src/familiar/constantValueFamiliars.ts
var constantValueFamiliars_templateObject, constantValueFamiliars_templateObject2, constantValueFamiliars_templateObject3, constantValueFamiliars_templateObject4, constantValueFamiliars_templateObject5, constantValueFamiliars_templateObject6, constantValueFamiliars_templateObject7, constantValueFamiliars_templateObject8, constantValueFamiliars_templateObject9, constantValueFamiliars_templateObject10, constantValueFamiliars_templateObject11, constantValueFamiliars_templateObject12, constantValueFamiliars_templateObject13, constantValueFamiliars_templateObject14, constantValueFamiliars_templateObject15, constantValueFamiliars_templateObject16, constantValueFamiliars_templateObject17, constantValueFamiliars_templateObject18, constantValueFamiliars_templateObject19, constantValueFamiliars_templateObject20, constantValueFamiliars_templateObject21, constantValueFamiliars_templateObject22, constantValueFamiliars_templateObject23, constantValueFamiliars_templateObject24, constantValueFamiliars_templateObject25, constantValueFamiliars_templateObject26;
function constantValueFamiliars_toConsumableArray(arr) { return constantValueFamiliars_arrayWithoutHoles(arr) || constantValueFamiliars_iterableToArray(arr) || constantValueFamiliars_unsupportedIterableToArray(arr) || constantValueFamiliars_nonIterableSpread(); }
function constantValueFamiliars_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function constantValueFamiliars_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return constantValueFamiliars_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return constantValueFamiliars_arrayLikeToArray(o, minLen); }
function constantValueFamiliars_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function constantValueFamiliars_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return constantValueFamiliars_arrayLikeToArray(arr); }
function constantValueFamiliars_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function constantValueFamiliars_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var bestAlternative = modifier_get("Meat Drop", template_string_$item(constantValueFamiliars_templateObject || (constantValueFamiliars_templateObject = constantValueFamiliars_taggedTemplateLiteral(["amulet coin"]))));
var standardFamiliars = [{
  familiar: $familiar(constantValueFamiliars_templateObject2 || (constantValueFamiliars_templateObject2 = constantValueFamiliars_taggedTemplateLiteral(["Obtuse Angel"]))),
  value: () => 0.02 * garboValue(template_string_$item(constantValueFamiliars_templateObject3 || (constantValueFamiliars_templateObject3 = constantValueFamiliars_taggedTemplateLiteral(["time's arrow"]))))
}, {
  familiar: $familiar(constantValueFamiliars_templateObject4 || (constantValueFamiliars_templateObject4 = constantValueFamiliars_taggedTemplateLiteral(["Stocking Mimic"]))),
  value: () => garboAverageValue.apply(void 0, constantValueFamiliars_toConsumableArray(template_string_$items(constantValueFamiliars_templateObject5 || (constantValueFamiliars_templateObject5 = constantValueFamiliars_taggedTemplateLiteral(["Polka Pop, BitterSweetTarts, Piddles"]))))) / 6 -
  // We can't equip an amulet coin if we equip the bag of many confections
  bestAlternative * baseMeat / 100 + (1 / 3 + (lib_have(template_string_$effect(constantValueFamiliars_templateObject6 || (constantValueFamiliars_templateObject6 = constantValueFamiliars_taggedTemplateLiteral(["Jingle Jangle Jingle"])))) ? 0.1 : 0)) * ((0,external_kolmafia_namespaceObject.familiarWeight)($familiar(constantValueFamiliars_templateObject7 || (constantValueFamiliars_templateObject7 = constantValueFamiliars_taggedTemplateLiteral(["Stocking Mimic"])))) + (0,external_kolmafia_namespaceObject.weightAdjustment)())
}, {
  familiar: $familiar(constantValueFamiliars_templateObject8 || (constantValueFamiliars_templateObject8 = constantValueFamiliars_taggedTemplateLiteral(["Shorter-Order Cook"]))),
  value: () => garboAverageValue.apply(void 0, constantValueFamiliars_toConsumableArray(template_string_$items(constantValueFamiliars_templateObject9 || (constantValueFamiliars_templateObject9 = constantValueFamiliars_taggedTemplateLiteral(["short beer, short stack of pancakes, short stick of butter, short glass of water, short white"]))))) / 11 // 9 with blue plate
}, {
  familiar: $familiar(constantValueFamiliars_templateObject10 || (constantValueFamiliars_templateObject10 = constantValueFamiliars_taggedTemplateLiteral(["Robortender"]))),
  value: () => garboValue(template_string_$item(constantValueFamiliars_templateObject11 || (constantValueFamiliars_templateObject11 = constantValueFamiliars_taggedTemplateLiteral(["elemental sugarcube"])))) / 5 + (currentDrinks().includes(template_string_$item(constantValueFamiliars_templateObject12 || (constantValueFamiliars_templateObject12 = constantValueFamiliars_taggedTemplateLiteral(["Feliz Navidad"])))) ? property_get("garbo_felizValue", 0) * 0.25 : 0) + (currentDrinks().includes(template_string_$item(constantValueFamiliars_templateObject13 || (constantValueFamiliars_templateObject13 = constantValueFamiliars_taggedTemplateLiteral(["Newark"])))) ? property_get("garbo_newarkValue", 0) * 0.25 : 0)
}, {
  familiar: $familiar(constantValueFamiliars_templateObject14 || (constantValueFamiliars_templateObject14 = constantValueFamiliars_taggedTemplateLiteral(["Twitching Space Critter"]))),
  // Item is ludicrously overvalued and incredibly low-volume.
  // We can remove this cap once the price reaches a lower equilibrium
  // we probably won't, but we can.
  value: () => Math.min(garboValue(template_string_$item(constantValueFamiliars_templateObject15 || (constantValueFamiliars_templateObject15 = constantValueFamiliars_taggedTemplateLiteral(["twitching space egg"])))) * 0.0002, 690)
}, {
  familiar: $familiar(constantValueFamiliars_templateObject16 || (constantValueFamiliars_templateObject16 = constantValueFamiliars_taggedTemplateLiteral(["Hobo Monkey"]))),
  value: () => 75
}, {
  familiar: $familiar(constantValueFamiliars_templateObject17 || (constantValueFamiliars_templateObject17 = constantValueFamiliars_taggedTemplateLiteral(["Trick-or-Treating Tot"]))),
  // This is the value of getting a pirate costume over getting an amulet coin or whatever
  value: () => lib_have(template_string_$item(constantValueFamiliars_templateObject18 || (constantValueFamiliars_templateObject18 = constantValueFamiliars_taggedTemplateLiteral(["li'l pirate costume"])))) ? baseMeat * (300 - bestAlternative) / 100 : 0
}, {
  familiar: $familiar(constantValueFamiliars_templateObject19 || (constantValueFamiliars_templateObject19 = constantValueFamiliars_taggedTemplateLiteral(["Rockin' Robin"]))),
  value: () => garboValue(template_string_$item(constantValueFamiliars_templateObject20 || (constantValueFamiliars_templateObject20 = constantValueFamiliars_taggedTemplateLiteral(["robin's egg"])))) / utils_clamp(30 - property_get("rockinRobinProgress"), 1, 30)
}, {
  familiar: $familiar(constantValueFamiliars_templateObject21 || (constantValueFamiliars_templateObject21 = constantValueFamiliars_taggedTemplateLiteral(["Optimistic Candle"]))),
  value: () => garboValue(template_string_$item(constantValueFamiliars_templateObject22 || (constantValueFamiliars_templateObject22 = constantValueFamiliars_taggedTemplateLiteral(["glob of melted wax"])))) / utils_clamp(30 - property_get("optimisticCandleProgress"), 1, 30)
}, {
  familiar: $familiar(constantValueFamiliars_templateObject23 || (constantValueFamiliars_templateObject23 = constantValueFamiliars_taggedTemplateLiteral(["Garbage Fire"]))),
  value: () => garboAverageValue.apply(void 0, constantValueFamiliars_toConsumableArray(template_string_$items(constantValueFamiliars_templateObject24 || (constantValueFamiliars_templateObject24 = constantValueFamiliars_taggedTemplateLiteral(["burning newspaper, extra-toasted half sandwich, mulled hobo wine"]))))) / utils_clamp(30 - property_get("garbageFireProgress"), 1, 30)
}, {
  familiar: $familiar(constantValueFamiliars_templateObject25 || (constantValueFamiliars_templateObject25 = constantValueFamiliars_taggedTemplateLiteral(["Cookbookbat"]))),
  value: () => 3 * garboAverageValue.apply(void 0, constantValueFamiliars_toConsumableArray(template_string_$items(constantValueFamiliars_templateObject26 || (constantValueFamiliars_templateObject26 = constantValueFamiliars_taggedTemplateLiteral(["Vegetable of Jarlsberg, Yeast of Boris, St. Sneaky Pete's Whey"]))))) / 11
}];
function getConstantValueFamiliars() {
  return standardFamiliars.filter(_ref => {
    var familiar = _ref.familiar;
    return lib_have(familiar);
  }).map(_ref2 => {
    var familiar = _ref2.familiar,
      value = _ref2.value;
    return {
      familiar: familiar,
      expectedValue: value(),
      leprechaunMultiplier: findLeprechaunMultiplier(familiar),
      limit: "none"
    };
  });
}
;// CONCATENATED MODULE: ./src/familiar/freeFightFamiliar.ts
var freeFightFamiliar_templateObject, freeFightFamiliar_templateObject2, freeFightFamiliar_templateObject3, freeFightFamiliar_templateObject4, freeFightFamiliar_templateObject5, freeFightFamiliar_templateObject6, freeFightFamiliar_templateObject7, freeFightFamiliar_templateObject8, freeFightFamiliar_templateObject9;
function freeFightFamiliar_toConsumableArray(arr) { return freeFightFamiliar_arrayWithoutHoles(arr) || freeFightFamiliar_iterableToArray(arr) || freeFightFamiliar_unsupportedIterableToArray(arr) || freeFightFamiliar_nonIterableSpread(); }
function freeFightFamiliar_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function freeFightFamiliar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return freeFightFamiliar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return freeFightFamiliar_arrayLikeToArray(o, minLen); }
function freeFightFamiliar_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function freeFightFamiliar_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return freeFightFamiliar_arrayLikeToArray(arr); }
function freeFightFamiliar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function freeFightFamiliar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function freeFightFamiliar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? freeFightFamiliar_ownKeys(Object(source), !0).forEach(function (key) { freeFightFamiliar_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : freeFightFamiliar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function freeFightFamiliar_defineProperty(obj, key, value) { key = freeFightFamiliar_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function freeFightFamiliar_toPropertyKey(arg) { var key = freeFightFamiliar_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function freeFightFamiliar_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function freeFightFamiliar_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }









var DEFAULT_MENU_OPTIONS = {
  canChooseMacro: true,
  location: $location(freeFightFamiliar_templateObject || (freeFightFamiliar_templateObject = freeFightFamiliar_taggedTemplateLiteral(["none"]))),
  extraFamiliars: [],
  includeExperienceFamiliars: true,
  allowAttackFamiliars: true
};
function menu() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _DEFAULT_MENU_OPTIONS = freeFightFamiliar_objectSpread(freeFightFamiliar_objectSpread({}, DEFAULT_MENU_OPTIONS), options),
    includeExperienceFamiliars = _DEFAULT_MENU_OPTIONS.includeExperienceFamiliars,
    canChooseMacro = _DEFAULT_MENU_OPTIONS.canChooseMacro,
    location = _DEFAULT_MENU_OPTIONS.location,
    extraFamiliars = _DEFAULT_MENU_OPTIONS.extraFamiliars,
    allowAttackFamiliars = _DEFAULT_MENU_OPTIONS.allowAttackFamiliars;
  var familiarMenu = [].concat(freeFightFamiliar_toConsumableArray(getConstantValueFamiliars()), freeFightFamiliar_toConsumableArray(getDropFamiliars()), freeFightFamiliar_toConsumableArray(includeExperienceFamiliars ? getExperienceFamiliars() : []), freeFightFamiliar_toConsumableArray(extraFamiliars));
  if (canChooseMacro && (0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
    if (timeToMeatify()) {
      familiarMenu.push({
        familiar: $familiar(freeFightFamiliar_templateObject2 || (freeFightFamiliar_templateObject2 = freeFightFamiliar_taggedTemplateLiteral(["Grey Goose"]))),
        expectedValue: Math.pow((Math.max((0,external_kolmafia_namespaceObject.familiarWeight)($familiar(freeFightFamiliar_templateObject3 || (freeFightFamiliar_templateObject3 = freeFightFamiliar_taggedTemplateLiteral(["Grey Goose"])))) - 5), 0), 4),
        leprechaunMultiplier: 0,
        limit: "experience"
      });
    }
    if (canOpenRedPresent()) {
      familiarMenu.push({
        familiar: $familiar(freeFightFamiliar_templateObject4 || (freeFightFamiliar_templateObject4 = freeFightFamiliar_taggedTemplateLiteral(["Crimbo Shrub"]))),
        expectedValue: 2500,
        leprechaunMultiplier: 0,
        limit: "special"
      });
    }
    if (location.zone === "Dinseylandfill" && lib_have($familiar(freeFightFamiliar_templateObject5 || (freeFightFamiliar_templateObject5 = freeFightFamiliar_taggedTemplateLiteral(["Space Jellyfish"]))))) {
      familiarMenu.push({
        familiar: $familiar(freeFightFamiliar_templateObject6 || (freeFightFamiliar_templateObject6 = freeFightFamiliar_taggedTemplateLiteral(["Space Jellyfish"]))),
        expectedValue: garboValue(template_string_$item(freeFightFamiliar_templateObject7 || (freeFightFamiliar_templateObject7 = freeFightFamiliar_taggedTemplateLiteral(["stench jelly"])))) / (property_get("_spaceJellyfishDrops") < 5 ? property_get("_spaceJellyfishDrops") + 1 : 20),
        leprechaunMultiplier: 0,
        limit: "special"
      });
    }
  }
  var meatFam = meatFamiliar();
  if (!familiarMenu.some(_ref => {
    var familiar = _ref.familiar;
    return familiar === meatFam;
  })) {
    familiarMenu.push({
      familiar: meatFam,
      expectedValue: 0,
      leprechaunMultiplier: findLeprechaunMultiplier(meatFam),
      limit: "none"
    });
  }
  if (!allowAttackFamiliars) {
    return familiarMenu.filter(fam => !(fam.familiar.physicalDamage || fam.familiar.elementalDamage));
  }
  return familiarMenu;
}
function getAllJellyfishDrops() {
  if (!lib_have($familiar(freeFightFamiliar_templateObject8 || (freeFightFamiliar_templateObject8 = freeFightFamiliar_taggedTemplateLiteral(["Space Jellyfish"]))))) return [{
    expectedValue: 0,
    turnsAtValue: 0
  }];
  var current = property_get("_spaceJellyfishDrops");
  var returnValue = [];
  for (var dropNumber = utils_clamp(current + 1, 0, 6); dropNumber <= 6; dropNumber++) {
    returnValue.push({
      expectedValue: garboValue(template_string_$item(freeFightFamiliar_templateObject9 || (freeFightFamiliar_templateObject9 = freeFightFamiliar_taggedTemplateLiteral(["stench jelly"])))) / (dropNumber > 5 ? 20 : dropNumber),
      turnsAtValue: dropNumber > 5 ? Infinity : dropNumber
    });
  }
  return returnValue;
}
function freeFightFamiliarData() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var compareFamiliars = (a, b) => {
    if (a.expectedValue === b.expectedValue) {
      return a.leprechaunMultiplier > b.leprechaunMultiplier ? a : b;
    }
    return a.expectedValue > b.expectedValue ? a : b;
  };
  return menu(options).reduce(compareFamiliars);
}
function freeFightFamiliar() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return freeFightFamiliarData(options).familiar;
}
;// CONCATENATED MODULE: ./src/familiar/barfFamiliar.ts
var barfFamiliar_templateObject, barfFamiliar_templateObject2, barfFamiliar_templateObject3, barfFamiliar_templateObject4, barfFamiliar_templateObject5, barfFamiliar_templateObject6, barfFamiliar_templateObject7, barfFamiliar_templateObject8;
function barfFamiliar_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function barfFamiliar_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? barfFamiliar_ownKeys(Object(source), !0).forEach(function (key) { barfFamiliar_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : barfFamiliar_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function barfFamiliar_defineProperty(obj, key, value) { key = barfFamiliar_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function barfFamiliar_toPropertyKey(arg) { var key = barfFamiliar_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function barfFamiliar_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function barfFamiliar_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }











var ITEM_DROP_VALUE = 0.72;
var MEAT_DROP_VALUE = baseMeat / 100;
var barfFamiliar_outfitCache = new Map();
var barfFamiliar_outfitSlots = $slots(barfFamiliar_templateObject || (barfFamiliar_templateObject = barfFamiliar_taggedTemplateLiteral(["hat, back, shirt, weapon, off-hand, pants, acc1, acc2, acc3, familiar"])));
function getCachedOutfitValues(fam) {
  var lepMult = findLeprechaunMultiplier(fam);
  var currentValue = barfFamiliar_outfitCache.get(lepMult);
  if (currentValue) return currentValue;
  (0,external_kolmafia_namespaceObject.useFamiliar)(fam);
  meatOutfit(false, new Requirement([], {
    // If we don't include the li'l pirate costume as a preventEquip, we could
    // double-count the value of the pirate costume between here and constantvalue.ts,
    // and we could apply the value of the pirate costume to every 0x leprechaun. Other items are
    // included as strong, temporary bonuses that go away quickly in a user's BarfDay.
    preventEquip: template_string_$items(barfFamiliar_templateObject2 || (barfFamiliar_templateObject2 = barfFamiliar_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122, cursed magnifying glass, protonic accelerator pack, \"I Voted!\" sticker, li'l pirate costume, bag of many confections"])))
  }));
  var outfit = barfFamiliar_outfitSlots.map(slot => (0,external_kolmafia_namespaceObject.equippedItem)(slot));
  var bonuses = bonusGear("barf", false);
  var values = {
    weight: utils_sum(outfit, eq => modifier_get("Familiar Weight", eq)),
    meat: utils_sum(outfit, eq => modifier_get("Meat Drop", eq)),
    item: utils_sum(outfit, eq => modifier_get("Item Drop", eq)),
    bonus: utils_sum(outfit, eq => {
      var _bonuses$get;
      return (_bonuses$get = bonuses.get(eq)) !== null && _bonuses$get !== void 0 ? _bonuses$get : 0;
    })
  };
  barfFamiliar_outfitCache.set(lepMult, values);
  return values;
}
var nonOutfitWeightBonus = () => (0,external_kolmafia_namespaceObject.weightAdjustment)() - utils_sum(barfFamiliar_outfitSlots, slot => modifier_get("Familiar Weight", (0,external_kolmafia_namespaceObject.equippedItem)(slot)));
function familiarModifier(familiar, modifier) {
  var cachedOutfitWeight = getCachedOutfitValues(familiar).weight;
  var totalWeight = (0,external_kolmafia_namespaceObject.familiarWeight)(familiar) + nonOutfitWeightBonus() + cachedOutfitWeight;
  return (0,external_kolmafia_namespaceObject.numericModifier)(familiar, modifier, totalWeight, template_string_$item.none);
}
function familiarAbilityValue(familiar) {
  return familiarModifier(familiar, "Meat Drop") * MEAT_DROP_VALUE + familiarModifier(familiar, "Item Drop") * ITEM_DROP_VALUE;
}
function totalFamiliarValue(_ref) {
  var expectedValue = _ref.expectedValue,
    outfitValue = _ref.outfitValue,
    familiar = _ref.familiar;
  return expectedValue + outfitValue + familiarAbilityValue(familiar);
}
function turnsNeededForFamiliar(_ref2, baselineToCompareAgainst) {
  var familiar = _ref2.familiar,
    limit = _ref2.limit,
    outfitValue = _ref2.outfitValue;
  switch (limit) {
    case "drops":
      return utils_sum(getAllDrops(familiar).filter(_ref3 => {
        var expectedValue = _ref3.expectedValue;
        return outfitValue + familiarAbilityValue(familiar) + expectedValue > totalFamiliarValue(baselineToCompareAgainst);
      }), _ref4 => {
        var expectedTurns = _ref4.expectedTurns;
        return expectedTurns;
      });
    case "experience":
      return getExperienceFamiliarLimit(familiar);
    case "none":
      return 0;
    case "special":
      return getSpecialFamiliarLimit({
        familiar: familiar,
        outfitValue: outfitValue,
        baselineToCompareAgainst: baselineToCompareAgainst
      });
  }
}
function calculateOutfitValue(f) {
  var outfit = getCachedOutfitValues(f.familiar);
  var outfitValue = outfit.bonus + outfit.meat * MEAT_DROP_VALUE + outfit.item * ITEM_DROP_VALUE;
  var outfitWeight = outfit.weight;
  return barfFamiliar_objectSpread(barfFamiliar_objectSpread({}, f), {}, {
    outfitValue: outfitValue,
    outfitWeight: outfitWeight
  });
}
function barfFamiliar() {
  if (timeToMeatify()) return $familiar(barfFamiliar_templateObject3 || (barfFamiliar_templateObject3 = barfFamiliar_taggedTemplateLiteral(["Grey Goose"])));
  if (property_get("garbo_IgnoreMarginalFamiliars", false)) return meatFamiliar();
  var fullMenu = menu({
    canChooseMacro: true,
    location: $location(barfFamiliar_templateObject4 || (barfFamiliar_templateObject4 = barfFamiliar_taggedTemplateLiteral(["Barf Mountain"]))),
    includeExperienceFamiliars: false
  }).map(calculateOutfitValue);
  var meatFamiliarEntry = fullMenu.find(_ref5 => {
    var familiar = _ref5.familiar;
    return familiar === meatFamiliar();
  });
  if (!meatFamiliarEntry) throw new Error("Something went wrong when initializing familiars!");
  var meatFamiliarValue = totalFamiliarValue(meatFamiliarEntry);
  var viableMenu = fullMenu.filter(f => totalFamiliarValue(f) > meatFamiliarValue);
  if (viableMenu.every(_ref6 => {
    var limit = _ref6.limit;
    return limit !== "none";
  })) {
    var turnsNeeded = utils_sum(viableMenu, option => turnsNeededForFamiliar(option, meatFamiliarEntry));
    if (turnsNeeded < turnsAvailable()) {
      var shrubAvailable = viableMenu.some(_ref7 => {
        var familiar = _ref7.familiar;
        return familiar === $familiar(barfFamiliar_templateObject5 || (barfFamiliar_templateObject5 = barfFamiliar_taggedTemplateLiteral(["Crimbo Shrub"])));
      });
      return shrubAvailable ? $familiar(barfFamiliar_templateObject6 || (barfFamiliar_templateObject6 = barfFamiliar_taggedTemplateLiteral(["Crimbo Shrub"]))) : meatFamiliar();
    }
  }
  if (viableMenu.length === 0) return meatFamiliar();
  var best = lib_maxBy(viableMenu, totalFamiliarValue);
  var familiarPrintout = x => "(expected value of ".concat(x.expectedValue.toFixed(1), " from familiar drops, ").concat(familiarAbilityValue(x.familiar).toFixed(1), " from familiar abilities and ").concat(x.outfitValue.toFixed(1), " from outfit)");
  (0,external_kolmafia_namespaceObject.print)("Choosing to use ".concat(best.familiar, " ").concat(familiarPrintout(best), " over ").concat(meatFamiliarEntry.familiar, " ").concat(familiarPrintout(meatFamiliarEntry), "."), HIGHLIGHT);
  return best.familiar;
}
function getSpecialFamiliarLimit(_ref8) {
  var familiar = _ref8.familiar,
    outfitValue = _ref8.outfitValue,
    baselineToCompareAgainst = _ref8.baselineToCompareAgainst;
  switch (familiar) {
    case $familiar(barfFamiliar_templateObject7 || (barfFamiliar_templateObject7 = barfFamiliar_taggedTemplateLiteral(["Space Jellyfish"]))):
      return utils_sum(getAllJellyfishDrops().filter(_ref9 => {
        var expectedValue = _ref9.expectedValue;
        return outfitValue + familiarAbilityValue(familiar) + expectedValue > totalFamiliarValue(baselineToCompareAgainst);
      }), _ref10 => {
        var turnsAtValue = _ref10.turnsAtValue;
        return turnsAtValue;
      });
    case $familiar(barfFamiliar_templateObject8 || (barfFamiliar_templateObject8 = barfFamiliar_taggedTemplateLiteral(["Crimbo Shrub"]))):
      return Math.ceil(estimatedGarboTurns() / 100);
    default:
      return 0;
  }
}
;// CONCATENATED MODULE: ./src/familiar/itemFamiliar.ts
var itemFamiliar_templateObject, itemFamiliar_templateObject2, itemFamiliar_templateObject3, itemFamiliar_templateObject4, itemFamiliar_templateObject5, itemFamiliar_templateObject6, itemFamiliar_templateObject7, itemFamiliar_templateObject8, itemFamiliar_templateObject9, itemFamiliar_templateObject10, itemFamiliar_templateObject11, itemFamiliar_templateObject12, itemFamiliar_templateObject13;
function itemFamiliar_toConsumableArray(arr) { return itemFamiliar_arrayWithoutHoles(arr) || itemFamiliar_iterableToArray(arr) || itemFamiliar_unsupportedIterableToArray(arr) || itemFamiliar_nonIterableSpread(); }
function itemFamiliar_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function itemFamiliar_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return itemFamiliar_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return itemFamiliar_arrayLikeToArray(o, minLen); }
function itemFamiliar_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function itemFamiliar_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return itemFamiliar_arrayLikeToArray(arr); }
function itemFamiliar_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function itemFamiliar_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var bestNonCheerleaderFairy;
function bestFairy() {
  if (lib_have($familiar(itemFamiliar_templateObject || (itemFamiliar_templateObject = itemFamiliar_taggedTemplateLiteral(["Trick-or-Treating Tot"])))) && lib_have(template_string_$item(itemFamiliar_templateObject2 || (itemFamiliar_templateObject2 = itemFamiliar_taggedTemplateLiteral(["li'l ninja costume"]))))) {
    return $familiar(itemFamiliar_templateObject3 || (itemFamiliar_templateObject3 = itemFamiliar_taggedTemplateLiteral(["Trick-or-Treating Tot"])));
  }
  if (!bestNonCheerleaderFairy) {
    var viableFairies = external_kolmafia_namespaceObject.Familiar.all().filter(f => lib_have(f) && findFairyMultiplier(f) && f !== $familiar(itemFamiliar_templateObject4 || (itemFamiliar_templateObject4 = itemFamiliar_taggedTemplateLiteral(["Steam-Powered Cheerleader"]))) && !f.physicalDamage && !f.elementalDamage);
    var highestFairyMult = findFairyMultiplier(lib_maxBy(viableFairies, findFairyMultiplier));
    var goodFairies = viableFairies.filter(f => findFairyMultiplier(f) === highestFairyMult);
    if (lib_have($familiar(itemFamiliar_templateObject5 || (itemFamiliar_templateObject5 = itemFamiliar_taggedTemplateLiteral(["Reagnimated Gnome"])))) && !lib_have(template_string_$item(itemFamiliar_templateObject6 || (itemFamiliar_templateObject6 = itemFamiliar_taggedTemplateLiteral(["gnomish housemaid's kgnee"])))) && !property_get("_garbo_triedForKgnee", false)) {
      var current = (0,external_kolmafia_namespaceObject.myFamiliar)();
      (0,external_kolmafia_namespaceObject.useFamiliar)($familiar(itemFamiliar_templateObject7 || (itemFamiliar_templateObject7 = itemFamiliar_taggedTemplateLiteral(["Reagnimated Gnome"]))));
      (0,external_kolmafia_namespaceObject.visitUrl)("arena.php");
      (0,external_kolmafia_namespaceObject.runChoice)(4);
      (0,external_kolmafia_namespaceObject.useFamiliar)(current);
      _set("_garbo_triedForKgnee", true);
    }
    if (lib_have(template_string_$item(itemFamiliar_templateObject8 || (itemFamiliar_templateObject8 = itemFamiliar_taggedTemplateLiteral(["gnomish housemaid's kgnee"])))) && highestFairyMult === 1) {
      goodFairies.push($familiar(itemFamiliar_templateObject9 || (itemFamiliar_templateObject9 = itemFamiliar_taggedTemplateLiteral(["Reagnimated Gnome"]))));
    }
    var bonuses = [].concat(itemFamiliar_toConsumableArray(menu({
      includeExperienceFamiliars: false
    })), [{
      familiar: $familiar(itemFamiliar_templateObject10 || (itemFamiliar_templateObject10 = itemFamiliar_taggedTemplateLiteral(["Reagnimated Gnome"]))),
      expectedValue: property_get("valueOfAdventure") * 70 / 1000,
      leprechaunMultiplier: 0,
      limit: "none"
    }]);
    bestNonCheerleaderFairy = lib_maxBy(goodFairies, f => {
      var _bonuses$find$expecte, _bonuses$find;
      return (_bonuses$find$expecte = (_bonuses$find = bonuses.find(_ref => {
        var familiar = _ref.familiar;
        return familiar === f;
      })) === null || _bonuses$find === void 0 ? void 0 : _bonuses$find.expectedValue) !== null && _bonuses$find$expecte !== void 0 ? _bonuses$find$expecte : 0;
    });
  }
  if (lib_have($familiar(itemFamiliar_templateObject11 || (itemFamiliar_templateObject11 = itemFamiliar_taggedTemplateLiteral(["Steam-Powered Cheerleader"])))) && findFairyMultiplier($familiar(itemFamiliar_templateObject12 || (itemFamiliar_templateObject12 = itemFamiliar_taggedTemplateLiteral(["Steam-Powered Cheerleader"])))) > findFairyMultiplier(bestNonCheerleaderFairy)) {
    return $familiar(itemFamiliar_templateObject13 || (itemFamiliar_templateObject13 = itemFamiliar_taggedTemplateLiteral(["Steam-Powered Cheerleader"])));
  }
  return bestNonCheerleaderFairy;
}
;// CONCATENATED MODULE: ./src/familiar/index.ts






;// CONCATENATED MODULE: ./src/combat.ts
var src_combat_templateObject, src_combat_templateObject2, combat_templateObject3, combat_templateObject4, combat_templateObject5, combat_templateObject6, combat_templateObject7, combat_templateObject8, combat_templateObject9, combat_templateObject10, combat_templateObject11, combat_templateObject12, combat_templateObject13, combat_templateObject14, combat_templateObject15, combat_templateObject16, combat_templateObject17, combat_templateObject18, combat_templateObject19, combat_templateObject20, combat_templateObject21, combat_templateObject22, combat_templateObject23, combat_templateObject24, combat_templateObject25, combat_templateObject26, combat_templateObject27, combat_templateObject28, combat_templateObject29, combat_templateObject30, combat_templateObject31, combat_templateObject32, combat_templateObject33, combat_templateObject34, combat_templateObject35, combat_templateObject36, combat_templateObject37, combat_templateObject38, combat_templateObject39, combat_templateObject40, combat_templateObject41, combat_templateObject42, combat_templateObject43, combat_templateObject44, combat_templateObject45, combat_templateObject46, combat_templateObject47, combat_templateObject48, combat_templateObject49, combat_templateObject50, combat_templateObject51, combat_templateObject52, combat_templateObject53, combat_templateObject54, combat_templateObject55, combat_templateObject56, combat_templateObject57, combat_templateObject58, combat_templateObject59, combat_templateObject60, combat_templateObject61, combat_templateObject62, combat_templateObject63, combat_templateObject64, combat_templateObject65, combat_templateObject66, combat_templateObject67, combat_templateObject68, combat_templateObject69, combat_templateObject70, combat_templateObject71, combat_templateObject72, combat_templateObject73, combat_templateObject74, combat_templateObject75, combat_templateObject76, combat_templateObject77, combat_templateObject78, combat_templateObject79, combat_templateObject80, combat_templateObject81, combat_templateObject82, combat_templateObject83, combat_templateObject84, combat_templateObject85, combat_templateObject86, combat_templateObject87, combat_templateObject88, combat_templateObject89, combat_templateObject90, combat_templateObject91, combat_templateObject92, combat_templateObject93, combat_templateObject94, combat_templateObject95, combat_templateObject96, combat_templateObject97, combat_templateObject98, combat_templateObject99, combat_templateObject100, combat_templateObject101, combat_templateObject102, combat_templateObject103, combat_templateObject104, _templateObject105, _templateObject106, _templateObject107, _templateObject108, _templateObject109, _templateObject110, _templateObject111, _templateObject112, _templateObject113, _templateObject114, _templateObject115, _templateObject116, _templateObject117, _templateObject118, _templateObject119, _templateObject120, _templateObject121, _templateObject122, _templateObject123, _templateObject124, _templateObject125, _templateObject126, _templateObject127, _templateObject128, _templateObject129, _templateObject130, _templateObject131, _templateObject132, _templateObject133, _templateObject134, _templateObject135, _templateObject136, _templateObject137, _templateObject138, _templateObject139, _templateObject140, _templateObject141, _templateObject142, _templateObject143, _templateObject144, _templateObject145, _templateObject146, _templateObject147, _templateObject148, _templateObject149, _templateObject150, _templateObject151, _templateObject152, _templateObject153, _templateObject154, _templateObject155, _templateObject156, _templateObject157, _templateObject158, _templateObject159, _templateObject160, _templateObject161, _templateObject162, _templateObject163, _templateObject164, _templateObject165, _templateObject166, _templateObject167, _templateObject168, _templateObject169, _templateObject170, _templateObject171, _templateObject172, _templateObject173, _templateObject174, _templateObject175, _templateObject176, _templateObject177, _templateObject178, _templateObject179, _templateObject180, _templateObject181, _templateObject182, _templateObject183, _templateObject184, _templateObject185, _templateObject186, _templateObject187, _templateObject188;
function src_combat_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function src_combat_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, src_combat_toPropertyKey(descriptor.key), descriptor); } }
function src_combat_createClass(Constructor, protoProps, staticProps) { if (protoProps) src_combat_defineProperties(Constructor.prototype, protoProps); if (staticProps) src_combat_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function src_combat_toPropertyKey(arg) { var key = src_combat_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function src_combat_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function src_combat_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) src_combat_setPrototypeOf(subClass, superClass); }
function src_combat_setPrototypeOf(o, p) { src_combat_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return src_combat_setPrototypeOf(o, p); }
function src_combat_createSuper(Derived) { var hasNativeReflectConstruct = src_combat_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = src_combat_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = src_combat_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return src_combat_possibleConstructorReturn(this, result); }; }
function src_combat_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return src_combat_assertThisInitialized(self); }
function src_combat_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function src_combat_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function src_combat_getPrototypeOf(o) { src_combat_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return src_combat_getPrototypeOf(o); }
function src_combat_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var monsterManuelCached = undefined;
function monsterManuelAvailable() {
  if (monsterManuelCached !== undefined) return Boolean(monsterManuelCached);
  monsterManuelCached = (0,external_kolmafia_namespaceObject.visitUrl)("questlog.php?which=3").includes("Monster Manuel");
  return Boolean(monsterManuelCached);
}
function maxCarriedFamiliarDamage(familiar) {
  // Only considering familiars we reasonably may carry
  switch (familiar) {
    // +5 to Familiar Weight
    case $familiar(src_combat_templateObject || (src_combat_templateObject = src_combat_taggedTemplateLiteral(["Animated Macaroni Duck"]))):
      return 50;
    case $familiar(src_combat_templateObject2 || (src_combat_templateObject2 = src_combat_taggedTemplateLiteral(["Barrrnacle"]))):
    case $familiar(combat_templateObject3 || (combat_templateObject3 = src_combat_taggedTemplateLiteral(["Gelatinous Cubeling"]))):
    case $familiar(combat_templateObject4 || (combat_templateObject4 = src_combat_taggedTemplateLiteral(["Penguin Goodfella"]))):
      return 30;
    case $familiar(combat_templateObject5 || (combat_templateObject5 = src_combat_taggedTemplateLiteral(["Misshapen Animal Skeleton"]))):
      return 40 + (0,external_kolmafia_namespaceObject.numericModifier)("Spooky Damage");

    // +25% Meat from Monsters
    case $familiar(combat_templateObject6 || (combat_templateObject6 = src_combat_taggedTemplateLiteral(["Hobo Monkey"]))):
      return 25;

    // +20% Meat from Monsters
    case $familiar(combat_templateObject7 || (combat_templateObject7 = src_combat_taggedTemplateLiteral(["Grouper Groupie"]))):
      // Double sleaze damage at Barf Mountain
      return 25 + (0,external_kolmafia_namespaceObject.numericModifier)("Sleaze Damage") * ((0,external_kolmafia_namespaceObject.myLocation)() === $location(combat_templateObject8 || (combat_templateObject8 = src_combat_taggedTemplateLiteral(["Barf Mountain"]))) ? 2 : 1);
    case $familiar(combat_templateObject9 || (combat_templateObject9 = src_combat_taggedTemplateLiteral(["Jitterbug"]))):
      return 20;
    case $familiar(combat_templateObject10 || (combat_templateObject10 = src_combat_taggedTemplateLiteral(["Mutant Cactus Bud"]))):
      // 25 poison damage (25+12+6+3+1)
      return 47;
    case $familiar(combat_templateObject11 || (combat_templateObject11 = src_combat_taggedTemplateLiteral(["Robortender"]))):
      return 20;
  }
  return 0;
}
function maxFamiliarDamage(familiar) {
  switch (familiar) {
    case $familiar(combat_templateObject12 || (combat_templateObject12 = src_combat_taggedTemplateLiteral(["Cocoabo"]))):
      return (0,external_kolmafia_namespaceObject.familiarWeight)(familiar) + 3;
    case $familiar(combat_templateObject13 || (combat_templateObject13 = src_combat_taggedTemplateLiteral(["Feather Boa Constrictor"]))):
      // Double sleaze damage at Barf Mountain
      return (0,external_kolmafia_namespaceObject.familiarWeight)(familiar) + 3 + (0,external_kolmafia_namespaceObject.numericModifier)("Sleaze Damage") * ((0,external_kolmafia_namespaceObject.myLocation)() === $location(combat_templateObject14 || (combat_templateObject14 = src_combat_taggedTemplateLiteral(["Barf Mountain"]))) ? 2 : 1);
    case $familiar(combat_templateObject15 || (combat_templateObject15 = src_combat_taggedTemplateLiteral(["Ninja Pirate Zombie Robot"]))):
      return Math.floor(((0,external_kolmafia_namespaceObject.familiarWeight)(familiar) + 3) * 1.5);
  }
  return 0;
}
function maxPassiveDamage() {
  // Only considering passive damage sources we reasonably may have
  var vykeaMaxDamage = property_get("_VYKEACompanionLevel") > 0 ? 10 * property_get("_VYKEACompanionLevel") + 10 : 0;

  // Lasagmbie does max 2*level damage while Vermincelli does max level + (1/2 * level) + (1/2 * 1/2 * level) + ...
  var thrallMaxDamage = (0,external_kolmafia_namespaceObject.myThrall)().level >= 5 && $thralls(combat_templateObject16 || (combat_templateObject16 = src_combat_taggedTemplateLiteral(["Lasagmbie,Vermincelli"]))).includes((0,external_kolmafia_namespaceObject.myThrall)()) ? (0,external_kolmafia_namespaceObject.myThrall)().level * 2 : 0;
  var crownMaxDamage = (0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(combat_templateObject17 || (combat_templateObject17 = src_combat_taggedTemplateLiteral(["Crown of Thrones"])))) ? maxCarriedFamiliarDamage((0,external_kolmafia_namespaceObject.myEnthronedFamiliar)()) : 0;
  var bjornMaxDamage = (0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(combat_templateObject18 || (combat_templateObject18 = src_combat_taggedTemplateLiteral(["Buddy Bjorn"])))) ? maxCarriedFamiliarDamage((0,external_kolmafia_namespaceObject.myBjornedFamiliar)()) : 0;
  var familiarMaxDamage = maxFamiliarDamage((0,external_kolmafia_namespaceObject.myFamiliar)());
  return vykeaMaxDamage + thrallMaxDamage + crownMaxDamage + bjornMaxDamage + familiarMaxDamage;
}
function shouldRedigitize() {
  var digitizesLeft = getDigitizeUsesRemaining();
  var monsterCount = getDigitizeMonsterCount() + 1;
  // triangular number * 10 - 3
  var digitizeAdventuresUsed = monsterCount * (monsterCount + 1) * 5 - 3;
  // Redigitize if fewer adventures than this digitize usage.
  return SourceTerminal_have() && canDigitize() && (0,external_kolmafia_namespaceObject.myAdventures)() * 1.04 < digitizesLeft * digitizeAdventuresUsed;
}
var combat_Macro = /*#__PURE__*/function (_StrictMacro) {
  src_combat_inherits(Macro, _StrictMacro);
  var _super = src_combat_createSuper(Macro);
  function Macro() {
    src_combat_classCallCheck(this, Macro);
    return _super.apply(this, arguments);
  }
  src_combat_createClass(Macro, [{
    key: "tryHaveSkill",
    value: function tryHaveSkill(skill) {
      if (!skill) return this;
      return this.externalIf((0,external_kolmafia_namespaceObject.haveSkill)(skill), Macro.trySkill(skill));
    }
  }, {
    key: "tryHaveItem",
    value: function tryHaveItem(item) {
      if (!item) return this;
      return this.externalIf(lib_have(item), Macro.tryItem(item));
    }
  }, {
    key: "familiarActions",
    value: function familiarActions() {
      return this.externalIf((0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(combat_templateObject19 || (combat_templateObject19 = src_combat_taggedTemplateLiteral(["Grey Goose"]))) && timeToMeatify(), Macro.trySkill($skill(combat_templateObject20 || (combat_templateObject20 = src_combat_taggedTemplateLiteral(["Meatify Matter"]))))).externalIf(canOpenRedPresent() && (0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(combat_templateObject21 || (combat_templateObject21 = src_combat_taggedTemplateLiteral(["Crimbo Shrub"]))), Macro.trySkill($skill(combat_templateObject22 || (combat_templateObject22 = src_combat_taggedTemplateLiteral(["Open a Big Red Present"]))))).externalIf((0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(combat_templateObject23 || (combat_templateObject23 = src_combat_taggedTemplateLiteral(["Space Jellyfish"]))), Macro.externalIf(property_get("_spaceJellyfishDrops") < 5, Macro.if_($locations(combat_templateObject24 || (combat_templateObject24 = src_combat_taggedTemplateLiteral(["Barf Mountain, Pirates of the Garbage Barges, Uncle Gator's Country Fun-Time Liquid Waste Sluice, The Toxic Teacups"]))).map(l => (0,external_kolmafia_namespaceObject.getMonsters)(l)).flat(), Macro.trySkill($skill(combat_templateObject25 || (combat_templateObject25 = src_combat_taggedTemplateLiteral(["Extract Jelly"]))))), Macro.trySkill($skill(combat_templateObject26 || (combat_templateObject26 = src_combat_taggedTemplateLiteral(["Extract Jelly"]))))));
    }
  }, {
    key: "tryCopier",
    value: function tryCopier(itemOrSkill) {
      switch (itemOrSkill) {
        case template_string_$item(combat_templateObject27 || (combat_templateObject27 = src_combat_taggedTemplateLiteral(["Spooky Putty sheet"]))):
          return this.externalIf(property_get("spookyPuttyCopiesMade") + Math.max(1, property_get("_raindohCopiesMade")) < 6 && template_string_$items(combat_templateObject28 || (combat_templateObject28 = src_combat_taggedTemplateLiteral(["Spooky Putty sheet, Spooky Putty monster"]))).some(item => lib_have(item)), Macro.tryItem(itemOrSkill));
        case template_string_$item(combat_templateObject29 || (combat_templateObject29 = src_combat_taggedTemplateLiteral(["Rain-Doh black box"]))):
          return this.externalIf(property_get("_raindohCopiesMade") + Math.max(1, property_get("spookyPuttyCopiesMade")) < 6 && template_string_$items(combat_templateObject30 || (combat_templateObject30 = src_combat_taggedTemplateLiteral(["Rain-Doh black box, Rain-Doh box full of monster"]))).some(item => lib_have(item)), Macro.tryItem(itemOrSkill));
        case template_string_$item(combat_templateObject31 || (combat_templateObject31 = src_combat_taggedTemplateLiteral(["4-d camera"]))):
          return this.externalIf(!property_get("_cameraUsed") && !lib_have(template_string_$item(combat_templateObject32 || (combat_templateObject32 = src_combat_taggedTemplateLiteral(["shaking 4-d camera"])))), Macro.tryHaveItem(itemOrSkill));
        case template_string_$item(combat_templateObject33 || (combat_templateObject33 = src_combat_taggedTemplateLiteral(["crappy camera"]))):
          return this.externalIf(!property_get("_crappyCameraUsed") && !lib_have(template_string_$item(combat_templateObject34 || (combat_templateObject34 = src_combat_taggedTemplateLiteral(["shaking crappy camera"])))), Macro.tryHaveItem(itemOrSkill));
        case template_string_$item(combat_templateObject35 || (combat_templateObject35 = src_combat_taggedTemplateLiteral(["unfinished ice sculpture"]))):
          return this.externalIf(!property_get("_iceSculptureUsed") && !lib_have(template_string_$item(combat_templateObject36 || (combat_templateObject36 = src_combat_taggedTemplateLiteral(["ice sculpture"])))), Macro.tryHaveItem(itemOrSkill));
        case template_string_$item(combat_templateObject37 || (combat_templateObject37 = src_combat_taggedTemplateLiteral(["pulled green taffy"]))):
          return this.externalIf(!property_get("_envyfishEggUsed") && !lib_have(template_string_$item(combat_templateObject38 || (combat_templateObject38 = src_combat_taggedTemplateLiteral(["envyfish egg"])))), Macro.tryHaveItem(itemOrSkill));
        case template_string_$item(combat_templateObject39 || (combat_templateObject39 = src_combat_taggedTemplateLiteral(["print screen button"]))):
          return this.tryHaveItem(itemOrSkill);
        case template_string_$item(combat_templateObject40 || (combat_templateObject40 = src_combat_taggedTemplateLiteral(["alpine watercolor set"]))):
          return this.tryHaveItem(itemOrSkill);
        case template_string_$item(combat_templateObject41 || (combat_templateObject41 = src_combat_taggedTemplateLiteral(["LOV Enamorang"]))):
          return this.externalIf(property_get("_enamorangs") < 5 && !property_get("enamorangMonster"), Macro.tryHaveItem(itemOrSkill));
        case $skill(combat_templateObject42 || (combat_templateObject42 = src_combat_taggedTemplateLiteral(["Digitize"]))):
          return this.externalIf(canDigitize(), Macro.trySkill(itemOrSkill));
      }

      // Unsupported item or skill
      return this;
    }
  }, {
    key: "meatKill",
    value: function meatKill() {
      var sealClubberSetup = (0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(combat_templateObject43 || (combat_templateObject43 = src_combat_taggedTemplateLiteral(["mafia pointer finger ring"])))) > 0 && (0,external_kolmafia_namespaceObject.myClass)() === $class(combat_templateObject44 || (combat_templateObject44 = src_combat_taggedTemplateLiteral(["Seal Clubber"]))) && lib_have($skill(combat_templateObject45 || (combat_templateObject45 = src_combat_taggedTemplateLiteral(["Furious Wallop"]))));
      var opsSetup = (0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(combat_templateObject46 || (combat_templateObject46 = src_combat_taggedTemplateLiteral(["mafia pointer finger ring"])))) > 0 && (0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(combat_templateObject47 || (combat_templateObject47 = src_combat_taggedTemplateLiteral(["Operation Patriot Shield"])))) > 0;
      var katanaSetup = (0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(combat_templateObject48 || (combat_templateObject48 = src_combat_taggedTemplateLiteral(["mafia pointer finger ring"])))) > 0 && (0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(combat_templateObject49 || (combat_templateObject49 = src_combat_taggedTemplateLiteral(["haiku katana"])))) > 0;
      var capeSetup = (0,external_kolmafia_namespaceObject.equippedAmount)(template_string_$item(combat_templateObject50 || (combat_templateObject50 = src_combat_taggedTemplateLiteral(["mafia pointer finger ring"])))) > 0 && property_get("retroCapeSuperhero") === "robot" && property_get("retroCapeWashingInstructions") === "kill" && (0,external_kolmafia_namespaceObject.itemType)((0,external_kolmafia_namespaceObject.equippedItem)($slot(combat_templateObject51 || (combat_templateObject51 = src_combat_taggedTemplateLiteral(["weapon"]))))) === "pistol";
      var willCrit = sealClubberSetup || opsSetup || katanaSetup || capeSetup;
      return this.externalIf(shouldRedigitize(), Macro.if_($monster(combat_templateObject52 || (combat_templateObject52 = src_combat_taggedTemplateLiteral(["Knob Goblin Embezzler"]))), Macro.trySkill($skill(combat_templateObject53 || (combat_templateObject53 = src_combat_taggedTemplateLiteral(["Digitize"])))))).tryHaveSkill($skill(combat_templateObject54 || (combat_templateObject54 = src_combat_taggedTemplateLiteral(["Sing Along"])))).familiarActions().externalIf(digitizedMonstersRemaining() <= 5 - property_get("_meteorShowerUses") && lib_have($skill(combat_templateObject55 || (combat_templateObject55 = src_combat_taggedTemplateLiteral(["Meteor Lore"])))) && property_get("_meteorShowerUses") < 5, Macro.if_($monster(combat_templateObject56 || (combat_templateObject56 = src_combat_taggedTemplateLiteral(["Knob Goblin Embezzler"]))), Macro.trySkill($skill(combat_templateObject57 || (combat_templateObject57 = src_combat_taggedTemplateLiteral(["Meteor Shower"])))))).externalIf(property_get("cosmicBowlingBallReturnCombats") < 1, Macro.trySkill($skill(combat_templateObject58 || (combat_templateObject58 = src_combat_taggedTemplateLiteral(["Bowl Straight Up"]))))).externalIf(lib_have($skill(combat_templateObject59 || (combat_templateObject59 = src_combat_taggedTemplateLiteral(["Transcendent Olfaction"])))) && (property_get("olfactedMonster") !== $monster(combat_templateObject60 || (combat_templateObject60 = src_combat_taggedTemplateLiteral(["garbage tourist"]))) || !lib_have(template_string_$effect(combat_templateObject61 || (combat_templateObject61 = src_combat_taggedTemplateLiteral(["On the Trail"]))))) && property_get("_olfactionsUsed") < 3, Macro.if_($monster(combat_templateObject62 || (combat_templateObject62 = src_combat_taggedTemplateLiteral(["garbage tourist"]))), Macro.trySkill($skill(combat_templateObject63 || (combat_templateObject63 = src_combat_taggedTemplateLiteral(["Transcendent Olfaction"])))))).externalIf(property_get("_gallapagosMonster") !== $monster(combat_templateObject64 || (combat_templateObject64 = src_combat_taggedTemplateLiteral(["garbage tourist"]))) && lib_have($skill(combat_templateObject65 || (combat_templateObject65 = src_combat_taggedTemplateLiteral(["Gallapagosian Mating Call"])))), Macro.if_($monster(combat_templateObject66 || (combat_templateObject66 = src_combat_taggedTemplateLiteral(["garbage tourist"]))), Macro.trySkill($skill(combat_templateObject67 || (combat_templateObject67 = src_combat_taggedTemplateLiteral(["Gallapagosian Mating Call"])))))).externalIf(property_get("longConMonster") !== $monster(combat_templateObject68 || (combat_templateObject68 = src_combat_taggedTemplateLiteral(["garbage tourist"]))) && property_get("_longConUsed") < 5 && lib_have($skill(combat_templateObject69 || (combat_templateObject69 = src_combat_taggedTemplateLiteral(["Long Con"])))), Macro.if_($monster(combat_templateObject70 || (combat_templateObject70 = src_combat_taggedTemplateLiteral(["garbage tourist"]))), Macro.trySkill($skill(combat_templateObject71 || (combat_templateObject71 = src_combat_taggedTemplateLiteral(["Long Con"])))))).externalIf(!property_get("_latteCopyUsed") && (property_get("_latteMonster") !== $monster(combat_templateObject72 || (combat_templateObject72 = src_combat_taggedTemplateLiteral(["garbage tourist"]))) || counter_get("Latte Monster") > 30) && lib_have(template_string_$item(combat_templateObject73 || (combat_templateObject73 = src_combat_taggedTemplateLiteral(["latte lovers member's mug"])))), Macro.if_($monster(combat_templateObject74 || (combat_templateObject74 = src_combat_taggedTemplateLiteral(["garbage tourist"]))), Macro.trySkill($skill(combat_templateObject75 || (combat_templateObject75 = src_combat_taggedTemplateLiteral(["Offer Latte to Opponent"])))))).externalIf(property_get("_feelNostalgicUsed") < 3 && property_get("lastCopyableMonster") === $monster(combat_templateObject76 || (combat_templateObject76 = src_combat_taggedTemplateLiteral(["garbage tourist"]))) && lib_have($skill(combat_templateObject77 || (combat_templateObject77 = src_combat_taggedTemplateLiteral(["Feel Nostalgic"])))), Macro.if_("!monsterid ".concat($monster(combat_templateObject78 || (combat_templateObject78 = src_combat_taggedTemplateLiteral(["garbage tourist"]))).id), Macro.trySkill($skill(combat_templateObject79 || (combat_templateObject79 = src_combat_taggedTemplateLiteral(["Feel Nostalgic"])))))).externalIf(opsSetup, Macro.trySkill($skill(combat_templateObject80 || (combat_templateObject80 = src_combat_taggedTemplateLiteral(["Throw Shield"]))))).meatStasis(willCrit).externalIf((0,external_kolmafia_namespaceObject.hippyStoneBroken)() && monsterManuelAvailable(), Macro.if_("(monsterid 1758 || monsterid 1759 || monsterid 1760) && monsterhpbelow ".concat(Math.floor((100 + (0,external_kolmafia_namespaceObject.numericModifier)("Monster Level")) / 5)), Macro.trySkill($skill(combat_templateObject81 || (combat_templateObject81 = src_combat_taggedTemplateLiteral(["Feel Superior"])))))).externalIf(sealClubberSetup, Macro.trySkill($skill(combat_templateObject82 || (combat_templateObject82 = src_combat_taggedTemplateLiteral(["Furious Wallop"]))))).externalIf(opsSetup, Macro.attack()).externalIf(katanaSetup, Macro.trySkill($skill(combat_templateObject83 || (combat_templateObject83 = src_combat_taggedTemplateLiteral(["Summer Siesta"]))))).externalIf(capeSetup, Macro.trySkill($skill(combat_templateObject84 || (combat_templateObject84 = src_combat_taggedTemplateLiteral(["Precision Shot"]))))).externalIf((0,external_kolmafia_namespaceObject.myClass)() === $class(combat_templateObject85 || (combat_templateObject85 = src_combat_taggedTemplateLiteral(["Disco Bandit"]))), Macro.trySkill($skill(combat_templateObject86 || (combat_templateObject86 = src_combat_taggedTemplateLiteral(["Disco Dance of Doom"])))).trySkill($skill(combat_templateObject87 || (combat_templateObject87 = src_combat_taggedTemplateLiteral(["Disco Dance II: Electric Boogaloo"])))).trySkill($skill(combat_templateObject88 || (combat_templateObject88 = src_combat_taggedTemplateLiteral(["Disco Dance 3: Back in the Habit"]))))).kill();
    }
  }, {
    key: "meatStasis",
    value: function meatStasis(checkPassive) {
      // We can't stasis without manuel's monsterhpabove if we want to crit
      if (checkPassive && !monsterManuelAvailable()) {
        return this;
      }
      var checkGet = i => lib_have(i) && ((0,external_kolmafia_namespaceObject.itemAmount)(i) > 0 || (0,external_kolmafia_namespaceObject.retrieveItem)(i));
      var stasisItem = template_string_$items(combat_templateObject89 || (combat_templateObject89 = src_combat_taggedTemplateLiteral(["facsimile dictionary, dictionary, seal tooth"]))).find(checkGet);

      // We retrieve a seal tooth at the start of the day, so this is just to make sure nothing has gone awry.
      if (!stasisItem) throw new Error("Acquire a seal tooth and run garbo again.");

      // Construct the monster HP component of the stasis condition
      // Evaluate the passive damage
      var passiveDamage = maxPassiveDamage() + 5;
      // Are we aiming to crit? If so, we need to respect the passive damage
      // Also we need to respect our health total
      var hpCheck = checkPassive ? "!hppercentbelow 25 && monsterhpabove ".concat(passiveDamage) : "!hppercentbelow 25";
      // Same story but for the sixgun shot, which wants 40 more HP if possible
      var hpCheckSixgun = checkPassive ? "!hppercentbelow 25 && monsterhpabove ".concat(passiveDamage + 40) : "!hppercentbelow 25";

      // Determine how long we'll be stasising for
      // By default there's no reason to stasis
      var stasisRounds = 0;
      if ([$familiar(combat_templateObject90 || (combat_templateObject90 = src_combat_taggedTemplateLiteral(["Cocoabo"]))), $familiar(combat_templateObject91 || (combat_templateObject91 = src_combat_taggedTemplateLiteral(["Feather Boa Constrictor"]))), $familiar(combat_templateObject92 || (combat_templateObject92 = src_combat_taggedTemplateLiteral(["Ninja Pirate Zombie Robot"]))), $familiar(combat_templateObject93 || (combat_templateObject93 = src_combat_taggedTemplateLiteral(["Stocking Mimic"])))].includes((0,external_kolmafia_namespaceObject.myFamiliar)())) {
        // Cocoabo-likes drop meat for the first ten rounds of combat
        stasisRounds = 10;
      }
      if ((0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(combat_templateObject94 || (combat_templateObject94 = src_combat_taggedTemplateLiteral(["Hobo Monkey"]))) || (0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(combat_templateObject95 || (combat_templateObject95 = src_combat_taggedTemplateLiteral(["Buddy Bjorn"])))) || (0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(combat_templateObject96 || (combat_templateObject96 = src_combat_taggedTemplateLiteral(["Crown of Thrones"])))) || property_get("_bittycar")) {
        // These things can take a little longer to proc sometimes
        stasisRounds = 20;
      }
      if (config_globalOptions.quick) {
        // long fights can be very slow
        stasisRounds = Math.min(5, stasisRounds);
      }

      // Ignore unexpected monsters, holiday scaling monsters seem to abort with monsterhpabove
      // Delevel the sausage goblins as otherwise they can kind of hurt
      return this.if_("monstername angry tourist || monstername garbage tourist || monstername horrible tourist family || monstername Knob Goblin Embezzler || monstername sausage goblin", Macro.externalIf(lib_have(template_string_$item(combat_templateObject97 || (combat_templateObject97 = src_combat_taggedTemplateLiteral(["Time-Spinner"])))), Macro.if_("".concat(hpCheck, " && monstername sausage goblin"), Macro.tryHaveItem(template_string_$item(combat_templateObject98 || (combat_templateObject98 = src_combat_taggedTemplateLiteral(["Time-Spinner"])))))).externalIf(lib_have($skill(combat_templateObject99 || (combat_templateObject99 = src_combat_taggedTemplateLiteral(["Meteor Lore"])))), Macro.if_("".concat(hpCheck, " && monstername sausage goblin"), Macro.tryHaveSkill($skill(combat_templateObject100 || (combat_templateObject100 = src_combat_taggedTemplateLiteral(["Micrometeorite"])))))).externalIf((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(combat_templateObject101 || (combat_templateObject101 = src_combat_taggedTemplateLiteral(["Pantsgiving"])))), Macro.if_("".concat(hpCheck), Macro.trySkill($skill(combat_templateObject102 || (combat_templateObject102 = src_combat_taggedTemplateLiteral(["Pocket Crumbs"])))))).externalIf(getSkills().includes($skill(combat_templateObject103 || (combat_templateObject103 = src_combat_taggedTemplateLiteral(["Extract"])))), Macro.if_("".concat(hpCheck), Macro.trySkill($skill(combat_templateObject104 || (combat_templateObject104 = src_combat_taggedTemplateLiteral(["Extract"])))))).externalIf((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(_templateObject105 || (_templateObject105 = src_combat_taggedTemplateLiteral(["vampyric cloake"])))) && property_get("_vampyreCloakeFormUses") < 10, Macro.if_("".concat(hpCheck), Macro.tryHaveSkill($skill(_templateObject106 || (_templateObject106 = src_combat_taggedTemplateLiteral(["Become a Wolf"])))))).externalIf(lib_have(template_string_$item(_templateObject107 || (_templateObject107 = src_combat_taggedTemplateLiteral(["porquoise-handled sixgun"])))), Macro.if_("".concat(hpCheckSixgun), Macro.tryItem(template_string_$item(_templateObject108 || (_templateObject108 = src_combat_taggedTemplateLiteral(["porquoise-handled sixgun"])))))).while_("".concat(hpCheck, " && !pastround ").concat(stasisRounds), Macro.item(stasisItem)));
    }
  }, {
    key: "startCombat",
    value: function startCombat() {
      return this.tryHaveSkill($skill(_templateObject109 || (_templateObject109 = src_combat_taggedTemplateLiteral(["Sing Along"])))).tryHaveSkill($skill(_templateObject110 || (_templateObject110 = src_combat_taggedTemplateLiteral(["Curse of Weaksauce"])))).familiarActions().externalIf(property_get("cosmicBowlingBallReturnCombats") < 1, Macro.trySkill($skill(_templateObject111 || (_templateObject111 = src_combat_taggedTemplateLiteral(["Bowl Straight Up"]))))).externalIf((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(_templateObject112 || (_templateObject112 = src_combat_taggedTemplateLiteral(["vampyric cloake"])))) && property_get("_vampyreCloakeFormUses") < 10, Macro.tryHaveSkill($skill(_templateObject113 || (_templateObject113 = src_combat_taggedTemplateLiteral(["Become a Wolf"]))))).externalIf((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(_templateObject114 || (_templateObject114 = src_combat_taggedTemplateLiteral(["Pantsgiving"])))), Macro.trySkill($skill(_templateObject115 || (_templateObject115 = src_combat_taggedTemplateLiteral(["Pocket Crumbs"]))))).externalIf(getSkills().includes($skill(_templateObject116 || (_templateObject116 = src_combat_taggedTemplateLiteral(["Extract"])))), Macro.trySkill($skill(_templateObject117 || (_templateObject117 = src_combat_taggedTemplateLiteral(["Extract"]))))).tryHaveItem(template_string_$item(_templateObject118 || (_templateObject118 = src_combat_taggedTemplateLiteral(["porquoise-handled sixgun"])))).externalIf(lib_have($skill(_templateObject119 || (_templateObject119 = src_combat_taggedTemplateLiteral(["Meteor Lore"])))), Macro.trySkill($skill(_templateObject120 || (_templateObject120 = src_combat_taggedTemplateLiteral(["Micrometeorite"]))))).tryHaveItem(template_string_$item(_templateObject121 || (_templateObject121 = src_combat_taggedTemplateLiteral(["Time-Spinner"])))).tryHaveItem(template_string_$item(_templateObject122 || (_templateObject122 = src_combat_taggedTemplateLiteral(["Rain-Doh indigo cup"])))).tryHaveItem(template_string_$item(_templateObject123 || (_templateObject123 = src_combat_taggedTemplateLiteral(["Rain-Doh blue balls"])))).externalIf((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(_templateObject124 || (_templateObject124 = src_combat_taggedTemplateLiteral(["Buddy Bjorn"])))) || (0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(_templateObject125 || (_templateObject125 = src_combat_taggedTemplateLiteral(["Crown of Thrones"])))), Macro.while_("!pastround 3 && !hppercentbelow 25", Macro.item(template_string_$item(_templateObject126 || (_templateObject126 = src_combat_taggedTemplateLiteral(["seal tooth"])))))).externalIf([$familiar(_templateObject127 || (_templateObject127 = src_combat_taggedTemplateLiteral(["Cocoabo"]))), $familiar(_templateObject128 || (_templateObject128 = src_combat_taggedTemplateLiteral(["Feather Boa Constrictor"]))), $familiar(_templateObject129 || (_templateObject129 = src_combat_taggedTemplateLiteral(["Ninja Pirate Zombie Robot"]))), $familiar(_templateObject130 || (_templateObject130 = src_combat_taggedTemplateLiteral(["Stocking Mimic"])))].some(familiar => (0,external_kolmafia_namespaceObject.myFamiliar)() === familiar), Macro.while_("!pastround 10 && !hppercentbelow 25", Macro.item(template_string_$item(_templateObject131 || (_templateObject131 = src_combat_taggedTemplateLiteral(["seal tooth"])))))).externalIf((0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(_templateObject132 || (_templateObject132 = src_combat_taggedTemplateLiteral(["Hobo Monkey"]))), Macro.while_("!match \"shoulder, and hands you some Meat.\" && !pastround 5 && !hppercentbelow 25", Macro.item(template_string_$item(_templateObject133 || (_templateObject133 = src_combat_taggedTemplateLiteral(["seal tooth"]))))));
    }
  }, {
    key: "kill",
    value: function kill() {
      return this.externalIf((0,external_kolmafia_namespaceObject.myClass)() === $class(_templateObject134 || (_templateObject134 = src_combat_taggedTemplateLiteral(["Sauceror"]))) && lib_have($skill(_templateObject135 || (_templateObject135 = src_combat_taggedTemplateLiteral(["Curse of Weaksauce"])))), Macro.trySkill($skill(_templateObject136 || (_templateObject136 = src_combat_taggedTemplateLiteral(["Curse of Weaksauce"]))))).tryHaveSkill($skill(_templateObject137 || (_templateObject137 = src_combat_taggedTemplateLiteral(["Become a Wolf"])))).externalIf(!((0,external_kolmafia_namespaceObject.myClass)() === $class(_templateObject138 || (_templateObject138 = src_combat_taggedTemplateLiteral(["Sauceror"]))) && lib_have($skill(_templateObject139 || (_templateObject139 = src_combat_taggedTemplateLiteral(["Curse of Weaksauce"]))))), Macro.while_("!pastround 24 && !hppercentbelow 25 && !missed 1", Macro.attack()))
      // Using while_ here in case you run out of mp
      .while_("hasskill Saucegeyser", Macro.skill($skill(_templateObject140 || (_templateObject140 = src_combat_taggedTemplateLiteral(["Saucegeyser"]))))).while_("hasskill Weapon of the Pastalord", Macro.skill($skill(_templateObject141 || (_templateObject141 = src_combat_taggedTemplateLiteral(["Weapon of the Pastalord"]))))).while_("hasskill Cannelloni Cannon", Macro.skill($skill(_templateObject142 || (_templateObject142 = src_combat_taggedTemplateLiteral(["Cannelloni Cannon"]))))).while_("hasskill Wave of Sauce", Macro.skill($skill(_templateObject143 || (_templateObject143 = src_combat_taggedTemplateLiteral(["Wave of Sauce"]))))).while_("hasskill Saucestorm", Macro.skill($skill(_templateObject144 || (_templateObject144 = src_combat_taggedTemplateLiteral(["Saucestorm"]))))).while_("hasskill Lunging Thrust-Smack", Macro.skill($skill(_templateObject145 || (_templateObject145 = src_combat_taggedTemplateLiteral(["Lunging Thrust-Smack"]))))).attack().repeat();
    }
  }, {
    key: "basicCombat",
    value: function basicCombat() {
      return this.startCombat().kill();
    }
  }, {
    key: "ghostBustin",
    value: function ghostBustin() {
      var _classStun;
      // Only bust ghosts if you have enough stunners to prevent getting hit
      var stunRounds = 0;
      var classStun = null;
      var extraStun = null;
      if (lib_have(template_string_$item(_templateObject146 || (_templateObject146 = src_combat_taggedTemplateLiteral(["Rain-Doh blue balls"]))))) stunRounds++;
      if (property_get("lovebugsUnlocked")) stunRounds++;
      if ((0,external_kolmafia_namespaceObject.myClass)() === $class(_templateObject147 || (_templateObject147 = src_combat_taggedTemplateLiteral(["Seal Clubber"]))) && lib_have($skill(_templateObject148 || (_templateObject148 = src_combat_taggedTemplateLiteral(["Club Foot"])))) && (0,external_kolmafia_namespaceObject.myMp)() >= (0,external_kolmafia_namespaceObject.mpCost)($skill(_templateObject149 || (_templateObject149 = src_combat_taggedTemplateLiteral(["Club Foot"]))))) {
        var clubRounds = Math.min((0,external_kolmafia_namespaceObject.myFury)(), 3) + ((0,external_kolmafia_namespaceObject.itemType)((0,external_kolmafia_namespaceObject.equippedItem)($slot(_templateObject150 || (_templateObject150 = src_combat_taggedTemplateLiteral(["weapon"]))))) === "club" ? 1 : 0) - 1;
        if (stunRounds > 0) {
          classStun = $skill(_templateObject151 || (_templateObject151 = src_combat_taggedTemplateLiteral(["Club Foot"])));
          stunRounds += clubRounds;
        }
      } else if ((0,external_kolmafia_namespaceObject.myClass)() === $class(_templateObject152 || (_templateObject152 = src_combat_taggedTemplateLiteral(["Turtle Tamer"]))) && lib_have($skill(_templateObject153 || (_templateObject153 = src_combat_taggedTemplateLiteral(["Shell Up"])))) && (0,external_kolmafia_namespaceObject.myMp)() >= (0,external_kolmafia_namespaceObject.mpCost)($skill(_templateObject154 || (_templateObject154 = src_combat_taggedTemplateLiteral(["Shell Up"]))))) {
        var shellRounds = (lib_have(template_string_$effect(_templateObject155 || (_templateObject155 = src_combat_taggedTemplateLiteral(["Blessing of the Storm Tortoise"])))) ? 2 : 0) + (lib_have(template_string_$effect(_templateObject156 || (_templateObject156 = src_combat_taggedTemplateLiteral(["Grand Blessing of the Storm Tortoise"])))) ? 3 : 0) + (lib_have(template_string_$effect(_templateObject157 || (_templateObject157 = src_combat_taggedTemplateLiteral(["Glorious Blessing of the Storm Tortoise"])))) ? 4 : 0);
        if (shellRounds > 0) {
          classStun = $skill(_templateObject158 || (_templateObject158 = src_combat_taggedTemplateLiteral(["Shell Up"])));
          stunRounds += shellRounds;
        }
      } else if ((0,external_kolmafia_namespaceObject.myClass)() === $class(_templateObject159 || (_templateObject159 = src_combat_taggedTemplateLiteral(["Pastamancer"]))) && lib_have($skill(_templateObject160 || (_templateObject160 = src_combat_taggedTemplateLiteral(["Entangling Noodles"])))) && (0,external_kolmafia_namespaceObject.myMp)() >= (0,external_kolmafia_namespaceObject.mpCost)($skill(_templateObject161 || (_templateObject161 = src_combat_taggedTemplateLiteral(["Entangling Noodles"]))))) {
        classStun = $skill(_templateObject162 || (_templateObject162 = src_combat_taggedTemplateLiteral(["Entangling Noodles"])));
        stunRounds += 2;
      } else if ((0,external_kolmafia_namespaceObject.myClass)() === $class(_templateObject163 || (_templateObject163 = src_combat_taggedTemplateLiteral(["Sauceror"]))) && lib_have($skill(_templateObject164 || (_templateObject164 = src_combat_taggedTemplateLiteral(["Soul Bubble"])))) && (0,external_kolmafia_namespaceObject.mySoulsauce)() >= 5) {
        classStun = $skill(_templateObject165 || (_templateObject165 = src_combat_taggedTemplateLiteral(["Soul Bubble"])));
        stunRounds += 2;
      } else if ((0,external_kolmafia_namespaceObject.myClass)() === $class(_templateObject166 || (_templateObject166 = src_combat_taggedTemplateLiteral(["Accordion Thief"]))) && lib_have($skill(_templateObject167 || (_templateObject167 = src_combat_taggedTemplateLiteral(["Accordion Bash"])))) && (0,external_kolmafia_namespaceObject.itemType)((0,external_kolmafia_namespaceObject.equippedItem)($slot(_templateObject168 || (_templateObject168 = src_combat_taggedTemplateLiteral(["weapon"]))))) === "accordion" && (0,external_kolmafia_namespaceObject.myMp)() >= (0,external_kolmafia_namespaceObject.mpCost)($skill(_templateObject169 || (_templateObject169 = src_combat_taggedTemplateLiteral(["Accordion Bash"]))))) {
        classStun = $skill(_templateObject170 || (_templateObject170 = src_combat_taggedTemplateLiteral(["Accordion Bash"])));
        stunRounds += 2;
      } else if ((0,external_kolmafia_namespaceObject.myClass)() === $class(_templateObject171 || (_templateObject171 = src_combat_taggedTemplateLiteral(["Disco Bandit"])))) {
        // Rave Knockout seems like a pain
      }

      // Don't use shadow noodles unless we really need it.
      if (stunRounds < 3 && classStun !== $skill(_templateObject172 || (_templateObject172 = src_combat_taggedTemplateLiteral(["Entangling Noodles"]))) && lib_have($skill(_templateObject173 || (_templateObject173 = src_combat_taggedTemplateLiteral(["Shadow Noodles"])))) && (0,external_kolmafia_namespaceObject.myMp)() >= (0,external_kolmafia_namespaceObject.mpCost)((_classStun = classStun) !== null && _classStun !== void 0 ? _classStun : $skill.none) + (0,external_kolmafia_namespaceObject.mpCost)($skill(_templateObject174 || (_templateObject174 = src_combat_taggedTemplateLiteral(["Shadow Noodles"]))))) {
        extraStun = $skill(_templateObject175 || (_templateObject175 = src_combat_taggedTemplateLiteral(["Shadow Noodles"])));
        stunRounds += 2;
      }

      // Lacking multi-round stuns
      if (stunRounds < 3) {
        return this.basicCombat();
      }
      return this.tryHaveSkill($skill(_templateObject176 || (_templateObject176 = src_combat_taggedTemplateLiteral(["Sing Along"])))).familiarActions().tryHaveItem(template_string_$item(_templateObject177 || (_templateObject177 = src_combat_taggedTemplateLiteral(["Rain-Doh blue balls"])))).externalIf(property_get("lovebugsUnlocked"), Macro.trySkill($skill(_templateObject178 || (_templateObject178 = src_combat_taggedTemplateLiteral(["Summon Love Gnats"]))))).tryHaveSkill(classStun).tryHaveSkill(extraStun).trySkill($skill(_templateObject179 || (_templateObject179 = src_combat_taggedTemplateLiteral(["Shoot Ghost"])))).trySkill($skill(_templateObject180 || (_templateObject180 = src_combat_taggedTemplateLiteral(["Shoot Ghost"])))).trySkill($skill(_templateObject181 || (_templateObject181 = src_combat_taggedTemplateLiteral(["Shoot Ghost"])))).trySkill($skill(_templateObject182 || (_templateObject182 = src_combat_taggedTemplateLiteral(["Trap Ghost"])))).kill();
    }
  }], [{
    key: "tryHaveSkill",
    value: function tryHaveSkill(skill) {
      return new Macro().tryHaveSkill(skill);
    }
  }, {
    key: "tryHaveItem",
    value: function tryHaveItem(item) {
      return new Macro().tryHaveItem(item);
    }
  }, {
    key: "familiarActions",
    value: function familiarActions() {
      return new Macro().familiarActions();
    }
  }, {
    key: "tryCopier",
    value: function tryCopier(itemOrSkill) {
      return new Macro().tryCopier(itemOrSkill);
    }
  }, {
    key: "meatKill",
    value: function meatKill() {
      return new Macro().meatKill();
    }
  }, {
    key: "meatStasis",
    value: function meatStasis(checkPassive) {
      return new Macro().meatStasis(checkPassive);
    }
  }, {
    key: "startCombat",
    value: function startCombat() {
      return new Macro().startCombat();
    }
  }, {
    key: "kill",
    value: function kill() {
      return new Macro().kill();
    }
  }, {
    key: "basicCombat",
    value: function basicCombat() {
      return new Macro().basicCombat();
    }
  }, {
    key: "ghostBustin",
    value: function ghostBustin() {
      return new Macro().ghostBustin();
    }
  }]);
  return Macro;
}(StrictMacro);
function customizeMacro(macro) {
  return combat_Macro.if_($monsters(_templateObject183 || (_templateObject183 = src_combat_taggedTemplateLiteral(["giant rubber spider, time-spinner prank"]))), combat_Macro.kill()).externalIf(lib_have(template_string_$effect(_templateObject184 || (_templateObject184 = src_combat_taggedTemplateLiteral(["Eldritch Attunement"])))), combat_Macro.if_($monster(_templateObject185 || (_templateObject185 = src_combat_taggedTemplateLiteral(["Eldritch Tentacle"]))), combat_Macro.basicCombat())).ifHolidayWanderer(combat_Macro.externalIf((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(_templateObject186 || (_templateObject186 = src_combat_taggedTemplateLiteral(["backup camera"])))) && property_get("_backUpUses") < 11 && property_get("lastCopyableMonster") === $monster(_templateObject187 || (_templateObject187 = src_combat_taggedTemplateLiteral(["Knob Goblin Embezzler"]))) && (0,external_kolmafia_namespaceObject.myFamiliar)() === meatFamiliar(), combat_Macro.skill($skill(_templateObject188 || (_templateObject188 = src_combat_taggedTemplateLiteral(["Back-Up to your Last Enemy"])))).step(macro), combat_Macro.basicCombat())).step(macro);
}
function makeCcs(macro) {
  (0,external_kolmafia_namespaceObject.writeCcs)("[default]\n\"".concat(customizeMacro(macro).toString(), "\""), "garbo");
  (0,external_kolmafia_namespaceObject.setCcs)("garbo");
}
function runCombatBy(initiateCombatAction) {
  try {
    var result = initiateCombatAction();
    while ((0,external_kolmafia_namespaceObject.inMultiFight)()) (0,external_kolmafia_namespaceObject.runCombat)();
    if ((0,external_kolmafia_namespaceObject.choiceFollowsFight)()) (0,external_kolmafia_namespaceObject.visitUrl)("choice.php");
    return result;
  } catch (e) {
    throw "Combat exception! Last macro error: ".concat(property_get("lastMacroError"), ". Exception ").concat(e, ".");
  }
}

/**
 * Attempt to perform a nonstandard combat-starting Action with a Macro
 * @param macro The Macro to attempt to use
 * @param action The combat-starting action to attempt
 * @param tryAuto Whether or not we should try to resolve the combat with an autoattack; autoattack macros can fail against special monsters, and thus we have to submit a macro via CCS regardless.
 * @returns The output of your specified action function (typically void)
 */
function withMacro(macro, action) {
  var tryAuto = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if ((0,external_kolmafia_namespaceObject.getAutoAttack)() !== 0) (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
  if (tryAuto) customizeMacro(macro).setAutoAttack();
  makeCcs(macro);
  try {
    return runCombatBy(action);
  } finally {
    if (tryAuto) (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
  }
}

/**
 * Adventure in a location and handle all combats with a given macro.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param macro Macro to execute.
 */
function garboAdventure(loc, macro) {
  if ((0,external_kolmafia_namespaceObject.getAutoAttack)() !== 0) (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
  makeCcs(macro);
  runCombatBy(() => (0,external_kolmafia_namespaceObject.adv1)(loc, -1, ""));
}

/**
 * Adventure in a location and handle all combats with a given autoattack and manual macro.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param autoMacro Macro to execute via KoL autoattack.
 * @param nextMacro Macro to execute manually after autoattack completes.
 */
function garboAdventureAuto(loc, autoMacro) {
  var nextMacro = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : combat_Macro.abort();
  autoMacro.setAutoAttack();
  makeCcs(nextMacro);
  runCombatBy(() => (0,external_kolmafia_namespaceObject.adv1)(loc, -1, ""));
}
;// CONCATENATED MODULE: ./src/extrovermectin.ts
var extrovermectin_templateObject, extrovermectin_templateObject2, extrovermectin_templateObject3, extrovermectin_templateObject4, extrovermectin_templateObject5, extrovermectin_templateObject6, extrovermectin_templateObject7, extrovermectin_templateObject8, extrovermectin_templateObject9, extrovermectin_templateObject10, extrovermectin_templateObject11, extrovermectin_templateObject12, extrovermectin_templateObject13, extrovermectin_templateObject14, extrovermectin_templateObject15, extrovermectin_templateObject16, extrovermectin_templateObject17, extrovermectin_templateObject18, extrovermectin_templateObject19, extrovermectin_templateObject20, extrovermectin_templateObject21, extrovermectin_templateObject22, extrovermectin_templateObject23, extrovermectin_templateObject24, extrovermectin_templateObject25, extrovermectin_templateObject26, extrovermectin_templateObject27, extrovermectin_templateObject28, extrovermectin_templateObject29, extrovermectin_templateObject30, extrovermectin_templateObject31, extrovermectin_templateObject32, extrovermectin_templateObject33, extrovermectin_templateObject34, extrovermectin_templateObject35, extrovermectin_templateObject36, extrovermectin_templateObject37, extrovermectin_templateObject38, extrovermectin_templateObject39, extrovermectin_templateObject40, extrovermectin_templateObject41, extrovermectin_templateObject42, extrovermectin_templateObject43, extrovermectin_templateObject44, extrovermectin_templateObject45, extrovermectin_templateObject46, extrovermectin_templateObject47, extrovermectin_templateObject48, extrovermectin_templateObject49, extrovermectin_templateObject50, extrovermectin_templateObject51, extrovermectin_templateObject52, extrovermectin_templateObject53, extrovermectin_templateObject54, extrovermectin_templateObject55, extrovermectin_templateObject56, extrovermectin_templateObject57, extrovermectin_templateObject58, extrovermectin_templateObject59, extrovermectin_templateObject60, extrovermectin_templateObject61, extrovermectin_templateObject62, extrovermectin_templateObject63, extrovermectin_templateObject64, extrovermectin_templateObject65, extrovermectin_templateObject66;
function extrovermectin_toConsumableArray(arr) { return extrovermectin_arrayWithoutHoles(arr) || extrovermectin_iterableToArray(arr) || extrovermectin_unsupportedIterableToArray(arr) || extrovermectin_nonIterableSpread(); }
function extrovermectin_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function extrovermectin_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return extrovermectin_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return extrovermectin_arrayLikeToArray(o, minLen); }
function extrovermectin_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function extrovermectin_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return extrovermectin_arrayLikeToArray(arr); }
function extrovermectin_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function extrovermectin_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }








function expectedGregs() {
  var baseGregs = 3;
  var timeSpunGregs = lib_have(template_string_$item(extrovermectin_templateObject || (extrovermectin_templateObject = extrovermectin_taggedTemplateLiteral(["Time-Spinner"])))) ? Math.floor((10 - property_get("_timeSpinnerMinutesUsed")) / 3) : 0;
  var orbGregs = lib_have(template_string_$item(extrovermectin_templateObject2 || (extrovermectin_templateObject2 = extrovermectin_taggedTemplateLiteral(["miniature crystal ball"])))) ? 1 : 0;
  var macrometeors = lib_have($skill(extrovermectin_templateObject3 || (extrovermectin_templateObject3 = extrovermectin_taggedTemplateLiteral(["Meteor Lore"])))) ? 10 - property_get("_macrometeoriteUses") : 0;
  var replaceEnemies = lib_have(template_string_$item(extrovermectin_templateObject4 || (extrovermectin_templateObject4 = extrovermectin_taggedTemplateLiteral(["Powerful Glove"])))) ? Math.floor((100 - property_get("_powerfulGloveBatteryPowerUsed")) / 10) : 0;
  var totalMonsterReplacers = macrometeors + replaceEnemies;
  var sabersLeft = lib_have(template_string_$item(extrovermectin_templateObject5 || (extrovermectin_templateObject5 = extrovermectin_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) ? utils_clamp(5 - property_get("_saberForceUses"), 0, 3) : 0;
  var gregs = [];

  // these are estimates based on intuition
  var replacesPerGreg = lib_have($skill(extrovermectin_templateObject6 || (extrovermectin_templateObject6 = extrovermectin_taggedTemplateLiteral(["Transcendent Olfaction"])))) ? 7 : 5;
  var firstReplaces = utils_clamp(sabersLeft * 2 + replacesPerGreg, 0, totalMonsterReplacers);
  gregs.push(baseGregs + orbGregs + timeSpunGregs + firstReplaces);
  totalMonsterReplacers -= firstReplaces;
  while (totalMonsterReplacers > 0) {
    gregs.push(baseGregs + orbGregs + utils_clamp(replacesPerGreg, 0, totalMonsterReplacers));
    totalMonsterReplacers -= replacesPerGreg;
  }
  gregs.push(baseGregs + orbGregs);
  return gregs;
}
function doingExtrovermectin() {
  return property_get("beGregariousCharges") > 0 || property_get("beGregariousFightsLeft") > 0 || config_globalOptions.prefs.yachtzeechain && !property_get("_garboYachtzeeChainCompleted");
}
function crateStrategy() {
  if (!doingExtrovermectin()) return null;
  if (lib_have($skill(extrovermectin_templateObject7 || (extrovermectin_templateObject7 = extrovermectin_taggedTemplateLiteral(["Transcendent Olfaction"])))) && (getString("olfactedMonster") === "crate" || property_get("_olfactionsUsed") < 2) || lib_have($skill(extrovermectin_templateObject8 || (extrovermectin_templateObject8 = extrovermectin_taggedTemplateLiteral(["Long Con"])))) && (property_get("longConMonster") === $monster(extrovermectin_templateObject9 || (extrovermectin_templateObject9 = extrovermectin_taggedTemplateLiteral(["crate"]))) || property_get("_longConUsed") < 4)) {
    return "Sniff";
  }
  if (lib_have(template_string_$item(extrovermectin_templateObject10 || (extrovermectin_templateObject10 = extrovermectin_taggedTemplateLiteral(["miniature crystal ball"]))))) return "Orb";
  if (lib_have(template_string_$item(extrovermectin_templateObject11 || (extrovermectin_templateObject11 = extrovermectin_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) && property_get("_saberForceUses") < 5) return "Saber";
  return null;
}
function hasMonsterReplacers() {
  return lib_have($skill(extrovermectin_templateObject12 || (extrovermectin_templateObject12 = extrovermectin_taggedTemplateLiteral(["Meteor Lore"])))) && property_get("_macrometeoriteUses") < 10 || lib_have(template_string_$item(extrovermectin_templateObject13 || (extrovermectin_templateObject13 = extrovermectin_taggedTemplateLiteral(["Powerful Glove"])))) && property_get("_powerfulGloveBatteryPowerUsed") < 90;
}

/**
 * Saberfriends a crate if we are able to do so.
 */
function saberCrateIfSafe() {
  var canSaber = lib_have(template_string_$item(extrovermectin_templateObject14 || (extrovermectin_templateObject14 = extrovermectin_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) && property_get("_saberForceUses") < 5;
  var isSafeToSaber = property_get("beGregariousFightsLeft") === 0 || property_get("_saberForceMonsterCount") > 0;
  if (!canSaber || !isSafeToSaber) return;
  do {
    var _tryFindFreeRun, _run$constraints$fami, _run$constraints$fami2, _run$constraints, _run$constraints$prep, _run$constraints2, _run$constraints$equi, _run$constraints$equi2, _run$constraints3;
    var run = (_tryFindFreeRun = tryFindFreeRun()) !== null && _tryFindFreeRun !== void 0 ? _tryFindFreeRun : ltbRun();
    (0,external_kolmafia_namespaceObject.useFamiliar)((_run$constraints$fami = (_run$constraints$fami2 = (_run$constraints = run.constraints).familiar) === null || _run$constraints$fami2 === void 0 ? void 0 : _run$constraints$fami2.call(_run$constraints)) !== null && _run$constraints$fami !== void 0 ? _run$constraints$fami : freeFightFamiliar({
      canChooseMacro: false
    }));
    (_run$constraints$prep = (_run$constraints2 = run.constraints).preparation) === null || _run$constraints$prep === void 0 ? void 0 : _run$constraints$prep.call(_run$constraints2);
    new Requirement([], {
      forceEquip: template_string_$items(extrovermectin_templateObject15 || (extrovermectin_templateObject15 = extrovermectin_taggedTemplateLiteral(["Fourth of May Cosplay Saber"]))),
      preventEquip: template_string_$items(extrovermectin_templateObject16 || (extrovermectin_templateObject16 = extrovermectin_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))
    }).merge((_run$constraints$equi = (_run$constraints$equi2 = (_run$constraints3 = run.constraints).equipmentRequirements) === null || _run$constraints$equi2 === void 0 ? void 0 : _run$constraints$equi2.call(_run$constraints3)) !== null && _run$constraints$equi !== void 0 ? _run$constraints$equi : new Requirement([], {})).maximize();
    setChoice(1387, 2);
    garboAdventure($location(extrovermectin_templateObject17 || (extrovermectin_templateObject17 = extrovermectin_taggedTemplateLiteral(["Noob Cave"]))), combat_Macro.if_($monster(extrovermectin_templateObject18 || (extrovermectin_templateObject18 = extrovermectin_taggedTemplateLiteral(["crate"]))), combat_Macro.skill($skill(extrovermectin_templateObject19 || (extrovermectin_templateObject19 = extrovermectin_taggedTemplateLiteral(["Use the Force"]))))).if_($monster(extrovermectin_templateObject20 || (extrovermectin_templateObject20 = extrovermectin_taggedTemplateLiteral(["sausage goblin"]))), combat_Macro.kill()).ifHolidayWanderer(run.macro).abort());
  } while (["Puttin' it on Wax", "Wooof! Wooooooof!", "Playing Fetch*", "Your Dog Found Something Again"].includes(property_get("lastEncounter")));
}

/**
 * Equip the miniature crystal ball if the current prediction is good for us.
 */
function equipOrbIfDesired() {
  if (lib_have(template_string_$item(extrovermectin_templateObject21 || (extrovermectin_templateObject21 = extrovermectin_taggedTemplateLiteral(["miniature crystal ball"])))) && !(property_get("_saberForceMonster") === $monster(extrovermectin_templateObject22 || (extrovermectin_templateObject22 = extrovermectin_taggedTemplateLiteral(["crate"]))) && property_get("_saberForceMonsterCount") > 0) && crateStrategy() !== "Sniff" && [undefined, $monster(extrovermectin_templateObject23 || (extrovermectin_templateObject23 = extrovermectin_taggedTemplateLiteral(["crate"])))].includes(ponder().get($location(extrovermectin_templateObject24 || (extrovermectin_templateObject24 = extrovermectin_taggedTemplateLiteral(["Noob Cave"])))))) {
    (0,external_kolmafia_namespaceObject.equip)($slot(extrovermectin_templateObject25 || (extrovermectin_templateObject25 = extrovermectin_taggedTemplateLiteral(["familiar"]))), template_string_$item(extrovermectin_templateObject26 || (extrovermectin_templateObject26 = extrovermectin_taggedTemplateLiteral(["miniature crystal ball"]))));
  }
}

/**
 * Pre-olfact/saber crates, for extrovermectin/gregarious reasons.
 */
function initializeCrates() {
  do {
    // We use the force while olfacting sometimes, so we'll need to refresh mafia's knowledge of olfaction
    if (getString("olfactedMonster") !== "crate") {
      (0,external_kolmafia_namespaceObject.visitUrl)("desc_effect.php?whicheffect=".concat(template_string_$effect(extrovermectin_templateObject27 || (extrovermectin_templateObject27 = extrovermectin_taggedTemplateLiteral(["On the Trail"]))).descid));
    }
    // if we have olfaction, that's our primary method for ensuring crates
    if (crateStrategy() === "Sniff" && (getString("olfactedMonster") !== "crate" || !lib_have(template_string_$effect(extrovermectin_templateObject28 || (extrovermectin_templateObject28 = extrovermectin_taggedTemplateLiteral(["On the Trail"])))) || getString("longConMonster") !== "crate" || property_get("_longConUsed") <= 0) || crateStrategy() === "Orb" && (property_get("_gallapagosMonster") !== $monster(extrovermectin_templateObject29 || (extrovermectin_templateObject29 = extrovermectin_taggedTemplateLiteral(["crate"]))) && lib_have($skill(extrovermectin_templateObject30 || (extrovermectin_templateObject30 = extrovermectin_taggedTemplateLiteral(["Gallapagosian Mating Call"])))) || lib_have(template_string_$item(extrovermectin_templateObject31 || (extrovermectin_templateObject31 = extrovermectin_taggedTemplateLiteral(["latte lovers member's mug"])))) && !property_get("_latteCopyUsed"))) {
      var _tryFindFreeRun2, _run$constraints$fami3, _run$constraints$fami4, _run$constraints4, _run$constraints$prep2, _run$constraints5, _run$constraints$equi3, _run$constraints$equi4, _run$constraints6;
      var run = (_tryFindFreeRun2 = tryFindFreeRun(latteActionSourceFinderConstraints)) !== null && _tryFindFreeRun2 !== void 0 ? _tryFindFreeRun2 : ltbRun();
      setChoice(1387, 2); // use the force, in case we decide to use that

      // Sniff the crate in as many ways as humanly possible
      var macro = combat_Macro.trySkill($skill(extrovermectin_templateObject32 || (extrovermectin_templateObject32 = extrovermectin_taggedTemplateLiteral(["Transcendent Olfaction"])))).trySkill($skill(extrovermectin_templateObject33 || (extrovermectin_templateObject33 = extrovermectin_taggedTemplateLiteral(["Long Con"])))).trySkill($skill(extrovermectin_templateObject34 || (extrovermectin_templateObject34 = extrovermectin_taggedTemplateLiteral(["Offer Latte to Opponent"])))).externalIf(property_get("_gallapagosMonster") !== $monster(extrovermectin_templateObject35 || (extrovermectin_templateObject35 = extrovermectin_taggedTemplateLiteral(["crate"]))) && lib_have($skill(extrovermectin_templateObject36 || (extrovermectin_templateObject36 = extrovermectin_taggedTemplateLiteral(["Gallapagosian Mating Call"])))), combat_Macro.trySkill($skill(extrovermectin_templateObject37 || (extrovermectin_templateObject37 = extrovermectin_taggedTemplateLiteral(["Gallapagosian Mating Call"]))))).trySkill($skill(extrovermectin_templateObject38 || (extrovermectin_templateObject38 = extrovermectin_taggedTemplateLiteral(["Use the Force"])))).step(run.macro);

      // equip latte and saber for lattesniff and saberfriends, if we want to
      // Crank up ML to make sure the crate survives several rounds; we may have some passive damage
      (0,external_kolmafia_namespaceObject.useFamiliar)((_run$constraints$fami3 = (_run$constraints$fami4 = (_run$constraints4 = run.constraints).familiar) === null || _run$constraints$fami4 === void 0 ? void 0 : _run$constraints$fami4.call(_run$constraints4)) !== null && _run$constraints$fami3 !== void 0 ? _run$constraints$fami3 : freeFightFamiliar({
        canChooseMacro: false
      }));
      (_run$constraints$prep2 = (_run$constraints5 = run.constraints).preparation) === null || _run$constraints$prep2 === void 0 ? void 0 : _run$constraints$prep2.call(_run$constraints5);
      new Requirement(["100 Monster Level"], {
        forceEquip: template_string_$items(extrovermectin_templateObject39 || (extrovermectin_templateObject39 = extrovermectin_taggedTemplateLiteral(["latte lovers member's mug, Fourth of May Cosplay Saber"]))).filter(item => lib_have(item)),
        preventEquip: template_string_$items(extrovermectin_templateObject40 || (extrovermectin_templateObject40 = extrovermectin_taggedTemplateLiteral(["carnivorous potted plant"])))
      }).merge((_run$constraints$equi3 = (_run$constraints$equi4 = (_run$constraints6 = run.constraints).equipmentRequirements) === null || _run$constraints$equi4 === void 0 ? void 0 : _run$constraints$equi4.call(_run$constraints6)) !== null && _run$constraints$equi3 !== void 0 ? _run$constraints$equi3 : new Requirement([], {})).maximize();
      garboAdventure($location(extrovermectin_templateObject41 || (extrovermectin_templateObject41 = extrovermectin_taggedTemplateLiteral(["Noob Cave"]))), combat_Macro.if_($monster(extrovermectin_templateObject42 || (extrovermectin_templateObject42 = extrovermectin_taggedTemplateLiteral(["crate"]))), macro).ifHolidayWanderer(run.macro).abort());
      (0,external_kolmafia_namespaceObject.visitUrl)("desc_effect.php?whicheffect=".concat(template_string_$effect(extrovermectin_templateObject43 || (extrovermectin_templateObject43 = extrovermectin_taggedTemplateLiteral(["On the Trail"]))).descid));
    } else if (crateStrategy() === "Saber" && (property_get("_saberForceMonster") !== $monster(extrovermectin_templateObject44 || (extrovermectin_templateObject44 = extrovermectin_taggedTemplateLiteral(["crate"]))) || property_get("_saberForceMonsterCount") === 0) && property_get("_saberForceUses") < 5) {
      saberCrateIfSafe();
    } else break; // we can break the loop if there's nothing to do
  } while (!["crate", "Using the Force"].includes(property_get("lastEncounter"))); // loop until we actually hit a crate
}

function initializeDireWarren() {
  (0,external_kolmafia_namespaceObject.visitUrl)("museum.php?action=icehouse");
  var banishedMonsters = getBanishedMonsters();
  if (banishedMonsters.get(template_string_$item(extrovermectin_templateObject45 || (extrovermectin_templateObject45 = extrovermectin_taggedTemplateLiteral(["ice house"])))) === $monster(extrovermectin_templateObject46 || (extrovermectin_templateObject46 = extrovermectin_taggedTemplateLiteral(["fluffy bunny"])))) return;
  var options = template_string_$items(extrovermectin_templateObject47 || (extrovermectin_templateObject47 = extrovermectin_taggedTemplateLiteral(["human musk, tryptophan dart, Daily Affirmation: Be a Mind Master"])));
  if (options.some(option => banishedMonsters.get(option) === $monster(extrovermectin_templateObject48 || (extrovermectin_templateObject48 = extrovermectin_taggedTemplateLiteral(["fluffy bunny"]))))) {
    return;
  }
  if (banishedMonsters.get($skill(extrovermectin_templateObject49 || (extrovermectin_templateObject49 = extrovermectin_taggedTemplateLiteral(["Batter Up!"])))) === $monster(extrovermectin_templateObject50 || (extrovermectin_templateObject50 = extrovermectin_taggedTemplateLiteral(["fluffy bunny"])))) return;
  if (!lib_have(template_string_$item(extrovermectin_templateObject51 || (extrovermectin_templateObject51 = extrovermectin_taggedTemplateLiteral(["miniature crystal ball"]))))) {
    options.push.apply(options, extrovermectin_toConsumableArray(template_string_$items(extrovermectin_templateObject52 || (extrovermectin_templateObject52 = extrovermectin_taggedTemplateLiteral(["Louder Than Bomb, tennis ball"])))));
  }
  var canBat = (0,external_kolmafia_namespaceObject.myFury)() >= 5 && lib_have($skill(extrovermectin_templateObject53 || (extrovermectin_templateObject53 = extrovermectin_taggedTemplateLiteral(["Batter Up!"]))));
  if (canBat) {
    var _Item$all$find;
    if (lib_have($skill(extrovermectin_templateObject54 || (extrovermectin_templateObject54 = extrovermectin_taggedTemplateLiteral(["Iron Palm Technique"])))) && !lib_have(template_string_$effect(extrovermectin_templateObject55 || (extrovermectin_templateObject55 = extrovermectin_taggedTemplateLiteral(["Iron Palms"]))))) {
      (0,external_kolmafia_namespaceObject.useSkill)($skill(extrovermectin_templateObject56 || (extrovermectin_templateObject56 = extrovermectin_taggedTemplateLiteral(["Iron Palm Technique"]))));
    }
    var availableClub = (_Item$all$find = external_kolmafia_namespaceObject.Item.all().find(i => lib_have(i) && (0,external_kolmafia_namespaceObject.canEquip)(i) && (0,external_kolmafia_namespaceObject.weaponHands)(i) === 2 && ((0,external_kolmafia_namespaceObject.itemType)(i) === "club" || lib_have(template_string_$effect(extrovermectin_templateObject57 || (extrovermectin_templateObject57 = extrovermectin_taggedTemplateLiteral(["Iron Palms"])))) && (0,external_kolmafia_namespaceObject.itemType)(i) === "sword"))) !== null && _Item$all$find !== void 0 ? _Item$all$find : template_string_$item(extrovermectin_templateObject58 || (extrovermectin_templateObject58 = extrovermectin_taggedTemplateLiteral(["amok putter"])));
    (0,external_kolmafia_namespaceObject.retrieveItem)(availableClub);
    new Requirement(["100 Monster Level"], {
      preventEquip: template_string_$items(extrovermectin_templateObject59 || (extrovermectin_templateObject59 = extrovermectin_taggedTemplateLiteral(["carnivorous potted plant"]))),
      forceEquip: [availableClub]
    }).maximize();
    do {
      garboAdventure($location(extrovermectin_templateObject62 || (extrovermectin_templateObject62 = extrovermectin_taggedTemplateLiteral(["The Dire Warren"]))), combat_Macro.if_($monster(extrovermectin_templateObject63 || (extrovermectin_templateObject63 = extrovermectin_taggedTemplateLiteral(["fluffy bunny"]))), combat_Macro.skill($skill(extrovermectin_templateObject64 || (extrovermectin_templateObject64 = extrovermectin_taggedTemplateLiteral(["Batter Up!"]))))).step(embezzlerMacro()));
    } while ((0,external_kolmafia_namespaceObject.myFury)() >= 5 && banishedMonsters.get($skill(extrovermectin_templateObject60 || (extrovermectin_templateObject60 = extrovermectin_taggedTemplateLiteral(["Batter Up!"])))) !== $monster(extrovermectin_templateObject61 || (extrovermectin_templateObject61 = extrovermectin_taggedTemplateLiteral(["fluffy bunny"]))));
  } else {
    var banish = lib_maxBy(options, external_kolmafia_namespaceObject.mallPrice, true);
    acquire(1, banish, 50000, true);
    do {
      garboAdventure($location(extrovermectin_templateObject65 || (extrovermectin_templateObject65 = extrovermectin_taggedTemplateLiteral(["The Dire Warren"]))), combat_Macro.if_($monster(extrovermectin_templateObject66 || (extrovermectin_templateObject66 = extrovermectin_taggedTemplateLiteral(["fluffy bunny"]))), combat_Macro.item(banish)).step(embezzlerMacro()));
    } while ("fluffy bunny" !== property_get("lastEncounter") && !property_get("banishedMonsters").includes("fluffy bunny"));
  }
}
function initializeExtrovermectinZones() {
  if (property_get("beGregariousFightsLeft") === 0) {
    if (hasMonsterReplacers()) initializeCrates();
    initializeDireWarren();
  }
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2020/Guzzlr.js
var Guzzlr_templateObject, Guzzlr_templateObject2, Guzzlr_templateObject3, Guzzlr_templateObject4, Guzzlr_templateObject5, Guzzlr_templateObject6, Guzzlr_templateObject7, Guzzlr_templateObject8, Guzzlr_templateObject9, Guzzlr_templateObject10, Guzzlr_templateObject11, Guzzlr_templateObject12, Guzzlr_templateObject13;
function Guzzlr_slicedToArray(arr, i) { return Guzzlr_arrayWithHoles(arr) || Guzzlr_iterableToArrayLimit(arr, i) || Guzzlr_unsupportedIterableToArray(arr, i) || Guzzlr_nonIterableRest(); }
function Guzzlr_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Guzzlr_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function Guzzlr_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Guzzlr_toConsumableArray(arr) { return Guzzlr_arrayWithoutHoles(arr) || Guzzlr_iterableToArray(arr) || Guzzlr_unsupportedIterableToArray(arr) || Guzzlr_nonIterableSpread(); }
function Guzzlr_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Guzzlr_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Guzzlr_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Guzzlr_arrayLikeToArray(o, minLen); }
function Guzzlr_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Guzzlr_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Guzzlr_arrayLikeToArray(arr); }
function Guzzlr_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Guzzlr_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var Guzzlr_item = template_string_$item(Guzzlr_templateObject || (Guzzlr_templateObject = Guzzlr_taggedTemplateLiteral(["Guzzlr tablet"])));
function Guzzlr_have() {
  return lib_have(Guzzlr_item);
}
function useTabletWithChoice(option) {
  withChoice(1412, option, () => (0,external_kolmafia_namespaceObject.use)(1, Guzzlr_item));
}
function isQuestActive() {
  return property_get("questGuzzlr") !== "unstarted";
}
/**
 * Platinum deliveries completed overall
 */
function getPlatinum() {
  return property_get("guzzlrPlatinumDeliveries");
}
/**
 * Platinum deliveries completed today
 */
function getPlatinumToday() {
  return property_get("_guzzlrPlatinumDeliveries");
}
/**
 * Can do a platinum delivery (haven't done one today)
 */
function canPlatinum() {
  return !isQuestActive() && getGold() >= 5 && getPlatinumToday() < 1;
}
/**
 * Have fully unlocked the platinum delivery bonuses (done >= 30)
 */
function haveFullPlatinumBonus() {
  return getPlatinum() >= 30;
}
/**
 * Accept platinum delivery
 */
function acceptPlatinum() {
  if (!canPlatinum()) return false;
  useTabletWithChoice(4);
  return true;
}
/**
 * Gold deliveries completed overall
 */
function getGold() {
  return property_get("guzzlrGoldDeliveries");
}
/**
 * Gold deliveries completed today
 */
function getGoldToday() {
  return property_get("_guzzlrGoldDeliveries");
}
/**
 * Can do a gold delivery (have done fewer than 3 today)
 */
function canGold() {
  return !isQuestActive() && getBronze() >= 5 && getGoldToday() < 3;
}
/**
 * Have fully unlocked the platinum delivery bonuses (done >= 30)
 */
function haveFullGoldBonus() {
  return getGold() >= 150;
}
/**
 * Accept gold delivery
 */
function acceptGold() {
  if (!canGold()) return false;
  useTabletWithChoice(3);
  return true;
}
/**
 * Bronze deliveries completed overall
 */
function getBronze() {
  return property_get("guzzlrBronzeDeliveries");
}
/**
 * Accept bronze delivery
 */
function acceptBronze() {
  if (isQuestActive()) return false;
  useTabletWithChoice(2);
  return true;
}
/**
 * Have fully unlocked the platinum delivery bonuses (done >= 30)
 */
function haveFullBronzeBonus() {
  return getBronze() >= 196;
}
/**
 * Can abandon the current Guzzlr quest
 */
function canAbandon() {
  return isQuestActive() && !property_get("_guzzlrQuestAbandoned");
}
/**
 * Abandon Guzzlr quest
 */
function abandon() {
  if (!canAbandon()) return false;
  (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?tap=guzzlr", false);
  (0,external_kolmafia_namespaceObject.runChoice)(1);
  (0,external_kolmafia_namespaceObject.runChoice)(5);
  return true;
}
/**
 * Get current Guzzlr quest location
 */
function Guzzlr_getLocation() {
  return property_get("guzzlrQuestLocation");
}
/**
 * Get current Guzzlr quest tier
 */
function getTier() {
  var tier = property_get("guzzlrQuestTier");
  return tier === "" ? null : tier;
}
/**
 * Get current Guzzlr quest booze
 */
function getBooze() {
  var booze = property_get("guzzlrQuestBooze");
  if (booze === "") return null;
  return external_kolmafia_namespaceObject.Item.get(booze);
}
/**
 * List of the platinum cocktails
 */
var Cocktails = template_string_$items(Guzzlr_templateObject2 || (Guzzlr_templateObject2 = Guzzlr_taggedTemplateLiteral(["Buttery Boy, Steamboat, Ghiaccio Colada, Nog-on-the-Cob, Sourfinger"])));
/**
 * Returns true if the user has a platinum cocktail in their inventory
 */
function havePlatinumBooze() {
  return Cocktails.some(cock => haveItem(cock));
}
/**
 * Returns true if the user has the cocktail that they need for their current quest
 *
 * If they have no quest, returns false
 */
function haveBooze() {
  var booze = getBooze();
  switch (booze) {
    case null:
      return false;
    case $item(Guzzlr_templateObject3 || (Guzzlr_templateObject3 = Guzzlr_taggedTemplateLiteral(["Guzzlr cocktail set"]))):
      return havePlatinumBooze();
    default:
      return haveItem(booze);
  }
}
var ingredientToPlatinumCocktail = new Map([[template_string_$item(Guzzlr_templateObject4 || (Guzzlr_templateObject4 = Guzzlr_taggedTemplateLiteral(["miniature boiler"]))), template_string_$item(Guzzlr_templateObject5 || (Guzzlr_templateObject5 = Guzzlr_taggedTemplateLiteral(["Steamboat"])))], [template_string_$item(Guzzlr_templateObject6 || (Guzzlr_templateObject6 = Guzzlr_taggedTemplateLiteral(["cold wad"]))), template_string_$item(Guzzlr_templateObject7 || (Guzzlr_templateObject7 = Guzzlr_taggedTemplateLiteral(["Ghiaccio Colada"])))], [template_string_$item(Guzzlr_templateObject8 || (Guzzlr_templateObject8 = Guzzlr_taggedTemplateLiteral(["robin's egg"]))), template_string_$item(Guzzlr_templateObject9 || (Guzzlr_templateObject9 = Guzzlr_taggedTemplateLiteral(["Nog-on-the-Cob"])))], [template_string_$item(Guzzlr_templateObject10 || (Guzzlr_templateObject10 = Guzzlr_taggedTemplateLiteral(["mangled finger"]))), template_string_$item(Guzzlr_templateObject11 || (Guzzlr_templateObject11 = Guzzlr_taggedTemplateLiteral(["Sourfinger"])))], [template_string_$item(Guzzlr_templateObject12 || (Guzzlr_templateObject12 = Guzzlr_taggedTemplateLiteral(["Dish of Clarified Butter"]))), template_string_$item(Guzzlr_templateObject13 || (Guzzlr_templateObject13 = Guzzlr_taggedTemplateLiteral(["Buttery Boy"])))]]);
var platinumCocktailToIngredient = invertMap(ingredientToPlatinumCocktail);
function getCheapestPlatinumCocktail() {
  var freeCraft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  if (freeCraft) {
    return maxBy(Array.from(ingredientToPlatinumCocktail), ingredientAndCocktail => Math.min.apply(Math, Guzzlr_toConsumableArray(ingredientAndCocktail.map(item => (0,external_kolmafia_namespaceObject.mallPrice)(item)))), true)[1];
  } else {
    return maxBy(Array.from(ingredientToPlatinumCocktail), _ref => {
      var _ref2 = Guzzlr_slicedToArray(_ref, 2),
        cocktail = _ref2[1];
      return (0,external_kolmafia_namespaceObject.mallPrice)(cocktail);
    })[1];
  }
}
function turnsLeftOnQuest() {
  var useShoes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var progressPerTurn = useShoes ? Math.floor((10 - get("_guzzlrDeliveries")) * 1.5) : 10 - get("_guzzlrDeliveries");
  return Math.ceil((100 - get("guzzlrDeliveryProgress")) / progressPerTurn);
}
function expectedReward() {
  var usePants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  switch (getTier()) {
    case "platinum":
      // 20-25
      return 22.5 + (usePants ? 5 : 0);
    case "gold":
      // 5-7
      return 6 + (usePants ? 3 : 0);
    case "bronze":
      // 2-4
      return 3 + (usePants ? 3 : 0);
    default:
      return 0;
  }
}
;// CONCATENATED MODULE: ./src/wanderer/lib.ts
var wanderer_lib_templateObject, wanderer_lib_templateObject2, wanderer_lib_templateObject3, wanderer_lib_templateObject4, wanderer_lib_templateObject5, wanderer_lib_templateObject6, wanderer_lib_templateObject7, wanderer_lib_templateObject8, wanderer_lib_templateObject9, wanderer_lib_templateObject10, wanderer_lib_templateObject11, wanderer_lib_templateObject12, wanderer_lib_templateObject13, wanderer_lib_templateObject14, wanderer_lib_templateObject15, wanderer_lib_templateObject16, wanderer_lib_templateObject17, wanderer_lib_templateObject18, _ref, wanderer_lib_templateObject19, wanderer_lib_templateObject20, _ref3, wanderer_lib_templateObject21, _ref4, wanderer_lib_templateObject22, wanderer_lib_templateObject23, wanderer_lib_templateObject24, wanderer_lib_templateObject25, wanderer_lib_templateObject26, wanderer_lib_templateObject27, _ref10, wanderer_lib_templateObject28, wanderer_lib_templateObject29, wanderer_lib_templateObject30, wanderer_lib_templateObject31, _ref14, wanderer_lib_templateObject32, _ref15, wanderer_lib_templateObject33, wanderer_lib_templateObject34, wanderer_lib_templateObject35, _ref18, wanderer_lib_templateObject36, lib_templateObject37, lib_templateObject38, lib_templateObject39, lib_templateObject40, lib_templateObject41;
function wanderer_lib_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, wanderer_lib_toPropertyKey(descriptor.key), descriptor); } }
function wanderer_lib_createClass(Constructor, protoProps, staticProps) { if (protoProps) wanderer_lib_defineProperties(Constructor.prototype, protoProps); if (staticProps) wanderer_lib_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function wanderer_lib_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function wanderer_lib_defineProperty(obj, key, value) { key = wanderer_lib_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function wanderer_lib_toPropertyKey(arg) { var key = wanderer_lib_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function wanderer_lib_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function wanderer_lib_toConsumableArray(arr) { return wanderer_lib_arrayWithoutHoles(arr) || wanderer_lib_iterableToArray(arr) || wanderer_lib_unsupportedIterableToArray(arr) || wanderer_lib_nonIterableSpread(); }
function wanderer_lib_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function wanderer_lib_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return wanderer_lib_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return wanderer_lib_arrayLikeToArray(o, minLen); }
function wanderer_lib_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function wanderer_lib_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return wanderer_lib_arrayLikeToArray(arr); }
function wanderer_lib_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function wanderer_lib_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var UnlockableZones = [{
  zone: "Spaaace",
  available: () => lib_have(template_string_$effect(wanderer_lib_templateObject || (wanderer_lib_templateObject = wanderer_lib_taggedTemplateLiteral(["Transpondent"])))),
  unlocker: template_string_$item(wanderer_lib_templateObject2 || (wanderer_lib_templateObject2 = wanderer_lib_taggedTemplateLiteral(["transporter transponder"]))),
  noInv: false
}, {
  zone: "Wormwood",
  available: () => lib_have(template_string_$effect(wanderer_lib_templateObject3 || (wanderer_lib_templateObject3 = wanderer_lib_taggedTemplateLiteral(["Absinthe-Minded"])))),
  unlocker: template_string_$item(wanderer_lib_templateObject4 || (wanderer_lib_templateObject4 = wanderer_lib_taggedTemplateLiteral(["tiny bottle of absinthe"]))),
  noInv: false
}, {
  zone: "Rabbit Hole",
  available: () => lib_have(template_string_$effect(wanderer_lib_templateObject5 || (wanderer_lib_templateObject5 = wanderer_lib_taggedTemplateLiteral(["Down the Rabbit Hole"])))),
  unlocker: template_string_$item(wanderer_lib_templateObject6 || (wanderer_lib_templateObject6 = wanderer_lib_taggedTemplateLiteral(["\"DRINK ME\" potion"]))),
  noInv: false
}, {
  zone: "Conspiracy Island",
  available: () => realmAvailable("spooky"),
  unlocker: template_string_$item(wanderer_lib_templateObject7 || (wanderer_lib_templateObject7 = wanderer_lib_taggedTemplateLiteral(["one-day ticket to Conspiracy Island"]))),
  noInv: true
}, {
  zone: "Dinseylandfill",
  available: () => realmAvailable("stench"),
  unlocker: template_string_$item(wanderer_lib_templateObject8 || (wanderer_lib_templateObject8 = wanderer_lib_taggedTemplateLiteral(["one-day ticket to Dinseylandfill"]))),
  noInv: true
}, {
  zone: "The Glaciest",
  available: () => realmAvailable("cold"),
  unlocker: template_string_$item(wanderer_lib_templateObject9 || (wanderer_lib_templateObject9 = wanderer_lib_taggedTemplateLiteral(["one-day ticket to The Glaciest"]))),
  noInv: true
}, {
  zone: "Spring Break Beach",
  available: () => realmAvailable("sleaze"),
  unlocker: template_string_$item(wanderer_lib_templateObject10 || (wanderer_lib_templateObject10 = wanderer_lib_taggedTemplateLiteral(["one-day ticket to Spring Break Beach"]))),
  noInv: true
}];
function underwater(location) {
  return location.environment === "underwater";
}
var canAdventureOrUnlockSkipList = [].concat(wanderer_lib_toConsumableArray($locations(wanderer_lib_templateObject11 || (wanderer_lib_templateObject11 = wanderer_lib_taggedTemplateLiteral(["The Oasis, The Bubblin' Caldera, Barrrney's Barrr, The F'c'le, The Poop Deck, Belowdecks, 8-Bit Realm, Madness Bakery, The Secret Government Laboratory, The Dire Warren, Inside the Palindome, The Haiku Dungeon, An Incredibly Strange Place (Bad Trip), An Incredibly Strange Place (Mediocre Trip), An Incredibly Strange Place (Great Trip), El Vibrato Island"])))), wanderer_lib_toConsumableArray(external_kolmafia_namespaceObject.Location.all().filter(l => ["Clan Basement", "Psychoses"].includes(l.parent))));
function canAdventureOrUnlock(loc) {
  var skiplist = wanderer_lib_toConsumableArray(canAdventureOrUnlockSkipList);
  if (!lib_have(template_string_$item(wanderer_lib_templateObject12 || (wanderer_lib_templateObject12 = wanderer_lib_taggedTemplateLiteral(["repaid diaper"])))) && lib_have(template_string_$item(wanderer_lib_templateObject13 || (wanderer_lib_templateObject13 = wanderer_lib_taggedTemplateLiteral(["Great Wolf's beastly trousers"]))))) {
    skiplist.push($location(wanderer_lib_templateObject14 || (wanderer_lib_templateObject14 = wanderer_lib_taggedTemplateLiteral(["The Icy Peak"]))));
  }
  var canUnlock = UnlockableZones.some(z => loc.zone === z.zone && (z.available() || !z.noInv));
  return !underwater(loc) && !skiplist.includes(loc) && ((0,external_kolmafia_namespaceObject.canAdventure)(loc) || canUnlock);
}
function unlock(loc, value) {
  var unlockableZone = UnlockableZones.find(z => z.zone === loc.zone);
  if (!unlockableZone) return (0,external_kolmafia_namespaceObject.canAdventure)(loc);
  if (unlockableZone.available()) return true;
  if ((0,external_kolmafia_namespaceObject.buy)(1, unlockableZone.unlocker, value) === 0) return false;
  return (0,external_kolmafia_namespaceObject.use)(unlockableZone.unlocker);
}
var backupSkiplist = $locations(wanderer_lib_templateObject15 || (wanderer_lib_templateObject15 = wanderer_lib_taggedTemplateLiteral(["The Overgrown Lot, The Skeleton Store, The Mansion of Dr. Weirdeaux"])));
function canWanderTypeBackup(location) {
  return !backupSkiplist.includes(location) && location.combatPercent >= 100;
}
function canWanderTypeYellowRay(location) {
  if (location === $location(wanderer_lib_templateObject16 || (wanderer_lib_templateObject16 = wanderer_lib_taggedTemplateLiteral(["The Fun-Guy Mansion"]))) && property_get("funGuyMansionKills", 0) >= 100) {
    return false;
  }
  return canWanderTypeBackup(location);
}
var wandererSkiplist = $locations(wanderer_lib_templateObject17 || (wanderer_lib_templateObject17 = wanderer_lib_taggedTemplateLiteral(["The Batrat and Ratbat Burrow, Guano Junction, The Beanbat Chamber, A-Boo Peak"])));
function canWanderTypeWander(location) {
  return !wandererSkiplist.includes(location) && location.wanderers;
}
function canWander(location, type) {
  if (underwater(location)) return false;
  switch (type) {
    case "backup":
      return canWanderTypeBackup(location);
    case "yellow ray":
      return canWanderTypeYellowRay(location);
    case "wanderer":
      return canWanderTypeWander(location);
  }
}
var WandererTarget = /*#__PURE__*/wanderer_lib_createClass(
/**
 * Process for determining where to put a wanderer to extract additional value from it
 * @param name name of this wanderer - for documentation/logging purposes
 * @param location returns the location to adventure to target this; null only if something goes wrong
 * @param value the expected additional value of putting a single wanderer-fight into the zone for this
 * @param prepareTurn attempt to set up, spending meat and or items as necessary
 */
function WandererTarget(name, location, value) {
  var prepareTurn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => true;
  wanderer_lib_classCallCheck(this, WandererTarget);
  wanderer_lib_defineProperty(this, "name", void 0);
  wanderer_lib_defineProperty(this, "value", void 0);
  wanderer_lib_defineProperty(this, "location", void 0);
  wanderer_lib_defineProperty(this, "prepareTurn", void 0);
  this.name = name;
  this.value = value;
  this.location = location;
  this.prepareTurn = prepareTurn;
});
var unsupportedChoices = new Map([[$location(wanderer_lib_templateObject18 || (wanderer_lib_templateObject18 = wanderer_lib_taggedTemplateLiteral(["The Spooky Forest"]))), (_ref = {}, wanderer_lib_defineProperty(_ref, 502, 2), wanderer_lib_defineProperty(_ref, 505, 2), _ref)], [$location(wanderer_lib_templateObject19 || (wanderer_lib_templateObject19 = wanderer_lib_taggedTemplateLiteral(["Guano Junction"]))), wanderer_lib_defineProperty({}, 1427, 1)], [$location(wanderer_lib_templateObject20 || (wanderer_lib_templateObject20 = wanderer_lib_taggedTemplateLiteral(["The Hidden Apartment Building"]))), (_ref3 = {}, wanderer_lib_defineProperty(_ref3, 780, 6), wanderer_lib_defineProperty(_ref3, 1578, 6), _ref3)], [$location(wanderer_lib_templateObject21 || (wanderer_lib_templateObject21 = wanderer_lib_taggedTemplateLiteral(["The Black Forest"]))), (_ref4 = {}, wanderer_lib_defineProperty(_ref4, 923, 1), wanderer_lib_defineProperty(_ref4, 924, 1), _ref4)], [$location(wanderer_lib_templateObject22 || (wanderer_lib_templateObject22 = wanderer_lib_taggedTemplateLiteral(["LavaCo\u2122 Lamp Factory"]))), wanderer_lib_defineProperty({}, 1091, 9)], [$location(wanderer_lib_templateObject23 || (wanderer_lib_templateObject23 = wanderer_lib_taggedTemplateLiteral(["The Haunted Laboratory"]))), wanderer_lib_defineProperty({}, 884, 6)], [$location(wanderer_lib_templateObject24 || (wanderer_lib_templateObject24 = wanderer_lib_taggedTemplateLiteral(["The Haunted Nursery"]))), wanderer_lib_defineProperty({}, 885, 6)], [$location(wanderer_lib_templateObject25 || (wanderer_lib_templateObject25 = wanderer_lib_taggedTemplateLiteral(["The Haunted Storage Room"]))), wanderer_lib_defineProperty({}, 886, 6)], [$location(wanderer_lib_templateObject26 || (wanderer_lib_templateObject26 = wanderer_lib_taggedTemplateLiteral(["The Hidden Park"]))), wanderer_lib_defineProperty({}, 789, 6)], [$location(wanderer_lib_templateObject27 || (wanderer_lib_templateObject27 = wanderer_lib_taggedTemplateLiteral(["A Mob of Zeppelin Protesters"]))), (_ref10 = {}, wanderer_lib_defineProperty(_ref10, 1432, 1), wanderer_lib_defineProperty(_ref10, 857, 2), _ref10)], [$location(wanderer_lib_templateObject28 || (wanderer_lib_templateObject28 = wanderer_lib_taggedTemplateLiteral(["A-Boo Peak"]))), wanderer_lib_defineProperty({}, 1430, 2)], [$location(wanderer_lib_templateObject29 || (wanderer_lib_templateObject29 = wanderer_lib_taggedTemplateLiteral(["Sloppy Seconds Diner"]))), wanderer_lib_defineProperty({}, 919, 6)], [$location(wanderer_lib_templateObject30 || (wanderer_lib_templateObject30 = wanderer_lib_taggedTemplateLiteral(["VYKEA"]))), wanderer_lib_defineProperty({}, 1115, 6)], [$location(wanderer_lib_templateObject31 || (wanderer_lib_templateObject31 = wanderer_lib_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Basement)"]))), (_ref14 = {}, wanderer_lib_defineProperty(_ref14, 670, 4), wanderer_lib_defineProperty(_ref14, 671, 4), wanderer_lib_defineProperty(_ref14, 672, 1), _ref14)], [$location(wanderer_lib_templateObject32 || (wanderer_lib_templateObject32 = wanderer_lib_taggedTemplateLiteral(["The Haunted Bedroom"]))), (_ref15 = {}, wanderer_lib_defineProperty(_ref15, 876, 1), wanderer_lib_defineProperty(_ref15, 877, 1), wanderer_lib_defineProperty(_ref15, 878, 1), wanderer_lib_defineProperty(_ref15, 879, 2), wanderer_lib_defineProperty(_ref15, 880, 2), _ref15)], [$location(wanderer_lib_templateObject33 || (wanderer_lib_templateObject33 = wanderer_lib_taggedTemplateLiteral(["The Copperhead Club"]))), wanderer_lib_defineProperty({}, 855, 4)], [$location(wanderer_lib_templateObject34 || (wanderer_lib_templateObject34 = wanderer_lib_taggedTemplateLiteral(["The Haunted Bathroom"]))), wanderer_lib_defineProperty({}, 882, 2)],
// skip; it's the towel adventure but we don't want towels
[$location(wanderer_lib_templateObject35 || (wanderer_lib_templateObject35 = wanderer_lib_taggedTemplateLiteral(["The Castle in the Clouds in the Sky (Top Floor)"]))), (_ref18 = {}, wanderer_lib_defineProperty(_ref18, 1431, 1), wanderer_lib_defineProperty(_ref18, 677, 2), _ref18)], [$location(wanderer_lib_templateObject36 || (wanderer_lib_templateObject36 = wanderer_lib_taggedTemplateLiteral(["The Hidden Office Building"]))), wanderer_lib_defineProperty({}, 786, 6)]]);
function defaultFactory() {
  return [new WandererTarget("Default", $location(lib_templateObject37 || (lib_templateObject37 = wanderer_lib_taggedTemplateLiteral(["The Haunted Kitchen"]))), 0)];
}
var WanderingSources = [{
  name: "CMG",
  item: template_string_$item(lib_templateObject38 || (lib_templateObject38 = wanderer_lib_taggedTemplateLiteral(["cursed magnifying glass"]))),
  max: 3,
  property: "_voidFreeFights",
  type: "wanderer"
}, {
  name: "Voter",
  item: template_string_$item(lib_templateObject39 || (lib_templateObject39 = wanderer_lib_taggedTemplateLiteral(["\"I Voted!\" sticker"]))),
  max: 3,
  property: "_voteFreeFights",
  type: "wanderer"
}, {
  name: "Voter",
  item: template_string_$item(lib_templateObject40 || (lib_templateObject40 = wanderer_lib_taggedTemplateLiteral(["\"I Voted!\" sticker"]))),
  max: 3,
  property: "_voteFreeFights",
  type: "wanderer"
}, {
  name: "Backup",
  item: template_string_$item(lib_templateObject41 || (lib_templateObject41 = wanderer_lib_taggedTemplateLiteral(["backup camera"]))),
  max: 11,
  property: "_backUpUses",
  type: "backup"
}];
function wandererTurnsAvailableToday(location) {
  var canWanderCache = {
    backup: canWander(location, "backup"),
    wanderer: canWander(location, "wanderer"),
    "yellow ray": canWander(location, "yellow ray")
  };
  var digitize = canWanderCache["backup"] ? digitizedMonstersRemaining() : 0;
  var yellowRay = canWanderCache["yellow ray"] ? Math.floor(estimatedGarboTurns() / 100) : 0;
  var wanderers = utils_sum(WanderingSources, source => canWanderCache[source.type] && lib_have(source.item) ? utils_clamp(property_get(source.property), 0, source.max) : 0);
  return digitize + yellowRay + wanderers;
}
;// CONCATENATED MODULE: ./src/wanderer/guzzlr.ts
var guzzlr_templateObject;
function guzzlr_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






function considerAbandon(locationSkiplist) {
  var location = Guzzlr_getLocation();
  var remaningTurns = Math.ceil((100 - property_get("guzzlrDeliveryProgress")) / (10 - property_get("_guzzlrDeliveries")));
  (0,external_kolmafia_namespaceObject.print)("Got guzzlr quest ".concat(getTier(), " at ").concat(Guzzlr_getLocation(), " with remaining turns ").concat(remaningTurns));
  if (
  // consider abandoning
  !location ||
  // if mafia faled to track the location correctly
  locationSkiplist.includes(location) || !canAdventureOrUnlock(location) ||
  // or the zone is marked as "generally cannot adv"
  config_globalOptions.ascend && wandererTurnsAvailableToday(location) < remaningTurns // or ascending and not enough turns to finish
  ) {
    (0,external_kolmafia_namespaceObject.print)("Abandoning...");
    abandon();
  }
}
function acceptGuzzlrQuest(locationSkiplist) {
  if (isQuestActive()) considerAbandon(locationSkiplist);
  while (!isQuestActive()) {
    (0,external_kolmafia_namespaceObject.print)("Picking a guzzlr quest");
    if (canPlatinum() && !(property_get("garbo_prioritizeCappingGuzzlr", false) && haveFullPlatinumBonus())) {
      acceptPlatinum();
    } else if (canGold() && (haveFullBronzeBonus() || !haveFullGoldBonus())) {
      // if gold is not maxed, do that first since they are limited per day
      acceptGold();
    } else {
      // fall back to bronze when can't plat, can't gold, or bronze is not maxed
      acceptBronze();
    }
    considerAbandon(locationSkiplist);
  }
}
function guzzlrValue(tier) {
  var progressPerTurn = 100 / (10 - property_get("_guzzlrDeliveries"));
  var buckValue = garboValue(template_string_$item(guzzlr_templateObject || (guzzlr_templateObject = guzzlr_taggedTemplateLiteral(["Guzzlrbuck"]))));
  switch (tier) {
    case null:
      return 0;
    case "bronze":
      return 3 * buckValue / progressPerTurn;
    case "gold":
      return 6 * buckValue / progressPerTurn;
    case "platinum":
      return 21.5 * buckValue / progressPerTurn;
  }
}
function guzzlrFactory(_type, locationSkiplist) {
  if (Guzzlr_have()) {
    acceptGuzzlrQuest(locationSkiplist);
    var location = Guzzlr_getLocation();
    if (location !== null) {
      var guzzlrBooze = getTier() === "platinum" ? getCheapestPlatinumCocktail() : getBooze();
      return [new WandererTarget("Guzzlr", location, guzzlrValue(getTier()), () => {
        if (!guzzlrBooze) {
          // this is an error state - accepted a guzzlr quest but mafia doesn't know the booze
          return false;
        }
        if (!lib_have(guzzlrBooze)) {
          var fancy = guzzlrBooze && (0,external_kolmafia_namespaceObject.craftType)(guzzlrBooze).includes("fancy");
          if (guzzlrBooze && (!fancy || fancy && freeCrafts() > 0)) {
            (0,external_kolmafia_namespaceObject.retrieveItem)(guzzlrBooze);
          } else if (guzzlrBooze) {
            (0,external_kolmafia_namespaceObject.buy)(1, guzzlrBooze, guzzlrValue(getTier()));
          }
        }
        return lib_have(guzzlrBooze);
      })];
    }
  }
  return [];
}
;// CONCATENATED MODULE: ./src/wanderer/lovebugs.ts
var lovebugs_templateObject, lovebugs_templateObject2, lovebugs_templateObject3, lovebugs_templateObject4, lovebugs_templateObject5, lovebugs_templateObject6;
function lovebugs_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var LovebugTargets = [{
  element: "cold",
  location: $location(lovebugs_templateObject || (lovebugs_templateObject = lovebugs_taggedTemplateLiteral(["VYKEA"]))),
  currency: template_string_$item(lovebugs_templateObject2 || (lovebugs_templateObject2 = lovebugs_taggedTemplateLiteral(["Wal-Mart gift certificate"])))
}, {
  element: "sleaze",
  location: $location(lovebugs_templateObject3 || (lovebugs_templateObject3 = lovebugs_taggedTemplateLiteral(["The Fun-Guy Mansion"]))),
  currency: template_string_$item(lovebugs_templateObject4 || (lovebugs_templateObject4 = lovebugs_taggedTemplateLiteral(["Beach Buck"])))
}, {
  element: "spooky",
  location: $location(lovebugs_templateObject5 || (lovebugs_templateObject5 = lovebugs_taggedTemplateLiteral(["The Deep Dark Jungle"]))),
  currency: template_string_$item(lovebugs_templateObject6 || (lovebugs_templateObject6 = lovebugs_taggedTemplateLiteral(["Coinspiracy"])))
}];
function lovebugsFactory() {
  if (property_get("lovebugsUnlocked")) {
    return LovebugTargets.filter(t => realmAvailable(t.element)).map(t => new WandererTarget("Lovebugs ".concat(t.location), t.location, garboValue(t.currency) * 0.05));
  }
  return [];
}
;// CONCATENATED MODULE: ./src/wanderer/yellowray.ts
function yellowray_toConsumableArray(arr) { return yellowray_arrayWithoutHoles(arr) || yellowray_iterableToArray(arr) || yellowray_unsupportedIterableToArray(arr) || yellowray_nonIterableSpread(); }
function yellowray_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function yellowray_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function yellowray_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return yellowray_arrayLikeToArray(arr); }
function yellowray_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = yellowray_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function yellowray_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return yellowray_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return yellowray_arrayLikeToArray(o, minLen); }
function yellowray_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }






function averageYrValue(location) {
  var badAttributes = ["LUCKY", "ULTRARARE", "BOSS"];
  var rates = (0,external_kolmafia_namespaceObject.appearanceRates)(location);
  var monsters = Object.keys((0,external_kolmafia_namespaceObject.getLocationMonsters)(location)).map(m => (0,external_kolmafia_namespaceObject.toMonster)(m)).filter(m => !badAttributes.some(s => m.attributes.includes(s)) && rates[m.name] > 0);
  var canDuplicate = SourceTerminal_have() && duplicateUsesRemaining() > 0;
  if (monsters.length === 0) {
    return 0;
  } else {
    return utils_sum(monsters, m => {
      var items = (0,external_kolmafia_namespaceObject.itemDropsArray)(m).filter(drop => ["", "n"].includes(drop.type));
      var duplicateFactor = canDuplicate && !m.attributes.includes("NOCOPY") ? 2 : 1;
      return duplicateFactor * utils_sum(items, drop => {
        var yrRate = (drop.type === "" ? 100 : drop.rate) / 100;
        return yrRate * garboValue(drop.drop, true);
      });
    }) / monsters.length;
  }
}
function yrValues() {
  var values = new Map();
  var _iterator = yellowray_createForOfIteratorHelper(external_kolmafia_namespaceObject.Location.all().filter(l => canAdventureOrUnlock(l) && !underwater(l))),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var location = _step.value;
      values.set(location, averageYrValue(location) + freeFightFamiliarData({
        location: location
      }).expectedValue);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return values;
}

// Doing a free fight + yellow ray combination against a random enemy
function yellowRayFactory(type, locationSkiplist) {
  if (type === "yellow ray") {
    var validLocations = external_kolmafia_namespaceObject.Location.all().filter(location => canWander(location, "yellow ray") && canAdventureOrUnlock(location));
    var locationValues = yrValues();
    var bestZones = new Set([lib_maxBy(validLocations, l => {
      var _locationValues$get;
      return (_locationValues$get = locationValues.get(l)) !== null && _locationValues$get !== void 0 ? _locationValues$get : 0;
    })]);
    var _iterator2 = yellowray_createForOfIteratorHelper(UnlockableZones),
      _step2;
    try {
      var _loop = function _loop() {
        var unlockableZone = _step2.value;
        var extraLocations = external_kolmafia_namespaceObject.Location.all().filter(l => l.zone === unlockableZone.zone && !locationSkiplist.includes(l));
        bestZones.add(lib_maxBy(extraLocations, l => {
          var _locationValues$get3;
          return (_locationValues$get3 = locationValues.get(l)) !== null && _locationValues$get3 !== void 0 ? _locationValues$get3 : 0;
        }));
      };
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    if (bestZones.size > 0) {
      return yellowray_toConsumableArray(bestZones).map(l => {
        var _locationValues$get2;
        return new WandererTarget("Yellow Ray ".concat(l), l, (_locationValues$get2 = locationValues.get(l)) !== null && _locationValues$get2 !== void 0 ? _locationValues$get2 : 0);
      });
    }
  }
  return [];
}
;// CONCATENATED MODULE: ./src/wanderer/index.ts
var wanderer_templateObject;
function wanderer_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function wanderer_toConsumableArray(arr) { return wanderer_arrayWithoutHoles(arr) || wanderer_iterableToArray(arr) || wanderer_unsupportedIterableToArray(arr) || wanderer_nonIterableSpread(); }
function wanderer_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function wanderer_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function wanderer_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return wanderer_arrayLikeToArray(arr); }
function wanderer_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = wanderer_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function wanderer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return wanderer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return wanderer_arrayLikeToArray(o, minLen); }
function wanderer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }







var wanderFactories = [defaultFactory, yellowRayFactory, lovebugsFactory, guzzlrFactory];
function bestWander(type, locationSkiplist, nameSkiplist) {
  var possibleLocations = new Map();
  var _iterator = wanderer_createForOfIteratorHelper(wanderFactories),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var wanderFactory = _step.value;
      var wanderTargets = wanderFactory(type, locationSkiplist);
      var _iterator2 = wanderer_createForOfIteratorHelper(wanderTargets),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var wanderTarget = _step2.value;
          if (!nameSkiplist.includes(wanderTarget.name) && !locationSkiplist.includes(wanderTarget.location) && canWander(wanderTarget.location, type)) {
            var _possibleLocations$ge;
            var wandererLocation = (_possibleLocations$ge = possibleLocations.get(wanderTarget.location)) !== null && _possibleLocations$ge !== void 0 ? _possibleLocations$ge : {
              location: wanderTarget.location,
              targets: [],
              value: 0
            };
            wandererLocation.targets = [].concat(wanderer_toConsumableArray(wandererLocation.targets), [wanderTarget]);
            wandererLocation.value += wanderTarget.value;
            possibleLocations.set(wandererLocation.location, wandererLocation);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (possibleLocations.size === 0) {
    throw "Could not determine a wander target!";
  }
  return lib_maxBy(wanderer_toConsumableArray(possibleLocations.values()), "value");
}

/**
 * Recursively Check for zones to wander to
 * @param type type of fight we are looking for
 * @param nameSkiplist Any wanderer tasks that should be skipped because they could not be prepared
 * @param locationSkiplist Any locations that should be skipped because they could not be unlocked
 * @returns A location at which to wander
 */
function wanderWhere(type) {
  var nameSkiplist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var locationSkiplist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var candidate = bestWander(type, locationSkiplist, nameSkiplist);
  var failed = candidate.targets.filter(target => !target.prepareTurn());
  var badLocation = !canAdventureOrUnlock(candidate.location) || !unlock(candidate.location, candidate.value) || !canWander(candidate.location, type) ? [candidate.location] : [];
  if (failed.length > 0 || badLocation.length > 0) {
    return wanderWhere(type, [].concat(wanderer_toConsumableArray(nameSkiplist), wanderer_toConsumableArray(failed.map(target => target.name))), [].concat(wanderer_toConsumableArray(locationSkiplist), badLocation));
  } else {
    var _unsupportedChoices$g;
    propertyManager.setChoices((_unsupportedChoices$g = unsupportedChoices.get(candidate.location)) !== null && _unsupportedChoices$g !== void 0 ? _unsupportedChoices$g : {});
    var targets = candidate.targets.map(t => t.name).join("; ");
    var value = candidate.value.toFixed(2);
    (0,external_kolmafia_namespaceObject.print)("Wandering at ".concat(candidate.location, " for expected value ").concat(value, " (").concat(targets, ")"), HIGHLIGHT);
    return candidate.location;
  }
}
function drunkSafeWander(type) {
  return sober() ? wanderWhere(type) : $location(wanderer_templateObject || (wanderer_templateObject = wanderer_taggedTemplateLiteral(["Drunken Stupor"])));
}
;// CONCATENATED MODULE: ./src/embezzler.ts
var embezzler_templateObject, embezzler_templateObject2, embezzler_templateObject3, embezzler_templateObject4, embezzler_templateObject5, embezzler_templateObject6, embezzler_templateObject7, embezzler_templateObject8, embezzler_templateObject9, embezzler_templateObject10, embezzler_templateObject11, embezzler_templateObject12, embezzler_templateObject13, embezzler_templateObject14, embezzler_templateObject15, embezzler_templateObject16, embezzler_templateObject17, embezzler_templateObject18, embezzler_templateObject19, embezzler_templateObject20, embezzler_templateObject21, embezzler_templateObject22, embezzler_templateObject23, embezzler_templateObject24, embezzler_templateObject25, embezzler_templateObject26, embezzler_templateObject27, embezzler_templateObject28, embezzler_templateObject29, embezzler_templateObject30, embezzler_templateObject31, embezzler_templateObject32, embezzler_templateObject33, embezzler_templateObject34, embezzler_templateObject35, embezzler_templateObject36, embezzler_templateObject37, embezzler_templateObject38, embezzler_templateObject39, embezzler_templateObject40, embezzler_templateObject41, embezzler_templateObject42, embezzler_templateObject43, embezzler_templateObject44, embezzler_templateObject45, embezzler_templateObject46, embezzler_templateObject47, embezzler_templateObject48, embezzler_templateObject49, embezzler_templateObject50, embezzler_templateObject51, embezzler_templateObject52, embezzler_templateObject53, embezzler_templateObject54, embezzler_templateObject55, embezzler_templateObject56, embezzler_templateObject57, embezzler_templateObject58, embezzler_templateObject59, embezzler_templateObject60, embezzler_templateObject61, embezzler_templateObject62, embezzler_templateObject63, embezzler_templateObject64, embezzler_templateObject65, embezzler_templateObject66, embezzler_templateObject67, embezzler_templateObject68, embezzler_templateObject69, embezzler_templateObject70, embezzler_templateObject71, embezzler_templateObject72, embezzler_templateObject73, embezzler_templateObject74, embezzler_templateObject75, embezzler_templateObject76, embezzler_templateObject77, embezzler_templateObject78, embezzler_templateObject79, embezzler_templateObject80, embezzler_templateObject81, embezzler_templateObject82, embezzler_templateObject83, embezzler_templateObject84, embezzler_templateObject85, embezzler_templateObject86, embezzler_templateObject87, embezzler_templateObject88, embezzler_templateObject89, embezzler_templateObject90, embezzler_templateObject91, embezzler_templateObject92, embezzler_templateObject93, embezzler_templateObject94, embezzler_templateObject95, embezzler_templateObject96, embezzler_templateObject97, embezzler_templateObject98, embezzler_templateObject99, embezzler_templateObject100, embezzler_templateObject101, embezzler_templateObject102, embezzler_templateObject103, embezzler_templateObject104, embezzler_templateObject105, embezzler_templateObject106, embezzler_templateObject107, embezzler_templateObject108, embezzler_templateObject109, embezzler_templateObject110, embezzler_templateObject111, embezzler_templateObject112, embezzler_templateObject113, embezzler_templateObject114, embezzler_templateObject115, embezzler_templateObject116, embezzler_templateObject117, embezzler_templateObject118, embezzler_templateObject119, embezzler_templateObject120, embezzler_templateObject121, embezzler_templateObject122, embezzler_templateObject123, embezzler_templateObject124, embezzler_templateObject125, embezzler_templateObject126, embezzler_templateObject127, embezzler_templateObject128, embezzler_templateObject129, embezzler_templateObject130, embezzler_templateObject131, embezzler_templateObject132, embezzler_templateObject133, embezzler_templateObject134, embezzler_templateObject135, embezzler_templateObject136, embezzler_templateObject137, embezzler_templateObject138, embezzler_templateObject139, embezzler_templateObject140, embezzler_templateObject141, embezzler_templateObject142, embezzler_templateObject143, embezzler_templateObject144, embezzler_templateObject145, embezzler_templateObject146;
function embezzler_defineProperty(obj, key, value) { key = embezzler_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function embezzler_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function embezzler_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, embezzler_toPropertyKey(descriptor.key), descriptor); } }
function embezzler_createClass(Constructor, protoProps, staticProps) { if (protoProps) embezzler_defineProperties(Constructor.prototype, protoProps); if (staticProps) embezzler_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function embezzler_toPropertyKey(arg) { var key = embezzler_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function embezzler_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function embezzler_classPrivateFieldInitSpec(obj, privateMap, value) { embezzler_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function embezzler_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function embezzler_classPrivateFieldGet(receiver, privateMap) { var descriptor = embezzler_classExtractFieldDescriptor(receiver, privateMap, "get"); return embezzler_classApplyDescriptorGet(receiver, descriptor); }
function embezzler_classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function embezzler_classPrivateFieldSet(receiver, privateMap, value) { var descriptor = embezzler_classExtractFieldDescriptor(receiver, privateMap, "set"); embezzler_classApplyDescriptorSet(receiver, descriptor, value); return value; }
function embezzler_classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function embezzler_classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
function embezzler_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }









var embezzler = $monster(embezzler_templateObject || (embezzler_templateObject = embezzler_taggedTemplateLiteral(["Knob Goblin Embezzler"])));

/**
 * Configure the behavior of the fights in use in different parts of the fight engine
 * @interface EmbezzlerFightConfigOptions
 * @member {Requirement[]?} requirements maximizer requirements to use for this fight (defaults to empty)
 * @member {draggableFight?} draggable if this fight can be pulled into another zone and what kind of draggable it is (defaults to undefined)
 * @member {boolean?} canInitializeWandererCounters if this fight can be used to initialize wanderers (defaults to false)
 * @member {boolean?} gregariousReplace if this is a "monster replacement" fight - pulls another monster from the CSV (defautls to false)
 * @member {boolean?} wrongEncounterName if mafia does not update the lastEncounter properly when doing this fight (defaults to value of gregariousReplace)
 */
var _macro = /*#__PURE__*/new WeakMap();
var _location = /*#__PURE__*/new WeakMap();
var _useAuto = /*#__PURE__*/new WeakMap();
var EmbezzlerFightRunOptions = /*#__PURE__*/function () {
  function EmbezzlerFightRunOptions(macro, location) {
    var useAuto = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    embezzler_classCallCheck(this, EmbezzlerFightRunOptions);
    embezzler_classPrivateFieldInitSpec(this, _macro, {
      writable: true,
      value: void 0
    });
    embezzler_classPrivateFieldInitSpec(this, _location, {
      writable: true,
      value: void 0
    });
    embezzler_classPrivateFieldInitSpec(this, _useAuto, {
      writable: true,
      value: void 0
    });
    embezzler_classPrivateFieldSet(this, _macro, macro);
    embezzler_classPrivateFieldSet(this, _location, location);
    embezzler_classPrivateFieldSet(this, _useAuto, useAuto);
  }
  embezzler_createClass(EmbezzlerFightRunOptions, [{
    key: "macro",
    get: function get() {
      return embezzler_classPrivateFieldGet(this, _macro);
    }
  }, {
    key: "location",
    get: function get() {
      if (!embezzler_classPrivateFieldGet(this, _location)) {
        throw "Embezzler fight tried to access a location, but none was set";
      } else {
        return embezzler_classPrivateFieldGet(this, _location);
      }
    }
  }, {
    key: "useAuto",
    get: function get() {
      return embezzler_classPrivateFieldGet(this, _useAuto);
    }
  }]);
  return EmbezzlerFightRunOptions;
}();
var EmbezzlerFight = /*#__PURE__*/function () {
  /**
   * This is the class that creates all the different ways to fight embezzlers
   * @classdesc Embezzler Fight enc
   * @prop {string} name The name of the source of this fight, primarily used to identify special cases.
   * @prop {() => boolean} available Returns whether or not we can do this fight right now (this may change later in the day).
   * @prop {() => number} potential Returns the number of embezzlers we expect to be able to fight from this source given the current state of hte character
   *  This is used when computing turns for buffs, so it should be as accurate as possible to the number of KGE we will fight
   * @prop {(options: EmbezzlerFightRunOptions) => void} execute This runs the combat, optionally using the provided location and macro. Location is used only by draggable fights.
   *  This is the meat of each fight. How do you initialize the fight? Are there any special considerations?
   * @prop {EmbezzlerFightConfigOptions} options configuration options for this fight. see EmbezzlerFightConfigOptions for full details of all available options
   * @example
   * // suppose that we wanted to add a fight that will use print screens repeatedly, as long as we have them in our inventory
   * new EmbezzlerFight(
   *  "Print Screen Monster",
   *  () => have($item`screencapped monster`) && get('screencappedMonster') === embezzler, // in order to start this fight, a KGE must already be screen capped
   *  () => availableAmount($item`screencapped monster`) + availableAmount($item`print screen button`) // the total of potential of this fight is the number of already copied KGE + the number of potentially copiable KGE
   *  () => (options: EmbezzlerFightRunOptions) => {
   *    const macro = Macro
   *      .externalIf(have($item`print screen button`), Macro.tryItem($item`print screen button`))
   *      .step(options.macro); // you should always include the macro passed in via options, as it may have special considerations for this fight
   *    withMacro(macro, () => useItem($item`screen capped monster`));
   *  },
   *  {
   *    canInitializeWnadererCounts: false; // this copy cannot be used to start wanderer counters, since the combats are not adv.php
   *  }
   * )
   */
  function EmbezzlerFight(name, available, potential, execute) {
    var _options$requirements, _options$canInitializ, _options$gregariousRe, _options$wrongEncount;
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    embezzler_classCallCheck(this, EmbezzlerFight);
    embezzler_defineProperty(this, "name", void 0);
    embezzler_defineProperty(this, "available", void 0);
    embezzler_defineProperty(this, "potential", void 0);
    embezzler_defineProperty(this, "execute", void 0);
    embezzler_defineProperty(this, "requirements", void 0);
    embezzler_defineProperty(this, "draggable", void 0);
    embezzler_defineProperty(this, "canInitializeWandererCounters", void 0);
    embezzler_defineProperty(this, "wrongEncounterName", void 0);
    embezzler_defineProperty(this, "gregariousReplace", void 0);
    this.name = name;
    this.available = available;
    this.potential = potential;
    this.execute = execute;
    this.requirements = (_options$requirements = options.requirements) !== null && _options$requirements !== void 0 ? _options$requirements : [];
    this.draggable = options.draggable;
    this.canInitializeWandererCounters = (_options$canInitializ = options.canInitializeWandererCounters) !== null && _options$canInitializ !== void 0 ? _options$canInitializ : false;
    this.gregariousReplace = (_options$gregariousRe = options.gregariousReplace) !== null && _options$gregariousRe !== void 0 ? _options$gregariousRe : false;
    this.wrongEncounterName = (_options$wrongEncount = options.wrongEncounterName) !== null && _options$wrongEncount !== void 0 ? _options$wrongEncount : this.gregariousReplace;
  }
  embezzler_createClass(EmbezzlerFight, [{
    key: "run",
    value: function run() {
      var _options$macro;
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (!this.available() || !(0,external_kolmafia_namespaceObject.myAdventures)()) return;
      (0,external_kolmafia_namespaceObject.print)("Now running Embezzler fight: ".concat(this.name, ". Stay tuned for details."));
      var fightMacro = (_options$macro = options.macro) !== null && _options$macro !== void 0 ? _options$macro : embezzlerMacro();
      if (this.draggable) {
        this.execute(new EmbezzlerFightRunOptions(fightMacro, this.location(options.location), options.useAuto));
      } else {
        this.execute(new EmbezzlerFightRunOptions(fightMacro, undefined, options.useAuto));
      }
    }
  }, {
    key: "location",
    value: function location(_location2) {
      var taffyIsWorthIt = () => (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(embezzler_templateObject2 || (embezzler_templateObject2 = embezzler_taggedTemplateLiteral(["pulled green taffy"])))) < EMBEZZLER_MULTIPLIER() * property_get("valueOfAdventure") && (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(embezzler_templateObject3 || (embezzler_templateObject3 = embezzler_taggedTemplateLiteral(["pulled green taffy"]))));
      var suggestion = this.draggable && !_location2 && checkUnderwater() && taffyIsWorthIt() ? $location(embezzler_templateObject4 || (embezzler_templateObject4 = embezzler_taggedTemplateLiteral(["The Briny Deeps"]))) : _location2;
      if (this.draggable && !suggestion || this.draggable === "backup" && suggestion && suggestion.combatPercent < 100) {
        return wanderWhere(this.draggable);
      }
      return suggestion !== null && suggestion !== void 0 ? suggestion : $location(embezzler_templateObject5 || (embezzler_templateObject5 = embezzler_taggedTemplateLiteral(["Noob Cave"])));
    }
  }]);
  return EmbezzlerFight;
}();
function checkUnderwater() {
  // first check to see if underwater even makes sense
  if (questStep("questS01OldGuy") >= 0 && !(property_get("_envyfishEggUsed") || lib_have(template_string_$item(embezzler_templateObject6 || (embezzler_templateObject6 = embezzler_taggedTemplateLiteral(["envyfish egg"]))))) && (property_get("_garbo_weightChain", false) || !lib_have($familiar(embezzler_templateObject7 || (embezzler_templateObject7 = embezzler_taggedTemplateLiteral(["Pocket Professor"]))))) && ((0,external_kolmafia_namespaceObject.booleanModifier)("Adventure Underwater") || waterBreathingEquipment.some(item => lib_have(item))) && (lib_have(template_string_$effect(embezzler_templateObject8 || (embezzler_templateObject8 = embezzler_taggedTemplateLiteral(["Fishy"])))) || lib_have(template_string_$item(embezzler_templateObject9 || (embezzler_templateObject9 = embezzler_taggedTemplateLiteral(["fishy pipe"])))) && !property_get("_fishyPipeUsed"))) {
    if (!lib_have(template_string_$effect(embezzler_templateObject10 || (embezzler_templateObject10 = embezzler_taggedTemplateLiteral(["Fishy"])))) && !property_get("_fishyPipeUsed")) (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject11 || (embezzler_templateObject11 = embezzler_taggedTemplateLiteral(["fishy pipe"]))));
    return lib_have(template_string_$effect(embezzler_templateObject12 || (embezzler_templateObject12 = embezzler_taggedTemplateLiteral(["Fishy"]))));
  }
  return false;
}
function checkFax() {
  if (!lib_have(template_string_$item(embezzler_templateObject13 || (embezzler_templateObject13 = embezzler_taggedTemplateLiteral(["photocopied monster"]))))) (0,external_kolmafia_namespaceObject.cliExecute)("fax receive");
  if (getString("photocopyMonster") === "Knob Goblin Embezzler") return true;
  (0,external_kolmafia_namespaceObject.cliExecute)("fax send");
  return false;
}
function faxEmbezzler() {
  if (!property_get("_photocopyUsed")) {
    if (checkFax()) return;
    (0,external_kolmafia_namespaceObject.chatPrivate)("cheesefax", "Knob Goblin Embezzler");
    for (var i = 0; i < 3; i++) {
      (0,external_kolmafia_namespaceObject.wait)(10);
      if (checkFax()) return;
    }
    throw new Error("Failed to acquire photocopied Knob Goblin Embezzler.");
  }
}
var embezzlerMacro = () => combat_Macro.if_(embezzler, combat_Macro.if_($location(embezzler_templateObject14 || (embezzler_templateObject14 = embezzler_taggedTemplateLiteral(["The Briny Deeps"]))), combat_Macro.tryCopier(template_string_$item(embezzler_templateObject15 || (embezzler_templateObject15 = embezzler_taggedTemplateLiteral(["pulled green taffy"]))))).externalIf((0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(embezzler_templateObject16 || (embezzler_templateObject16 = embezzler_taggedTemplateLiteral(["Reanimated Reanimator"]))), combat_Macro.trySkill($skill(embezzler_templateObject17 || (embezzler_templateObject17 = embezzler_taggedTemplateLiteral(["Wink at"]))))).externalIf((0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(embezzler_templateObject18 || (embezzler_templateObject18 = embezzler_taggedTemplateLiteral(["Obtuse Angel"]))), combat_Macro.trySkill($skill(embezzler_templateObject19 || (embezzler_templateObject19 = embezzler_taggedTemplateLiteral(["Fire a badly romantic arrow"]))))).externalIf(property_get("beGregariousCharges") > 0 && (property_get("beGregariousMonster") !== embezzler || property_get("beGregariousFightsLeft") === 0), combat_Macro.trySkill($skill(embezzler_templateObject20 || (embezzler_templateObject20 = embezzler_taggedTemplateLiteral(["Be Gregarious"]))))).externalIf(getDigitizeMonster() !== embezzler || shouldRedigitize(), combat_Macro.tryCopier($skill(embezzler_templateObject21 || (embezzler_templateObject21 = embezzler_taggedTemplateLiteral(["Digitize"]))))).tryCopier(template_string_$item(embezzler_templateObject22 || (embezzler_templateObject22 = embezzler_taggedTemplateLiteral(["Spooky Putty sheet"])))).tryCopier(template_string_$item(embezzler_templateObject23 || (embezzler_templateObject23 = embezzler_taggedTemplateLiteral(["Rain-Doh black box"])))).tryCopier(template_string_$item(embezzler_templateObject24 || (embezzler_templateObject24 = embezzler_taggedTemplateLiteral(["4-d camera"])))).tryCopier(template_string_$item(embezzler_templateObject25 || (embezzler_templateObject25 = embezzler_taggedTemplateLiteral(["unfinished ice sculpture"])))).externalIf(property_get("_enamorangs") === 0, combat_Macro.tryCopier(template_string_$item(embezzler_templateObject26 || (embezzler_templateObject26 = embezzler_taggedTemplateLiteral(["LOV Enamorang"]))))).meatKill()).abort();
var wandererFailsafeMacro = () => combat_Macro.externalIf((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(embezzler_templateObject27 || (embezzler_templateObject27 = embezzler_taggedTemplateLiteral(["backup camera"])))) && property_get("_backUpUses") < 11 && property_get("lastCopyableMonster") === embezzler, combat_Macro.if_("!monsterid ".concat(embezzler.id), combat_Macro.skill($skill(embezzler_templateObject28 || (embezzler_templateObject28 = embezzler_taggedTemplateLiteral(["Back-Up to your Last Enemy"]))))));
var chainStarters = [new EmbezzlerFight("Chateau Painting", () => ChateauMantegna_have() && !paintingFought() && paintingMonster() === embezzler, () => ChateauMantegna_have() && !paintingFought() && paintingMonster() === embezzler ? 1 : 0, options => {
  withMacro(options.macro, () => fightPainting(), options.useAuto);
}), new EmbezzlerFight("Combat Lover's Locket", () => availableLocketMonsters().includes(embezzler), () => availableLocketMonsters().includes(embezzler) ? 1 : 0, options => {
  withMacro(options.macro, () => reminisce(embezzler), options.useAuto);
}), new EmbezzlerFight("Fax", () => lib_have(template_string_$item(embezzler_templateObject29 || (embezzler_templateObject29 = embezzler_taggedTemplateLiteral(["Clan VIP Lounge key"])))) && !property_get("_photocopyUsed") && (0,external_kolmafia_namespaceObject.getClanLounge)()["deluxe fax machine"] !== undefined, () => lib_have(template_string_$item(embezzler_templateObject30 || (embezzler_templateObject30 = embezzler_taggedTemplateLiteral(["Clan VIP Lounge key"])))) && !property_get("_photocopyUsed") && (0,external_kolmafia_namespaceObject.getClanLounge)()["deluxe fax machine"] !== undefined ? 1 : 0, options => {
  faxEmbezzler();
  withMacro(options.macro, () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject31 || (embezzler_templateObject31 = embezzler_taggedTemplateLiteral(["photocopied monster"])))), options.useAuto);
}), new EmbezzlerFight("Pillkeeper Semirare", () => lib_have(template_string_$item(embezzler_templateObject32 || (embezzler_templateObject32 = embezzler_taggedTemplateLiteral(["Eight Days a Week Pill Keeper"])))) && (0,external_kolmafia_namespaceObject.canAdventure)($location(embezzler_templateObject33 || (embezzler_templateObject33 = embezzler_taggedTemplateLiteral(["Cobb's Knob Treasury"])))) && !property_get("_freePillKeeperUsed") && !lib_have(template_string_$effect(embezzler_templateObject34 || (embezzler_templateObject34 = embezzler_taggedTemplateLiteral(["Lucky!"])))), () => lib_have(template_string_$item(embezzler_templateObject35 || (embezzler_templateObject35 = embezzler_taggedTemplateLiteral(["Eight Days a Week Pill Keeper"])))) && (0,external_kolmafia_namespaceObject.canAdventure)($location(embezzler_templateObject36 || (embezzler_templateObject36 = embezzler_taggedTemplateLiteral(["Cobb's Knob Treasury"])))) && !property_get("_freePillKeeperUsed") && !lib_have(template_string_$effect(embezzler_templateObject37 || (embezzler_templateObject37 = embezzler_taggedTemplateLiteral(["Lucky!"])))) ? 1 : 0, options => {
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(embezzler_templateObject38 || (embezzler_templateObject38 = embezzler_taggedTemplateLiteral(["Eight Days a Week Pill Keeper"]))));
  (0,external_kolmafia_namespaceObject.cliExecute)("pillkeeper semirare");
  if (!lib_have(template_string_$effect(embezzler_templateObject39 || (embezzler_templateObject39 = embezzler_taggedTemplateLiteral(["Lucky!"]))))) {
    _set("_freePillKeeperUsed", true);
    return;
  }
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction($location(embezzler_templateObject40 || (embezzler_templateObject40 = embezzler_taggedTemplateLiteral(["Cobb's Knob Treasury"]))), options.macro, options.macro);
})];
var copySources = [new EmbezzlerFight("Time-Spinner", () => lib_have(template_string_$item(embezzler_templateObject41 || (embezzler_templateObject41 = embezzler_taggedTemplateLiteral(["Time-Spinner"])))) && $locations(embezzler_templateObject42 || (embezzler_templateObject42 = embezzler_taggedTemplateLiteral(["Noob Cave, The Dire Warren, The Haunted Kitchen"]))).some(location => location.combatQueue.includes(embezzler.name)) && property_get("_timeSpinnerMinutesUsed") <= 7, () => lib_have(template_string_$item(embezzler_templateObject43 || (embezzler_templateObject43 = embezzler_taggedTemplateLiteral(["Time-Spinner"])))) && $locations(embezzler_templateObject44 || (embezzler_templateObject44 = embezzler_taggedTemplateLiteral(["Noob Cave, The Dire Warren, The Haunted Kitchen"]))).some(location => location.combatQueue.includes(embezzler.name) || property_get("beGregariousCharges") > 0) ? Math.floor((10 - property_get("_timeSpinnerMinutesUsed")) / 3) : 0, options => {
  withMacro(options.macro, () => {
    (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?whichitem=".concat((0,external_kolmafia_namespaceObject.toInt)(template_string_$item(embezzler_templateObject45 || (embezzler_templateObject45 = embezzler_taggedTemplateLiteral(["Time-Spinner"]))))));
    (0,external_kolmafia_namespaceObject.runChoice)(1);
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1196&monid=".concat(embezzler.id, "&option=1"));
    (0,external_kolmafia_namespaceObject.runCombat)();
  }, options.useAuto);
}), new EmbezzlerFight("Spooky Putty & Rain-Doh", () => lib_have(template_string_$item(embezzler_templateObject46 || (embezzler_templateObject46 = embezzler_taggedTemplateLiteral(["Spooky Putty monster"])))) && property_get("spookyPuttyMonster") === embezzler || lib_have(template_string_$item(embezzler_templateObject47 || (embezzler_templateObject47 = embezzler_taggedTemplateLiteral(["Rain-Doh box full of monster"])))) && property_get("rainDohMonster") === embezzler, () => {
  var havePutty = lib_have(template_string_$item(embezzler_templateObject48 || (embezzler_templateObject48 = embezzler_taggedTemplateLiteral(["Spooky Putty sheet"])))) || lib_have(template_string_$item(embezzler_templateObject49 || (embezzler_templateObject49 = embezzler_taggedTemplateLiteral(["Spooky Putty monster"]))));
  var haveRainDoh = lib_have(template_string_$item(embezzler_templateObject50 || (embezzler_templateObject50 = embezzler_taggedTemplateLiteral(["Rain-Doh black box"])))) || lib_have(template_string_$item(embezzler_templateObject51 || (embezzler_templateObject51 = embezzler_taggedTemplateLiteral(["Rain-Doh box full of monster"]))));
  var puttyLocked = lib_have(template_string_$item(embezzler_templateObject52 || (embezzler_templateObject52 = embezzler_taggedTemplateLiteral(["Spooky Putty monster"])))) && property_get("spookyPuttyMonster") !== embezzler;
  var rainDohLocked = lib_have(template_string_$item(embezzler_templateObject53 || (embezzler_templateObject53 = embezzler_taggedTemplateLiteral(["Rain-Doh box full of monster"])))) && property_get("rainDohMonster") !== embezzler;
  if (havePutty && haveRainDoh) {
    if (puttyLocked && rainDohLocked) return 0;else if (puttyLocked) {
      return 5 - property_get("_raindohCopiesMade") + (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(embezzler_templateObject54 || (embezzler_templateObject54 = embezzler_taggedTemplateLiteral(["Rain-Doh box full of monster"]))));
    } else if (rainDohLocked) {
      return 5 - property_get("spookyPuttyCopiesMade") + (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(embezzler_templateObject55 || (embezzler_templateObject55 = embezzler_taggedTemplateLiteral(["Spooky Putty monster"]))));
    }
    return 6 - property_get("spookyPuttyCopiesMade") - property_get("_raindohCopiesMade") + (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(embezzler_templateObject56 || (embezzler_templateObject56 = embezzler_taggedTemplateLiteral(["Spooky Putty monster"])))) + (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(embezzler_templateObject57 || (embezzler_templateObject57 = embezzler_taggedTemplateLiteral(["Rain-Doh box full of monster"]))));
  } else if (havePutty) {
    if (puttyLocked) return 0;
    return 5 - property_get("spookyPuttyCopiesMade") - property_get("_raindohCopiesMade") + (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(embezzler_templateObject58 || (embezzler_templateObject58 = embezzler_taggedTemplateLiteral(["Spooky Putty monster"]))));
  } else if (haveRainDoh) {
    if (rainDohLocked) return 0;
    return 5 - property_get("spookyPuttyCopiesMade") - property_get("_raindohCopiesMade") + (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(embezzler_templateObject59 || (embezzler_templateObject59 = embezzler_taggedTemplateLiteral(["Rain-Doh box full of monster"]))));
  }
  return 0;
}, options => {
  var macro = options.macro;
  withMacro(macro, () => {
    if (lib_have(template_string_$item(embezzler_templateObject60 || (embezzler_templateObject60 = embezzler_taggedTemplateLiteral(["Spooky Putty monster"]))))) return (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject61 || (embezzler_templateObject61 = embezzler_taggedTemplateLiteral(["Spooky Putty monster"]))));
    return (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject62 || (embezzler_templateObject62 = embezzler_taggedTemplateLiteral(["Rain-Doh box full of monster"]))));
  }, options.useAuto);
}), new EmbezzlerFight("4-d Camera", () => lib_have(template_string_$item(embezzler_templateObject63 || (embezzler_templateObject63 = embezzler_taggedTemplateLiteral(["shaking 4-d camera"])))) && property_get("cameraMonster") === embezzler && !property_get("_cameraUsed"), () => lib_have(template_string_$item(embezzler_templateObject64 || (embezzler_templateObject64 = embezzler_taggedTemplateLiteral(["shaking 4-d camera"])))) && property_get("cameraMonster") === embezzler && !property_get("_cameraUsed") ? 1 : 0, options => {
  withMacro(options.macro, () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject65 || (embezzler_templateObject65 = embezzler_taggedTemplateLiteral(["shaking 4-d camera"])))), options.useAuto);
}), new EmbezzlerFight("Ice Sculpture", () => lib_have(template_string_$item(embezzler_templateObject66 || (embezzler_templateObject66 = embezzler_taggedTemplateLiteral(["ice sculpture"])))) && property_get("iceSculptureMonster") === embezzler && !property_get("_iceSculptureUsed"), () => lib_have(template_string_$item(embezzler_templateObject67 || (embezzler_templateObject67 = embezzler_taggedTemplateLiteral(["ice sculpture"])))) && property_get("iceSculptureMonster") === embezzler && !property_get("_iceSculptureUsed") ? 1 : 0, options => {
  withMacro(options.macro, () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject68 || (embezzler_templateObject68 = embezzler_taggedTemplateLiteral(["ice sculpture"])))), options.useAuto);
}), new EmbezzlerFight("Green Taffy", () => lib_have(template_string_$item(embezzler_templateObject69 || (embezzler_templateObject69 = embezzler_taggedTemplateLiteral(["envyfish egg"])))) && property_get("envyfishMonster") === embezzler && !property_get("_envyfishEggUsed"), () => lib_have(template_string_$item(embezzler_templateObject70 || (embezzler_templateObject70 = embezzler_taggedTemplateLiteral(["envyfish egg"])))) && property_get("envyfishMonster") === embezzler && !property_get("_envyfishEggUsed") ? 1 : 0, options => {
  withMacro(options.macro, () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject71 || (embezzler_templateObject71 = embezzler_taggedTemplateLiteral(["envyfish egg"]))))), options.useAuto;
}), new EmbezzlerFight("Screencapped Monster", () => lib_have(template_string_$item(embezzler_templateObject72 || (embezzler_templateObject72 = embezzler_taggedTemplateLiteral(["screencapped monster"])))) && getString("screencappedMonster") === "Knob Goblin Embezzler", () => getString("screencappedMonster") === "Knob Goblin Embezzler" ? (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(embezzler_templateObject73 || (embezzler_templateObject73 = embezzler_taggedTemplateLiteral(["screencapped monster"])))) : 0, options => {
  withMacro(options.macro, () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject74 || (embezzler_templateObject74 = embezzler_taggedTemplateLiteral(["screencapped monster"])))), options.useAuto);
}), new EmbezzlerFight("Sticky Clay Homunculus", () => lib_have(template_string_$item(embezzler_templateObject75 || (embezzler_templateObject75 = embezzler_taggedTemplateLiteral(["sticky clay homunculus"])))) && getString("crudeMonster") === "Knob Goblin Embezzler", () => getString("crudeMonster") === "Knob Goblin Embezzler" ? (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(embezzler_templateObject76 || (embezzler_templateObject76 = embezzler_taggedTemplateLiteral(["sticky clay homunculus"])))) : 0, options => withMacro(options.macro, () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject77 || (embezzler_templateObject77 = embezzler_taggedTemplateLiteral(["sticky clay homunculus"])))), options.useAuto))];
var wanderSources = [new EmbezzlerFight("Lucky!", () => (0,external_kolmafia_namespaceObject.canAdventure)($location(embezzler_templateObject78 || (embezzler_templateObject78 = embezzler_taggedTemplateLiteral(["Cobb's Knob Treasury"])))) && lib_have(template_string_$effect(embezzler_templateObject79 || (embezzler_templateObject79 = embezzler_taggedTemplateLiteral(["Lucky!"])))), () => (0,external_kolmafia_namespaceObject.canAdventure)($location(embezzler_templateObject80 || (embezzler_templateObject80 = embezzler_taggedTemplateLiteral(["Cobb's Knob Treasury"])))) && lib_have(template_string_$effect(embezzler_templateObject81 || (embezzler_templateObject81 = embezzler_taggedTemplateLiteral(["Lucky!"])))) ? 1 : 0, options => {
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction($location(embezzler_templateObject82 || (embezzler_templateObject82 = embezzler_taggedTemplateLiteral(["Cobb's Knob Treasury"]))), options.macro, options.macro);
}), new EmbezzlerFight("Digitize", () => property_get("_sourceTerminalDigitizeMonster") === embezzler && counter_get("Digitize Monster") <= 0, () => SourceTerminal_have() && getDigitizeUses() === 0 ? 1 : 0, options => {
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction(options.location, wandererFailsafeMacro().step(options.macro), wandererFailsafeMacro().step(options.macro));
}, {
  draggable: "wanderer"
}), new EmbezzlerFight("Guaranteed Romantic Monster", () => property_get("_romanticFightsLeft") > 0 && counter_get("Romantic Monster window begin") <= 0 && counter_get("Romantic Monster window end") <= 0, () => 0, options => {
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction(options.location, wandererFailsafeMacro().step(options.macro), wandererFailsafeMacro().step(options.macro));
}, {
  draggable: "wanderer"
}), new EmbezzlerFight("Enamorang", () => counter_get("Enamorang") <= 0 && property_get("enamorangMonster") === embezzler, () => counter_get("Enamorang") <= 0 && property_get("enamorangMonster") === embezzler || lib_have(template_string_$item(embezzler_templateObject83 || (embezzler_templateObject83 = embezzler_taggedTemplateLiteral(["LOV Enamorang"])))) && !property_get("_enamorangs") ? 1 : 0, options => {
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction(options.location, wandererFailsafeMacro().step(options.macro), wandererFailsafeMacro().step(options.macro));
}, {
  draggable: "wanderer"
})];
var conditionalSources = [new EmbezzlerFight("Orb Prediction", () => lib_have(template_string_$item(embezzler_templateObject84 || (embezzler_templateObject84 = embezzler_taggedTemplateLiteral(["miniature crystal ball"])))) && !property_get("_garbo_doneGregging", false) && ponder().get($location(embezzler_templateObject85 || (embezzler_templateObject85 = embezzler_taggedTemplateLiteral(["The Dire Warren"])))) === embezzler, () => (lib_have(template_string_$item(embezzler_templateObject86 || (embezzler_templateObject86 = embezzler_taggedTemplateLiteral(["miniature crystal ball"])))) ? 1 : 0) * (property_get("beGregariousCharges") + (property_get("beGregariousFightsLeft") > 0 || ponder().get($location(embezzler_templateObject87 || (embezzler_templateObject87 = embezzler_taggedTemplateLiteral(["The Dire Warren"])))) === embezzler ? 1 : 0)), options => {
  (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?ponder=1");
  if (ponder().get($location(embezzler_templateObject88 || (embezzler_templateObject88 = embezzler_taggedTemplateLiteral(["The Dire Warren"])))) !== $monster(embezzler_templateObject89 || (embezzler_templateObject89 = embezzler_taggedTemplateLiteral(["Knob Goblin Embezzler"])))) {
    return;
  }
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction($location(embezzler_templateObject90 || (embezzler_templateObject90 = embezzler_taggedTemplateLiteral(["The Dire Warren"]))), options.macro, options.macro);
  toasterGaze();
  if (!doingExtrovermectin()) _set("_garbo_doneGregging", true);
}, {
  requirements: [new Requirement([], {
    forceEquip: template_string_$items(embezzler_templateObject91 || (embezzler_templateObject91 = embezzler_taggedTemplateLiteral(["miniature crystal ball"])))
  })],
  canInitializeWandererCounters: true
}), new EmbezzlerFight("Macrometeorite", () => property_get("beGregariousMonster") === embezzler && property_get("beGregariousFightsLeft") > 0 && lib_have($skill(embezzler_templateObject92 || (embezzler_templateObject92 = embezzler_taggedTemplateLiteral(["Meteor Lore"])))) && property_get("_macrometeoriteUses") < 10 && proceedWithOrb(), () => (property_get("beGregariousMonster") === embezzler && property_get("beGregariousFightsLeft") > 0 || property_get("beGregariousCharges") > 0) && lib_have($skill(embezzler_templateObject93 || (embezzler_templateObject93 = embezzler_taggedTemplateLiteral(["Meteor Lore"])))) ? 10 - property_get("_macrometeoriteUses") : 0, options => {
  equipOrbIfDesired();
  var crateIsSabered = property_get("_saberForceMonster") === $monster(embezzler_templateObject94 || (embezzler_templateObject94 = embezzler_taggedTemplateLiteral(["crate"])));
  var notEnoughCratesSabered = property_get("_saberForceMonsterCount") < 2;
  var weWantToSaberCrates = !crateIsSabered || notEnoughCratesSabered;
  setChoice(1387, 2);
  var macro = combat_Macro.if_($monster(embezzler_templateObject95 || (embezzler_templateObject95 = embezzler_taggedTemplateLiteral(["crate"]))), combat_Macro.externalIf(crateStrategy() !== "Saber" && !lib_have(template_string_$effect(embezzler_templateObject96 || (embezzler_templateObject96 = embezzler_taggedTemplateLiteral(["On the Trail"])))) && property_get("_olfactionsUsed") < 2, combat_Macro.tryHaveSkill($skill(embezzler_templateObject97 || (embezzler_templateObject97 = embezzler_taggedTemplateLiteral(["Transcendent Olfaction"]))))).externalIf((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(embezzler_templateObject98 || (embezzler_templateObject98 = embezzler_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) && weWantToSaberCrates && property_get("_saberForceUses") < 5, combat_Macro.trySkill($skill(embezzler_templateObject99 || (embezzler_templateObject99 = embezzler_taggedTemplateLiteral(["Use the Force"]))))).skill($skill(embezzler_templateObject100 || (embezzler_templateObject100 = embezzler_taggedTemplateLiteral(["Macrometeorite"]))))).step(options.macro);
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction($location(embezzler_templateObject101 || (embezzler_templateObject101 = embezzler_taggedTemplateLiteral(["Noob Cave"]))), macro, macro);
  if (ponder().get($location(embezzler_templateObject102 || (embezzler_templateObject102 = embezzler_taggedTemplateLiteral(["Noob Cave"])))) === embezzler) toasterGaze();
}, {
  gregariousReplace: true
}), new EmbezzlerFight("Powerful Glove", () => property_get("beGregariousMonster") === embezzler && property_get("beGregariousFightsLeft") > 0 && lib_have(template_string_$item(embezzler_templateObject103 || (embezzler_templateObject103 = embezzler_taggedTemplateLiteral(["Powerful Glove"])))) && property_get("_powerfulGloveBatteryPowerUsed") <= 90 && proceedWithOrb(), () => (property_get("beGregariousMonster") === embezzler && property_get("beGregariousFightsLeft") > 0 || property_get("beGregariousCharges") > 0) && lib_have(template_string_$item(embezzler_templateObject104 || (embezzler_templateObject104 = embezzler_taggedTemplateLiteral(["Powerful Glove"])))) ? Math.min((100 - property_get("_powerfulGloveBatteryPowerUsed")) / 10) : 0, options => {
  equipOrbIfDesired();
  var crateIsSabered = property_get("_saberForceMonster") === $monster(embezzler_templateObject105 || (embezzler_templateObject105 = embezzler_taggedTemplateLiteral(["crate"])));
  var notEnoughCratesSabered = property_get("_saberForceMonsterCount") < 2;
  var weWantToSaberCrates = !crateIsSabered || notEnoughCratesSabered;
  setChoice(1387, 2);
  var macro = combat_Macro.if_($monster(embezzler_templateObject106 || (embezzler_templateObject106 = embezzler_taggedTemplateLiteral(["crate"]))), combat_Macro.externalIf(crateStrategy() !== "Saber" && !lib_have(template_string_$effect(embezzler_templateObject107 || (embezzler_templateObject107 = embezzler_taggedTemplateLiteral(["On the Trail"])))) && property_get("_olfactionsUsed") < 2, combat_Macro.tryHaveSkill($skill(embezzler_templateObject108 || (embezzler_templateObject108 = embezzler_taggedTemplateLiteral(["Transcendent Olfaction"]))))).externalIf((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(embezzler_templateObject109 || (embezzler_templateObject109 = embezzler_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) && weWantToSaberCrates && property_get("_saberForceUses") < 5, combat_Macro.trySkill($skill(embezzler_templateObject110 || (embezzler_templateObject110 = embezzler_taggedTemplateLiteral(["Use the Force"]))))).skill($skill(embezzler_templateObject111 || (embezzler_templateObject111 = embezzler_taggedTemplateLiteral(["CHEAT CODE: Replace Enemy"]))))).step(options.macro);
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction($location(embezzler_templateObject112 || (embezzler_templateObject112 = embezzler_taggedTemplateLiteral(["Noob Cave"]))), macro, macro);
  if (ponder().get($location(embezzler_templateObject113 || (embezzler_templateObject113 = embezzler_taggedTemplateLiteral(["Noob Cave"])))) === embezzler) toasterGaze();
}, {
  requirements: [new Requirement([], {
    forceEquip: template_string_$items(embezzler_templateObject114 || (embezzler_templateObject114 = embezzler_taggedTemplateLiteral(["Powerful Glove"])))
  })],
  gregariousReplace: true
}), new EmbezzlerFight("Be Gregarious", () => property_get("beGregariousMonster") === embezzler && property_get("beGregariousFightsLeft") > (lib_have(template_string_$item(embezzler_templateObject115 || (embezzler_templateObject115 = embezzler_taggedTemplateLiteral(["miniature crystal ball"])))) ? 1 : 0), () => property_get("beGregariousMonster") === embezzler ? property_get("beGregariousCharges") * 3 + property_get("beGregariousFightsLeft") : 0, options => {
  var _run$constraints$prep, _run$constraints;
  var run = ltbRun();
  (_run$constraints$prep = (_run$constraints = run.constraints).preparation) === null || _run$constraints$prep === void 0 ? void 0 : _run$constraints$prep.call(_run$constraints);
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction($location(embezzler_templateObject116 || (embezzler_templateObject116 = embezzler_taggedTemplateLiteral(["The Dire Warren"]))), combat_Macro.if_($monster(embezzler_templateObject117 || (embezzler_templateObject117 = embezzler_taggedTemplateLiteral(["fluffy bunny"]))), run.macro).step(options.macro), combat_Macro.if_($monster(embezzler_templateObject118 || (embezzler_templateObject118 = embezzler_taggedTemplateLiteral(["fluffy bunny"]))), run.macro).step(options.macro));
  // reset the crystal ball prediction by staring longingly at toast
  if (property_get("beGregariousFightsLeft") === 1 && lib_have(template_string_$item(embezzler_templateObject119 || (embezzler_templateObject119 = embezzler_taggedTemplateLiteral(["miniature crystal ball"]))))) {
    var warrenPrediction = ponder().get($location(embezzler_templateObject120 || (embezzler_templateObject120 = embezzler_taggedTemplateLiteral(["The Dire Warren"]))));
    if (warrenPrediction !== embezzler) toasterGaze();
  }
}, {
  canInitializeWandererCounters: true
}), new EmbezzlerFight("Be Gregarious (Set Up Crystal Ball)", () => property_get("beGregariousMonster") === embezzler && property_get("beGregariousFightsLeft") === 1 && lib_have(template_string_$item(embezzler_templateObject121 || (embezzler_templateObject121 = embezzler_taggedTemplateLiteral(["miniature crystal ball"])))) && !ponder().get($location(embezzler_templateObject122 || (embezzler_templateObject122 = embezzler_taggedTemplateLiteral(["The Dire Warren"])))), () => property_get("beGregariousMonster") === embezzler && property_get("beGregariousFightsLeft") > 0 || property_get("beGregariousCharges") > 0 ? 1 : 0, options => {
  garboAdventure($location(embezzler_templateObject123 || (embezzler_templateObject123 = embezzler_taggedTemplateLiteral(["The Dire Warren"]))), combat_Macro.if_(embezzler, options.macro).abort());
}, {
  requirements: [new Requirement([], {
    forceEquip: template_string_$items(embezzler_templateObject124 || (embezzler_templateObject124 = embezzler_taggedTemplateLiteral(["miniature crystal ball"]))).filter(item => lib_have(item))
  })],
  canInitializeWandererCounters: true
}), new EmbezzlerFight("Backup", () => property_get("lastCopyableMonster") === embezzler && lib_have(template_string_$item(embezzler_templateObject125 || (embezzler_templateObject125 = embezzler_taggedTemplateLiteral(["backup camera"])))) && property_get("_backUpUses") < 11, () => lib_have(template_string_$item(embezzler_templateObject126 || (embezzler_templateObject126 = embezzler_taggedTemplateLiteral(["backup camera"])))) ? 11 - property_get("_backUpUses") : 0, options => {
  var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
  adventureFunction(options.location, combat_Macro.if_("!monsterid ".concat(embezzler.id), combat_Macro.skill($skill(embezzler_templateObject127 || (embezzler_templateObject127 = embezzler_taggedTemplateLiteral(["Back-Up to your Last Enemy"]))))).step(options.macro), combat_Macro.if_("!monsterid ".concat(embezzler.id), combat_Macro.skill($skill(embezzler_templateObject128 || (embezzler_templateObject128 = embezzler_taggedTemplateLiteral(["Back-Up to your Last Enemy"]))))).step(options.macro));
}, {
  requirements: [new Requirement([], {
    forceEquip: template_string_$items(embezzler_templateObject129 || (embezzler_templateObject129 = embezzler_taggedTemplateLiteral(["backup camera"]))),
    bonusEquip: new Map([[template_string_$item(embezzler_templateObject130 || (embezzler_templateObject130 = embezzler_taggedTemplateLiteral(["backup camera"]))), 5000]])
  })],
  draggable: "backup",
  wrongEncounterName: true,
  canInitializeWandererCounters: true
})];
var fakeSources = [new EmbezzlerFight("Professor MeatChain", () => false, () => lib_have($familiar(embezzler_templateObject131 || (embezzler_templateObject131 = embezzler_taggedTemplateLiteral(["Pocket Professor"])))) && !property_get("_garbo_meatChain", false) ? Math.max(10 - property_get("_pocketProfessorLectures"), 0) : 0, () => {
  return;
}), new EmbezzlerFight("Professor WeightChain", () => false, () => lib_have($familiar(embezzler_templateObject132 || (embezzler_templateObject132 = embezzler_taggedTemplateLiteral(["Pocket Professor"])))) && !property_get("_garbo_weightChain", false) ? Math.min(15 - property_get("_pocketProfessorLectures"), 5) : 0, () => {
  return;
})];
var emergencyChainStarters = [
// These are very deliberately the last embezzler fights.
new EmbezzlerFight("11-leaf clover (untapped potential)", () => {
  var potential = Math.floor(embezzlerCount());
  if (potential < 1) return false;
  if (!(0,external_kolmafia_namespaceObject.canAdventure)($location(embezzler_templateObject133 || (embezzler_templateObject133 = embezzler_taggedTemplateLiteral(["Cobb's Knob Treasury"]))))) {
    return false;
  }
  // Don't use clovers if wishes are available and cheaper
  if (property_get("_genieFightsUsed") < 3 && (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(embezzler_templateObject134 || (embezzler_templateObject134 = embezzler_taggedTemplateLiteral(["11-leaf clover"])))) >= WISH_VALUE) {
    return false;
  }
  if (config_globalOptions.askedAboutWish) return config_globalOptions.wishAnswer;
  var profit = (potential + 1) * averageEmbezzlerNet() - (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(embezzler_templateObject135 || (embezzler_templateObject135 = embezzler_taggedTemplateLiteral(["11-leaf clover"]))));
  if (profit < 0) return false;
  (0,external_kolmafia_namespaceObject.print)("You have the following embezzler-sources untapped right now:", HIGHLIGHT);
  embezzlerSources.filter(source => source.potential() > 0).map(source => "".concat(source.potential(), " from ").concat(source.name)).forEach(text => (0,external_kolmafia_namespaceObject.print)(text, HIGHLIGHT));
  config_globalOptions.askedAboutWish = true;
  config_globalOptions.wishAnswer = userConfirmDialog("Garbo has detected you have ".concat(potential, " potential ways to copy an Embezzler, but no way to start a fight with one. Current embezzler net (before potions) is ").concat(averageEmbezzlerNet(), ", so we expect to earn ").concat(profit, " meat, after the cost of a 11-leaf clover. Should we get Lucky! for an Embezzler?"), true);
  return config_globalOptions.wishAnswer;
}, () => 0, options => {
  config_globalOptions.askedAboutWish = false;
  withProperty("autoSatisfyWithCloset", true, () => (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(embezzler_templateObject136 || (embezzler_templateObject136 = embezzler_taggedTemplateLiteral(["11-leaf clover"])))));
  (0,external_kolmafia_namespaceObject.use)(template_string_$item(embezzler_templateObject137 || (embezzler_templateObject137 = embezzler_taggedTemplateLiteral(["11-leaf clover"]))));
  if (lib_have(template_string_$effect(embezzler_templateObject138 || (embezzler_templateObject138 = embezzler_taggedTemplateLiteral(["Lucky!"]))))) {
    var adventureFunction = options.useAuto ? garboAdventureAuto : garboAdventure;
    adventureFunction($location(embezzler_templateObject139 || (embezzler_templateObject139 = embezzler_taggedTemplateLiteral(["Cobb's Knob Treasury"]))), options.macro, options.macro);
  }
  config_globalOptions.askedAboutWish = false;
}), new EmbezzlerFight("Pocket Wish (untapped potential)", () => {
  var potential = Math.floor(embezzlerCount());
  if (potential < 1) return false;
  if (property_get("_genieFightsUsed") >= 3) return false;
  if (config_globalOptions.askedAboutWish) return config_globalOptions.wishAnswer;
  var profit = (potential + 1) * averageEmbezzlerNet() - WISH_VALUE;
  if (profit < 0) return false;
  (0,external_kolmafia_namespaceObject.print)("You have the following embezzler-sources untapped right now:", HIGHLIGHT);
  embezzlerSources.filter(source => source.potential() > 0).map(source => "".concat(source.potential(), " from ").concat(source.name)).forEach(text => (0,external_kolmafia_namespaceObject.print)(text, HIGHLIGHT));
  config_globalOptions.askedAboutWish = true;
  config_globalOptions.wishAnswer = userConfirmDialog("Garbo has detected you have ".concat(potential, " potential ways to copy an Embezzler, but no way to start a fight with one. Current embezzler net (before potions) is ").concat(averageEmbezzlerNet(), ", so we expect to earn ").concat(profit, " meat, after the cost of a wish. Should we wish for an Embezzler?"), true);
  return config_globalOptions.wishAnswer;
}, () => 0, options => {
  config_globalOptions.askedAboutWish = false;
  withMacro(options.macro, () => {
    acquire(1, template_string_$item(embezzler_templateObject140 || (embezzler_templateObject140 = embezzler_taggedTemplateLiteral(["pocket wish"]))), WISH_VALUE);
    (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?pwd=".concat((0,external_kolmafia_namespaceObject.myHash)(), "&which=3&whichitem=9537"), false, true);
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd&whichchoice=1267&option=1&wish=to fight a Knob Goblin Embezzler ", true, true);
    (0,external_kolmafia_namespaceObject.visitUrl)("main.php", false);
    (0,external_kolmafia_namespaceObject.runCombat)();
    config_globalOptions.askedAboutWish = false;
  }, options.useAuto);
})];
var embezzlerSources = [].concat(wanderSources, conditionalSources, copySources, chainStarters, emergencyChainStarters, fakeSources);
function embezzlerCount() {
  return utils_sum(embezzlerSources, source => source.potential());
}

/**
 * Gets next available embezzler fight. If there is no way to generate a fight, but copies are available,
 * the user is prompted to purchase a pocket wish to start the embezzler chain.
 * @returns the next available embezzler fight
 */
function getNextEmbezzlerFight() {
  var _ref;
  var wanderer = wanderSources.find(fight => fight.available());
  if (wanderer) return wanderer;
  var conditional = conditionalSources.find(fight => fight.available());
  if (conditional) {
    var leftoverReplacers = (lib_have($skill(embezzler_templateObject141 || (embezzler_templateObject141 = embezzler_taggedTemplateLiteral(["Meteor Lore"])))) ? 10 - property_get("_macrometeoriteUses") : 0) + (lib_have(template_string_$item(embezzler_templateObject142 || (embezzler_templateObject142 = embezzler_taggedTemplateLiteral(["Powerful Glove"])))) ? Math.floor(100 - property_get("_powerfulGloveBatteryPowerUsed") / 10) : 0);
    // we don't want to reset our orb with a gregarious fight; that defeats the purpose
    var skip = conditional.name === "Be Gregarious" && crateStrategy() === "Orb" && leftoverReplacers;
    if (!skip) return conditional;
  }
  var copy = copySources.find(fight => fight.available());
  if (copy) return copy;
  var chainStart = chainStarters.find(fight => fight.available());
  if (chainStart) return chainStart;
  return (_ref = conditional !== null && conditional !== void 0 ? conditional : emergencyChainStarters.find(fight => fight.available())) !== null && _ref !== void 0 ? _ref : null;
}

/**
 * Determines whether we want to do this particular Embezzler fight; if we aren't using orb, should always return true. If we're using orb and it's a crate, we'll have to see!
 * @returns
 */
function proceedWithOrb() {
  var strat = crateStrategy();
  // If we can't possibly use orb, return true
  if (!lib_have(template_string_$item(embezzler_templateObject143 || (embezzler_templateObject143 = embezzler_taggedTemplateLiteral(["miniature crystal ball"])))) || strat !== "Orb") return true;

  // If we're using orb, we have a KGE prediction, and we can reset it, return false
  var gregFightNames = ["Macrometeorite", "Powerful Glove", "Be Gregarious", "Orb Prediction"];
  if (ponder().get($location(embezzler_templateObject144 || (embezzler_templateObject144 = embezzler_taggedTemplateLiteral(["Noob Cave"])))) === embezzler && embezzlerSources.filter(source => !gregFightNames.includes(source.name)).find(source => source.available())) {
    return false;
  }
  return true;
}
function toasterGaze() {
  var shore = $location(embezzler_templateObject145 || (embezzler_templateObject145 = embezzler_taggedTemplateLiteral(["The Shore, Inc. Travel Agency"])));
  var pass = template_string_$item(embezzler_templateObject146 || (embezzler_templateObject146 = embezzler_taggedTemplateLiteral(["Desert Bus pass"])));
  if (!(0,external_kolmafia_namespaceObject.canAdventure)(shore) && !lib_have(pass)) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(pass);
  }
  try {
    var store = (0,external_kolmafia_namespaceObject.visitUrl)((0,external_kolmafia_namespaceObject.toUrl)(shore));
    if (!store.includes("Check out the gift shop")) {
      (0,external_kolmafia_namespaceObject.print)("Unable to stare longingly at toast");
    }
    (0,external_kolmafia_namespaceObject.runChoice)(4);
  } catch (e) {
    (0,external_kolmafia_namespaceObject.print)("We ran into an issue when gazing at toast: ".concat(e, "."), "red");
  } finally {
    (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
  }
}
;// CONCATENATED MODULE: ./src/potions.ts
var potions_templateObject, potions_templateObject2, potions_templateObject3, potions_templateObject4, potions_templateObject5, potions_templateObject6, potions_templateObject7, potions_templateObject8, potions_templateObject9, potions_templateObject10, potions_templateObject11, potions_templateObject12, potions_templateObject13, potions_templateObject14, potions_templateObject15, potions_templateObject16, potions_templateObject17, potions_templateObject18;
function potions_slicedToArray(arr, i) { return potions_arrayWithHoles(arr) || potions_iterableToArrayLimit(arr, i) || potions_unsupportedIterableToArray(arr, i) || potions_nonIterableRest(); }
function potions_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function potions_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function potions_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function potions_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function potions_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, potions_toPropertyKey(descriptor.key), descriptor); } }
function potions_createClass(Constructor, protoProps, staticProps) { if (protoProps) potions_defineProperties(Constructor.prototype, protoProps); if (staticProps) potions_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function potions_defineProperty(obj, key, value) { key = potions_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function potions_toPropertyKey(arg) { var key = potions_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function potions_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function potions_toConsumableArray(arr) { return potions_arrayWithoutHoles(arr) || potions_iterableToArray(arr) || potions_unsupportedIterableToArray(arr) || potions_nonIterableSpread(); }
function potions_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function potions_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function potions_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return potions_arrayLikeToArray(arr); }
function potions_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = potions_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function potions_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return potions_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return potions_arrayLikeToArray(o, minLen); }
function potions_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function potions_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }









var banned = template_string_$items(potions_templateObject || (potions_templateObject = potions_taggedTemplateLiteral(["Uncle Greenspan's Bathroom Finance Guide"])));
var failedWishes = [];
var mutuallyExclusiveList = [$effects(potions_templateObject2 || (potions_templateObject2 = potions_taggedTemplateLiteral(["Blue Tongue, Green Tongue, Orange Tongue, Purple Tongue, Red Tongue, Black Tongue"]))), $effects(potions_templateObject3 || (potions_templateObject3 = potions_taggedTemplateLiteral(["Cupcake of Choice, The Cupcake of Wrath, Shiny Happy Cupcake, Your Cupcake Senses Are Tingling, Tiny Bubbles in the Cupcake"]))), $effects(potions_templateObject4 || (potions_templateObject4 = potions_taggedTemplateLiteral(["Broken Heart, Fiery Heart, Cold Hearted, Sweet Heart, Withered Heart, Lustful Heart"]))), $effects(potions_templateObject5 || (potions_templateObject5 = potions_taggedTemplateLiteral(["Coldform, Hotform, Sleazeform, Spookyform, Stenchform"])))];
var mutuallyExclusive = new Map();
for (var _i = 0, _mutuallyExclusiveLis = mutuallyExclusiveList; _i < _mutuallyExclusiveLis.length; _i++) {
  var effectGroup = _mutuallyExclusiveLis[_i];
  var _iterator = potions_createForOfIteratorHelper(effectGroup),
    _step;
  try {
    var _loop = function _loop() {
      var _mutuallyExclusive$ge;
      var effect = _step.value;
      mutuallyExclusive.set(effect, [].concat(potions_toConsumableArray((_mutuallyExclusive$ge = mutuallyExclusive.get(effect)) !== null && _mutuallyExclusive$ge !== void 0 ? _mutuallyExclusive$ge : []), potions_toConsumableArray(effectGroup.filter(other => other !== effect))));
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function retrieveUntradeablePrice(it) {
  return (0,external_kolmafia_namespaceObject.retrievePrice)(it, (0,external_kolmafia_namespaceObject.availableAmount)(it) + 1) - (0,external_kolmafia_namespaceObject.autosellPrice)(it) * (0,external_kolmafia_namespaceObject.availableAmount)(it);
}
var Potion = /*#__PURE__*/function () {
  function Potion(potion) {
    var _options$canDouble;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    potions_classCallCheck(this, Potion);
    potions_defineProperty(this, "potion", void 0);
    potions_defineProperty(this, "providesDoubleDuration", void 0);
    potions_defineProperty(this, "canDouble", void 0);
    potions_defineProperty(this, "overrideEffect", void 0);
    potions_defineProperty(this, "overrideDuration", void 0);
    potions_defineProperty(this, "useOverride", void 0);
    this.potion = potion;
    this.providesDoubleDuration = options.providesDoubleDuration;
    this.canDouble = (_options$canDouble = options.canDouble) !== null && _options$canDouble !== void 0 ? _options$canDouble : true;
    this.overrideDuration = options.duration;
    this.overrideEffect = options.effect;
    this.useOverride = options.use;
  }
  potions_createClass(Potion, [{
    key: "doubleDuration",
    value: function doubleDuration() {
      if (this.canDouble) {
        return new Potion(this.potion, {
          providesDoubleDuration: true,
          canDouble: this.canDouble,
          duration: this.overrideDuration,
          effect: this.overrideEffect,
          use: this.useOverride
        });
      }
      return this;
    }
  }, {
    key: "effect",
    value: function effect() {
      var _this$overrideEffect;
      return (_this$overrideEffect = this.overrideEffect) !== null && _this$overrideEffect !== void 0 ? _this$overrideEffect : (0,external_kolmafia_namespaceObject.effectModifier)(this.potion, "Effect");
    }
  }, {
    key: "effectDuration",
    value: function effectDuration() {
      var _this$overrideDuratio;
      return ((_this$overrideDuratio = this.overrideDuration) !== null && _this$overrideDuratio !== void 0 ? _this$overrideDuratio : modifier_get("Effect Duration", this.potion)) * (this.providesDoubleDuration ? 2 : 1);
    }
  }, {
    key: "meatDrop",
    value: function meatDrop() {
      (0,external_kolmafia_namespaceObject.setLocation)($location(potions_templateObject6 || (potions_templateObject6 = potions_taggedTemplateLiteral(["none"]))));
      return modifier_get("Meat Drop", this.effect()) + 2 * (usingPurse() ? modifier_get("Smithsness", this.effect()) : 0);
    }
  }, {
    key: "familiarWeight",
    value: function familiarWeight() {
      return modifier_get("Familiar Weight", this.effect());
    }
  }, {
    key: "bonusMeat",
    value: function bonusMeat() {
      var familiarMultiplier = lib_have($familiar(potions_templateObject7 || (potions_templateObject7 = potions_taggedTemplateLiteral(["Robortender"])))) ? 2 : lib_have($familiar(potions_templateObject8 || (potions_templateObject8 = potions_taggedTemplateLiteral(["Hobo Monkey"])))) ? 1.25 : 1;

      // Assume base weight of 100 pounds. This is off but close enough.
      var assumedBaseWeight = 100;
      // Marginal value of familiar weight in % meat drop.
      var marginalValue = 2 * familiarMultiplier + Math.sqrt(220 * familiarMultiplier) / (2 * Math.sqrt(assumedBaseWeight));
      return this.familiarWeight() * marginalValue + this.meatDrop();
    }
  }, {
    key: "gross",
    value: function gross(embezzlers, maxTurns) {
      var bonusMeat = this.bonusMeat();
      var duration = Math.max(this.effectDuration(), maxTurns !== null && maxTurns !== void 0 ? maxTurns : 0);
      // Number of embezzlers this will actually be in effect for.
      var embezzlersApplied = Math.max(Math.min(duration, embezzlers) - (0,external_kolmafia_namespaceObject.haveEffect)(this.effect()), 0);
      return bonusMeat / 100 * (baseMeat * duration + 750 * embezzlersApplied);
    }
  }, {
    key: "price",
    value: function price(historical) {
      // If asked for historical, and age < 14 days, use historical.
      // If potion is not tradeable, use retrievePrice instead
      return this.potion.tradeable ? historical && (0,external_kolmafia_namespaceObject.historicalAge)(this.potion) < 14 ? (0,external_kolmafia_namespaceObject.historicalPrice)(this.potion) : (0,external_kolmafia_namespaceObject.mallPrice)(this.potion) : retrieveUntradeablePrice(this.potion);
    }
  }, {
    key: "net",
    value: function net(embezzlers) {
      var historical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return this.gross(embezzlers) - this.price(historical);
    }
  }, {
    key: "doublingValue",
    value: function doublingValue(embezzlers) {
      var historical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return Math.min(Math.max(this.doubleDuration().net(embezzlers, historical), 0) - Math.max(this.net(embezzlers, historical), 0), this.price(true));
    }
  }, {
    key: "usesToCover",
    value:
    /**
     * Compute how many times to use this potion to cover the range of turns
     * @param turns the number of turns to cover
     * @param allowOverage whether or not to allow the potion to extend past this number of turns
     * @returns the number of uses required by this potion to cover thatrange
     */
    function usesToCover(turns, allowOverage) {
      if (allowOverage) {
        return Math.ceil(turns / this.effectDuration());
      } else {
        return Math.floor(turns / this.effectDuration());
      }
    }
  }, {
    key: "overage",
    value:
    /**
     * Compute how many fewer or more turns we are from the desired turn count based on the input usage
     * @param turns the number of turns to cover
     * @param uses the number of uses of hte potion
     * @returns negative number of the number of turns short, positive number of the number of extra turns
     */
    function overage(turns, uses) {
      return this.effectDuration() * uses - turns;
    }
  }, {
    key: "value",
    value:
    /**
     * Compute up to 4 possible value thresholds for this potion based on the number of embezzlers to fight at the start of the day
     * - using it to only cover embezzlers
     * - using it to cover both barf and embezzlers (this is max 1 use)
     * - using it to only cover barf
     * - using it to cover turns in barf and those that would be lost at the end of the day
     * @param embezzlers The number of embezzlers expected to be fought in a block at the start of the day
     * @returns
     */
    function value(embezzlers, turns, limit) {
      var startingTurns = (0,external_kolmafia_namespaceObject.haveEffect)(this.effect());
      var ascending = config_globalOptions.ascend;
      var totalTurns = turns !== null && turns !== void 0 ? turns : estimatedGarboTurns();
      var values = [];
      var limitFunction = limit ? quantity => utils_clamp(limit - utils_sum(values, _ref => {
        var quantity = _ref.quantity;
        return quantity;
      }), 0, quantity) : quantity => quantity;

      // compute the value of covering embezzlers
      var embezzlerTurns = Math.max(0, embezzlers - startingTurns);
      var embezzlerQuantity = this.usesToCover(embezzlerTurns, false);
      var embezzlerValue = embezzlerQuantity ? this.gross(embezzlerTurns) : 0;
      values.push({
        name: "embezzler",
        quantity: limitFunction(embezzlerQuantity),
        value: embezzlerValue
      });

      // compute the number of embezzlers missed before, and their value (along with barf unless nobarf)
      var overlapEmbezzlers = -this.overage(embezzlerTurns, embezzlerQuantity);
      if (overlapEmbezzlers > 0) {
        values.push({
          name: "overlap",
          quantity: limitFunction(1),
          value: this.gross(overlapEmbezzlers, config_globalOptions.nobarf ? overlapEmbezzlers : undefined)
        });
      }
      var embezzlerCoverage = embezzlerQuantity + (overlapEmbezzlers > 0 ? 1 : 0) * this.effectDuration();
      if (!config_globalOptions.nobarf) {
        // unless nobarf, compute the value of barf turns
        // if ascending, break those turns that are not fully covered by a potion into their own value
        var remainingTurns = Math.max(0, totalTurns - embezzlerCoverage - startingTurns);
        var barfQuantity = this.usesToCover(remainingTurns, !ascending);
        values.push({
          name: "barf",
          quantity: limitFunction(barfQuantity),
          value: this.gross(0)
        });
        if (config_globalOptions.ascend && this.overage(remainingTurns, barfQuantity) < 0) {
          var ascendingTurns = Math.max(0, remainingTurns - barfQuantity * this.effectDuration());
          values.push({
            name: "ascending",
            quantity: limitFunction(1),
            value: this.gross(0, ascendingTurns)
          });
        }
      }
      return values.filter(tier => tier.quantity > 0);
    }
  }, {
    key: "_use",
    value: function _use(quantity) {
      if (this.useOverride) {
        return this.useOverride(quantity);
      } else if ((0,external_kolmafia_namespaceObject.itemType)(this.potion) === "potion") {
        return (0,external_kolmafia_namespaceObject.use)(quantity, this.potion);
      } else {
        // must provide an override for non potions, otherwise they won't use
        return false;
      }
    }
  }, {
    key: "use",
    value: function use(quantity) {
      var effectTurns = (0,external_kolmafia_namespaceObject.haveEffect)(this.effect());
      var result = this._use(quantity);
      // If we tried wishing but failed, no longer try this wish in the future
      if (this.potion === template_string_$item(potions_templateObject9 || (potions_templateObject9 = potions_taggedTemplateLiteral(["pocket wish"]))) && (0,external_kolmafia_namespaceObject.haveEffect)(this.effect()) <= effectTurns) {
        failedWishes.push(this.effect());
      }
      return result;
    }
  }], [{
    key: "bonusMeat",
    value: function bonusMeat(item) {
      return new Potion(item).bonusMeat();
    }
  }, {
    key: "gross",
    value: function gross(item, embezzlers) {
      return new Potion(item).gross(embezzlers);
    }
  }, {
    key: "net",
    value: function net(item, embezzlers) {
      var historical = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return new Potion(item).net(embezzlers, historical);
    }
  }, {
    key: "doublingValue",
    value: function doublingValue(item, embezzlers) {
      var historical = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return new Potion(item).doublingValue(embezzlers, historical);
    }
  }, {
    key: "usesToCover",
    value: function usesToCover(item, turns, allowOverage) {
      return new Potion(item).usesToCover(turns, allowOverage);
    }
  }, {
    key: "overage",
    value: function overage(item, turns, uses) {
      return new Potion(item).overage(turns, uses);
    }
  }]);
  return Potion;
}();
function useAsValuable(potion, embezzlers, embezzlersOnly) {
  var value = potion.value(embezzlers);
  var price = potion.price(false);
  var amountsAcquired = value.map(value => (!embezzlersOnly || value.name === "embezzler") && value.value - price > 0 ? acquire(value.quantity, potion.potion, value.value, false, undefined, true) : 0);
  var total = sumNumbers(amountsAcquired);
  if (total > 0) {
    var effect = potion.effect();
    if (isSong(effect) && !lib_have(effect)) {
      var _iterator2 = potions_createForOfIteratorHelper(lib_getActiveSongs()),
        _step2;
      try {
        var _loop2 = function _loop2() {
          var song = _step2.value;
          var slot = Mood.defaultOptions.songSlots.find(slot => slot.includes(song));
          if (!slot || slot.includes(effect)) {
            (0,external_kolmafia_namespaceObject.cliExecute)("shrug ".concat(song));
          }
        };
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    (0,external_kolmafia_namespaceObject.print)("Using ".concat(total, " ").concat(potion.potion.plural));
    potion.use(total);
  }
  return total;
}
var wishPotions = external_kolmafia_namespaceObject.Effect.all().filter(effect => !effect.attributes.includes("nohookah")).map(effect => new Potion(template_string_$item(potions_templateObject10 || (potions_templateObject10 = potions_taggedTemplateLiteral(["pocket wish"]))), {
  effect: effect,
  canDouble: false,
  duration: 20,
  use: quantity => new Array(quantity).fill(0).every(() => (0,external_kolmafia_namespaceObject.cliExecute)("genie effect ".concat(effect)))
}));
var farmingPotions = [].concat(potions_toConsumableArray(external_kolmafia_namespaceObject.Item.all().filter(item => item.tradeable && !banned.includes(item) && (0,external_kolmafia_namespaceObject.itemType)(item) === "potion").map(item => new Potion(item)).filter(potion => potion.bonusMeat() > 0)), potions_toConsumableArray(wishPotions), [new Potion(template_string_$item(potions_templateObject11 || (potions_templateObject11 = potions_taggedTemplateLiteral(["papier-m\xE2ch\xE9 toothpicks"]))))]);
function doublingPotions(embezzlers) {
  return farmingPotions.filter(potion => potion.doubleDuration().gross(embezzlers) / potion.price(true) > 0.5).map(potion => {
    return {
      potion: potion,
      value: potion.doublingValue(embezzlers)
    };
  }).sort((a, b) => b.value - a.value).map(pair => pair.potion);
}
var completedPotionSetup = false;
function potionSetupCompleted() {
  return completedPotionSetup;
}
/**
 * Determines if potions are worth using by comparing against meat-equilibrium. Considers using pillkeeper to double them. Accounts for non-wanderer embezzlers. Does not account for PYEC/LTC, or running out of turns with the ascend flag.
 * @param doEmbezzlers Do we account for embezzlers when deciding what potions are profitable?
 */
function potionSetup(embezzlersOnly) {
  // TODO: Count PYEC.
  // TODO: Count free fights (25 meat each for most).
  var embezzlers = embezzlerCount();
  if (lib_have(template_string_$item(potions_templateObject12 || (potions_templateObject12 = potions_taggedTemplateLiteral(["Eight Days a Week Pill Keeper"])))) && !property_get("_freePillKeeperUsed")) {
    var possibleDoublingPotions = doublingPotions(embezzlers);
    var bestPotion = possibleDoublingPotions.length > 0 ? possibleDoublingPotions[0] : undefined;
    if (bestPotion && bestPotion.doubleDuration().net(embezzlers) > pillkeeperOpportunityCost()) {
      (0,external_kolmafia_namespaceObject.print)("Determined that ".concat(bestPotion.potion, " was the best potion to double"), HIGHLIGHT);
      (0,external_kolmafia_namespaceObject.cliExecute)("pillkeeper extend");
      acquire(1, bestPotion.potion, bestPotion.doubleDuration().gross(embezzlers));
      bestPotion.use(1);
    }
  }

  // Only test potions which are reasonably close to being profitable using historical price.
  var testPotions = farmingPotions.filter(potion => potion.gross(embezzlers) / potion.price(true) > 0.5);
  testPotions.sort((a, b) => b.net(embezzlers) - a.net(embezzlers));
  var excludedEffects = new Set();
  var _iterator3 = potions_createForOfIteratorHelper(getActiveEffects()),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _mutuallyExclusive$ge2;
      var effect = _step3.value;
      var _iterator5 = potions_createForOfIteratorHelper((_mutuallyExclusive$ge2 = mutuallyExclusive.get(effect)) !== null && _mutuallyExclusive$ge2 !== void 0 ? _mutuallyExclusive$ge2 : []),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var excluded = _step5.value;
          excludedEffects.add(excluded);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  var _iterator4 = potions_createForOfIteratorHelper(testPotions),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var potion = _step4.value;
      var _effect = potion.effect();
      if (!excludedEffects.has(_effect) && !(failedWishes.includes(_effect) && potion.potion === template_string_$item(potions_templateObject13 || (potions_templateObject13 = potions_taggedTemplateLiteral(["pocket wish"])))) && useAsValuable(potion, embezzlers, embezzlersOnly) > 0) {
        var _mutuallyExclusive$ge3;
        var _iterator6 = potions_createForOfIteratorHelper((_mutuallyExclusive$ge3 = mutuallyExclusive.get(_effect)) !== null && _mutuallyExclusive$ge3 !== void 0 ? _mutuallyExclusive$ge3 : []),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _excluded = _step6.value;
            excludedEffects.add(_excluded);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  variableMeatPotionsSetup(0, embezzlers);
  completedPotionSetup = true;
}

/**
 * Uses a Greenspan iff profitable; does not account for PYEC/LTC, or running out of adventures with the ascend flag.
 * @param embezzlers Do we want to account for embezzlers when calculating the value of bathroom finance?
 */
function bathroomFinance(embezzlers) {
  if (lib_have(template_string_$effect(potions_templateObject14 || (potions_templateObject14 = potions_taggedTemplateLiteral(["Buy!  Sell!  Buy!  Sell!"]))))) return;

  // Average meat % for embezzlers is sum of arithmetic series, 2 * sum(1 -> embezzlers)
  var averageEmbezzlerGross = (baseMeat + 750) * 2 * (embezzlers + 1) / 2 / 100;
  var embezzlerGross = averageEmbezzlerGross * embezzlers;
  var tourists = 100 - embezzlers;

  // Average meat % for tourists is sum of arithmetic series, 2 * sum(embezzlers + 1 -> 100)
  var averageTouristGross = baseMeat * 2 * (100 + embezzlers + 1) / 2 / 100;
  var touristGross = averageTouristGross * tourists;
  var greenspan = template_string_$item(potions_templateObject15 || (potions_templateObject15 = potions_taggedTemplateLiteral(["Uncle Greenspan's Bathroom Finance Guide"])));
  if (touristGross + embezzlerGross > (0,external_kolmafia_namespaceObject.mallPrice)(greenspan)) {
    acquire(1, greenspan, touristGross + embezzlerGross, false);
    if ((0,external_kolmafia_namespaceObject.itemAmount)(greenspan) > 0) {
      (0,external_kolmafia_namespaceObject.print)("Using ".concat(greenspan, "!"), HIGHLIGHT);
      (0,external_kolmafia_namespaceObject.use)(greenspan);
    }
  }
}
function triangleNumber(b) {
  var a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return 0.5 * (b * (b + 1) - a * (a + 1));
}
var VariableMeatPotion = /*#__PURE__*/function () {
  // Number of turns to cap out variable bonus
  // meat% bonus per turn

  function VariableMeatPotion(potion, softcap, meatBonusPerTurn, duration, effect) {
    potions_classCallCheck(this, VariableMeatPotion);
    potions_defineProperty(this, "potion", void 0);
    potions_defineProperty(this, "effect", void 0);
    potions_defineProperty(this, "duration", void 0);
    potions_defineProperty(this, "softcap", void 0);
    potions_defineProperty(this, "meatBonusPerTurn", void 0);
    potions_defineProperty(this, "cappedMeatBonus", void 0);
    this.potion = potion;
    this.effect = effect !== null && effect !== void 0 ? effect : (0,external_kolmafia_namespaceObject.effectModifier)(potion, "Effect");
    this.duration = duration !== null && duration !== void 0 ? duration : (0,external_kolmafia_namespaceObject.numericModifier)(potion, "Effect Duration");
    this.softcap = softcap;
    this.meatBonusPerTurn = meatBonusPerTurn;
    this.cappedMeatBonus = softcap * meatBonusPerTurn;
  }
  potions_createClass(VariableMeatPotion, [{
    key: "use",
    value: function use(quantity) {
      acquire(quantity, this.potion, 1.2 * (0,external_kolmafia_namespaceObject.retrievePrice)(this.potion, quantity) / quantity, false, 2000000);
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.potion) < quantity) return false;
      return (0,external_kolmafia_namespaceObject.use)(quantity, this.potion);
    }
  }, {
    key: "price",
    value: function price(historical) {
      // If asked for historical, and age < 14 days, use historical.
      // If potion is not tradeable, use retrievePrice instead
      return this.potion.tradeable ? historical && (0,external_kolmafia_namespaceObject.historicalAge)(this.potion) < 14 ? (0,external_kolmafia_namespaceObject.historicalPrice)(this.potion) : (0,external_kolmafia_namespaceObject.mallPrice)(this.potion) : retrieveUntradeablePrice(this.potion);
    }
  }, {
    key: "getOptimalNumberToUse",
    value: function getOptimalNumberToUse(yachtzees, embezzlers) {
      var barfTurns = Math.max(0, estimatedGarboTurns() - yachtzees - embezzlers);
      var potionAmountsToConsider = [];
      var considerSoftcap = [0, this.softcap];
      var considerEmbezzlers = embezzlers > 0 ? [0, embezzlers] : [0];
      for (var _i2 = 0, _arr = [Math.floor, Math.ceil]; _i2 < _arr.length; _i2++) {
        var fn = _arr[_i2];
        var _iterator7 = potions_createForOfIteratorHelper(considerSoftcap),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var sc = _step7.value;
            var _iterator8 = potions_createForOfIteratorHelper(considerEmbezzlers),
              _step8;
            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var em = _step8.value;
                var considerBarfTurns = em === embezzlers && barfTurns > 0 ? [0, barfTurns] : [0];
                for (var _i3 = 0, _considerBarfTurns = considerBarfTurns; _i3 < _considerBarfTurns.length; _i3++) {
                  var bt = _considerBarfTurns[_i3];
                  var potionAmount = fn((yachtzees + em + bt + sc) / this.duration);
                  if (!potionAmountsToConsider.includes(potionAmount)) {
                    potionAmountsToConsider.push(potionAmount);
                  }
                }
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      }
      var profitsFromPotions = potionAmountsToConsider.map(quantity => ({
        quantity: quantity,
        value: this.valueNPotions(quantity, yachtzees, embezzlers, barfTurns)
      }));
      var bestOption = lib_maxBy(profitsFromPotions, "value");
      if (bestOption.value > 0) {
        (0,external_kolmafia_namespaceObject.print)("Expected to profit ".concat(bestOption.value.toFixed(2), " from ").concat(bestOption.quantity, " ").concat(this.potion.plural), "blue");
        var ascendingOverlap = config_globalOptions.ascend || config_globalOptions.nobarf ? 0 : this.softcap / this.duration;
        var potionsToUse = bestOption.quantity + ascendingOverlap - Math.floor((0,external_kolmafia_namespaceObject.haveEffect)(this.effect) / this.duration);
        return Math.max(potionsToUse, 0);
      }
      return 0;
    }
  }, {
    key: "valueNPotions",
    value: function valueNPotions(n, yachtzees, embezzlers, barfTurns) {
      var yachtzeeValue = 2000;
      var embezzlerValue = baseMeat + 750;
      var barfValue = baseMeat * turnsToNC / 30;
      var totalCosts = (0,external_kolmafia_namespaceObject.retrievePrice)(this.potion, n);
      var totalDuration = n * this.duration;
      var cappedDuration = Math.max(0, totalDuration - this.softcap + 1);
      var decayDuration = Math.min(totalDuration, this.softcap - 1);
      var totalValue = 0;
      var turnTypes = [[yachtzees, yachtzeeValue], [embezzlers, embezzlerValue], [barfTurns, barfValue]];
      for (var _i4 = 0, _turnTypes = turnTypes; _i4 < _turnTypes.length; _i4++) {
        var _turnTypes$_i = potions_slicedToArray(_turnTypes[_i4], 2),
          turns = _turnTypes$_i[0],
          value = _turnTypes$_i[1];
        var cappedTurns = Math.min(cappedDuration, turns);
        var decayTurns = Math.min(decayDuration, turns - cappedTurns);
        totalValue += value * (cappedTurns * this.cappedMeatBonus + triangleNumber(decayDuration, decayDuration - decayTurns) * this.meatBonusPerTurn) / 100;
        cappedDuration -= cappedTurns;
        decayDuration -= decayTurns;
        if (decayDuration === 0) break;
      }
      return totalValue - totalCosts;
    }
  }]);
  return VariableMeatPotion;
}();
function variableMeatPotionsSetup(yachtzees, embezzlers) {
  var potions = [new VariableMeatPotion(template_string_$item(potions_templateObject16 || (potions_templateObject16 = potions_taggedTemplateLiteral(["love song of sugary cuteness"]))), 20, 2), new VariableMeatPotion(template_string_$item(potions_templateObject17 || (potions_templateObject17 = potions_taggedTemplateLiteral(["pulled yellow taffy"]))), 50, 2)].concat(potions_toConsumableArray(config_globalOptions.prefs.candydish ? [new VariableMeatPotion(template_string_$item(potions_templateObject18 || (potions_templateObject18 = potions_taggedTemplateLiteral(["porcelain candy dish"]))), 500, 1)] : []));
  var excludedEffects = new Set();
  var _iterator9 = potions_createForOfIteratorHelper(getActiveEffects()),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var _mutuallyExclusive$ge4;
      var effect = _step9.value;
      var _iterator11 = potions_createForOfIteratorHelper((_mutuallyExclusive$ge4 = mutuallyExclusive.get(effect)) !== null && _mutuallyExclusive$ge4 !== void 0 ? _mutuallyExclusive$ge4 : []),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var excluded = _step11.value;
          excludedEffects.add(excluded);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  var _iterator10 = potions_createForOfIteratorHelper(potions),
    _step10;
  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var potion = _step10.value;
      var _effect2 = (0,external_kolmafia_namespaceObject.effectModifier)(potion.potion, "Effect");
      var n = excludedEffects.has(_effect2) ? 0 : potion.getOptimalNumberToUse(yachtzees, embezzlers);
      if (n > 0) {
        var _mutuallyExclusive$ge5;
        potion.use(n);
        var _iterator12 = potions_createForOfIteratorHelper((_mutuallyExclusive$ge5 = mutuallyExclusive.get(_effect2)) !== null && _mutuallyExclusive$ge5 !== void 0 ? _mutuallyExclusive$ge5 : []),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var _excluded2 = _step12.value;
            excludedEffects.add(_excluded2);
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }
}
;// CONCATENATED MODULE: ./src/session.ts
var src_session_templateObject, src_session_templateObject2, src_session_templateObject3, src_session_templateObject4, src_session_templateObject5, src_session_templateObject6, src_session_templateObject7, src_session_templateObject8, src_session_templateObject9, src_session_templateObject10, src_session_templateObject11, src_session_templateObject12, src_session_templateObject13, src_session_templateObject14, src_session_templateObject15, src_session_templateObject16, src_session_templateObject17, src_session_templateObject18, src_session_templateObject19, src_session_templateObject20, src_session_templateObject21, src_session_templateObject22, src_session_templateObject23, src_session_templateObject24, src_session_templateObject25, src_session_templateObject26, src_session_templateObject27, src_session_templateObject28, src_session_templateObject29, src_session_templateObject30, session_templateObject31, session_templateObject32, session_templateObject33, session_templateObject34, session_templateObject35, session_templateObject36, session_templateObject37, session_templateObject38, session_templateObject39, session_templateObject40, session_templateObject41, session_templateObject42, session_templateObject43, session_templateObject44, session_templateObject45;
function src_session_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function src_session_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = src_session_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function src_session_slicedToArray(arr, i) { return src_session_arrayWithHoles(arr) || src_session_iterableToArrayLimit(arr, i) || src_session_unsupportedIterableToArray(arr, i) || src_session_nonIterableRest(); }
function src_session_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function src_session_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function src_session_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function src_session_toConsumableArray(arr) { return src_session_arrayWithoutHoles(arr) || src_session_iterableToArray(arr) || src_session_unsupportedIterableToArray(arr) || src_session_nonIterableSpread(); }
function src_session_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function src_session_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_session_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_session_arrayLikeToArray(o, minLen); }
function src_session_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function src_session_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return src_session_arrayLikeToArray(arr); }
function src_session_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }





function currency() {
  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
    items[_key] = arguments[_key];
  }
  var unitCost = items.map(i => {
    var coinmaster = external_kolmafia_namespaceObject.Coinmaster.all().find(c => (0,external_kolmafia_namespaceObject.sellPrice)(c, i) > 0);
    if (!coinmaster) {
      throw "Invalid coinmaster item ".concat(i);
    } else {
      return [i, (0,external_kolmafia_namespaceObject.sellPrice)(coinmaster, i)];
    }
  });
  return () => Math.max.apply(Math, src_session_toConsumableArray(unitCost.map(_ref => {
    var _ref2 = src_session_slicedToArray(_ref, 2),
      item = _ref2[0],
      cost = _ref2[1];
    return garboValue(item) / cost;
  })));
}
function complexCandy() {
  var candies = external_kolmafia_namespaceObject.Item.all().filter(i => i.candyType === "complex");
  var candyLookup = [[], [], [], [], []];
  var _iterator = src_session_createForOfIteratorHelper(candies),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var candy = _step.value;
      var id = (0,external_kolmafia_namespaceObject.toInt)(candy) % 5;
      if (candy.tradeable) {
        candyLookup[id].push(candy);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var candyIdPrices = candies.filter(i => !i.tradeable).map(i => [i, () => Math.min.apply(Math, src_session_toConsumableArray(candyLookup[(0,external_kolmafia_namespaceObject.toInt)(i) % 5].map(i => garboValue(i))))]);
  return candyIdPrices;
}
var specialValueLookup = new Map([[template_string_$item(src_session_templateObject || (src_session_templateObject = src_session_taggedTemplateLiteral(["Freddy Kruegerand"]))), currency.apply(void 0, src_session_toConsumableArray(template_string_$items(src_session_templateObject2 || (src_session_templateObject2 = src_session_taggedTemplateLiteral(["bottle of Bloodweiser, electric Kool-Aid, Dreadsylvanian skeleton key"])))))], [template_string_$item(src_session_templateObject3 || (src_session_templateObject3 = src_session_taggedTemplateLiteral(["Beach Buck"]))), currency(template_string_$item(src_session_templateObject4 || (src_session_templateObject4 = src_session_taggedTemplateLiteral(["one-day ticket to Spring Break Beach"]))))], [template_string_$item(src_session_templateObject5 || (src_session_templateObject5 = src_session_taggedTemplateLiteral(["Coinspiracy"]))), currency.apply(void 0, src_session_toConsumableArray(template_string_$items(src_session_templateObject6 || (src_session_templateObject6 = src_session_taggedTemplateLiteral(["Merc Core deployment orders, karma shawarma"])))))], [template_string_$item(src_session_templateObject7 || (src_session_templateObject7 = src_session_taggedTemplateLiteral(["FunFunds\u2122"]))), currency(template_string_$item(src_session_templateObject8 || (src_session_templateObject8 = src_session_taggedTemplateLiteral(["one-day ticket to Dinseylandfill"]))))], [template_string_$item(src_session_templateObject9 || (src_session_templateObject9 = src_session_taggedTemplateLiteral(["Volcoino"]))), currency(template_string_$item(src_session_templateObject10 || (src_session_templateObject10 = src_session_taggedTemplateLiteral(["one-day ticket to That 70s Volcano"]))))], [template_string_$item(src_session_templateObject11 || (src_session_templateObject11 = src_session_taggedTemplateLiteral(["Wal-Mart gift certificate"]))), currency(template_string_$item(src_session_templateObject12 || (src_session_templateObject12 = src_session_taggedTemplateLiteral(["one-day ticket to The Glaciest"]))))], [template_string_$item(src_session_templateObject13 || (src_session_templateObject13 = src_session_taggedTemplateLiteral(["Rubee\u2122"]))), currency(template_string_$item(src_session_templateObject14 || (src_session_templateObject14 = src_session_taggedTemplateLiteral(["FantasyRealm guest pass"]))))], [template_string_$item(src_session_templateObject15 || (src_session_templateObject15 = src_session_taggedTemplateLiteral(["Guzzlrbuck"]))), currency(template_string_$item(src_session_templateObject16 || (src_session_templateObject16 = src_session_taggedTemplateLiteral(["Never Don't Stop Not Striving"]))))]].concat(src_session_toConsumableArray(complexCandy()), [[template_string_$item(src_session_templateObject17 || (src_session_templateObject17 = src_session_taggedTemplateLiteral(["Merc Core deployment orders"]))), () => garboValue(template_string_$item(src_session_templateObject18 || (src_session_templateObject18 = src_session_taggedTemplateLiteral(["one-day ticket to Conspiracy Island"]))))], [template_string_$item(src_session_templateObject19 || (src_session_templateObject19 = src_session_taggedTemplateLiteral(["free-range mushroom"]))), () => 3 * Math.max(garboValue(template_string_$item(src_session_templateObject20 || (src_session_templateObject20 = src_session_taggedTemplateLiteral(["mushroom tea"])))) - garboValue(template_string_$item(src_session_templateObject21 || (src_session_templateObject21 = src_session_taggedTemplateLiteral(["soda water"])))), garboValue(template_string_$item(src_session_templateObject22 || (src_session_templateObject22 = src_session_taggedTemplateLiteral(["mushroom whiskey"])))) - garboValue(template_string_$item(src_session_templateObject23 || (src_session_templateObject23 = src_session_taggedTemplateLiteral(["fermenting powder"])))), garboValue(template_string_$item(src_session_templateObject24 || (src_session_templateObject24 = src_session_taggedTemplateLiteral(["mushroom filet"])))))], [template_string_$item(src_session_templateObject25 || (src_session_templateObject25 = src_session_taggedTemplateLiteral(["little firkin"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(src_session_templateObject26 || (src_session_templateObject26 = src_session_taggedTemplateLiteral(["martini, screwdriver, strawberry daiquiri, margarita, vodka martini, tequila sunrise, bottle of Amontillado, barrel-aged martini, barrel gun"])))))], [template_string_$item(src_session_templateObject27 || (src_session_templateObject27 = src_session_taggedTemplateLiteral(["normal barrel"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(src_session_templateObject28 || (src_session_templateObject28 = src_session_taggedTemplateLiteral(["a little sump'm sump'm, pink pony, rockin' wagon, roll in the hay, slip 'n' slide, slap and tickle"])))))], [template_string_$item(src_session_templateObject29 || (src_session_templateObject29 = src_session_taggedTemplateLiteral(["big tun"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(src_session_templateObject30 || (src_session_templateObject30 = src_session_taggedTemplateLiteral(["gibson, gin and tonic, mimosette, tequila sunset, vodka and tonic, zmobie"])))))], [template_string_$item(session_templateObject31 || (session_templateObject31 = src_session_taggedTemplateLiteral(["weathered barrel"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(session_templateObject32 || (session_templateObject32 = src_session_taggedTemplateLiteral(["bean burrito, enchanted bean burrito, jumping bean burrito"])))))], [template_string_$item(session_templateObject33 || (session_templateObject33 = src_session_taggedTemplateLiteral(["dusty barrel"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(session_templateObject34 || (session_templateObject34 = src_session_taggedTemplateLiteral(["spicy bean burrito, spicy enchanted bean burrito, spicy jumping bean burrito"])))))], [template_string_$item(session_templateObject35 || (session_templateObject35 = src_session_taggedTemplateLiteral(["disintegrating barrel"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(session_templateObject36 || (session_templateObject36 = src_session_taggedTemplateLiteral(["insanely spicy bean burrito, insanely spicy enchanted bean burrito, insanely spicy jumping bean burrito"])))))], [template_string_$item(session_templateObject37 || (session_templateObject37 = src_session_taggedTemplateLiteral(["moist barrel"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(session_templateObject38 || (session_templateObject38 = src_session_taggedTemplateLiteral(["cast, concentrated magicalness pill, enchanted barbell, giant moxie weed, Mountain Stream soda"])))))], [template_string_$item(session_templateObject39 || (session_templateObject39 = src_session_taggedTemplateLiteral(["rotting barrel"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(session_templateObject40 || (session_templateObject40 = src_session_taggedTemplateLiteral(["Doc Galaktik's Ailment Ointment, extra-strength strongness elixir, jug-o-magicalness, Marquis de Poivre soda, suntan lotion of moxiousness"])))))], [template_string_$item(session_templateObject41 || (session_templateObject41 = src_session_taggedTemplateLiteral(["mouldering barrel"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(session_templateObject42 || (session_templateObject42 = src_session_taggedTemplateLiteral(["creepy ginger ale, haunted battery, scroll of drastic healing, synthetic marrow, the funk"])))))], [template_string_$item(session_templateObject43 || (session_templateObject43 = src_session_taggedTemplateLiteral(["barnacled barrel"]))), () => garboAverageValue.apply(void 0, src_session_toConsumableArray(template_string_$items(session_templateObject44 || (session_templateObject44 = src_session_taggedTemplateLiteral(["Alewife\u2122 Ale, bazookafish bubble gum, beefy fish meat, eel battery, glistening fish meat, ink bladder, pufferfish spine, shark cartilage, slick fish meat, slug of rum, slug of shochu, slug of vodka, temporary teardrop tattoo"])))))], [template_string_$item(session_templateObject45 || (session_templateObject45 = src_session_taggedTemplateLiteral(["fake hand"]))), () => 50000]]));
function printSession(session) {
  var value = session.value(garboValue);
  var printProfit = details => {
    var _iterator2 = src_session_createForOfIteratorHelper(details),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = _step2.value,
          item = _step2$value.item,
          quantity = _step2$value.quantity,
          _value = _step2$value.value;
        print("  ".concat(item, " (").concat(quantity, ") @ ").concat(Math.floor(_value)));
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  };
  var lowValue = value.itemDetails.filter(detail => detail.value < 0).sort((a, b) => a.value - b.value);
  var highValue = value.itemDetails.filter(detail => detail.value > 0).sort((a, b) => b.value - a.value);
  print("Total Session Value: ".concat(value.total));
  print("Of that, ".concat(value.meat, " came from meat and ").concat(value.items, " came from items"));
  print(" You gained meat on ".concat(highValue.length, " items including:"));
  printProfit(highValue);
  print(" You lost meat on ".concat(lowValue.length, " items including:"));
  printProfit(lowValue);
  if (globalOptions.quick) {
    print("Quick mode was enabled, results may be less accurate than normal.");
  }
}
function garboSaleValue(item, useHistorical) {
  if (useHistorical) {
    if ((0,external_kolmafia_namespaceObject.historicalAge)(item) <= 7.0 && (0,external_kolmafia_namespaceObject.historicalPrice)(item) > 0) {
      var isMallMin = (0,external_kolmafia_namespaceObject.historicalPrice)(item) === Math.max(100, 2 * (0,external_kolmafia_namespaceObject.autosellPrice)(item));
      return isMallMin ? (0,external_kolmafia_namespaceObject.autosellPrice)(item) : 0.9 * (0,external_kolmafia_namespaceObject.historicalPrice)(item);
    }
  }
  return getSaleValue(item);
}
var garboRegularValueCache = new Map();
var garboHistoricalValueCache = new Map();
function garboValue(item) {
  var _garboRegularValueCac;
  var useHistorical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  useHistorical || (useHistorical = config_globalOptions.quick);
  var cachedValue = (_garboRegularValueCac = garboRegularValueCache.get(item)) !== null && _garboRegularValueCac !== void 0 ? _garboRegularValueCac : useHistorical ? garboHistoricalValueCache.get(item) : undefined;
  if (cachedValue === undefined) {
    var specialValueCompute = specialValueLookup.get(item);
    var value = specialValueCompute ? specialValueCompute() : garboSaleValue(item, useHistorical);
    (useHistorical ? garboHistoricalValueCache : garboRegularValueCache).set(item, value);
    return value;
  }
  return cachedValue;
}
function garboAverageValue() {
  for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    items[_key2] = arguments[_key2];
  }
  return utils_sum(items, garboValue) / items.length;
}
var session = null;
/**
 * Start a new session, deleting any old session
 */
function startSession() {
  session = session_Session.current();
}

/**
 * Compute the difference between the current drops and starting session (if any)
 * @returns The difference
 */
function sessionSinceStart() {
  if (session) {
    return session_Session.current().diff(session);
  }
  return session_Session.current();
}
function valueSession() {
  printSession(Session.current());
  Session.current().toFile("test.json");
}
function endSession() {
  var printLog = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  if (resetDailyPreference("garboResultsDate")) {
    _set("garboResultsMeat", 0);
    _set("garboResultsItems", 0);
  }
  var message = (head, meat, items) => (0,external_kolmafia_namespaceObject.print)("".concat(head, ", you generated ").concat(formatNumber(meat + items), " meat, with ").concat(formatNumber(meat), " raw meat and ").concat(formatNumber(items), " from items"), HIGHLIGHT);
  var _sessionSinceStart$va = sessionSinceStart().value(garboValue),
    meat = _sessionSinceStart$va.meat,
    items = _sessionSinceStart$va.items,
    itemDetails = _sessionSinceStart$va.itemDetails;
  var totalMeat = meat + getNumber("garboResultsMeat", 0);
  var totalItems = items + getNumber("garboResultsItems", 0);
  if (printLog) {
    // list the top 3 gaining and top 3 losing items
    var losers = itemDetails.sort((a, b) => a.value - b.value).slice(0, 3);
    var winners = itemDetails.sort((a, b) => b.value - a.value).slice(0, 3);
    (0,external_kolmafia_namespaceObject.print)("Extreme Items:", HIGHLIGHT);
    for (var _i2 = 0, _arr2 = [].concat(src_session_toConsumableArray(winners), src_session_toConsumableArray(losers)); _i2 < _arr2.length; _i2++) {
      var detail = _arr2[_i2];
      (0,external_kolmafia_namespaceObject.print)("".concat(detail.quantity, " ").concat(detail.item, " worth ").concat(detail.value.toFixed(0), " total"), HIGHLIGHT);
    }
  }
  _set("garboResultsMeat", totalMeat);
  _set("garboResultsItems", totalItems);
  if (printLog) {
    message("This run of garbo", meat, items);
    message("So far today", totalMeat, totalItems);
    if (config_globalOptions.quick) {
      (0,external_kolmafia_namespaceObject.print)("Quick mode was enabled, results may be less accurate than normal.");
    }
  }
  if (config_globalOptions.loginvalidwishes) {
    if (failedWishes.length === 0) {
      (0,external_kolmafia_namespaceObject.print)("No invalid wishes found.");
    } else {
      (0,external_kolmafia_namespaceObject.print)("Found the following unwishable effects:");
      failedWishes.forEach(effect => (0,external_kolmafia_namespaceObject.print)("".concat(effect)));
    }
  }
}
;// CONCATENATED MODULE: ./src/acquire.ts



var priceCaps = {
  "cuppa Voraci tea": 200000,
  "cuppa Sobrie tea": 200000,
  "potion of the field gar": 50000,
  "Special Seasoning": 20000,
  "spice melange": 500000,
  "mojo filter": 10000,
  "Ol' Scratch's salad fork": 200000,
  "Frosty's frosty mug": 200000,
  "sweet tooth": 250000
};
function acquire(qty, item, maxPrice) {
  var throwOnFail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var maxAggregateCost = arguments.length > 4 ? arguments[4] : undefined;
  var tryRetrievingUntradeable = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  if (maxPrice === undefined) maxPrice = priceCaps[item.name];
  if (!item.tradeable && !tryRetrievingUntradeable || maxPrice !== undefined && maxPrice <= 0) {
    return 0;
  }
  if (maxPrice === undefined) throw new Error("No price cap for ".concat(item.name, "."));
  (0,external_kolmafia_namespaceObject.print)("Trying to acquire ".concat(qty, " ").concat(item.plural, "; max price ").concat(maxPrice.toFixed(0), "."), "green");
  if (qty * (0,external_kolmafia_namespaceObject.mallPrice)(item) > (maxAggregateCost !== null && maxAggregateCost !== void 0 ? maxAggregateCost : 1000000)) {
    throw new Error("Aggregate cost too high! Probably a bug.");
  }
  var startAmount = (0,external_kolmafia_namespaceObject.itemAmount)(item);
  var remaining = qty - startAmount;
  if (remaining <= 0) return qty;
  var logError = (target, source) => {
    throw new Error("Failed to remove ".concat(target, " from ").concat(source));
  };
  if (property_get("autoSatisfyWithCloset")) {
    var getCloset = Math.min(remaining, (0,external_kolmafia_namespaceObject.closetAmount)(item));
    if (!(0,external_kolmafia_namespaceObject.takeCloset)(getCloset, item) && throwOnFail) logError(item, "closet");
    remaining -= getCloset;
    if (remaining <= 0) return qty;
  }
  var getStorage = Math.min(remaining, (0,external_kolmafia_namespaceObject.storageAmount)(item));
  if (!(0,external_kolmafia_namespaceObject.takeStorage)(getStorage, item) && throwOnFail) logError(item, "storage");
  remaining -= getStorage;
  if (remaining <= 0) return qty;
  var getMall = Math.min(remaining, (0,external_kolmafia_namespaceObject.shopAmount)(item));
  if (!(0,external_kolmafia_namespaceObject.takeShop)(getMall, item)) {
    (0,external_kolmafia_namespaceObject.cliExecute)("refresh shop");
    (0,external_kolmafia_namespaceObject.cliExecute)("refresh inventory");
    remaining = qty - (0,external_kolmafia_namespaceObject.itemAmount)(item);
    getMall = Math.min(remaining, (0,external_kolmafia_namespaceObject.shopAmount)(item));
    if (!(0,external_kolmafia_namespaceObject.takeShop)(getMall, item) && throwOnFail) logError(item, "shop");
  }
  remaining -= getMall;
  var coinmaster = external_kolmafia_namespaceObject.Coinmaster.all().find(cm => (0,external_kolmafia_namespaceObject.sellsItem)(cm, item));
  var coinmasterPrice = coinmaster ? garboValue(coinmaster.item) * (0,external_kolmafia_namespaceObject.sellPrice)(coinmaster, item) : 0;
  if (coinmaster && coinmasterPrice > (0,external_kolmafia_namespaceObject.mallPrice)(item)) {
    (0,external_kolmafia_namespaceObject.buy)(item, remaining, maxPrice);
  } else {
    withProperty("autoBuyPriceLimit", maxPrice, () => (0,external_kolmafia_namespaceObject.retrieveItem)(item, qty));
  }
  if ((0,external_kolmafia_namespaceObject.itemAmount)(item) < qty && throwOnFail) {
    throw new Error("Failed to purchase sufficient quantities of ".concat(item, " from the mall."));
  }
  return (0,external_kolmafia_namespaceObject.itemAmount)(item) - startAmount;
}
;// CONCATENATED MODULE: ./src/clan.ts
var clan_templateObject, clan_templateObject2, clan_templateObject3, clan_templateObject4, clan_templateObject5, clan_templateObject6, clan_templateObject7;
function clan_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = clan_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function clan_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function clan_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, clan_toPropertyKey(descriptor.key), descriptor); } }
function clan_createClass(Constructor, protoProps, staticProps) { if (protoProps) clan_defineProperties(Constructor.prototype, protoProps); if (staticProps) clan_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function clan_defineProperty(obj, key, value) { key = clan_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function clan_toPropertyKey(arg) { var key = clan_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function clan_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function clan_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function clan_toConsumableArray(arr) { return clan_arrayWithoutHoles(arr) || clan_iterableToArray(arr) || clan_unsupportedIterableToArray(arr) || clan_nonIterableSpread(); }
function clan_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function clan_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return clan_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return clan_arrayLikeToArray(o, minLen); }
function clan_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function clan_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return clan_arrayLikeToArray(arr); }
function clan_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }





var stashItems = property_get("garboStashItems", "").split(",").filter(x => x.trim().length > 0).map(id => (0,external_kolmafia_namespaceObject.toItem)(id));
function withStash(itemsToTake, action) {
  var manager = new StashManager();
  try {
    manager.take.apply(manager, clan_toConsumableArray(itemsToTake));
    return action();
  } finally {
    manager.putBackAll();
  }
}
function withVIPClan(action) {
  var clanIdOrNameString = config_globalOptions.prefs.vipClan;
  var clanIdOrName = clanIdOrNameString.match(/^\d+$/) ? parseInt(clanIdOrNameString) : clanIdOrNameString;
  if (clanIdOrName === "" && lib_have(template_string_$item(clan_templateObject || (clan_templateObject = clan_taggedTemplateLiteral(["Clan VIP Lounge key"]))))) {
    if (userConfirmDialog("The preference 'garbo_vipClan' is not set. Use the current clan as a VIP clan? (Defaults to yes in 15 seconds)", true, 15000)) {
      clanIdOrName = (0,external_kolmafia_namespaceObject.getClanId)();
      config_globalOptions.prefs.vipClan = "".concat(clanIdOrName);
      _set("garbo_vipClan", clanIdOrName);
    }
  }
  return withClan(clanIdOrName || (0,external_kolmafia_namespaceObject.getClanId)(), action);
}
function withClan(clanIdOrName, action) {
  var startingClanId = (0,external_kolmafia_namespaceObject.getClanId)();
  Clan.join(clanIdOrName);
  try {
    return action();
  } finally {
    Clan.join(startingClanId);
  }
}
var StashManager = /*#__PURE__*/function () {
  function StashManager() {
    clan_classCallCheck(this, StashManager);
    clan_defineProperty(this, "clanIdOrName", void 0);
    clan_defineProperty(this, "enabled", void 0);
    clan_defineProperty(this, "taken", new Map());
    var clanIdOrName = config_globalOptions.prefs.stashClan;
    this.clanIdOrName = clanIdOrName.match(/^\d+$/) ? parseInt(clanIdOrName) : clanIdOrName;
    this.enabled = ![0, "", "none"].some(id => id === this.clanIdOrName);
  }
  clan_createClass(StashManager, [{
    key: "take",
    value: function take() {
      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
        items[_key] = arguments[_key];
      }
      if (items.length === 0) {
        return;
      }
      if (!this.enabled) {
        (0,external_kolmafia_namespaceObject.print)("Stash access is disabled. Ignoring request to borrow \"".concat(items.map(value => value.name).join(", "), "\" from clan stash."), HIGHLIGHT);
        return;
      }
      withClan(this.clanIdOrName, () => {
        for (var _i = 0, _items = items; _i < _items.length; _i++) {
          var item = _items[_i];
          if (lib_have(item)) continue;
          if (getFoldGroup(item).some(fold => lib_have(fold))) {
            (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(item.name));
            continue;
          }
          var foldArray = [item].concat(clan_toConsumableArray(getFoldGroup(item)));
          (0,external_kolmafia_namespaceObject.refreshStash)();
          var _iterator = clan_createForOfIteratorHelper(foldArray),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var fold = _step.value;
              try {
                if ((0,external_kolmafia_namespaceObject.stashAmount)(fold) > 0) {
                  if ((0,external_kolmafia_namespaceObject.takeStash)(1, fold)) {
                    var _this$taken$get;
                    (0,external_kolmafia_namespaceObject.print)("Took ".concat(fold.name, " from stash in ").concat((0,external_kolmafia_namespaceObject.getClanName)(), "."), HIGHLIGHT);
                    if (fold !== item) (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(item.name));
                    this.taken.set(item, ((_this$taken$get = this.taken.get(item)) !== null && _this$taken$get !== void 0 ? _this$taken$get : 0) + 1);
                    stashItems.push(fold);
                    break;
                  } else {
                    (0,external_kolmafia_namespaceObject.print)("Failed to take ".concat(fold.name, " from the stash. Do you have stash access in ").concat((0,external_kolmafia_namespaceObject.getClanName)(), "?"), "red");
                  }
                }
              } catch (_unused) {
                (0,external_kolmafia_namespaceObject.print)("Failed to take ".concat(fold.name, " from stash in ").concat((0,external_kolmafia_namespaceObject.getClanName)(), "."), "red");
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          if (lib_have(item)) continue;
          (0,external_kolmafia_namespaceObject.print)("Couldn't find ".concat(item.name, " in clan stash for ").concat((0,external_kolmafia_namespaceObject.getClanName)(), "."), "red");
        }
      });
    }

    /**
     * Ensure at least one of each of {items} in inventory.
     * @param items Items to take from the stash.
     */
  }, {
    key: "ensure",
    value: function ensure() {
      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        items[_key2] = arguments[_key2];
      }
      this.take.apply(this, clan_toConsumableArray(items.filter(item => (0,external_kolmafia_namespaceObject.availableAmount)(item) === 0)));
    }
  }, {
    key: "putBack",
    value: function putBack() {
      for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        items[_key3] = arguments[_key3];
      }
      if (items.length === 0) return;
      if ((0,external_kolmafia_namespaceObject.visitUrl)("fight.php").includes("You're fighting")) {
        var _Macro$if_;
        (0,external_kolmafia_namespaceObject.print)("In fight, trying to get away to return items to stash...", HIGHLIGHT);
        (_Macro$if_ = combat_Macro.if_($monster(clan_templateObject2 || (clan_templateObject2 = clan_taggedTemplateLiteral(["Knob Goblin Embezzler"]))), combat_Macro.attack().repeat())).tryItem.apply(_Macro$if_, clan_toConsumableArray(template_string_$items(clan_templateObject3 || (clan_templateObject3 = clan_taggedTemplateLiteral(["Louder Than Bomb, divine champagne popper"]))))).step("runaway").submit();
      } else if ((0,external_kolmafia_namespaceObject.handlingChoice)()) {
        (0,external_kolmafia_namespaceObject.print)("I'm stuck in a choice, unfortunately, but were I not, I'd like to return the following items to your clan stash:", "red");
        items.forEach(item => (0,external_kolmafia_namespaceObject.print)("".concat(item.name, ","), "red"));
      }
      withClan(this.clanIdOrName, () => {
        for (var _i2 = 0, _items2 = items; _i2 < _items2.length; _i2++) {
          var _this$taken$get2;
          var item = _items2[_i2];
          var count = (_this$taken$get2 = this.taken.get(item)) !== null && _this$taken$get2 !== void 0 ? _this$taken$get2 : 0;
          if (count > 0) {
            (0,external_kolmafia_namespaceObject.retrieveItem)(count, item);
            if (item === template_string_$item(clan_templateObject4 || (clan_templateObject4 = clan_taggedTemplateLiteral(["Buddy Bjorn"])))) {
              (0,external_kolmafia_namespaceObject.visitUrl)("desc_item.php?whichitem=".concat(template_string_$item(clan_templateObject5 || (clan_templateObject5 = clan_taggedTemplateLiteral(["Buddy Bjorn"]))).descid));
              (0,external_kolmafia_namespaceObject.bjornifyFamiliar)($familiar.none);
            }
            if (item === template_string_$item(clan_templateObject6 || (clan_templateObject6 = clan_taggedTemplateLiteral(["Crown of Thrones"])))) {
              (0,external_kolmafia_namespaceObject.visitUrl)("desc_item.php?whichitem=".concat(template_string_$item(clan_templateObject7 || (clan_templateObject7 = clan_taggedTemplateLiteral(["Crown of Thrones"]))).descid));
              (0,external_kolmafia_namespaceObject.enthroneFamiliar)($familiar.none);
            }
            if ((0,external_kolmafia_namespaceObject.putStash)(count, item)) {
              var index = stashItems.indexOf(item);
              if (index >= 0) stashItems.splice(stashItems.indexOf(item), 1);
              (0,external_kolmafia_namespaceObject.print)("Returned ".concat(item.name, " to stash in ").concat((0,external_kolmafia_namespaceObject.getClanName)(), "."), HIGHLIGHT);
              this.taken.delete(item);
            } else {
              throw "Failed to return ".concat(item.name, " to stash.");
            }
          }
        }
      });
    }

    /**
     * Put all items back in the stash.
     */
  }, {
    key: "putBackAll",
    value: function putBackAll() {
      this.putBack.apply(this, clan_toConsumableArray(this.taken.keys()));
    }
  }]);
  return StashManager;
}();
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2016/Witchess.js
var Witchess_templateObject;
function Witchess_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var Witchess_item = template_string_$item(Witchess_templateObject || (Witchess_templateObject = Witchess_taggedTemplateLiteral(["Witchess Set"])));
function Witchess_have() {
  return haveInCampground(Witchess_item);
}
function fightsDone() {
  return property_get("_witchessFights");
}
var pieces = external_kolmafia_namespaceObject.Monster.get(["Witchess Pawn", "Witchess Knight", "Witchess Bishop", "Witchess Rook", "Witchess Queen", "Witchess King", "Witchess Witch", "Witchess Ox"]);
function fightPiece(piece) {
  if (!pieces.includes(piece)) throw new Error("That is not a valid piece.");
  if (!(0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=witchess").includes("whichchoice value=1181")) {
    throw new Error("Failed to open Witchess.");
  }
  if (!(0,external_kolmafia_namespaceObject.runChoice)(1).includes("whichchoice=1182")) {
    throw new Error("Failed to visit shrink ray.");
  }
  if (!(0,external_kolmafia_namespaceObject.visitUrl)("choice.php?option=1&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)(), "&whichchoice=1182&piece=").concat((0,external_kolmafia_namespaceObject.toInt)(piece)), false).includes(piece.name)) {
    throw new Error("Failed to start fight.");
  }
  return (0,external_kolmafia_namespaceObject.runCombat)();
}
;// CONCATENATED MODULE: ./src/mood.ts
var src_mood_templateObject, src_mood_templateObject2, src_mood_templateObject3, src_mood_templateObject4, src_mood_templateObject5, src_mood_templateObject6, src_mood_templateObject7, src_mood_templateObject8, src_mood_templateObject9, src_mood_templateObject10, mood_templateObject11, mood_templateObject12, mood_templateObject13, mood_templateObject14, mood_templateObject15, mood_templateObject16, mood_templateObject17, mood_templateObject18, mood_templateObject19, mood_templateObject20, mood_templateObject21, mood_templateObject22, mood_templateObject23, mood_templateObject24, mood_templateObject25, mood_templateObject26, mood_templateObject27, mood_templateObject28, mood_templateObject29, mood_templateObject30, mood_templateObject31, mood_templateObject32, mood_templateObject33, mood_templateObject34, mood_templateObject35, mood_templateObject36, mood_templateObject37, mood_templateObject38, mood_templateObject39, mood_templateObject40, mood_templateObject41, mood_templateObject42, mood_templateObject43, mood_templateObject44, mood_templateObject45, mood_templateObject46, mood_templateObject47, mood_templateObject48, mood_templateObject49, mood_templateObject50, mood_templateObject51, mood_templateObject52, mood_templateObject53, mood_templateObject54, mood_templateObject55, mood_templateObject56, mood_templateObject57, mood_templateObject58, mood_templateObject59, mood_templateObject60, mood_templateObject61, mood_templateObject62, mood_templateObject63, mood_templateObject64, mood_templateObject65, mood_templateObject66, mood_templateObject67, mood_templateObject68, mood_templateObject69, mood_templateObject70, mood_templateObject71, mood_templateObject72, mood_templateObject73, mood_templateObject74, mood_templateObject75, mood_templateObject76, mood_templateObject77, mood_templateObject78, mood_templateObject79, mood_templateObject80, mood_templateObject81, mood_templateObject82;
function mood_toConsumableArray(arr) { return mood_arrayWithoutHoles(arr) || mood_iterableToArray(arr) || src_mood_unsupportedIterableToArray(arr) || mood_nonIterableSpread(); }
function mood_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function src_mood_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_mood_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_mood_arrayLikeToArray(o, minLen); }
function mood_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function mood_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return src_mood_arrayLikeToArray(arr); }
function src_mood_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function src_mood_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





Mood.setDefaultOptions({
  songSlots: [$effects(src_mood_templateObject || (src_mood_templateObject = src_mood_taggedTemplateLiteral(["Polka of Plenty"]))), $effects(src_mood_templateObject2 || (src_mood_templateObject2 = src_mood_taggedTemplateLiteral(["Fat Leon's Phat Loot Lyric, Ur-Kel's Aria of Annoyance"]))), $effects(src_mood_templateObject3 || (src_mood_templateObject3 = src_mood_taggedTemplateLiteral(["Chorale of Companionship"]))), $effects(src_mood_templateObject4 || (src_mood_templateObject4 = src_mood_taggedTemplateLiteral(["The Ballad of Richie Thingfinder"])))],
  useNativeRestores: true
});
function meatMood() {
  var urKels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var meat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : baseMeat;
  // Reserve the amount of MP we try to restore before each fight.
  var mood = new Mood({
    reserveMp: safeRestoreMpTarget()
  });
  mood.potion(template_string_$item(src_mood_templateObject5 || (src_mood_templateObject5 = src_mood_taggedTemplateLiteral(["How to Avoid Scams"]))), 3 * baseMeat);
  mood.potion(template_string_$item(src_mood_templateObject6 || (src_mood_templateObject6 = src_mood_taggedTemplateLiteral(["resolution: be wealthier"]))), 0.3 * baseMeat);
  mood.potion(template_string_$item(src_mood_templateObject7 || (src_mood_templateObject7 = src_mood_taggedTemplateLiteral(["resolution: be happier"]))), 0.15 * 0.45 * 0.8 * 200);
  var flaskValue = usingPurse() ? 0.3 * baseMeat : 5;
  mood.potion(template_string_$item(src_mood_templateObject8 || (src_mood_templateObject8 = src_mood_taggedTemplateLiteral(["Flaskfull of Hollow"]))), flaskValue);
  mood.skill($skill(src_mood_templateObject9 || (src_mood_templateObject9 = src_mood_taggedTemplateLiteral(["Blood Bond"]))));
  mood.skill($skill(src_mood_templateObject10 || (src_mood_templateObject10 = src_mood_taggedTemplateLiteral(["Leash of Linguini"]))));
  mood.skill($skill(mood_templateObject11 || (mood_templateObject11 = src_mood_taggedTemplateLiteral(["Empathy of the Newt"]))));
  mood.skill($skill(mood_templateObject12 || (mood_templateObject12 = src_mood_taggedTemplateLiteral(["The Polka of Plenty"]))));
  mood.skill($skill(mood_templateObject13 || (mood_templateObject13 = src_mood_taggedTemplateLiteral(["Disco Leer"]))));
  mood.skill(urKels ? $skill(mood_templateObject14 || (mood_templateObject14 = src_mood_taggedTemplateLiteral(["Ur-Kel's Aria of Annoyance"]))) : $skill(mood_templateObject15 || (mood_templateObject15 = src_mood_taggedTemplateLiteral(["Fat Leon's Phat Loot Lyric"]))));
  mood.skill($skill(mood_templateObject16 || (mood_templateObject16 = src_mood_taggedTemplateLiteral(["Singer's Faithful Ocelot"]))));
  mood.skill($skill(mood_templateObject17 || (mood_templateObject17 = src_mood_taggedTemplateLiteral(["The Spirit of Taking"]))));
  mood.skill($skill(mood_templateObject18 || (mood_templateObject18 = src_mood_taggedTemplateLiteral(["Drescher's Annoying Noise"]))));
  mood.skill($skill(mood_templateObject19 || (mood_templateObject19 = src_mood_taggedTemplateLiteral(["Pride of the Puffin"]))));
  mood.skill($skill(mood_templateObject20 || (mood_templateObject20 = src_mood_taggedTemplateLiteral(["Walk: Leisurely Amble"]))));
  var mmjCost = (100 - (lib_have($skill(mood_templateObject21 || (mood_templateObject21 = src_mood_taggedTemplateLiteral(["Five Finger Discount"])))) ? 5 : 0) - (lib_have(template_string_$item(mood_templateObject22 || (mood_templateObject22 = src_mood_taggedTemplateLiteral(["Travoltan trousers"])))) ? 5 : 0)) * (200 / (1.5 * (0,external_kolmafia_namespaceObject.myLevel)() + 5));
  var genericManaPotionCost = (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(mood_templateObject23 || (mood_templateObject23 = src_mood_taggedTemplateLiteral(["generic mana potion"])))) * (200 / (2.5 * (0,external_kolmafia_namespaceObject.myLevel)()));
  var mpRestorerCost = Math.min(mmjCost, genericManaPotionCost);
  if ((0,external_kolmafia_namespaceObject.myClass)() !== $class(mood_templateObject24 || (mood_templateObject24 = src_mood_taggedTemplateLiteral(["Pastamancer"]))) && 0.1 * meat * 10 > mpRestorerCost) {
    mood.skill($skill(mood_templateObject25 || (mood_templateObject25 = src_mood_taggedTemplateLiteral(["Bind Lasagmbie"]))));
  }
  if ((0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(mood_templateObject26 || (mood_templateObject26 = src_mood_taggedTemplateLiteral(["Asdon Martin keyfob"])))) mood.drive(Driving.Observantly);
  if (lib_have(template_string_$item(mood_templateObject27 || (mood_templateObject27 = src_mood_taggedTemplateLiteral(["Kremlin's Greatest Briefcase"]))))) {
    mood.effect(template_string_$effect(mood_templateObject28 || (mood_templateObject28 = src_mood_taggedTemplateLiteral(["A View to Some Meat"]))), () => {
      if (property_get("_kgbClicksUsed") < 22) {
        var buffTries = Math.ceil((22 - property_get("_kgbClicksUsed")) / 3);
        (0,external_kolmafia_namespaceObject.cliExecute)("Briefcase buff ".concat(new Array(buffTries).fill("meat").join(" ")));
      }
    });
  }
  if (!property_get("concertVisited") && property_get("sidequestArenaCompleted") === "fratboy") {
    (0,external_kolmafia_namespaceObject.cliExecute)("concert winklered");
  } else if (!property_get("concertVisited") && property_get("sidequestArenaCompleted") === "hippy") {
    (0,external_kolmafia_namespaceObject.cliExecute)("concert optimist primal");
  }
  if ((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(mood_templateObject29 || (mood_templateObject29 = src_mood_taggedTemplateLiteral(["Bird-a-Day calendar"])))) > 0) {
    if (!lib_have($skill(mood_templateObject30 || (mood_templateObject30 = src_mood_taggedTemplateLiteral(["Seek out a Bird"])))) || !property_get("_canSeekBirds")) {
      (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(mood_templateObject31 || (mood_templateObject31 = src_mood_taggedTemplateLiteral(["Bird-a-Day calendar"]))));
    }
    if (lib_have($skill(mood_templateObject32 || (mood_templateObject32 = src_mood_taggedTemplateLiteral(["Visit your Favorite Bird"])))) && !property_get("_favoriteBirdVisited") && ((0,external_kolmafia_namespaceObject.numericModifier)(template_string_$effect(mood_templateObject33 || (mood_templateObject33 = src_mood_taggedTemplateLiteral(["Blessing of your favorite Bird"]))), "Meat Drop") > 0 || (0,external_kolmafia_namespaceObject.numericModifier)(template_string_$effect(mood_templateObject34 || (mood_templateObject34 = src_mood_taggedTemplateLiteral(["Blessing of your favorite Bird"]))), "Item Drop") > 0)) {
      (0,external_kolmafia_namespaceObject.useSkill)($skill(mood_templateObject35 || (mood_templateObject35 = src_mood_taggedTemplateLiteral(["Visit your Favorite Bird"]))));
    }
    if (lib_have($skill(mood_templateObject36 || (mood_templateObject36 = src_mood_taggedTemplateLiteral(["Seek out a Bird"])))) && property_get("_birdsSoughtToday") < 6 && ((0,external_kolmafia_namespaceObject.numericModifier)(template_string_$effect(mood_templateObject37 || (mood_templateObject37 = src_mood_taggedTemplateLiteral(["Blessing of the Bird"]))), "Meat Drop") > 0 || (0,external_kolmafia_namespaceObject.numericModifier)(template_string_$effect(mood_templateObject38 || (mood_templateObject38 = src_mood_taggedTemplateLiteral(["Blessing of the Bird"]))), "Item Drop") > 0)) {
      // Ensure we don't get stuck in the choice if the count is wrong
      setChoice(1399, 2);
      (0,external_kolmafia_namespaceObject.useSkill)($skill(mood_templateObject39 || (mood_templateObject39 = src_mood_taggedTemplateLiteral(["Seek out a Bird"]))), 6 - property_get("_birdsSoughtToday"));
    }
  }
  if (lib_have($skill(mood_templateObject40 || (mood_templateObject40 = src_mood_taggedTemplateLiteral(["Incredible Self-Esteem"])))) && $effects(mood_templateObject41 || (mood_templateObject41 = src_mood_taggedTemplateLiteral(["Always be Collecting, Work For Hours a Week"]))).some(effect => lib_have(effect)) && !property_get("_incredibleSelfEsteemCast")) {
    (0,external_kolmafia_namespaceObject.useSkill)($skill(mood_templateObject42 || (mood_templateObject42 = src_mood_taggedTemplateLiteral(["Incredible Self-Esteem"]))));
  }
  var canRecord = (0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(mood_templateObject43 || (mood_templateObject43 = src_mood_taggedTemplateLiteral(["warbear LP-ROM burner"]))) || lib_have(template_string_$item(mood_templateObject44 || (mood_templateObject44 = src_mood_taggedTemplateLiteral(["warbear LP-ROM burner"]))) || property_get("questG04Nemesis") === "finished");
  if ((0,external_kolmafia_namespaceObject.myClass)() === $class(mood_templateObject45 || (mood_templateObject45 = src_mood_taggedTemplateLiteral(["Accordion Thief"]))) && (0,external_kolmafia_namespaceObject.myLevel)() >= 15 && !canRecord) {
    if (lib_have($skill(mood_templateObject46 || (mood_templateObject46 = src_mood_taggedTemplateLiteral(["The Ballad of Richie Thingfinder"]))))) {
      (0,external_kolmafia_namespaceObject.useSkill)($skill(mood_templateObject47 || (mood_templateObject47 = src_mood_taggedTemplateLiteral(["The Ballad of Richie Thingfinder"]))), 10 - property_get("_thingfinderCasts"));
    }
    if (lib_have($skill(mood_templateObject48 || (mood_templateObject48 = src_mood_taggedTemplateLiteral(["Chorale of Companionship"]))))) {
      (0,external_kolmafia_namespaceObject.useSkill)($skill(mood_templateObject49 || (mood_templateObject49 = src_mood_taggedTemplateLiteral(["Chorale of Companionship"]))), 10 - property_get("_companionshipCasts"));
    }
  }
  shrugBadEffects();
  return mood;
}
function freeFightMood() {
  var mood = new Mood();
  for (var _len = arguments.length, additionalEffects = new Array(_len), _key = 0; _key < _len; _key++) {
    additionalEffects[_key] = arguments[_key];
  }
  for (var _i = 0, _additionalEffects = additionalEffects; _i < _additionalEffects.length; _i++) {
    var effect = _additionalEffects[_i];
    mood.effect(effect);
  }
  if (!property_get("_garbo_defectiveTokenAttempted", false)) {
    _set("_garbo_defectiveTokenAttempted", true);
    withStash(template_string_$items(mood_templateObject50 || (mood_templateObject50 = src_mood_taggedTemplateLiteral(["defective Game Grid token"]))), () => {
      if (!property_get("_defectiveTokenUsed") && lib_have(template_string_$item(mood_templateObject51 || (mood_templateObject51 = src_mood_taggedTemplateLiteral(["defective Game Grid token"]))))) {
        (0,external_kolmafia_namespaceObject.use)(template_string_$item(mood_templateObject52 || (mood_templateObject52 = src_mood_taggedTemplateLiteral(["defective Game Grid token"]))));
      }
    });
  }
  if (!property_get("_glennGoldenDiceUsed")) {
    if (lib_have(template_string_$item(mood_templateObject53 || (mood_templateObject53 = src_mood_taggedTemplateLiteral(["Glenn's golden dice"]))))) (0,external_kolmafia_namespaceObject.use)(template_string_$item(mood_templateObject54 || (mood_templateObject54 = src_mood_taggedTemplateLiteral(["Glenn's golden dice"]))));
  }
  if ((0,external_kolmafia_namespaceObject.getClanLounge)()["Clan pool table"] !== undefined) {
    while (property_get("_poolGames") < 3) (0,external_kolmafia_namespaceObject.cliExecute)("pool aggressive");
  }
  if ((0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(mood_templateObject55 || (mood_templateObject55 = src_mood_taggedTemplateLiteral(["Blue Swayed"])))) < 50) {
    (0,external_kolmafia_namespaceObject.use)(Math.ceil((50 - (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(mood_templateObject56 || (mood_templateObject56 = src_mood_taggedTemplateLiteral(["Blue Swayed"]))))) / 10), template_string_$item(mood_templateObject57 || (mood_templateObject57 = src_mood_taggedTemplateLiteral(["pulled blue taffy"]))));
  }
  mood.potion(template_string_$item(mood_templateObject58 || (mood_templateObject58 = src_mood_taggedTemplateLiteral(["white candy heart"]))), 30);
  mood.skill($skill(mood_templateObject59 || (mood_templateObject59 = src_mood_taggedTemplateLiteral(["Curiosity of Br'er Tarrypin"]))));
  if ((property_get("daycareOpen") || property_get("_daycareToday")) && !property_get("_daycareSpa")) {
    (0,external_kolmafia_namespaceObject.cliExecute)("daycare mysticality");
  }
  if (lib_have(template_string_$item(mood_templateObject60 || (mood_templateObject60 = src_mood_taggedTemplateLiteral(["redwood rain stick"])))) && !property_get("_redwoodRainStickUsed")) {
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(mood_templateObject61 || (mood_templateObject61 = src_mood_taggedTemplateLiteral(["redwood rain stick"]))));
  }
  var beachHeadsUsed = property_get("_beachHeadsUsed");
  if (lib_have(template_string_$item(mood_templateObject62 || (mood_templateObject62 = src_mood_taggedTemplateLiteral(["Beach Comb"])))) && !beachHeadsUsed.toString().split(",").includes("10")) {
    mood.effect(template_string_$effect(mood_templateObject63 || (mood_templateObject63 = src_mood_taggedTemplateLiteral(["Do I Know You From Somewhere?"]))));
  }
  if (Witchess_have() && !property_get("_witchessBuff")) {
    mood.effect(template_string_$effect(mood_templateObject64 || (mood_templateObject64 = src_mood_taggedTemplateLiteral(["Puzzle Champ"]))));
  }
  if (lib_questStep("questL06Friar") === 999 && !property_get("friarsBlessingReceived")) {
    (0,external_kolmafia_namespaceObject.cliExecute)("friars familiar");
  }
  if (lib_have(template_string_$item(mood_templateObject65 || (mood_templateObject65 = src_mood_taggedTemplateLiteral(["The Legendary Beat"])))) && !property_get("_legendaryBeat")) {
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(mood_templateObject66 || (mood_templateObject66 = src_mood_taggedTemplateLiteral(["The Legendary Beat"]))));
  }
  if (lib_have(template_string_$item(mood_templateObject67 || (mood_templateObject67 = src_mood_taggedTemplateLiteral(["portable steam unit"])))) && !property_get("_portableSteamUnitUsed", false)) {
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(mood_templateObject68 || (mood_templateObject68 = src_mood_taggedTemplateLiteral(["portable steam unit"]))));
  }
  shrugBadEffects.apply(void 0, additionalEffects);
  if ((0,external_kolmafia_namespaceObject.getWorkshed)() === template_string_$item(mood_templateObject69 || (mood_templateObject69 = src_mood_taggedTemplateLiteral(["Asdon Martin keyfob"])))) mood.drive(Driving.Observantly);
  return mood;
}

/**
 * Use buff extenders like PYEC and Bag o Tricks
 */
function useBuffExtenders() {
  withStash(template_string_$items(mood_templateObject70 || (mood_templateObject70 = src_mood_taggedTemplateLiteral(["Platinum Yendorian Express Card, Bag o' Tricks"]))), () => {
    if (lib_have(template_string_$item(mood_templateObject71 || (mood_templateObject71 = src_mood_taggedTemplateLiteral(["Platinum Yendorian Express Card"])))) && !property_get("expressCardUsed")) {
      burnLibrams();
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(mood_templateObject72 || (mood_templateObject72 = src_mood_taggedTemplateLiteral(["Platinum Yendorian Express Card"]))));
    }
    if (lib_have(template_string_$item(mood_templateObject73 || (mood_templateObject73 = src_mood_taggedTemplateLiteral(["Bag o' Tricks"])))) && !property_get("_bagOTricksUsed")) {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(mood_templateObject74 || (mood_templateObject74 = src_mood_taggedTemplateLiteral(["Bag o' Tricks"]))));
    }
  });
  if (lib_have(template_string_$item(mood_templateObject75 || (mood_templateObject75 = src_mood_taggedTemplateLiteral(["License to Chill"])))) && !property_get("_licenseToChillUsed")) {
    burnLibrams();
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(mood_templateObject76 || (mood_templateObject76 = src_mood_taggedTemplateLiteral(["License to Chill"]))));
  }
}
var stings = [].concat(mood_toConsumableArray($effects(mood_templateObject77 || (mood_templateObject77 = src_mood_taggedTemplateLiteral(["Apoplectic with Rage, Barfpits, Berry Thorny, Biologically Shocked, Bone Homie, Boner Battalion, Coal-Powered, Curse of the Black Pearl Onion, Dizzy with Rage, Drenched With Filth, EVISCERATE!, Fangs and Pangs, Frigidalmatian, Gummi Badass, Haiku State of Mind, It's Electric!, Jaba\xF1ero Saucesphere, Jalape\xF1o Saucesphere, Little Mouse Skull Buddy, Long Live GORF, Mayeaugh, Permanent Halloween, Psalm of Pointiness, Pygmy Drinking Buddy, Quivering with Rage, Scarysauce, Skeletal Cleric, Skeletal Rogue, Skeletal Warrior, Skeletal Wizard, Smokin', Soul Funk, Spiky Frozen Hair, Stinkybeard, Stuck-Up Hair, Can Has Cyborger, Feeling Nervous"])))), [template_string_$effect(mood_templateObject78 || (mood_templateObject78 = src_mood_taggedTemplateLiteral(["Burning, Man"]))), template_string_$effect(mood_templateObject79 || (mood_templateObject79 = src_mood_taggedTemplateLiteral(["Yes, Can Haz"])))]);
var textAlteringEffects = $effects(mood_templateObject80 || (mood_templateObject80 = src_mood_taggedTemplateLiteral(["Can Has Cyborger, Dis Abled, Haiku State of Mind, Just the Best Anapests, O Hai!, Robocamo"])));
var teleportEffects = $effects(mood_templateObject81 || (mood_templateObject81 = src_mood_taggedTemplateLiteral(["Teleportitis, Feeling Lost, Funday!"])));
var otherwiseBadEffects = $effects(mood_templateObject82 || (mood_templateObject82 = src_mood_taggedTemplateLiteral(["Temporary Blindness"])));
function shrugBadEffects() {
  for (var _len2 = arguments.length, exclude = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    exclude[_key2] = arguments[_key2];
  }
  [].concat(mood_toConsumableArray(stings), mood_toConsumableArray(textAlteringEffects), mood_toConsumableArray(teleportEffects), mood_toConsumableArray(otherwiseBadEffects)).forEach(effect => {
    if (lib_have(effect) && !exclude.includes(effect)) {
      lib_uneffect(effect);
    }
  });
}
;// CONCATENATED MODULE: ./src/synthesis.ts
var synthesis_templateObject;
function synthesis_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = synthesis_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function synthesis_toConsumableArray(arr) { return synthesis_arrayWithoutHoles(arr) || synthesis_iterableToArray(arr) || synthesis_unsupportedIterableToArray(arr) || synthesis_nonIterableSpread(); }
function synthesis_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function synthesis_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return synthesis_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return synthesis_arrayLikeToArray(o, minLen); }
function synthesis_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function synthesis_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return synthesis_arrayLikeToArray(arr); }
function synthesis_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function synthesis_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var whitelist = template_string_$items(synthesis_templateObject || (synthesis_templateObject = synthesis_taggedTemplateLiteral(["sugar shotgun, sugar shillelagh, sugar shank, sugar chapeau, sugar shorts, sugar shield, sugar shirt, Fudgie Roll"])));
function synthesize(casts, effect) {
  var shuffledWhitelist = shuffle(synthesis_toConsumableArray(whitelist));
  var _iterator = synthesis_createForOfIteratorHelper(shuffledWhitelist),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var itemA = _step.value;
      if ((0,external_kolmafia_namespaceObject.availableAmount)(itemA) <= 1) continue;
      if (casts <= 0) return;
      var _iterator2 = synthesis_createForOfIteratorHelper(shuffledWhitelist),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var itemB = _step2.value;
          var minimum = itemA === itemB ? 2 : 1;
          if ((0,external_kolmafia_namespaceObject.availableAmount)(itemB) <= minimum) continue;
          if ((0,external_kolmafia_namespaceObject.sweetSynthesisResult)(itemA, itemB) !== effect) continue;
          var possibleCasts = itemA === itemB ? Math.floor(((0,external_kolmafia_namespaceObject.availableAmount)(itemA) - 1) / 2) : Math.min((0,external_kolmafia_namespaceObject.availableAmount)(itemA), (0,external_kolmafia_namespaceObject.availableAmount)(itemB)) - 1;
          var spleen = Math.max((0,external_kolmafia_namespaceObject.spleenLimit)() - (0,external_kolmafia_namespaceObject.mySpleenUse)(), 0);
          var castsToDo = Math.min(possibleCasts, casts, spleen);
          if (castsToDo === 0) continue;
          if (itemA === itemB) (0,external_kolmafia_namespaceObject.retrieveItem)(itemA, castsToDo * 2);else {
            (0,external_kolmafia_namespaceObject.retrieveItem)(itemA, castsToDo);
            (0,external_kolmafia_namespaceObject.retrieveItem)(itemB, castsToDo);
          }
          if ((0,external_kolmafia_namespaceObject.sweetSynthesis)(castsToDo, itemA, itemB)) casts -= castsToDo;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  (0,external_kolmafia_namespaceObject.sweetSynthesis)(utils_clamp(casts, 0, (0,external_kolmafia_namespaceObject.spleenLimit)() - (0,external_kolmafia_namespaceObject.mySpleenUse)()), effect);
}
;// CONCATENATED MODULE: ./src/diet.ts
var src_diet_templateObject, src_diet_templateObject2, src_diet_templateObject3, src_diet_templateObject4, src_diet_templateObject5, src_diet_templateObject6, src_diet_templateObject7, src_diet_templateObject8, src_diet_templateObject9, src_diet_templateObject10, src_diet_templateObject11, src_diet_templateObject12, src_diet_templateObject13, src_diet_templateObject14, src_diet_templateObject15, src_diet_templateObject16, src_diet_templateObject17, src_diet_templateObject18, src_diet_templateObject19, src_diet_templateObject20, src_diet_templateObject21, src_diet_templateObject22, src_diet_templateObject23, src_diet_templateObject24, src_diet_templateObject25, src_diet_templateObject26, src_diet_templateObject27, src_diet_templateObject28, src_diet_templateObject29, src_diet_templateObject30, src_diet_templateObject31, src_diet_templateObject32, src_diet_templateObject33, src_diet_templateObject34, src_diet_templateObject35, src_diet_templateObject36, src_diet_templateObject37, src_diet_templateObject38, src_diet_templateObject39, src_diet_templateObject40, src_diet_templateObject41, src_diet_templateObject42, src_diet_templateObject43, src_diet_templateObject44, src_diet_templateObject45, src_diet_templateObject46, src_diet_templateObject47, src_diet_templateObject48, diet_templateObject49, diet_templateObject50, diet_templateObject51, diet_templateObject52, diet_templateObject53, diet_templateObject54, diet_templateObject55, diet_templateObject56, diet_templateObject57, diet_templateObject58, diet_templateObject59, diet_templateObject60, diet_templateObject61, diet_templateObject62, diet_templateObject63, diet_templateObject64, diet_templateObject65, diet_templateObject66, diet_templateObject67, diet_templateObject68, diet_templateObject69, diet_templateObject70, diet_templateObject71, diet_templateObject72, diet_templateObject73, diet_templateObject74, diet_templateObject75, diet_templateObject76, diet_templateObject77, diet_templateObject78, diet_templateObject79, diet_templateObject80, diet_templateObject81, diet_templateObject82, diet_templateObject83, diet_templateObject84, diet_templateObject85, diet_templateObject86, diet_templateObject87, diet_templateObject88, diet_templateObject89, diet_templateObject90, diet_templateObject91, diet_templateObject92, diet_templateObject93, diet_templateObject94, diet_templateObject95, diet_templateObject96, diet_templateObject97, diet_templateObject98, diet_templateObject99, diet_templateObject100, diet_templateObject101, diet_templateObject102, diet_templateObject103, diet_templateObject104, diet_templateObject105, diet_templateObject106, diet_templateObject107, diet_templateObject108, diet_templateObject109, diet_templateObject110, diet_templateObject111, diet_templateObject112, diet_templateObject113, diet_templateObject114, diet_templateObject115, diet_templateObject116, diet_templateObject117, diet_templateObject118, diet_templateObject119, diet_templateObject120, diet_templateObject121, diet_templateObject122, diet_templateObject123, diet_templateObject124, diet_templateObject125, diet_templateObject126, diet_templateObject127, diet_templateObject128, diet_templateObject129, diet_templateObject130, diet_templateObject131, diet_templateObject132, diet_templateObject133, diet_templateObject134, diet_templateObject135, diet_templateObject136, diet_templateObject137, diet_templateObject138, diet_templateObject139, diet_templateObject140, diet_templateObject141, diet_templateObject142, diet_templateObject143, diet_templateObject144, diet_templateObject145, diet_templateObject146, diet_templateObject147, diet_templateObject148, diet_templateObject149, diet_templateObject150, diet_templateObject151, diet_templateObject152, diet_templateObject153, diet_templateObject154, diet_templateObject155, diet_templateObject156, diet_templateObject157, diet_templateObject158, diet_templateObject159, diet_templateObject160, diet_templateObject161, diet_templateObject162, diet_templateObject163, diet_templateObject164, diet_templateObject165, diet_templateObject166, diet_templateObject167, diet_templateObject168, diet_templateObject169, diet_templateObject170, diet_templateObject171, diet_templateObject172, diet_templateObject173, diet_templateObject174, diet_templateObject175, diet_templateObject176, diet_templateObject177, diet_templateObject178, diet_templateObject179, diet_templateObject180, diet_templateObject181, diet_templateObject182, diet_templateObject183, diet_templateObject184, diet_templateObject185, diet_templateObject186, diet_templateObject187, diet_templateObject188, _templateObject189, _templateObject190, _templateObject191, _templateObject192, _templateObject193, _templateObject194, _templateObject195, _templateObject196, _templateObject197, _templateObject198, _templateObject199, _templateObject200, _templateObject201, _templateObject202, _templateObject203, _templateObject204, _templateObject205, _templateObject206, _templateObject207, _templateObject208, _templateObject209, _templateObject210;
function src_diet_slicedToArray(arr, i) { return src_diet_arrayWithHoles(arr) || src_diet_iterableToArrayLimit(arr, i) || src_diet_unsupportedIterableToArray(arr, i) || src_diet_nonIterableRest(); }
function src_diet_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function src_diet_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function src_diet_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function src_diet_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = src_diet_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function src_diet_toConsumableArray(arr) { return src_diet_arrayWithoutHoles(arr) || src_diet_iterableToArray(arr) || src_diet_unsupportedIterableToArray(arr) || src_diet_nonIterableSpread(); }
function src_diet_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function src_diet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_diet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_diet_arrayLikeToArray(o, minLen); }
function src_diet_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function src_diet_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return src_diet_arrayLikeToArray(arr); }
function src_diet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function src_diet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }













var MPA = property_get("valueOfAdventure");
(0,external_kolmafia_namespaceObject.print)("Using adventure value ".concat(MPA, "."), HIGHLIGHT);
var diet_Mayo = Mayo;
function eatSafe(qty, item) {
  if (lib_have(template_string_$item(src_diet_templateObject || (src_diet_templateObject = src_diet_taggedTemplateLiteral(["Universal Seasoning"])))) && template_string_$item(src_diet_templateObject2 || (src_diet_templateObject2 = src_diet_taggedTemplateLiteral(["Universal Seasoning"]))).dailyusesleft > 0 && !property_get("universalSeasoningActive")) {
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(src_diet_templateObject3 || (src_diet_templateObject3 = src_diet_taggedTemplateLiteral(["Universal Seasoning"]))));
  }
  if ((0,external_kolmafia_namespaceObject.myLevel)() >= 15 && !property_get("_hungerSauceUsed") && (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(src_diet_templateObject4 || (src_diet_templateObject4 = src_diet_taggedTemplateLiteral(["Hunger\u2122 Sauce"])))) < 3 * MPA) {
    acquire(1, template_string_$item(src_diet_templateObject5 || (src_diet_templateObject5 = src_diet_taggedTemplateLiteral(["Hunger\u2122 Sauce"]))), 3 * MPA);
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(src_diet_templateObject6 || (src_diet_templateObject6 = src_diet_taggedTemplateLiteral(["Hunger\u2122 Sauce"]))));
  }
  if ((0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(src_diet_templateObject7 || (src_diet_templateObject7 = src_diet_taggedTemplateLiteral(["fudge spork"])))) < 3 * MPA && !property_get("_fudgeSporkUsed")) {
    (0,external_kolmafia_namespaceObject.eat)(template_string_$item(src_diet_templateObject8 || (src_diet_templateObject8 = src_diet_taggedTemplateLiteral(["fudge spork"]))));
  }
  useIfUnused(template_string_$item(src_diet_templateObject9 || (src_diet_templateObject9 = src_diet_taggedTemplateLiteral(["milk of magnesium"]))), "_milkOfMagnesiumUsed", 5 * MPA);
  if (!(0,external_kolmafia_namespaceObject.eat)(qty, item)) throw "Failed to eat safely";
}
function drinkSafe(qty, item) {
  var prevDrunk = (0,external_kolmafia_namespaceObject.myInebriety)();
  if (lib_have($skill(src_diet_templateObject10 || (src_diet_templateObject10 = src_diet_taggedTemplateLiteral(["The Ode to Booze"]))))) {
    var odeTurns = qty * item.inebriety;
    var castTurns = odeTurns - (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(src_diet_templateObject11 || (src_diet_templateObject11 = src_diet_taggedTemplateLiteral(["Ode to Booze"]))));
    if (castTurns > 0) {
      (0,external_kolmafia_namespaceObject.useSkill)($skill(src_diet_templateObject12 || (src_diet_templateObject12 = src_diet_taggedTemplateLiteral(["The Ode to Booze"]))), Math.ceil(castTurns / (0,external_kolmafia_namespaceObject.turnsPerCast)($skill(src_diet_templateObject13 || (src_diet_templateObject13 = src_diet_taggedTemplateLiteral(["The Ode to Booze"]))))));
    }
  }
  if (!(0,external_kolmafia_namespaceObject.drink)(qty, item)) throw "Failed to drink safely";
  if (item.inebriety === 1 && prevDrunk === qty + (0,external_kolmafia_namespaceObject.myInebriety)() - 1) {
    // sometimes mafia does not track the mime army shotglass property
    (0,external_kolmafia_namespaceObject.setProperty)("_mimeArmyShotglassUsed", "true");
  }
}
function chewSafe(qty, item) {
  if (!(0,external_kolmafia_namespaceObject.chew)(qty, item)) throw "Failed to chew safely";
}
function consumeSafe(qty, item, additionalValue, skipAcquire) {
  var spleenCleaned = spleenCleaners.get(item);
  if (spleenCleaned && (0,external_kolmafia_namespaceObject.mySpleenUse)() < spleenCleaned) {
    throw "No spleen to clear with this.";
  }
  var averageAdventures = getAverageAdventures(item);
  if (!skipAcquire && (averageAdventures > 0 || additionalValue)) {
    var cap = Math.max(0, averageAdventures * MPA) + (additionalValue !== null && additionalValue !== void 0 ? additionalValue : 0);
    acquire(qty, item, cap);
  } else if (!skipAcquire) {
    acquire(qty, item);
  }
  if ((0,external_kolmafia_namespaceObject.itemType)(item) === "food" || item === saladFork) eatSafe(qty, item);else if ((0,external_kolmafia_namespaceObject.itemType)(item) === "booze" || item === frostyMug) drinkSafe(qty, item);else if ((0,external_kolmafia_namespaceObject.itemType)(item) === "spleen item") chewSafe(qty, item);else (0,external_kolmafia_namespaceObject.use)(qty, item);
}
function propTrue(prop) {
  if (typeof prop === "boolean") {
    return prop;
  } else {
    return property_get(prop);
  }
}
function useIfUnused(item, prop, maxPrice) {
  if (!propTrue(prop)) {
    if ((0,external_kolmafia_namespaceObject.mallPrice)(item) <= maxPrice) {
      acquire(1, item, maxPrice, false);
      if (!lib_have(item)) return;
      (0,external_kolmafia_namespaceObject.use)(1, item);
    } else {
      (0,external_kolmafia_namespaceObject.print)("Skipping ".concat(item.name, "; too expensive (").concat((0,external_kolmafia_namespaceObject.mallPrice)(item), " > ").concat(maxPrice, ")."));
    }
  }
}
function nonOrganAdventures() {
  useIfUnused(template_string_$item(src_diet_templateObject14 || (src_diet_templateObject14 = src_diet_taggedTemplateLiteral(["fancy chocolate car"]))), property_get("_chocolatesUsed") !== 0, 2 * MPA);
  while (property_get("_loveChocolatesUsed") < 3) {
    var price = lib_have(template_string_$item(src_diet_templateObject15 || (src_diet_templateObject15 = src_diet_taggedTemplateLiteral(["LOV Extraterrestrial Chocolate"])))) ? 15000 : 20000;
    var value = utils_clamp(3 - property_get("_loveChocolatesUsed"), 0, 3) * property_get("valueOfAdventure");
    if (value < price) break;
    if (!lib_have(template_string_$item(src_diet_templateObject16 || (src_diet_templateObject16 = src_diet_taggedTemplateLiteral(["LOV Extraterrestrial Chocolate"]))))) {
      Kmail.send("sellbot", "".concat(template_string_$item(src_diet_templateObject17 || (src_diet_templateObject17 = src_diet_taggedTemplateLiteral(["LOV Extraterrestrial Chocolate"]))).name, " (1)"), undefined, 20000);
      (0,external_kolmafia_namespaceObject.wait)(11);
      (0,external_kolmafia_namespaceObject.cliExecute)("refresh inventory");
      if (!lib_have(template_string_$item(src_diet_templateObject18 || (src_diet_templateObject18 = src_diet_taggedTemplateLiteral(["LOV Extraterrestrial Chocolate"]))))) {
        (0,external_kolmafia_namespaceObject.print)("I'm tired of waiting for sellbot to send me some chocolate", "red");
        break;
      }
    }
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(src_diet_templateObject19 || (src_diet_templateObject19 = src_diet_taggedTemplateLiteral(["LOV Extraterrestrial Chocolate"]))));
  }
  var chocos = new Map([[$class(src_diet_templateObject20 || (src_diet_templateObject20 = src_diet_taggedTemplateLiteral(["Seal Clubber"]))), template_string_$item(src_diet_templateObject21 || (src_diet_templateObject21 = src_diet_taggedTemplateLiteral(["chocolate seal-clubbing club"])))], [$class(src_diet_templateObject22 || (src_diet_templateObject22 = src_diet_taggedTemplateLiteral(["Turtle Tamer"]))), template_string_$item(src_diet_templateObject23 || (src_diet_templateObject23 = src_diet_taggedTemplateLiteral(["chocolate turtle totem"])))], [$class(src_diet_templateObject24 || (src_diet_templateObject24 = src_diet_taggedTemplateLiteral(["Pastamancer"]))), template_string_$item(src_diet_templateObject25 || (src_diet_templateObject25 = src_diet_taggedTemplateLiteral(["chocolate pasta spoon"])))], [$class(src_diet_templateObject26 || (src_diet_templateObject26 = src_diet_taggedTemplateLiteral(["Sauceror"]))), template_string_$item(src_diet_templateObject27 || (src_diet_templateObject27 = src_diet_taggedTemplateLiteral(["chocolate saucepan"])))], [$class(src_diet_templateObject28 || (src_diet_templateObject28 = src_diet_taggedTemplateLiteral(["Accordion Thief"]))), template_string_$item(src_diet_templateObject29 || (src_diet_templateObject29 = src_diet_taggedTemplateLiteral(["chocolate stolen accordion"])))], [$class(src_diet_templateObject30 || (src_diet_templateObject30 = src_diet_taggedTemplateLiteral(["Disco Bandit"]))), template_string_$item(src_diet_templateObject31 || (src_diet_templateObject31 = src_diet_taggedTemplateLiteral(["chocolate disco ball"])))]]);
  var classChoco = chocos.get((0,external_kolmafia_namespaceObject.myClass)());
  var chocExpVal = (remaining, item) => {
    var advs = [0, 0, 1, 2, 3][remaining + (item === classChoco ? 1 : 0)];
    return advs * MPA - (0,external_kolmafia_namespaceObject.mallPrice)(item);
  };
  var chocosRemaining = utils_clamp(3 - property_get("_chocolatesUsed"), 0, 3);
  var _loop = function _loop(i) {
    var chocoVals = src_diet_toConsumableArray(chocos.values()).map(choc => {
      return {
        choco: choc,
        value: chocExpVal(i, choc)
      };
    });
    var best = lib_maxBy(chocoVals, "value");
    if (best.value > 0) {
      acquire(1, best.choco, best.value + (0,external_kolmafia_namespaceObject.mallPrice)(best.choco), false);
      (0,external_kolmafia_namespaceObject.use)(1, best.choco);
    } else return "break";
  };
  for (var i = chocosRemaining; i > 0; i--) {
    var _ret = _loop(i);
    if (_ret === "break") break;
  }
  useIfUnused(template_string_$item(src_diet_templateObject32 || (src_diet_templateObject32 = src_diet_taggedTemplateLiteral(["fancy chocolate sculpture"]))), property_get("_chocolateSculpturesUsed") > 0, 5 * MPA + 5000);
  useIfUnused(template_string_$item(src_diet_templateObject33 || (src_diet_templateObject33 = src_diet_taggedTemplateLiteral(["essential tofu"]))), "_essentialTofuUsed", 5 * MPA);
  if (!property_get("_etchedHourglassUsed") && lib_have(template_string_$item(src_diet_templateObject34 || (src_diet_templateObject34 = src_diet_taggedTemplateLiteral(["etched hourglass"]))))) {
    (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(src_diet_templateObject35 || (src_diet_templateObject35 = src_diet_taggedTemplateLiteral(["etched hourglass"]))));
  }
  if ((0,external_kolmafia_namespaceObject.getProperty)("_timesArrowUsed") !== "true" && (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(src_diet_templateObject36 || (src_diet_templateObject36 = src_diet_taggedTemplateLiteral(["time's arrow"])))) < 5 * MPA) {
    acquire(1, template_string_$item(src_diet_templateObject37 || (src_diet_templateObject37 = src_diet_taggedTemplateLiteral(["time's arrow"]))), 5 * MPA);
    (0,external_kolmafia_namespaceObject.cliExecute)("csend 1 time's arrow to botticelli");
    (0,external_kolmafia_namespaceObject.setProperty)("_timesArrowUsed", "true");
  }
  if (lib_have($skill(src_diet_templateObject38 || (src_diet_templateObject38 = src_diet_taggedTemplateLiteral(["Ancestral Recall"])))) && (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(src_diet_templateObject39 || (src_diet_templateObject39 = src_diet_taggedTemplateLiteral(["blue mana"])))) < 3 * MPA) {
    var casts = Math.max(10 - property_get("_ancestralRecallCasts"), 0);
    acquire(casts, template_string_$item(src_diet_templateObject40 || (src_diet_templateObject40 = src_diet_taggedTemplateLiteral(["blue mana"]))), 3 * MPA);
    (0,external_kolmafia_namespaceObject.useSkill)(casts, $skill(src_diet_templateObject41 || (src_diet_templateObject41 = src_diet_taggedTemplateLiteral(["Ancestral Recall"]))));
  }
  if (config_globalOptions.ascend) useIfUnused(template_string_$item(src_diet_templateObject42 || (src_diet_templateObject42 = src_diet_taggedTemplateLiteral(["borrowed time"]))), "_borrowedTimeUsed", 5 * MPA);
}
function pillCheck() {
  if (!property_get("_distentionPillUsed")) {
    if (!property_get("garbo_skipPillCheck", false) && !lib_have(template_string_$item(src_diet_templateObject43 || (src_diet_templateObject43 = src_diet_taggedTemplateLiteral(["distention pill"]))), 1)) {
      _set("garbo_skipPillCheck", userConfirmDialog("You do not have any distention pills. Continue anyway? (Defaulting to no in 15 seconds)", false, 15000));
    }
  }
  if (!property_get("_syntheticDogHairPillUsed")) {
    if (!property_get("garbo_skipPillCheck", false) && !lib_have(template_string_$item(src_diet_templateObject44 || (src_diet_templateObject44 = src_diet_taggedTemplateLiteral(["synthetic dog hair pill"]))), 1)) {
      _set("garbo_skipPillCheck", userConfirmDialog("You do not have any synthetic dog hair pills. Continue anyway? (Defaulting to no in 15 seconds)", false, 15000));
    }
  }
}
var saladFork = template_string_$item(src_diet_templateObject45 || (src_diet_templateObject45 = src_diet_taggedTemplateLiteral(["Ol' Scratch's salad fork"])));
var frostyMug = template_string_$item(src_diet_templateObject46 || (src_diet_templateObject46 = src_diet_taggedTemplateLiteral(["Frosty's frosty mug"])));
var spleenCleaners = new Map([[template_string_$item(src_diet_templateObject47 || (src_diet_templateObject47 = src_diet_taggedTemplateLiteral(["extra-greasy slider"]))), 5], [template_string_$item(src_diet_templateObject48 || (src_diet_templateObject48 = src_diet_taggedTemplateLiteral(["jar of fermented pickle juice"]))), 5], [template_string_$item(diet_templateObject49 || (diet_templateObject49 = src_diet_taggedTemplateLiteral(["mojo filter"]))), 1]]);
var stomachLiverCleaners = new Map([[template_string_$item(diet_templateObject50 || (diet_templateObject50 = src_diet_taggedTemplateLiteral(["spice melange"]))), [-3, -3]], [template_string_$item(diet_templateObject51 || (diet_templateObject51 = src_diet_taggedTemplateLiteral(["synthetic dog hair pill"]))), [0, -1]], [template_string_$item(diet_templateObject52 || (diet_templateObject52 = src_diet_taggedTemplateLiteral(["cuppa Sobrie tea"]))), [0, -1]], [template_string_$item(diet_templateObject53 || (diet_templateObject53 = src_diet_taggedTemplateLiteral(["designer sweatpants"]))), [0, -1]]]);
var mallMin = items => lib_maxBy(items, external_kolmafia_namespaceObject.mallPrice, true);

/**
 * Generate a basic menu of high-yield items to consider
 * @returns basic menu
 */
function diet_menu() {
  var spaghettiBreakfast = lib_have(template_string_$item(diet_templateObject54 || (diet_templateObject54 = src_diet_taggedTemplateLiteral(["spaghetti breakfast"])))) && (0,external_kolmafia_namespaceObject.myFullness)() === 0 && property_get("_timeSpinnerFoodAvailable") === "" && !property_get("_spaghettiBreakfastEaten") ? 1 : 0;

  /*
   * generated in mafia with an account that has super human cocktail crafting
   *  > js Item.all().filter((item) => item.inebriety > 0 && item.quality === "EPIC" && getIngredients(item)["mushroom fermenting powder]).join(", ")
   */
  var complexMushroomWines = template_string_$items(diet_templateObject55 || (diet_templateObject55 = src_diet_taggedTemplateLiteral(["overpowering mushroom wine, complex mushroom wine, smooth mushroom wine, blood-red mushroom wine, buzzing mushroom wine, swirling mushroom wine"])));
  /*
   * generated in mafia with:
   *  > js Item.all().filter((item) => item.inebriety > 0 && getIngredients(item)["perfect ice cube"]).join(", ")
   */
  var perfectDrinks = template_string_$items(diet_templateObject56 || (diet_templateObject56 = src_diet_taggedTemplateLiteral(["perfect cosmopolitan, perfect negroni, perfect dark and stormy, perfect mimosa, perfect old-fashioned, perfect paloma"])));
  /*
   * generated in mafia with an account that has Transcendental Noodlecraft
   *  > js Item.all().filter((item) => item.fullness > 0 && item.name.indexOf("lasagna") > 0 && getIngredients(item)["savory dry noodles"]).join(", ")
   */
  var lasagnas = template_string_$items(diet_templateObject57 || (diet_templateObject57 = src_diet_taggedTemplateLiteral(["fishy fish lasagna, gnat lasagna, long pork lasagna"])));

  /*
   * standardSpleenItem indicates a spleen item of size 4 with an adventure yield of 5-10. Taken from the wiki. They are all functionally equivalent.
   */
  var standardSpleenItems = template_string_$items(diet_templateObject58 || (diet_templateObject58 = src_diet_taggedTemplateLiteral(["agua de vida, gooey paste, oily paste, ectoplasmic paste, greasy paste, bug paste, hippy paste, orc paste, demonic paste, indescribably horrible paste, fishy paste, goblin paste, pirate paste, chlorophyll paste, strange paste, Mer-kin paste, slimy paste, penguin paste, elemental paste, cosmic paste, hobo paste, Crimbo paste, groose grease, Unconscious Collective Dream Jar, grim fairy tale, powdered gold"])));
  var smallEpics = [].concat(src_diet_toConsumableArray(template_string_$items(diet_templateObject59 || (diet_templateObject59 = src_diet_taggedTemplateLiteral(["meteoreo, ice rice"])))), [template_string_$item(diet_templateObject60 || (diet_templateObject60 = src_diet_taggedTemplateLiteral(["Tea, Earl Grey, Hot"])))]);
  var boxingDayCareItems = template_string_$items(diet_templateObject61 || (diet_templateObject61 = src_diet_taggedTemplateLiteral(["glass of raw eggs, punch-drunk punch"]))).filter(item => lib_have(item));
  var pilsners = template_string_$items(diet_templateObject62 || (diet_templateObject62 = src_diet_taggedTemplateLiteral(["astral pilsner"]))).filter(item => config_globalOptions.ascend && lib_have(item));
  var limitedItems = [].concat(src_diet_toConsumableArray(boxingDayCareItems), src_diet_toConsumableArray(pilsners)).map(item => new MenuItem(item, {
    maximum: (0,external_kolmafia_namespaceObject.availableAmount)(item)
  }));
  return [
  // FOOD
  new MenuItem(template_string_$item(diet_templateObject63 || (diet_templateObject63 = src_diet_taggedTemplateLiteral(["Dreadsylvanian cold pocket"])))), new MenuItem(template_string_$item(diet_templateObject64 || (diet_templateObject64 = src_diet_taggedTemplateLiteral(["Dreadsylvanian hot pocket"])))), new MenuItem(template_string_$item(diet_templateObject65 || (diet_templateObject65 = src_diet_taggedTemplateLiteral(["Dreadsylvanian sleaze pocket"])))), new MenuItem(template_string_$item(diet_templateObject66 || (diet_templateObject66 = src_diet_taggedTemplateLiteral(["Dreadsylvanian stink pocket"])))), new MenuItem(template_string_$item(diet_templateObject67 || (diet_templateObject67 = src_diet_taggedTemplateLiteral(["Dreadsylvanian spooky pocket"])))), new MenuItem(template_string_$item(diet_templateObject68 || (diet_templateObject68 = src_diet_taggedTemplateLiteral(["tin cup of mulligan stew"])))), new MenuItem(template_string_$item(diet_templateObject69 || (diet_templateObject69 = src_diet_taggedTemplateLiteral(["frozen banquet"])))), new MenuItem(template_string_$item(diet_templateObject70 || (diet_templateObject70 = src_diet_taggedTemplateLiteral(["deviled egg"])))), new MenuItem(template_string_$item(diet_templateObject71 || (diet_templateObject71 = src_diet_taggedTemplateLiteral(["spaghetti breakfast"]))), {
    maximum: spaghettiBreakfast
  }), new MenuItem(template_string_$item(diet_templateObject72 || (diet_templateObject72 = src_diet_taggedTemplateLiteral(["extra-greasy slider"])))), new MenuItem(mallMin(lasagnas)), new MenuItem(mallMin(smallEpics)), new MenuItem(template_string_$item(diet_templateObject73 || (diet_templateObject73 = src_diet_taggedTemplateLiteral(["green hamhock"])))),
  // BOOZE
  new MenuItem(template_string_$item(diet_templateObject74 || (diet_templateObject74 = src_diet_taggedTemplateLiteral(["elemental caipiroska"])))), new MenuItem(template_string_$item(diet_templateObject75 || (diet_templateObject75 = src_diet_taggedTemplateLiteral(["moreltini"])))), new MenuItem(template_string_$item(diet_templateObject76 || (diet_templateObject76 = src_diet_taggedTemplateLiteral(["Dreadsylvanian cold-fashioned"])))), new MenuItem(template_string_$item(diet_templateObject77 || (diet_templateObject77 = src_diet_taggedTemplateLiteral(["Dreadsylvanian dank and stormy"])))), new MenuItem(template_string_$item(diet_templateObject78 || (diet_templateObject78 = src_diet_taggedTemplateLiteral(["Dreadsylvanian grimlet"])))), new MenuItem(template_string_$item(diet_templateObject79 || (diet_templateObject79 = src_diet_taggedTemplateLiteral(["Dreadsylvanian hot toddy"])))), new MenuItem(template_string_$item(diet_templateObject80 || (diet_templateObject80 = src_diet_taggedTemplateLiteral(["Dreadsylvanian slithery nipple"])))), new MenuItem(template_string_$item(diet_templateObject81 || (diet_templateObject81 = src_diet_taggedTemplateLiteral(["Hodgman's blanket"])))), new MenuItem(template_string_$item(diet_templateObject82 || (diet_templateObject82 = src_diet_taggedTemplateLiteral(["Sacramento wine"])))), new MenuItem(template_string_$item(diet_templateObject83 || (diet_templateObject83 = src_diet_taggedTemplateLiteral(["iced plum wine"])))), new MenuItem(template_string_$item(diet_templateObject84 || (diet_templateObject84 = src_diet_taggedTemplateLiteral(["splendid martini"])))), new MenuItem(template_string_$item(diet_templateObject85 || (diet_templateObject85 = src_diet_taggedTemplateLiteral(["Eye and a Twist"])))), new MenuItem(template_string_$item(diet_templateObject86 || (diet_templateObject86 = src_diet_taggedTemplateLiteral(["jar of fermented pickle juice"])))), new MenuItem(mallMin(complexMushroomWines)), new MenuItem(mallMin(perfectDrinks)), new MenuItem(template_string_$item(diet_templateObject87 || (diet_templateObject87 = src_diet_taggedTemplateLiteral(["green eggnog"])))),
  // SPLEEN
  new MenuItem(template_string_$item(diet_templateObject88 || (diet_templateObject88 = src_diet_taggedTemplateLiteral(["octolus oculus"])))), new MenuItem(template_string_$item(diet_templateObject89 || (diet_templateObject89 = src_diet_taggedTemplateLiteral(["prismatic wad"])))), new MenuItem(template_string_$item(diet_templateObject90 || (diet_templateObject90 = src_diet_taggedTemplateLiteral(["transdermal smoke patch"])))), new MenuItem(template_string_$item(diet_templateObject91 || (diet_templateObject91 = src_diet_taggedTemplateLiteral(["antimatter wad"])))), new MenuItem(template_string_$item(diet_templateObject92 || (diet_templateObject92 = src_diet_taggedTemplateLiteral(["voodoo snuff"])))), new MenuItem(template_string_$item(diet_templateObject93 || (diet_templateObject93 = src_diet_taggedTemplateLiteral(["blood-drive sticker"])))), new MenuItem(mallMin(standardSpleenItems)), new MenuItem(mallMin(template_string_$items(diet_templateObject94 || (diet_templateObject94 = src_diet_taggedTemplateLiteral(["not-a-pipe, glimmering roc feather"])))))].concat(src_diet_toConsumableArray(limitedItems), [
  // HELPERS
  new MenuItem(template_string_$item(diet_templateObject95 || (diet_templateObject95 = src_diet_taggedTemplateLiteral(["distention pill"])))), new MenuItem(template_string_$item(diet_templateObject96 || (diet_templateObject96 = src_diet_taggedTemplateLiteral(["cuppa Voraci tea"])))), new MenuItem(diet_Mayo.flex), new MenuItem(diet_Mayo.zapine), new MenuItem(template_string_$item(diet_templateObject97 || (diet_templateObject97 = src_diet_taggedTemplateLiteral(["Special Seasoning"])))), new MenuItem(saladFork), new MenuItem(frostyMug), new MenuItem(template_string_$item(diet_templateObject98 || (diet_templateObject98 = src_diet_taggedTemplateLiteral(["mojo filter"])))), new MenuItem(template_string_$item(diet_templateObject99 || (diet_templateObject99 = src_diet_taggedTemplateLiteral(["pocket wish"]))), {
    maximum: 1,
    effect: template_string_$effect(diet_templateObject100 || (diet_templateObject100 = src_diet_taggedTemplateLiteral(["Refined Palate"])))
  }), new MenuItem(template_string_$item(diet_templateObject101 || (diet_templateObject101 = src_diet_taggedTemplateLiteral(["toasted brie"]))), {
    maximum: 1
  }), new MenuItem(template_string_$item(diet_templateObject102 || (diet_templateObject102 = src_diet_taggedTemplateLiteral(["potion of the field gar"]))), {
    maximum: 1
  })], src_diet_toConsumableArray(src_diet_toConsumableArray(stomachLiverCleaners.keys()).map(item => new MenuItem(item))), [new MenuItem(template_string_$item(diet_templateObject103 || (diet_templateObject103 = src_diet_taggedTemplateLiteral(["sweet tooth"]))), {
    size: -1,
    organ: "food",
    maximum: 1
  }), new MenuItem(template_string_$item(diet_templateObject104 || (diet_templateObject104 = src_diet_taggedTemplateLiteral(["designer sweatpants"]))), {
    size: -1,
    organ: "booze",
    maximum: Math.min(3 - property_get("_sweatOutSomeBoozeUsed", 0), Math.floor(property_get("sweat", 0) / 25))
  })]);
}
function bestConsumable(organType) {
  var levelRestrict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var restrictList = arguments.length > 2 ? arguments[2] : undefined;
  var maxSize = arguments.length > 3 ? arguments[3] : undefined;
  var fullMenu = potionMenu(diet_menu(), 0, 0);
  var organMenu = fullMenu.filter(menuItem => (0,external_kolmafia_namespaceObject.itemType)(menuItem.item) === organType);
  if (restrictList) {
    if (restrictList instanceof external_kolmafia_namespaceObject.Item) {
      organMenu = organMenu.filter(menuItem => restrictList !== menuItem.item);
    } else {
      organMenu = organMenu.filter(menuItem => !restrictList.includes(menuItem.item));
    }
  }
  if (maxSize) {
    organMenu = organMenu.filter(menuItem => menuItem.size <= maxSize);
  }
  if (levelRestrict) {
    organMenu = organMenu.filter(menuItem => menuItem.item.levelreq <= (0,external_kolmafia_namespaceObject.myLevel)());
  }
  var organList = organMenu.map(consumable => {
    var edible = consumable.item;
    var buff = modifier_get("Effect", edible);
    var turnsPerUse = modifier_get("Effect Duration", edible);
    var meatDrop = modifier_get("Meat Drop", buff);
    var famWeight = modifier_get("Familiar Weight", buff);
    var buffValue = (meatDrop + famWeight * 25 / 10) * turnsPerUse * (baseMeat + 750) / 100;
    var advValue = getAverageAdventures(edible) * property_get("valueOfAdventure");
    var organSpace = consumable.size;
    return {
      edible: edible,
      value: (buffValue + advValue - (0,external_kolmafia_namespaceObject.mallPrice)(edible)) / organSpace
    };
  });
  var best = lib_maxBy(organList, "value");
  return best;
}
function gregariousCount() {
  var gregariousCharges = property_get("beGregariousCharges") + (property_get("beGregariousFightsLeft") > 0 && property_get("beGregariousMonster") === $monster(diet_templateObject105 || (diet_templateObject105 = src_diet_taggedTemplateLiteral(["Knob Goblin Embezzler"]))) ? 1 : 0);
  var gregariousFightsPerCharge = expectedGregs();
  // remove and preserve the last index - that is the marginal count of gregarious fights
  var marginalGregariousFights = gregariousFightsPerCharge.splice(gregariousFightsPerCharge.length - 1, 1)[0];
  var expectedGregariousFights = gregariousFightsPerCharge.slice(gregariousCharges);
  return {
    expectedGregariousFights: expectedGregariousFights,
    marginalGregariousFights: marginalGregariousFights
  };
}
function copiers() {
  var embezzlerDifferential = EMBEZZLER_MULTIPLIER() * MPA;
  var _gregariousCount = gregariousCount(),
    expectedGregariousFights = _gregariousCount.expectedGregariousFights,
    marginalGregariousFights = _gregariousCount.marginalGregariousFights;
  var extros = (0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)() ? [] : [].concat(src_diet_toConsumableArray(expectedGregariousFights.map(embezzlers => new MenuItem(template_string_$item(diet_templateObject106 || (diet_templateObject106 = src_diet_taggedTemplateLiteral(["Extrovermectin\u2122"]))), {
    additionalValue: embezzlers * embezzlerDifferential,
    maximum: 1
  }))), [new MenuItem(template_string_$item(diet_templateObject107 || (diet_templateObject107 = src_diet_taggedTemplateLiteral(["Extrovermectin\u2122"]))), {
    additionalValue: marginalGregariousFights * embezzlerDifferential
  })]);
  return src_diet_toConsumableArray(extros);
}
function countCopies(diet) {
  // this only counts the copies not yet realized
  // any copies already realized will be properly counted by embezzlerCount

  // returns an array of expected counts for number of greg copies to fight per pill use
  // the last value is how much you expect to fight per pill
  var extros = utils_sum(diet.entries, _ref => {
    var menuItems = _ref.menuItems,
      quantity = _ref.quantity;
    return menuItems.some(menuItem => menuItem.item === template_string_$item(diet_templateObject108 || (diet_templateObject108 = src_diet_taggedTemplateLiteral(["Extrovermectin\u2122"])))) ? quantity : 0;
  });
  var _gregariousCount2 = gregariousCount(),
    expectedGregariousFights = _gregariousCount2.expectedGregariousFights,
    marginalGregariousFights = _gregariousCount2.marginalGregariousFights;

  // slice will never return an array that is bigger than the original array
  var replaceExtros = sumNumbers(expectedGregariousFights.slice(0, extros));
  var bonusExtros = utils_clamp(extros - expectedGregariousFights.length, 0, extros) * marginalGregariousFights;
  return replaceExtros + bonusExtros;
}
function ingredientCost(item) {
  var ingredientMallPrice = (0,external_kolmafia_namespaceObject.mallPrice)(item);
  var ingredientAutosellPrice = (0,external_kolmafia_namespaceObject.autosellPrice)(item);
  if (!lib_have(item) || item.tradeable && ingredientMallPrice > Math.max(100, 2 * ingredientAutosellPrice)) {
    return ingredientMallPrice;
  }
  return ingredientAutosellPrice;
}

/**
 * Generate a potion diet that has entries
 * @param embezzlers number of embezzlers expected to be encountered on this day
 * @param turns number of turns total expecte
 */
function potionMenu(baseMenu, embezzlers, turns) {
  function limitedPotion(input, limit) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (limit === 0) {
      return [];
    }
    var potion = input instanceof external_kolmafia_namespaceObject.Item ? new Potion(input) : input;
    var mayo = undefined;
    if ((0,external_kolmafia_namespaceObject.itemType)(potion.potion) === "food" && installed()) {
      potion = potion.doubleDuration();
      mayo = diet_Mayo.zapine;
    }
    return potion.value(embezzlers, turns, limit).map(tier => new MenuItem(potion.potion, {
      maximum: tier.quantity,
      additionalValue: tier.value,
      priceOverride: options.price,
      organ: options.organ,
      size: options.size,
      data: tier.name,
      mayo: mayo
    }));
  }
  function potion(potion) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return limitedPotion(potion, undefined, options);
  }
  var speakeasy = template_string_$item(diet_templateObject109 || (diet_templateObject109 = src_diet_taggedTemplateLiteral(["Clan speakeasy"])));
  var hasSpeakeasy = (0,external_kolmafia_namespaceObject.getClanLounge)()["".concat(speakeasy)];
  var twiceHauntedPrice = Math.min(ingredientCost(template_string_$item(diet_templateObject110 || (diet_templateObject110 = src_diet_taggedTemplateLiteral(["haunted orange"])))), ingredientCost(template_string_$item(diet_templateObject111 || (diet_templateObject111 = src_diet_taggedTemplateLiteral(["orange"])))) + ingredientCost(template_string_$item(diet_templateObject112 || (diet_templateObject112 = src_diet_taggedTemplateLiteral(["ghostly ectoplasm"]))))) + Math.min(ingredientCost(template_string_$item(diet_templateObject113 || (diet_templateObject113 = src_diet_taggedTemplateLiteral(["haunted bottle of vodka"])))), ingredientCost(template_string_$item(diet_templateObject114 || (diet_templateObject114 = src_diet_taggedTemplateLiteral(["bottle of vodka"])))) + ingredientCost(template_string_$item(diet_templateObject115 || (diet_templateObject115 = src_diet_taggedTemplateLiteral(["ghostly ectoplasm"])))));
  var campfireHotdog = property_get("getawayCampsiteUnlocked") ? potion(template_string_$item(diet_templateObject116 || (diet_templateObject116 = src_diet_taggedTemplateLiteral(["campfire hot dog"]))), {
    price: ingredientCost(template_string_$item(diet_templateObject117 || (diet_templateObject117 = src_diet_taggedTemplateLiteral(["stick of firewood"]))))
  }) : [];
  var foodCone = realmAvailable("stench") || config_globalOptions.simdiet && !config_globalOptions.nobarf ? limitedPotion(template_string_$item(diet_templateObject118 || (diet_templateObject118 = src_diet_taggedTemplateLiteral(["Dinsey food-cone"]))), Math.floor((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(diet_templateObject119 || (diet_templateObject119 = src_diet_taggedTemplateLiteral(["FunFunds\u2122"])))) / 2), {
    price: 2 * garboValue(template_string_$item(diet_templateObject120 || (diet_templateObject120 = src_diet_taggedTemplateLiteral(["FunFunds\u2122"]))))
  }) : [];
  var borisBread = !property_get("unknownRecipe10978") // this property is true if you don't know the recipe, false if you do
  ? potion(template_string_$item(diet_templateObject121 || (diet_templateObject121 = src_diet_taggedTemplateLiteral(["Boris's bread"]))), {
    price: 2 * ingredientCost(template_string_$item(diet_templateObject122 || (diet_templateObject122 = src_diet_taggedTemplateLiteral(["Yeast of Boris"]))))
  }) : [];

  // Replace string with BooleanProperty later
  var ofLegendPotion = (item, prefName) => {
    if (property_get(prefName, true)) return [];
    var recipes = [item].concat(src_diet_toConsumableArray(template_string_$items(diet_templateObject123 || (diet_templateObject123 = src_diet_taggedTemplateLiteral(["roasted vegetable of Jarlsberg, Pete's rich ricotta, Boris's bread"]))))).map(i => (0,external_kolmafia_namespaceObject.toInt)(i));
    if (recipes.some(id => property_get("unknownRecipe".concat(id), true))) return [];
    return limitedPotion(item, 1, {
      price: 2 * utils_sum(template_string_$items(diet_templateObject124 || (diet_templateObject124 = src_diet_taggedTemplateLiteral(["Vegetable of Jarlsberg, St. Sneaky Pete's Whey, Yeast of Boris"]))), ingredientCost)
    });
  };
  var ofLegendMenuItems = config_globalOptions.ascend ? [].concat(src_diet_toConsumableArray(ofLegendPotion(template_string_$item(diet_templateObject125 || (diet_templateObject125 = src_diet_taggedTemplateLiteral(["Calzone of Legend"]))), "calzoneOfLegendEaten")), src_diet_toConsumableArray(ofLegendPotion(template_string_$item(diet_templateObject126 || (diet_templateObject126 = src_diet_taggedTemplateLiteral(["Pizza of Legend"]))), "pizzaOfLegendEaten")), src_diet_toConsumableArray(ofLegendPotion(template_string_$item(diet_templateObject127 || (diet_templateObject127 = src_diet_taggedTemplateLiteral(["Deep Dish of Legend"]))), "deepDishOfLegendEaten"))) : [];
  return [].concat(src_diet_toConsumableArray(baseMenu), src_diet_toConsumableArray(copiers()), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject128 || (diet_templateObject128 = src_diet_taggedTemplateLiteral(["jumping horseradish"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject129 || (diet_templateObject129 = src_diet_taggedTemplateLiteral(["tempura cauliflower"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject130 || (diet_templateObject130 = src_diet_taggedTemplateLiteral(["sea truffle"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject131 || (diet_templateObject131 = src_diet_taggedTemplateLiteral(["tempura broccoli"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject132 || (diet_templateObject132 = src_diet_taggedTemplateLiteral(["Miserable Pie"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject133 || (diet_templateObject133 = src_diet_taggedTemplateLiteral(["Every Day is Like This Sundae"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject134 || (diet_templateObject134 = src_diet_taggedTemplateLiteral(["bowl of mummy guts"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject135 || (diet_templateObject135 = src_diet_taggedTemplateLiteral(["haunted Hell ramen"]))))), src_diet_toConsumableArray(campfireHotdog), src_diet_toConsumableArray(foodCone), src_diet_toConsumableArray(borisBread), src_diet_toConsumableArray(ofLegendMenuItems), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject136 || (diet_templateObject136 = src_diet_taggedTemplateLiteral(["dirt julep"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject137 || (diet_templateObject137 = src_diet_taggedTemplateLiteral(["Ambitious Turkey"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject138 || (diet_templateObject138 = src_diet_taggedTemplateLiteral(["Friendly Turkey"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject139 || (diet_templateObject139 = src_diet_taggedTemplateLiteral(["vintage smart drink"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject140 || (diet_templateObject140 = src_diet_taggedTemplateLiteral(["Strikes Again Bigmouth"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject141 || (diet_templateObject141 = src_diet_taggedTemplateLiteral(["Irish Coffee, English Heart"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject142 || (diet_templateObject142 = src_diet_taggedTemplateLiteral(["Jack-O-Lantern beer"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject143 || (diet_templateObject143 = src_diet_taggedTemplateLiteral(["Amnesiac Ale"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject144 || (diet_templateObject144 = src_diet_taggedTemplateLiteral(["mentholated wine"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject145 || (diet_templateObject145 = src_diet_taggedTemplateLiteral(["Feliz Navidad"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject146 || (diet_templateObject146 = src_diet_taggedTemplateLiteral(["broberry brogurt"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject147 || (diet_templateObject147 = src_diet_taggedTemplateLiteral(["haunted martini"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject148 || (diet_templateObject148 = src_diet_taggedTemplateLiteral(["twice-haunted screwdriver"]))), {
    price: twiceHauntedPrice
  })), src_diet_toConsumableArray(limitedPotion(template_string_$item(diet_templateObject149 || (diet_templateObject149 = src_diet_taggedTemplateLiteral(["high-end ginger wine"]))), (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(diet_templateObject150 || (diet_templateObject150 = src_diet_taggedTemplateLiteral(["high-end ginger wine"])))))), src_diet_toConsumableArray(limitedPotion(template_string_$item(diet_templateObject151 || (diet_templateObject151 = src_diet_taggedTemplateLiteral(["Hot Socks"]))), hasSpeakeasy ? 3 : 0, {
    price: 5000
  })), src_diet_toConsumableArray(realmAvailable("sleaze") && (0,external_kolmafia_namespaceObject.sellsItem)($coinmaster(diet_templateObject152 || (diet_templateObject152 = src_diet_taggedTemplateLiteral(["The Frozen Brogurt Stand"]))), template_string_$item(diet_templateObject153 || (diet_templateObject153 = src_diet_taggedTemplateLiteral(["broberry brogurt"])))) ? limitedPotion(template_string_$item(diet_templateObject154 || (diet_templateObject154 = src_diet_taggedTemplateLiteral(["broberry brogurt"]))), Math.floor((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(diet_templateObject155 || (diet_templateObject155 = src_diet_taggedTemplateLiteral(["Beach Buck"])))) / 10), {
    price: 10 * garboValue(template_string_$item(diet_templateObject156 || (diet_templateObject156 = src_diet_taggedTemplateLiteral(["Beach Buck"]))))
  }) : []), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject157 || (diet_templateObject157 = src_diet_taggedTemplateLiteral(["cute mushroom"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject158 || (diet_templateObject158 = src_diet_taggedTemplateLiteral(["beggin' cologne"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject159 || (diet_templateObject159 = src_diet_taggedTemplateLiteral(["Knob Goblin nasal spray"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject160 || (diet_templateObject160 = src_diet_taggedTemplateLiteral(["handful of Smithereens"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject161 || (diet_templateObject161 = src_diet_taggedTemplateLiteral(["black striped oyster egg"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject162 || (diet_templateObject162 = src_diet_taggedTemplateLiteral(["black paisley oyster egg"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject163 || (diet_templateObject163 = src_diet_taggedTemplateLiteral(["black polka-dot oyster egg"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject164 || (diet_templateObject164 = src_diet_taggedTemplateLiteral(["lustrous oyster egg"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject165 || (diet_templateObject165 = src_diet_taggedTemplateLiteral(["glimmering buzzard feather"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject166 || (diet_templateObject166 = src_diet_taggedTemplateLiteral(["Knob Goblin pet-buffing spray"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject167 || (diet_templateObject167 = src_diet_taggedTemplateLiteral(["abstraction: joy"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject168 || (diet_templateObject168 = src_diet_taggedTemplateLiteral(["beastly paste"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject169 || (diet_templateObject169 = src_diet_taggedTemplateLiteral(["gleaming oyster egg"]))))), src_diet_toConsumableArray(potion(template_string_$item(diet_templateObject170 || (diet_templateObject170 = src_diet_taggedTemplateLiteral(["Party-in-a-Can\u2122"]))))), src_diet_toConsumableArray(limitedPotion(template_string_$item(diet_templateObject171 || (diet_templateObject171 = src_diet_taggedTemplateLiteral(["body spradium"]))), utils_clamp((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(diet_templateObject172 || (diet_templateObject172 = src_diet_taggedTemplateLiteral(["body spradium"])))), 0, 1))), src_diet_toConsumableArray(lib_have($skill(diet_templateObject173 || (diet_templateObject173 = src_diet_taggedTemplateLiteral(["Sweet Synthesis"])))) ? potion(new Potion(template_string_$item(diet_templateObject174 || (diet_templateObject174 = src_diet_taggedTemplateLiteral(["Rethinking Candy"]))), {
    effect: template_string_$effect(diet_templateObject175 || (diet_templateObject175 = src_diet_taggedTemplateLiteral(["Synthesis: Greed"]))),
    duration: 30
  }), {
    size: 1,
    organ: "spleen item",
    price: 0
  }) : []));
}
function balanceMenu(baseMenu, dietPlanner) {
  var baseEmbezzlers = embezzlerCount();
  function rebalance(menu, iterations, embezzlers, adventures) {
    var fullMenu = potionMenu(menu, baseEmbezzlers + embezzlers, estimatedGarboTurns() + adventures);
    if (iterations <= 0) {
      return fullMenu;
    } else {
      var balancingDiet = dietPlanner(fullMenu);
      return rebalance(menu, iterations - 1, countCopies(balancingDiet), balancingDiet.expectedAdventures());
    }
  }
  var baseDiet = dietPlanner(baseMenu);
  return rebalance(baseMenu, 5, 0, baseDiet.expectedAdventures());
}
function computeDiet() {
  // Handle spleen manually, as the diet planner doesn't support synth. Only fill food and booze.

  var orEmpty = diet => diet.expectedValue(MPA, "net") < 0 ? new Diet() : diet;
  var fullDietPlanner = menu => orEmpty(Diet.plan(MPA, menu));
  var shotglassDietPlanner = menu => orEmpty(Diet.plan(MPA, menu, {
    booze: 1
  }));
  var pantsgivingDietPlanner = menu => orEmpty(Diet.plan(MPA, menu, {
    food: 1
  }));
  var sweatpantsDietPlanner = menu => orEmpty(Diet.plan(MPA, menu, {
    booze: getRemainingLiver()
  }));
  // const shotglassFilter = (menuItem: MenuItem)

  return {
    diet: () => fullDietPlanner(balanceMenu(diet_menu().filter(menuItem => !priceCaps[menuItem.item.name] || priceCaps[menuItem.item.name] >= (0,external_kolmafia_namespaceObject.mallPrice)(menuItem.item)), fullDietPlanner)),
    shotglass: () => shotglassDietPlanner(balanceMenu(diet_menu().filter(menuItem => (0,external_kolmafia_namespaceObject.itemType)(menuItem.item) === "booze" && menuItem.size === 1), shotglassDietPlanner)),
    pantsgiving: () => pantsgivingDietPlanner(balanceMenu(diet_menu().filter(menuItem => (0,external_kolmafia_namespaceObject.itemType)(menuItem.item) === "food" && menuItem.size === 1 || [diet_Mayo.flex, diet_Mayo.zapine, template_string_$item(diet_templateObject176 || (diet_templateObject176 = src_diet_taggedTemplateLiteral(["Special Seasoning"])))].includes(menuItem.item)), pantsgivingDietPlanner)),
    sweatpants: () => sweatpantsDietPlanner(balanceMenu(diet_menu().filter(menuItem => (0,external_kolmafia_namespaceObject.itemType)(menuItem.item) === "booze" && menuItem.size <= 3), sweatpantsDietPlanner))
  };
}
function printDiet(diet, name) {
  (0,external_kolmafia_namespaceObject.print)("===== ".concat(name, " DIET ====="));
  if (diet.entries.length === 0) return;
  diet = diet.copy();
  diet.entries.sort((a, b) => itemPriority(b.menuItems) - itemPriority(a.menuItems));
  var embezzlers = Math.floor(embezzlerCount() + countCopies(diet));
  var adventures = Math.floor(estimatedGarboTurns() + diet.expectedAdventures());
  (0,external_kolmafia_namespaceObject.print)("Planning to fight ".concat(embezzlers, " embezzlers and run ").concat(adventures, " adventures"));
  var _iterator = src_diet_createForOfIteratorHelper(diet.entries),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var dietEntry = _step.value;
      if (dietEntry.quantity === 0) continue;
      var target = dietEntry.target();
      var datastr = target.data ? "(".concat(target.data, ")") : "";
      var maxstr = target.maximum ? " (max ".concat(target.maximum, ")") : "";
      var helpersstr = dietEntry.helpers().length > 0 ? " helpers: ".concat(dietEntry.helpers().join(", ")) : "";
      var addvalstr = target.additionalValue ? " (additional value: ".concat(target.additionalValue, ")") : "";
      var valuestr = "value: ".concat(Math.floor(dietEntry.expectedValue(MPA, diet))).concat(addvalstr, " price: ").concat(Math.floor(dietEntry.expectedPrice()));
      (0,external_kolmafia_namespaceObject.print)("".concat(dietEntry.quantity).concat(maxstr, " ").concat(target).concat(datastr).concat(helpersstr, " ").concat(valuestr));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var totalValue = diet.expectedValue(MPA);
  var totalCost = diet.expectedPrice();
  var netValue = totalValue - totalCost;
  (0,external_kolmafia_namespaceObject.print)("Assuming MPA of ".concat(MPA, ", Total Cost ").concat(totalCost, ", Total Value ").concat(totalValue, ", Net Value ").concat(netValue));
}

// Item priority - higher means we eat it first.
// Anything that gives a consumption buff should go first (e.g. Refined Palate).
function itemPriority(menuItems) {
  // Last menu item is the food itself.
  var menuItem = menuItems[menuItems.length - 1];
  if (menuItem === undefined) {
    throw "Shouldn't have an empty menu item.";
  }
  if (menuItem.item === template_string_$item(diet_templateObject177 || (diet_templateObject177 = src_diet_taggedTemplateLiteral(["spaghetti breakfast"])))) return 200;
  if (template_string_$items(diet_templateObject178 || (diet_templateObject178 = src_diet_taggedTemplateLiteral(["pocket wish, toasted brie"]))).includes(menuItem.item) || spleenCleaners.get(menuItem.item) || stomachLiverCleaners.get(menuItem.item)) {
    return 100;
  } else {
    return 0;
  }
}
function consumeDiet(diet, name) {
  if (diet.entries.length === 0) return;
  diet = diet.copy();
  diet.entries.sort((a, b) => itemPriority(b.menuItems) - itemPriority(a.menuItems));
  (0,external_kolmafia_namespaceObject.print)();
  printDiet(diet, name);
  (0,external_kolmafia_namespaceObject.print)();
  var seasoningCount = utils_sum(diet.entries, _ref2 => {
    var menuItems = _ref2.menuItems,
      quantity = _ref2.quantity;
    return menuItems.some(menuItem => menuItem.item === template_string_$item(diet_templateObject179 || (diet_templateObject179 = src_diet_taggedTemplateLiteral(["Special Seasoning"])))) ? quantity : 0;
  });
  acquire(seasoningCount, template_string_$item(diet_templateObject180 || (diet_templateObject180 = src_diet_taggedTemplateLiteral(["Special Seasoning"]))), MPA);

  // Fill organs in rounds, making sure we're making progress in each round.
  var organs = () => [(0,external_kolmafia_namespaceObject.myFullness)(), (0,external_kolmafia_namespaceObject.myInebriety)(), (0,external_kolmafia_namespaceObject.mySpleenUse)()];
  var lastOrgans = [-1, -1, -1];
  var capacities = () => [(0,external_kolmafia_namespaceObject.fullnessLimit)(), (0,external_kolmafia_namespaceObject.inebrietyLimit)(), (0,external_kolmafia_namespaceObject.spleenLimit)()];
  var lastCapacities = [-1, -1, -1];
  var currentQuantity = utils_sum(diet.entries, _ref3 => {
    var quantity = _ref3.quantity;
    return quantity;
  });
  var lastQuantity = -1;
  while (currentQuantity > 0) {
    if (lib_arrayEquals(lastOrgans, organs()) && lib_arrayEquals(lastCapacities, capacities()) && lastQuantity === currentQuantity) {
      (0,external_kolmafia_namespaceObject.print)();
      printDiet(diet, "REMAINING");
      (0,external_kolmafia_namespaceObject.print)();
      throw "Failed to consume some diet item.";
    }
    lastOrgans = organs();
    lastCapacities = capacities();
    lastQuantity = currentQuantity;
    var _iterator2 = src_diet_createForOfIteratorHelper(diet.entries),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var dietEntry = _step2.value;
        var menuItems = dietEntry.menuItems,
          quantity = dietEntry.quantity;
        if (quantity === 0) continue;
        var countToConsume = quantity;
        var capacity = {
          food: (0,external_kolmafia_namespaceObject.fullnessLimit)() - (0,external_kolmafia_namespaceObject.myFullness)(),
          booze: (0,external_kolmafia_namespaceObject.inebrietyLimit)() - (0,external_kolmafia_namespaceObject.myInebriety)(),
          "spleen item": (0,external_kolmafia_namespaceObject.spleenLimit)() - (0,external_kolmafia_namespaceObject.mySpleenUse)()
        };
        var _iterator3 = src_diet_createForOfIteratorHelper(menuItems),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _menuItem = _step3.value;
            (0,external_kolmafia_namespaceObject.logprint)("Considering item ".concat(_menuItem.item, "."));
            if (_menuItem.organ === "booze" && _menuItem.size === 1 && !property_get("_mimeArmyShotglassUsed")) {
              countToConsume = 1;
            } else if (_menuItem.organ && _menuItem.size > 0) {
              countToConsume = Math.min(countToConsume, Math.floor(capacity[_menuItem.organ] / _menuItem.size));
            }
            (0,external_kolmafia_namespaceObject.logprint)("Based on organ size, planning to consume ".concat(countToConsume, "."));
            var cleaning = stomachLiverCleaners.get(_menuItem.item);
            if (cleaning) {
              var _cleaning = src_diet_slicedToArray(cleaning, 2),
                fullness = _cleaning[0],
                inebriety = _cleaning[1];
              countToConsume = Math.min(fullness < 0 ? Math.floor(-(0,external_kolmafia_namespaceObject.myFullness)() / fullness) : quantity, inebriety < 0 ? Math.floor(-(0,external_kolmafia_namespaceObject.myInebriety)() / inebriety) : quantity, countToConsume);
              (0,external_kolmafia_namespaceObject.logprint)("Based on organ-cleaning, planning to consume ".concat(countToConsume, "."));
            }
            var spleenCleaned = spleenCleaners.get(_menuItem.item);
            if (spleenCleaned) {
              countToConsume = Math.min(countToConsume, Math.floor((0,external_kolmafia_namespaceObject.mySpleenUse)() / spleenCleaned));
              (0,external_kolmafia_namespaceObject.logprint)("Based on organ-cleaning, planning to consume ".concat(countToConsume, "."));
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        if (countToConsume === 0) continue;
        var elementalResistAction = element => {
          return (countToConsume, menuItem) => {
            if ((0,external_kolmafia_namespaceObject.myMaxhp)() < 1000 * (1 - (0,external_kolmafia_namespaceObject.elementalResistance)(element) / 100)) {
              maximizeCached(["0.05 HP", "".concat(element, " Resistance")]);
              if ((0,external_kolmafia_namespaceObject.myMaxhp)() < 1000 * (1 - (0,external_kolmafia_namespaceObject.elementalResistance)(element) / 100)) {
                throw "Could not achieve enough ".concat(element, " resistance for ").concat(menuItem.item, ".");
              }
            }
            consumeSafe(countToConsume, menuItem.item);
          };
        };
        var speakeasyDrinks = Object.keys((0,external_kolmafia_namespaceObject.getClanLounge)()).map(s => (0,external_kolmafia_namespaceObject.toItem)(s)).filter(i => i.inebriety > 0).map(drink => [drink, (countToConsume, menuItem) => {
          (0,external_kolmafia_namespaceObject.cliExecute)("drink ".concat(countToConsume, " ").concat(menuItem.item));
        }]);
        var mayoActions = Object.values(diet_Mayo).map(i => [i, (countToConsume, menuItem) => {
          setMayoMinder(menuItem.item, countToConsume);
        }]);
        var itemActions = new Map([[saladFork, elementalResistAction($element(diet_templateObject181 || (diet_templateObject181 = src_diet_taggedTemplateLiteral(["hot"]))))], [frostyMug, elementalResistAction($element(diet_templateObject182 || (diet_templateObject182 = src_diet_taggedTemplateLiteral(["cold"]))))], [template_string_$item(diet_templateObject183 || (diet_templateObject183 = src_diet_taggedTemplateLiteral(["pocket wish"]))), (countToConsume, menuItem) => acquire(countToConsume, template_string_$item(diet_templateObject184 || (diet_templateObject184 = src_diet_taggedTemplateLiteral(["pocket wish"]))), 60000) && (0,external_kolmafia_namespaceObject.cliExecute)("genie effect ".concat(menuItem.effect))], [template_string_$item(diet_templateObject185 || (diet_templateObject185 = src_diet_taggedTemplateLiteral(["campfire hot dog"]))), (countToConsume, menuItem) => {
          // mafia does not support retrieveItem on campfire hot dog because it does not work on stick of firewood
          if (!lib_have(template_string_$item(diet_templateObject186 || (diet_templateObject186 = src_diet_taggedTemplateLiteral(["stick of firewood"]))))) {
            (0,external_kolmafia_namespaceObject.buy)(1, template_string_$item(diet_templateObject187 || (diet_templateObject187 = src_diet_taggedTemplateLiteral(["stick of firewood"]))), ingredientCost(template_string_$item(diet_templateObject188 || (diet_templateObject188 = src_diet_taggedTemplateLiteral(["stick of firewood"])))));
          }
          consumeSafe(countToConsume, menuItem.item);
        }], [template_string_$item(_templateObject189 || (_templateObject189 = src_diet_taggedTemplateLiteral(["Special Seasoning"]))), "skip"], [template_string_$item(_templateObject190 || (_templateObject190 = src_diet_taggedTemplateLiteral(["Rethinking Candy"]))), (countToConsume, menuItem) => {
          var _menuItem$effect;
          return synthesize(countToConsume, (_menuItem$effect = menuItem.effect) !== null && _menuItem$effect !== void 0 ? _menuItem$effect : template_string_$effect(_templateObject191 || (_templateObject191 = src_diet_taggedTemplateLiteral(["Synthesis: Greed"]))));
        }]].concat(src_diet_toConsumableArray(mayoActions), src_diet_toConsumableArray(speakeasyDrinks), [[template_string_$item(_templateObject192 || (_templateObject192 = src_diet_taggedTemplateLiteral(["broberry brogurt"]))), (countToConsume, menuItem) => {
          var amountNeeded = countToConsume - (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject193 || (_templateObject193 = src_diet_taggedTemplateLiteral(["broberry brogurt"]))));
          if (amountNeeded > 0) {
            var coinmasterPrice = realmAvailable("sleaze") && (0,external_kolmafia_namespaceObject.sellsItem)($coinmaster(_templateObject194 || (_templateObject194 = src_diet_taggedTemplateLiteral(["The Frozen Brogurt Stand"]))), template_string_$item(_templateObject195 || (_templateObject195 = src_diet_taggedTemplateLiteral(["broberry brogurt"])))) ? 10 * garboValue(template_string_$item(_templateObject196 || (_templateObject196 = src_diet_taggedTemplateLiteral(["Beach Buck"])))) : Infinity;
            var regularPrice = (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject197 || (_templateObject197 = src_diet_taggedTemplateLiteral(["broberry brogurt"]))));
            if (coinmasterPrice < regularPrice) {
              var amountToBuy = Math.min(amountNeeded, Math.floor((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(_templateObject198 || (_templateObject198 = src_diet_taggedTemplateLiteral(["Beach Buck"]))))));
              (0,external_kolmafia_namespaceObject.buy)($coinmaster(_templateObject199 || (_templateObject199 = src_diet_taggedTemplateLiteral(["The Frozen Brogurt Stand"]))), amountToBuy, template_string_$item(_templateObject200 || (_templateObject200 = src_diet_taggedTemplateLiteral(["broberry brogurt"]))));
            }
            (0,external_kolmafia_namespaceObject.buy)(countToConsume - (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject201 || (_templateObject201 = src_diet_taggedTemplateLiteral(["broberry brogurt"])))), template_string_$item(_templateObject202 || (_templateObject202 = src_diet_taggedTemplateLiteral(["broberry brogurt"]))));
          }
          consumeSafe(countToConsume, menuItem.item, menuItem.additionalValue);
        }], [template_string_$item(_templateObject203 || (_templateObject203 = src_diet_taggedTemplateLiteral(["designer sweatpants"]))), countToConsume => {
          for (var n = 1; n <= countToConsume; n++) {
            (0,external_kolmafia_namespaceObject.useSkill)($skill(_templateObject204 || (_templateObject204 = src_diet_taggedTemplateLiteral(["Sweat Out Some Booze"]))));
          }
        }]]));
        var _iterator4 = src_diet_createForOfIteratorHelper(menuItems),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _menuItem2 = _step4.value;
            var itemAction = itemActions.get(_menuItem2.item);
            if (itemAction === "skip") {
              continue;
            } else if (itemAction) {
              itemAction(countToConsume, _menuItem2);
            } else {
              consumeSafe(countToConsume, _menuItem2.item, _menuItem2.additionalValue);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        dietEntry.quantity -= countToConsume;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    currentQuantity = utils_sum(diet.entries, _ref4 => {
      var quantity = _ref4.quantity;
      return quantity;
    });
  }
}
var completedDiet = config_globalOptions.nodiet;
function dietCompleted() {
  return completedDiet;
}
function runDiet() {
  withVIPClan(() => {
    if ((0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(_templateObject205 || (_templateObject205 = src_diet_taggedTemplateLiteral(["Stooper"])))) {
      (0,external_kolmafia_namespaceObject.useFamiliar)($familiar.none);
    }
    MenuItem.defaultPriceFunction = item => {
      var itemRetrievePrice = (0,external_kolmafia_namespaceObject.retrievePrice)(item);
      return itemRetrievePrice > 0 ? itemRetrievePrice : item.tradeable ? (0,external_kolmafia_namespaceObject.mallPrice)(item) : 0;
    };
    var dietBuilder = computeDiet();
    if (config_globalOptions.simdiet) {
      (0,external_kolmafia_namespaceObject.print)("===== SIMULATED DIET =====");
      if (!property_get("_mimeArmyShotglassUsed") && lib_have(template_string_$item(_templateObject206 || (_templateObject206 = src_diet_taggedTemplateLiteral(["mime army shotglass"]))))) {
        printDiet(dietBuilder.shotglass(), "SHOTGLASS");
      }
      printDiet(dietBuilder.diet(), "FULL");
    } else {
      pillCheck();
      nonOrganAdventures();
      if (lib_have(template_string_$item(_templateObject207 || (_templateObject207 = src_diet_taggedTemplateLiteral(["astral six-pack"]))))) {
        (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject208 || (_templateObject208 = src_diet_taggedTemplateLiteral(["astral six-pack"]))));
      }
      if (!property_get("_mimeArmyShotglassUsed") && lib_have(template_string_$item(_templateObject209 || (_templateObject209 = src_diet_taggedTemplateLiteral(["mime army shotglass"]))))) {
        consumeDiet(dietBuilder.shotglass(), "SHOTGLASS");
      }
      if (property_get("barrelShrineUnlocked") && !property_get("_barrelPrayer") && $classes(_templateObject210 || (_templateObject210 = src_diet_taggedTemplateLiteral(["Turtle Tamer, Accordion Thief"]))).includes((0,external_kolmafia_namespaceObject.myClass)())) {
        (0,external_kolmafia_namespaceObject.cliExecute)("barrelprayer buff");
      }
      consumeDiet(dietBuilder.diet(), "FULL");
      shrugBadEffects();
    }
  });
  completedDiet = true;
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/TunnelOfLove.js
var TunnelOfLove_templateObject, TunnelOfLove_templateObject2;
function TunnelOfLove_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





function TunnelOfLove_have() {
  return property_get("loveTunnelAvailable");
}
function isUsed() {
  return property_get("_loveTunnelUsed");
}
function haveLovEnamorang() {
  return lib_have(template_string_$item(TunnelOfLove_templateObject || (TunnelOfLove_templateObject = TunnelOfLove_taggedTemplateLiteral(["LOV Enamorang"]))));
}
function getLovEnamorangUses() {
  return property_get("_enamorangs");
}
function couldUseLoveEnamorang() {
  return !haveWandererCounter(Wanderer.Enamorang) && getLovEnamorangUses() < 3 && haveLovEnamorang();
}
function getLovEnamorangMonster() {
  return property_get("enamorangMonster");
}
var LovEnamorang = new Copier(() => couldUseLoveEnamorang(), null, () => couldUseLoveEnamorang(), () => getLovEnamorangMonster());
function equipmentChoice(equipment) {
  switch (equipment) {
    case "LOV Eardigan":
      return 1;
    case "LOV Epaulettes":
      return 2;
    case "LOV Earring":
      return 3;
  }
}
function effectChoice(effect) {
  switch (effect) {
    case "Lovebotamy":
      return 1;
    case "Open Heart Surgery":
      return 2;
    case "Wandering Eye Surgery":
      return 3;
  }
}
function extraChoice(extra) {
  switch (extra) {
    case "LOV Enamorang":
      return 1;
    case "LOV Emotionizer":
      return 2;
    case "LOV Extraterrestrial Chocolate":
      return 3;
    case "LOV Echinacea Bouquet":
      return 4;
    case "LOV Elephant":
      return 5;
    case "toast":
      return 6;
    case null:
      return 7;
  }
}
/**
 * Fight all LOV monsters and get buffs/equipment.
 * @param equipment Equipment to take from LOV.
 * @param effect Effect to take from LOV.
 * @param extra Extra item to take from LOV.
 */
function fightAll(equipment, effect, extra) {
  _set("choiceAdventure1222", 1); // Entrance
  _set("choiceAdventure1223", 1); // Fight LOV Enforcer
  _set("choiceAdventure1224", equipmentChoice(equipment));
  _set("choiceAdventure1225", 1); // Fight LOV Engineer
  _set("choiceAdventure1226", effectChoice(effect));
  _set("choiceAdventure1227", 1); // Fight LOV Equivocator
  _set("choiceAdventure1228", extraChoice(extra));
  (0,external_kolmafia_namespaceObject.adv1)($location(TunnelOfLove_templateObject2 || (TunnelOfLove_templateObject2 = TunnelOfLove_taggedTemplateLiteral(["The Tunnel of L.O.V.E."]))), 0, "");
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2013/Florist.js
function Florist_toConsumableArray(arr) { return Florist_arrayWithoutHoles(arr) || Florist_iterableToArray(arr) || Florist_unsupportedIterableToArray(arr) || Florist_nonIterableSpread(); }
function Florist_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Florist_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Florist_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Florist_arrayLikeToArray(o, minLen); }
function Florist_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Florist_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Florist_arrayLikeToArray(arr); }
function Florist_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Florist_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Florist_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Florist_toPropertyKey(descriptor.key), descriptor); } }
function Florist_createClass(Constructor, protoProps, staticProps) { if (protoProps) Florist_defineProperties(Constructor.prototype, protoProps); if (staticProps) Florist_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Florist_defineProperty(obj, key, value) { key = Florist_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Florist_toPropertyKey(arg) { var key = Florist_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function Florist_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var Flower = /*#__PURE__*/function () {
  function Flower(name, id, environment, modifier) {
    var territorial = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    Florist_classCallCheck(this, Flower);
    Florist_defineProperty(this, "name", void 0);
    Florist_defineProperty(this, "id", void 0);
    Florist_defineProperty(this, "environment", void 0);
    Florist_defineProperty(this, "modifier", void 0);
    Florist_defineProperty(this, "territorial", void 0);
    this.name = name;
    this.id = id;
    this.environment = environment;
    this.modifier = modifier;
    this.territorial = territorial;
  }
  Florist_createClass(Flower, [{
    key: "isPlantedHere",
    value: function isPlantedHere() {
      var _Flower$plantNamesInZ;
      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_namespaceObject.myLocation)();
      var plantedHere = (_Flower$plantNamesInZ = Flower.plantNamesInZone(location)) === null || _Flower$plantNamesInZ === void 0 ? void 0 : _Flower$plantNamesInZ.includes(this.name);
      return plantedHere !== undefined && plantedHere;
    }
  }, {
    key: "available",
    value: function available() {
      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_namespaceObject.myLocation)();
      return this.environment === location.environment && !property_get("_floristPlantsUsed").includes(this.name) && !this.isPlantedHere(location);
    }
  }, {
    key: "dig",
    value: function dig() {
      if (!this.isPlantedHere()) return false;
      var flowers = Flower.plantNamesInZone();
      if (!flowers[2]) return false;
      var plantNumber = flowers.indexOf(this.name);
      Flower.visit();
      (0,external_kolmafia_namespaceObject.runChoice)(2, "plnti=".concat(plantNumber));
      return !this.isPlantedHere();
    }
  }, {
    key: "plant",
    value: function plant() {
      if (this.isPlantedHere()) return true;
      if (isFull()) return false;
      Flower.visit();
      (0,external_kolmafia_namespaceObject.runChoice)(1, "plant=".concat(this.id));
      return this.isPlantedHere();
    }
  }], [{
    key: "visit",
    value: function visit() {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=forestvillage&action=fv_friar");
    }
  }, {
    key: "plantNamesInZone",
    value: function plantNamesInZone() {
      var _getFloristPlants$loc;
      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_namespaceObject.myLocation)();
      return (_getFloristPlants$loc = (0,external_kolmafia_namespaceObject.getFloristPlants)()[location.toString()]) !== null && _getFloristPlants$loc !== void 0 ? _getFloristPlants$loc : [];
    }
  }, {
    key: "plantsInZone",
    value: function plantsInZone() {
      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_namespaceObject.myLocation)();
      return this.plantNamesInZone(location).map(flowerName => toFlower(flowerName)).filter(flower => flower !== undefined);
    }
  }, {
    key: "modifiersInZone",
    value: function modifiersInZone() {
      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_namespaceObject.myLocation)();
      var plants = this.plantsInZone(location);
      if (!plants) return {};
      var modifiers = plants.map(plant => plant.modifier).map(modifier => typeof modifier === "string" ? {} : modifier);
      return mergeModifiers.apply(void 0, Florist_toConsumableArray(modifiers));
    }
  }]);
  return Flower;
}();
function Florist_have() {
  return (0,external_kolmafia_namespaceObject.floristAvailable)();
}
function toFlower(name) {
  return Florist_all.find(flower => name === flower.name);
}
function flowersIn(location) {
  var returnValue = [];
  Flower.plantNamesInZone(location).map(toFlower).forEach(flower => {
    if (flower) returnValue.push(flower);
  });
  return returnValue;
}
function flowersAvailableFor() {
  var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : myLocation();
  return Florist_all.filter(flower => flower.available(location));
}
function isFull() {
  var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_namespaceObject.myLocation)();
  return flowersIn(location).length === 3;
}
var RabidDogwood = new Flower("Rabid Dogwood", 1, "outdoor", {
  "Monster Level": 30
}, true);
var Rutabeggar = new Flower("Rutabeggar", 2, "outdoor", {
  "Item Drop": 25
}, true);
var RadishRadish = new Flower("Rad-ish Radish", 3, "outdoor", {
  "Moxie Experience": 5
}, true);
var Artichoker = new Flower("Artichoker", 4, "outdoor", "Delevels Enemy");
var SmokeRa = new Flower("Smoke-ra", 5, "outdoor", "Blocks Attacks");
var SkunkCabbage = new Flower("Skunk Cabbage", 6, "outdoor", {
  "Stench Damage": 12.5
});
var DeadlyCinnamon = new Flower("Deadly Cinnamon", 7, "outdoor", {
  "Hot Damage": 12.5
});
var CeleryStalker = new Flower("Celery Stalker", 8, "outdoor", {
  "Spooky Damage": 12.5
});
var LettuceSpray = new Flower("Lettus Spray", 9, "outdoor", {
  "HP Regen Min": 10,
  "HP Regen Max": 29
});
var SeltzerWatercress = new Flower("Seltzer Watercress", 10, "outdoor", {
  "MP Regen Min": 5,
  "MP Regen Max": 15
});
var WarLily = new Flower("War Lily", 11, "indoor", {
  "Monster Level": 30
}, true);
var StealingMagnolia = new Flower("Stealing Magnolia", 12, "indoor", {
  "Item Drop": 25
}, true);
var CannedSpinach = new Flower("Canned Spinach", 13, "indoor", {
  "Muscle Experience": 5
}, true);
var Impatiens = new Flower("Impatiens", 14, "indoor", {
  Initiative: 25
});
var SpiderPlant = new Flower("Spider Plant", 15, "indoor", "Poison");
var RedFern = new Flower("Red Fern", 16, "indoor", "Delevels Enemy");
var BamBoo = new Flower("BamBOO!", 17, "indoor", {
  "Spooky Damage": 12.5
});
var ArcticMoss = new Flower("Arctic Moss", 18, "indoor", {
  "Cold Damage": 12.5
});
var AloeGuvnor = new Flower("Aloe Guv'nor", 19, "indoor", {
  "HP Regen Min": 10,
  "HP Regen Max": 30
});
var PitcherPlant = new Flower("Pitcher Plant", 20, "indoor", {
  "MP Regen Min": 5,
  "MP Regen Max": 15
});
var BlusteryPuffball = new Flower("Blustery Puffball", 21, "underground", {
  "Monster Level": 30
}, true);
var HornOfPlenty = new Flower("Horn of Plenty", 22, "underground", {
  "Item Drop": 25
}, true);
var WizardsWig = new Flower("Wizard's Wig", 23, "underground", {
  "Mysticality Experience": 5
}, true);
var ShuffleTruffle = new Flower("Shuffle Truffle", 24, "underground", {
  Initiative: 25
});
var DisLichen = new Flower("Dis Lichen", 25, "underground", "Delevels Enemy");
var LooseMorels = new Flower("Loose Morels", 26, "underground", {
  "Sleaze Damage": 12.5
});
var FoulToadstool = new Flower("Foul Toadstool", 27, "underground", {
  "Stench Damage": 12.5
});
var Chillterelle = new Flower("Chillterelle", 28, "underground", {
  "Cold Damage": 12.5
});
var Portlybella = new Flower("Portlybella", 29, "underground", {
  "HP Regen Min": 10,
  "HP Regen Max": 30
});
var MaxHeadshroom = new Flower("Max Headshroom", 30, "underground", {
  "MP Regen Min": 5,
  "MP Regen Max": 15
});
var Spankton = new Flower("Spankton", 31, "underwater", "Delevels Enemy", true);
var Kelptomaniac = new Flower("Kelptomaniac", 32, "underwater", {
  "Item Drop": 40
}, true);
var Crookweed = new Flower("Crookweed", 33, "underwater", {
  "Meat Drop": 60
}, true);
var ElectricEelgrass = new Flower("Electric Eelgrass", 34, "underwater", "Blocks Attacks");
var Duckweed = new Flower("Duckweed", 35, "underwater", "Blocks Attacks");
var OrcaOrchid = new Flower("Orca Orchid", 36, "underwater", {
  "Weapon Damage": 12.5
});
var Sargassum = new Flower("Sargassum", 37, "underwater", {
  "Stench Damage": 12.5
});
var SubSeaRose = new Flower("Sub-Sea Rose", 38, "underwater", {
  "Cold Damage": 12.5
});
var Snori = new Flower("Snori", 39, "underwater", {
  "HP Regen Min": 20,
  "HP Regen Max": 30,
  "MP Regen Min": 10,
  "MP Regen Max": 20
});
var UpSeaDaisy = new Flower("Up Sea Daisy", 40, "underwater", {
  Experience: 30
});
var Florist_all = Object.freeze([RabidDogwood, Rutabeggar, RadishRadish, Artichoker, SmokeRa, SkunkCabbage, DeadlyCinnamon, CeleryStalker, LettuceSpray, SeltzerWatercress, WarLily, StealingMagnolia, CannedSpinach, Impatiens, SpiderPlant, RedFern, BamBoo, ArcticMoss, AloeGuvnor, PitcherPlant, BlusteryPuffball, HornOfPlenty, WizardsWig, ShuffleTruffle, DisLichen, LooseMorels, FoulToadstool, Chillterelle, Portlybella, MaxHeadshroom, Spankton, Kelptomaniac, Crookweed, ElectricEelgrass, Duckweed, OrcaOrchid, Sargassum, SubSeaRose, Snori, UpSeaDaisy]);
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/AutumnAton.js
var AutumnAton_templateObject, AutumnAton_templateObject2, AutumnAton_templateObject3, AutumnAton_templateObject4, AutumnAton_templateObject5, AutumnAton_templateObject6, AutumnAton_templateObject7, AutumnAton_templateObject8, AutumnAton_templateObject9;
function AutumnAton_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




var AutumnAton_item = external_kolmafia_namespaceObject.Item.get("autumn-aton");
/**
 * Is the autumn-aton currently in your inventory, available to deploy?
 */
function available() {
  return (0,external_kolmafia_namespaceObject.availableAmount)(AutumnAton_item) > 0;
}
/**
 * Do you own the autumn-aton?
 */
function AutumnAton_have() {
  return get("hasAutumnaton") || available();
}
function checkLocations(html) {
  return (0,external_kolmafia_namespaceObject.xpath)(html, '//select[@name="heythereprogrammer"]//option[position()>1]/text()').map(name => (0,external_kolmafia_namespaceObject.toLocation)(name));
}
var use = () => (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?pwd&whichitem=10954");
/**
 * @returns The current location the autumn-aton is questing in; null if it is not on a quest.
 */
function currentlyIn() {
  return get("autumnatonQuestLocation");
}
/**
 * Deploy the autumn-aton to a location of your choosing.
 * @param target A location to send the autumn-aton to, or a prioritized list of locations to send it to, or a function to pick which location to send it to.
 * @param upgrade Should we apply any upgrades we see available?
 * @returns Where we ended up sending the autumn-aton; null if we didn't send it off.
 */
function sendTo(target) {
  var upgrade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (!available()) return null;
  var pageHtml = use();
  if (upgrade && (0,external_kolmafia_namespaceObject.availableChoiceOptions)()[1]) (0,external_kolmafia_namespaceObject.runChoice)(1);
  var locationsAvailable = checkLocations(pageHtml);
  var location = target instanceof external_kolmafia_namespaceObject.Location ? target : Array.isArray(target) ? target.find(l => locationsAvailable.includes(l)) : target(locationsAvailable);
  if (!location) return null;
  if (!locationsAvailable.includes(location)) return null;
  if (!(0,external_kolmafia_namespaceObject.handlingChoice)()) use();
  (0,external_kolmafia_namespaceObject.runChoice)(2, "heythereprogrammer=".concat(location.id));
  if ((0,external_kolmafia_namespaceObject.handlingChoice)()) (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
  return location;
}
/**
 * Install any available upgrades for the autumn-aton.
 * @returns Whether there were any upgrades to install.
 */
function upgrade() {
  use();
  var canUpgrade = availableChoiceOptions()[1] !== undefined;
  if (canUpgrade) runChoice(1);
  visitUrl("main.php");
  return canUpgrade;
}
/**
 * @returns A list of all locations you can send your autumn-aton to right now. Empty if you are unable to send it anywhere.
 */
function availableLocations() {
  if (!available()) return [];
  var pageHtml = use();
  visitUrl("main.php");
  return checkLocations(pageHtml);
}
/**
 * The mafia names for the autumn-aton upgrades
 */
var possibleUpgrades = ["leftarm1", "leftleg1", "rightarm1", "rightleg1", "base_blackhat", "cowcatcher", "periscope", "radardish", "dualexhaust"];
/**
 * @returns An array containing the upgrades that you currently have on your autumn-aton.
 */
function AutumnAton_currentUpgrades() {
  return property_get("autumnatonUpgrades").split(",");
}
/**
 * @returns The number of turns remaining in your current autumn-aton quest. This number may be negative for any number of reasons.
 */
function turnsLeft() {
  return property_get("autumnatonQuestTurn") - (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
}
function AutumnAton_legs() {
  return AutumnAton_currentUpgrades().filter(u => u.includes("leg")).length;
}
/**
 * @returns The number of turns we expect your next autumn-aton quest to take.
 */
function turnsForQuest() {
  return 11 * Math.max(1, property_get("_autumnatonQuests") - AutumnAton_legs());
}
/**
 * @returns The current visual acuity level of your autumn-aton as determined by the current upgrade-state.
 */
function visualAcuity() {
  var visualUpgrades = ["periscope", "radardish"];
  return 1 + AutumnAton_currentUpgrades().filter(u => visualUpgrades.includes(u)).length;
}
/**
 * @returns The number of items from a zone we expect the autumn-aton to steal based on the current upgrade-state. It may not succeed in stealing every item it can.
 */
function zoneItems() {
  return 3 + AutumnAton_currentUpgrades().filter(u => u.includes("arm")).length;
}
/**
 * @returns The number of seasonal items we expect the autumn-aton to return with given its current upgrade-state.
 */
function seasonalItems() {
  return AutumnAton_currentUpgrades().includes("cowcatcher") ? 2 : 1;
}
var difficulties = ["low", "mid", "high"];
var UNIQUES = {
  outdoor: {
    low: {
      index: 4,
      item: template_string_$item(AutumnAton_templateObject || (AutumnAton_templateObject = AutumnAton_taggedTemplateLiteral(["autumn leaf"])))
    },
    mid: {
      index: 2,
      item: template_string_$item(AutumnAton_templateObject2 || (AutumnAton_templateObject2 = AutumnAton_taggedTemplateLiteral(["autumn debris shield"])))
    },
    high: {
      index: 6,
      item: template_string_$item(AutumnAton_templateObject3 || (AutumnAton_templateObject3 = AutumnAton_taggedTemplateLiteral(["autumn leaf pendant"])))
    }
  },
  indoor: {
    low: {
      index: 0,
      item: template_string_$item(AutumnAton_templateObject4 || (AutumnAton_templateObject4 = AutumnAton_taggedTemplateLiteral(["AutumnFest ale"])))
    },
    mid: {
      index: 3,
      item: template_string_$item(AutumnAton_templateObject5 || (AutumnAton_templateObject5 = AutumnAton_taggedTemplateLiteral(["autumn-spice donut"])))
    },
    high: {
      index: 7,
      item: template_string_$item(AutumnAton_templateObject6 || (AutumnAton_templateObject6 = AutumnAton_taggedTemplateLiteral(["autumn breeze"])))
    }
  },
  underground: {
    low: {
      index: 1,
      item: template_string_$item(AutumnAton_templateObject7 || (AutumnAton_templateObject7 = AutumnAton_taggedTemplateLiteral(["autumn sweater-weather sweater"])))
    },
    mid: {
      index: 5,
      item: template_string_$item(AutumnAton_templateObject8 || (AutumnAton_templateObject8 = AutumnAton_taggedTemplateLiteral(["autumn dollar"])))
    },
    high: {
      index: 8,
      item: template_string_$item(AutumnAton_templateObject9 || (AutumnAton_templateObject9 = AutumnAton_taggedTemplateLiteral(["autumn years wisdom"])))
    }
  }
};
function getUniques(location) {
  var env = location.environment;
  var difficulty = location.difficultyLevel;
  if (arrayContains(env, ["outdoor", "indoor", "underground"]) && arrayContains(difficulty, difficulties)) {
    var _UNIQUES$env$difficul = UNIQUES[env][difficulty],
      index = _UNIQUES$env$difficul.index,
      _item = _UNIQUES$env$difficul.item;
    return {
      upgrade: possibleUpgrades[index],
      item: _item
    };
  }
  return null;
}
;// CONCATENATED MODULE: ./src/post/autumnaton.ts
var autumnaton_templateObject, autumnaton_templateObject2;
function autumnaton_toConsumableArray(arr) { return autumnaton_arrayWithoutHoles(arr) || autumnaton_iterableToArray(arr) || autumnaton_unsupportedIterableToArray(arr) || autumnaton_nonIterableSpread(); }
function autumnaton_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function autumnaton_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return autumnaton_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return autumnaton_arrayLikeToArray(o, minLen); }
function autumnaton_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function autumnaton_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return autumnaton_arrayLikeToArray(arr); }
function autumnaton_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function autumnaton_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






function bestAutumnatonLocation(locations) {
  return lib_maxBy(mostValuableUpgrade(locations), averageAutumnatonValue);
}
function averageAutumnatonValue(location, acuityOverride, slotOverride) {
  var badAttributes = ["LUCKY", "ULTRARARE", "BOSS"];
  var rates = (0,external_kolmafia_namespaceObject.appearanceRates)(location);
  var monsters = Object.keys((0,external_kolmafia_namespaceObject.getLocationMonsters)(location)).map(m => (0,external_kolmafia_namespaceObject.toMonster)(m)).filter(m => !badAttributes.some(s => m.attributes.includes(s)) && rates[m.name] > 0);
  if (monsters.length === 0) {
    return 0;
  } else {
    var maximumDrops = slotOverride !== null && slotOverride !== void 0 ? slotOverride : zoneItems();
    var acuityCutoff = 20 - (acuityOverride !== null && acuityOverride !== void 0 ? acuityOverride : visualAcuity()) * 5;
    var validDrops = monsters.map(m => (0,external_kolmafia_namespaceObject.itemDropsArray)(m)).flat().map(_ref => {
      var rate = _ref.rate,
        type = _ref.type,
        drop = _ref.drop;
      return {
        value: !["c", "0"].includes(type) ? garboValue(drop, true) : 0,
        preAcuityExpectation: ["c", "0", ""].includes(type) ? 2 * rate / 100 : 0,
        postAcuityExpectation: rate >= acuityCutoff && ["c", "0", ""].includes(type) ? 8 * rate / 100 : 0
      };
    });
    var overallExpectedDropQuantity = utils_sum(validDrops, _ref2 => {
      var preAcuityExpectation = _ref2.preAcuityExpectation,
        postAcuityExpectation = _ref2.postAcuityExpectation;
      return preAcuityExpectation + postAcuityExpectation;
    });
    var expectedCollectionValue = utils_sum(validDrops, _ref3 => {
      var value = _ref3.value,
        preAcuityExpectation = _ref3.preAcuityExpectation,
        postAcuityExpectation = _ref3.postAcuityExpectation;
      // This gives us the adjusted amount to fit within our total amount of available drop slots
      var adjustedDropAmount = (preAcuityExpectation + postAcuityExpectation) * Math.min(1, maximumDrops / overallExpectedDropQuantity);
      return adjustedDropAmount * value;
    });
    return seasonalItemValue(location) + expectedCollectionValue;
  }
}
function seasonalItemValue(location, seasonalOverride) {
  var _AutumnAton$getUnique;
  // Find the value of the drops based on zone difficulty/type
  var autumnItems = template_string_$items(autumnaton_templateObject || (autumnaton_templateObject = autumnaton_taggedTemplateLiteral(["autumn leaf, AutumnFest ale, autumn breeze, autumn dollar, autumn years wisdom"])));
  var avgValueOfRandomAutumnItem = garboAverageValue.apply(void 0, autumnaton_toConsumableArray(autumnItems));
  var autumnMeltables = template_string_$items(autumnaton_templateObject2 || (autumnaton_templateObject2 = autumnaton_taggedTemplateLiteral(["autumn debris shield, autumn leaf pendant, autumn sweater-weather sweater"])));
  var autumnItem = (_AutumnAton$getUnique = getUniques(location)) === null || _AutumnAton$getUnique === void 0 ? void 0 : _AutumnAton$getUnique.item;
  var seasonalItemDrops = seasonalOverride !== null && seasonalOverride !== void 0 ? seasonalOverride : seasonalItems();
  if (autumnItem) {
    return (seasonalItemDrops > 1 ? avgValueOfRandomAutumnItem : 0) + (autumnMeltables.includes(autumnItem) ?
    // If we already have the meltable, then we get a random item, else value at 0
    (0,external_kolmafia_namespaceObject.availableAmount)(autumnItem) > 0 ? avgValueOfRandomAutumnItem : 0 : garboValue(autumnItem, true));
  } else {
    // If we're in a location without any uniques, we still get cowcatcher items
    return seasonalItemDrops > 1 ? avgValueOfRandomAutumnItem : 0;
  }
}
function expectedRemainingExpeditions() {
  var legs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : AutumnAton_legs();
  // Better estimate upgrade value if not ascending
  var availableAutumnatonTurns = estimatedGarboTurns() - turnsLeft() + (config_globalOptions.ascend ? 0 : estimatedTurnsTomorrow);
  var quests = property_get("_autumnatonQuests");
  var legOffsetFactor = 11 * Math.max(quests - legs - 1, 0);
  return Math.floor(Math.sqrt(Math.pow(quests, 2) + 2 * (availableAutumnatonTurns - legOffsetFactor) / 11));
}
var profitRelevantUpgrades = ["leftarm1", "leftleg1", "rightarm1", "rightleg1", "cowcatcher", "periscope", "radardish"];
function profitFromExtraAcuity(bestLocationContainingUpgrade, bestLocationWithInstalledUpgrade) {
  return averageAutumnatonValue(bestLocationContainingUpgrade) + averageAutumnatonValue(bestLocationWithInstalledUpgrade) * Math.max(0, expectedRemainingExpeditions() - 1);
}
function profitFromExtraLeg(bestLocationContainingUpgrade, bestLocationWithInstalledUpgrade) {
  return averageAutumnatonValue(bestLocationContainingUpgrade) + averageAutumnatonValue(bestLocationWithInstalledUpgrade) * Math.max(0, expectedRemainingExpeditions(AutumnAton_legs() + 1) - 1);
}
function profitFromExtraArm(bestLocationContainingUpgrade, bestLocationWithInstalledUpgrade) {
  return averageAutumnatonValue(bestLocationContainingUpgrade) + averageAutumnatonValue(bestLocationWithInstalledUpgrade) * Math.max(0, expectedRemainingExpeditions() - 1);
}
function profitFromExtraAutumnItem(bestLocationContainingUpgrade, bestLocationWithInstalledUpgrade) {
  return averageAutumnatonValue(bestLocationContainingUpgrade) + (seasonalItemValue(bestLocationWithInstalledUpgrade) + averageAutumnatonValue(bestLocationWithInstalledUpgrade)) * Math.max(0, expectedRemainingExpeditions() - 1);
}
function makeUpgradeValuator(fullLocations, currentBestLocation) {
  return function (upgrade) {
    var upgradeLocations = fullLocations.filter(location => {
      var _AutumnAton$getUnique2;
      return ((_AutumnAton$getUnique2 = getUniques(location)) === null || _AutumnAton$getUnique2 === void 0 ? void 0 : _AutumnAton$getUnique2.upgrade) === upgrade;
    });
    if (!upgradeLocations.length) {
      return {
        upgrade: upgrade,
        profit: 0
      };
    }
    var bestLocationContainingUpgrade = lib_maxBy(upgradeLocations, averageAutumnatonValue);
    switch (upgrade) {
      case "periscope":
      case "radardish":
        {
          var bestLocationWithInstalledUpgrade = lib_maxBy(fullLocations, loc => averageAutumnatonValue(loc, visualAcuity() + 1));
          return {
            upgrade: upgrade,
            profit: profitFromExtraAcuity(bestLocationContainingUpgrade, bestLocationWithInstalledUpgrade)
          };
        }
      case "rightleg1":
      case "leftleg1":
        {
          return {
            upgrade: upgrade,
            profit: profitFromExtraLeg(bestLocationContainingUpgrade, currentBestLocation)
          };
        }
      case "rightarm1":
      case "leftarm1":
        {
          var _bestLocationWithInstalledUpgrade = lib_maxBy(fullLocations, loc => averageAutumnatonValue(loc, undefined, zoneItems() + 1));
          return {
            upgrade: upgrade,
            profit: profitFromExtraArm(bestLocationContainingUpgrade, _bestLocationWithInstalledUpgrade)
          };
        }
      case "cowcatcher":
        {
          return {
            upgrade: upgrade,
            profit: profitFromExtraAutumnItem(bestLocationContainingUpgrade, currentBestLocation)
          };
        }
      default:
        {
          return {
            upgrade: upgrade,
            profit: 0
          };
        }
    }
  };
}
function mostValuableUpgrade(fullLocations) {
  var validLocations = fullLocations.filter(l => l.parent !== "Clan Basement");
  // This function shouldn't be getting called if we don't have an expedition left
  if (expectedRemainingExpeditions() < 1) {
    return validLocations;
  }
  var currentUpgrades = AutumnAton_currentUpgrades();
  var acquirableUpgrades = profitRelevantUpgrades.filter(upgrade => !currentUpgrades.includes(upgrade));
  if (acquirableUpgrades.length === 0) {
    return validLocations;
  }
  var currentBestLocation = lib_maxBy(validLocations, averageAutumnatonValue);
  var currentExpectedProfit = averageAutumnatonValue(currentBestLocation) * expectedRemainingExpeditions();
  var upgradeValuations = acquirableUpgrades.map(makeUpgradeValuator(validLocations, currentBestLocation));
  var _maxBy = lib_maxBy(upgradeValuations, "profit"),
    highestValueUpgrade = _maxBy.upgrade,
    profitFromBestUpgrade = _maxBy.profit;
  if (profitFromBestUpgrade > currentExpectedProfit) {
    var upgradeLocations = validLocations.filter(location => {
      var _AutumnAton$getUnique3;
      return ((_AutumnAton$getUnique3 = getUniques(location)) === null || _AutumnAton$getUnique3 === void 0 ? void 0 : _AutumnAton$getUnique3.upgrade) === highestValueUpgrade;
    });
    return upgradeLocations;
  } else {
    return validLocations;
  }
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2022/TrainSet.js
var TrainSet_templateObject;
function TrainSet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var TrainSet_item = template_string_$item(TrainSet_templateObject || (TrainSet_templateObject = TrainSet_taggedTemplateLiteral(["model train set"])));
function TrainSet_installed() {
  return (0,external_kolmafia_namespaceObject.getWorkshed)() === TrainSet_item;
}
function TrainSet_have() {
  return TrainSet_installed() || have_(TrainSet_item);
}
var Station;
(function (Station) {
  /**
   * Unknown station
   */
  Station["UNKNOWN"] = "";
  /**
   * Empty station
   */
  Station["EMPTY"] = "empty";
  /**
   * Gain 800 meat
   */
  Station["GAIN_MEAT"] = "meat_mine";
  /**
   * Effect: Regenerate MP
   */
  Station["TOWER_FIZZY"] = "tower_fizzy";
  /**
   * Gain mus, mys, mox stats
   */
  Station["VIEWING_PLATFORM"] = "viewing_platform";
  /**
   * Effect: Hot resist, cold damage
   */
  Station["TOWER_FROZEN"] = "tower_frozen";
  /**
   * Effect: Stench resist, spooky damage
   */
  Station["SPOOKY_GRAVEYARD"] = "spooky_graveyard";
  /**
   * Get smut bridge part, or stats
   */
  Station["LOGGING_MILL"] = "logging_mill";
  /**
   * Get some candy
   */
  Station["CANDY_FACTORY"] = "candy_factory";
  /**
   * Double strength of next station
   */
  Station["COAL_HOPPER"] = "coal_hopper";
  /**
   * Effect: Cold resist, stench damage
   */
  Station["TOWER_SEWAGE"] = "tower_sewage";
  /**
   * Effect: Spooky resist, sleaze damage
   */
  Station["OIL_REFINERY"] = "oil_refinery";
  /**
   * Effect: Sleaze resist, hot damage
   */
  Station["OIL_BRIDGE"] = "oil_bridge";
  /**
   * Effect: Increased Monster Level
   */
  Station["WATER_BRIDGE"] = "water_bridge";
  /**
   * Get moxie stats
   */
  Station["GROIN_SILO"] = "groin_silo";
  /**
   * Get random booze
   */
  Station["GRAIN_SILO"] = "grain_silo";
  /**
   * Get mys stats
   */
  Station["BRAIN_SILO"] = "brain_silo";
  /**
   * Get muscle stats
   */
  Station["BRAWN_SILO"] = "brawn_silo";
  /**
   * Effect: 50% food drop
   */
  Station["PRAWN_SILO"] = "prawn_silo";
  /**
   * Dupe last food dropped, or gain random food
   */
  Station["TRACKSIDE_DINER"] = "trackside_diner";
  /**
   * Drop random ore, or trapper ore if known
   */
  Station["ORE_HOPPER"] = "ore_hopper";
})(Station || (Station = {}));
var trainsetEffects = new Map([[Station.TOWER_FIZZY, external_kolmafia_namespaceObject.Effect.get("Carbonated")], [Station.TOWER_FROZEN, external_kolmafia_namespaceObject.Effect.get("Frozen")], [Station.SPOOKY_GRAVEYARD, external_kolmafia_namespaceObject.Effect.get("Shivering Spine")], [Station.TOWER_SEWAGE, external_kolmafia_namespaceObject.Effect.get("Hot Soupy Garbage")], [Station.OIL_BRIDGE, external_kolmafia_namespaceObject.Effect.get("Burningly Oiled")], [Station.OIL_REFINERY, external_kolmafia_namespaceObject.Effect.get("Spookily Greasy")], [Station.WATER_BRIDGE, external_kolmafia_namespaceObject.Effect.get("Troubled Waters")], [Station.PRAWN_SILO, external_kolmafia_namespaceObject.Effect.get("Craving Prawns")]]);
var trainsetEffectsDoubled = new Map([[Station.TOWER_FIZZY, external_kolmafia_namespaceObject.Effect.get("Double Carbonated")], [Station.TOWER_FROZEN, external_kolmafia_namespaceObject.Effect.get("Double Frozen")], [Station.SPOOKY_GRAVEYARD, external_kolmafia_namespaceObject.Effect.get("Doubly Shivering Spine")], [Station.TOWER_SEWAGE, external_kolmafia_namespaceObject.Effect.get("Double Hot Soupy Garbage")], [Station.OIL_BRIDGE, external_kolmafia_namespaceObject.Effect.get("Doubly Burningly Oiled")], [Station.OIL_REFINERY, external_kolmafia_namespaceObject.Effect.get("Doubly Spookily Greasy")], [Station.WATER_BRIDGE, external_kolmafia_namespaceObject.Effect.get("Doubly Troubled Waters")], [Station.PRAWN_SILO, external_kolmafia_namespaceObject.Effect.get("Doubly Craving Prawns")]]);
function effect(station) {
  var _trainsetEffects$get;
  return (_trainsetEffects$get = trainsetEffects.get(station)) !== null && _trainsetEffects$get !== void 0 ? _trainsetEffects$get : null;
}
function doubledEffect(station) {
  var _trainsetEffectsDoubl;
  return (_trainsetEffectsDoubl = trainsetEffectsDoubled.get(station)) !== null && _trainsetEffectsDoubl !== void 0 ? _trainsetEffectsDoubl : null;
}
function cycle() {
  return property_get("trainsetConfiguration").split(",");
}
function nextConfigurable() {
  return utils_clamp(property_get("lastTrainsetConfiguration") + 40 - property_get("trainsetPosition"), 0, 40);
}
function canConfigure() {
  return TrainSet_installed() && !nextConfigurable();
}
var TrainSet_pieces = [Station.EMPTY, Station.GAIN_MEAT, Station.TOWER_FIZZY, Station.VIEWING_PLATFORM, Station.TOWER_FROZEN, Station.SPOOKY_GRAVEYARD, Station.LOGGING_MILL, Station.CANDY_FACTORY, Station.COAL_HOPPER, Station.TOWER_SEWAGE, Station.UNKNOWN, Station.OIL_REFINERY, Station.OIL_BRIDGE, Station.WATER_BRIDGE, Station.GROIN_SILO, Station.GRAIN_SILO, Station.BRAIN_SILO, Station.BRAWN_SILO, Station.PRAWN_SILO, Station.TRACKSIDE_DINER, Station.ORE_HOPPER];
function stationToInt(station) {
  return TrainSet_pieces.indexOf(station);
}
function setConfiguration(configuration) {
  if (!canConfigure()) return false;
  (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=workshed");
  (0,external_kolmafia_namespaceObject.runChoice)(1, "forceoption=0".concat(configuration.map((station, index) => "&slot[".concat(index, "]=").concat(stationToInt(station))).join("")));
  (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
  var currentConfiguration = cycle();
  return configuration.every((station, index) => station === currentConfiguration[index]);
}
function next() {
  return cycle()[property_get("trainsetPosition") % 8];
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2014/DNALab.js
var DNALab_templateObject, DNALab_templateObject2, DNALab_templateObject3, DNALab_templateObject4, DNALab_templateObject5, DNALab_templateObject6, DNALab_templateObject7, DNALab_templateObject8, DNALab_templateObject9, DNALab_templateObject10, DNALab_templateObject11, DNALab_templateObject12, DNALab_templateObject13, DNALab_templateObject14, DNALab_templateObject15, DNALab_templateObject16, DNALab_templateObject17, DNALab_templateObject18, DNALab_templateObject19, DNALab_templateObject20, DNALab_templateObject21, DNALab_templateObject22, DNALab_templateObject23, DNALab_templateObject24, DNALab_templateObject25, DNALab_templateObject26, DNALab_templateObject27, DNALab_templateObject28, DNALab_templateObject29, DNALab_templateObject30, DNALab_templateObject31, DNALab_templateObject32, DNALab_templateObject33, DNALab_templateObject34, DNALab_templateObject35, DNALab_templateObject36, DNALab_templateObject37, DNALab_templateObject38, DNALab_templateObject39, DNALab_templateObject40, DNALab_templateObject41, DNALab_templateObject42, DNALab_templateObject43, DNALab_templateObject44, DNALab_templateObject45, DNALab_templateObject46, DNALab_templateObject47, DNALab_templateObject48, DNALab_templateObject49, DNALab_templateObject50, DNALab_templateObject51, DNALab_templateObject52, DNALab_templateObject53, DNALab_templateObject54, DNALab_templateObject55, DNALab_templateObject56, DNALab_templateObject57, DNALab_templateObject58, DNALab_templateObject59, DNALab_templateObject60, DNALab_templateObject61, DNALab_templateObject62, DNALab_templateObject63, DNALab_templateObject64, DNALab_templateObject65, DNALab_templateObject66, DNALab_templateObject67, DNALab_templateObject68, DNALab_templateObject69, DNALab_templateObject70, DNALab_templateObject71, DNALab_templateObject72, DNALab_templateObject73, DNALab_templateObject74, DNALab_templateObject75, DNALab_templateObject76, DNALab_templateObject77, DNALab_templateObject78, DNALab_templateObject79, DNALab_templateObject80, DNALab_templateObject81, DNALab_templateObject82, DNALab_templateObject83, DNALab_templateObject84, DNALab_templateObject85;
function DNALab_slicedToArray(arr, i) { return DNALab_arrayWithHoles(arr) || DNALab_iterableToArrayLimit(arr, i) || DNALab_unsupportedIterableToArray(arr, i) || DNALab_nonIterableRest(); }
function DNALab_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function DNALab_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return DNALab_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return DNALab_arrayLikeToArray(o, minLen); }
function DNALab_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function DNALab_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function DNALab_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function DNALab_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }






var lab = template_string_$item(DNALab_templateObject || (DNALab_templateObject = DNALab_taggedTemplateLiteral(["Little Geneticist DNA-Splicing Lab"])));
/**
 * Checks if you have DNA lab in inventory or installed
 */
function DNALab_have() {
  return haveItem(lab) || getWorkshed() === lab;
}
/**
 * Checks if you have DNA lab installed
 */
function DNALab_installed() {
  return (0,external_kolmafia_namespaceObject.getWorkshed)() === lab;
}
var phylaEffects = new Map([[$phylum(DNALab_templateObject2 || (DNALab_templateObject2 = DNALab_taggedTemplateLiteral(["beast"]))), template_string_$effect(DNALab_templateObject3 || (DNALab_templateObject3 = DNALab_taggedTemplateLiteral(["Human-Beast Hybrid"])))], [$phylum(DNALab_templateObject4 || (DNALab_templateObject4 = DNALab_taggedTemplateLiteral(["bug"]))), template_string_$effect(DNALab_templateObject5 || (DNALab_templateObject5 = DNALab_taggedTemplateLiteral(["Human-Insect Hybrid"])))], [$phylum(DNALab_templateObject6 || (DNALab_templateObject6 = DNALab_taggedTemplateLiteral(["constellation"]))), template_string_$effect(DNALab_templateObject7 || (DNALab_templateObject7 = DNALab_taggedTemplateLiteral(["Human-Constellation Hybrid"])))], [$phylum(DNALab_templateObject8 || (DNALab_templateObject8 = DNALab_taggedTemplateLiteral(["construct"]))), template_string_$effect(DNALab_templateObject9 || (DNALab_templateObject9 = DNALab_taggedTemplateLiteral(["Human-Machine Hybrid"])))], [$phylum(DNALab_templateObject10 || (DNALab_templateObject10 = DNALab_taggedTemplateLiteral(["demon"]))), template_string_$effect(DNALab_templateObject11 || (DNALab_templateObject11 = DNALab_taggedTemplateLiteral(["Human-Demon Hybrid"])))], [$phylum(DNALab_templateObject12 || (DNALab_templateObject12 = DNALab_taggedTemplateLiteral(["dude"]))), template_string_$effect(DNALab_templateObject13 || (DNALab_templateObject13 = DNALab_taggedTemplateLiteral(["Human-Human Hybrid"])))], [$phylum(DNALab_templateObject14 || (DNALab_templateObject14 = DNALab_taggedTemplateLiteral(["elemental"]))), template_string_$effect(DNALab_templateObject15 || (DNALab_templateObject15 = DNALab_taggedTemplateLiteral(["Human-Elemental Hybrid"])))], [$phylum(DNALab_templateObject16 || (DNALab_templateObject16 = DNALab_taggedTemplateLiteral(["elf"]))), template_string_$effect(DNALab_templateObject17 || (DNALab_templateObject17 = DNALab_taggedTemplateLiteral(["Human-Elf Hybrid"])))], [$phylum(DNALab_templateObject18 || (DNALab_templateObject18 = DNALab_taggedTemplateLiteral(["fish"]))), template_string_$effect(DNALab_templateObject19 || (DNALab_templateObject19 = DNALab_taggedTemplateLiteral(["Human-Fish Hybrid"])))], [$phylum(DNALab_templateObject20 || (DNALab_templateObject20 = DNALab_taggedTemplateLiteral(["goblin"]))), template_string_$effect(DNALab_templateObject21 || (DNALab_templateObject21 = DNALab_taggedTemplateLiteral(["Human-Goblin Hybrid"])))], [$phylum(DNALab_templateObject22 || (DNALab_templateObject22 = DNALab_taggedTemplateLiteral(["hippy"]))), template_string_$effect(DNALab_templateObject23 || (DNALab_templateObject23 = DNALab_taggedTemplateLiteral(["Human-Hobo Hybrid"])))], [$phylum(DNALab_templateObject24 || (DNALab_templateObject24 = DNALab_taggedTemplateLiteral(["horror"]))), template_string_$effect(DNALab_templateObject25 || (DNALab_templateObject25 = DNALab_taggedTemplateLiteral(["Human-Horror Hybrid"])))], [$phylum(DNALab_templateObject26 || (DNALab_templateObject26 = DNALab_taggedTemplateLiteral(["humanoid"]))), template_string_$effect(DNALab_templateObject27 || (DNALab_templateObject27 = DNALab_taggedTemplateLiteral(["Human-Humanoid Hybrid"])))], [$phylum(DNALab_templateObject28 || (DNALab_templateObject28 = DNALab_taggedTemplateLiteral(["mer-kin"]))), template_string_$effect(DNALab_templateObject29 || (DNALab_templateObject29 = DNALab_taggedTemplateLiteral(["Human-Mer-kin Hybrid"])))], [$phylum(DNALab_templateObject30 || (DNALab_templateObject30 = DNALab_taggedTemplateLiteral(["orc"]))), template_string_$effect(DNALab_templateObject31 || (DNALab_templateObject31 = DNALab_taggedTemplateLiteral(["Human-Orc Hybrid"])))], [$phylum(DNALab_templateObject32 || (DNALab_templateObject32 = DNALab_taggedTemplateLiteral(["penguin"]))), template_string_$effect(DNALab_templateObject33 || (DNALab_templateObject33 = DNALab_taggedTemplateLiteral(["Human-Penguin Hybrid"])))], [$phylum(DNALab_templateObject34 || (DNALab_templateObject34 = DNALab_taggedTemplateLiteral(["pirate"]))), template_string_$effect(DNALab_templateObject35 || (DNALab_templateObject35 = DNALab_taggedTemplateLiteral(["Human-Pirate Hybrid"])))], [$phylum(DNALab_templateObject36 || (DNALab_templateObject36 = DNALab_taggedTemplateLiteral(["plant"]))), template_string_$effect(DNALab_templateObject37 || (DNALab_templateObject37 = DNALab_taggedTemplateLiteral(["Human-Plant Hybrid"])))], [$phylum(DNALab_templateObject38 || (DNALab_templateObject38 = DNALab_taggedTemplateLiteral(["slime"]))), template_string_$effect(DNALab_templateObject39 || (DNALab_templateObject39 = DNALab_taggedTemplateLiteral(["Human-Slime Hybrid"])))], [$phylum(DNALab_templateObject40 || (DNALab_templateObject40 = DNALab_taggedTemplateLiteral(["undead"]))), template_string_$effect(DNALab_templateObject41 || (DNALab_templateObject41 = DNALab_taggedTemplateLiteral(["Human-Undead Hybrid"])))], [$phylum(DNALab_templateObject42 || (DNALab_templateObject42 = DNALab_taggedTemplateLiteral(["weird"]))), template_string_$effect(DNALab_templateObject43 || (DNALab_templateObject43 = DNALab_taggedTemplateLiteral(["Human-Weird Thing Hybrid"])))]]);
var phylaTonics = new Map([[$phylum(DNALab_templateObject44 || (DNALab_templateObject44 = DNALab_taggedTemplateLiteral(["beast"]))), template_string_$item(DNALab_templateObject45 || (DNALab_templateObject45 = DNALab_taggedTemplateLiteral(["Gene Tonic: Beast"])))], [$phylum(DNALab_templateObject46 || (DNALab_templateObject46 = DNALab_taggedTemplateLiteral(["bug"]))), template_string_$item(DNALab_templateObject47 || (DNALab_templateObject47 = DNALab_taggedTemplateLiteral(["Gene Tonic: Insect"])))], [$phylum(DNALab_templateObject48 || (DNALab_templateObject48 = DNALab_taggedTemplateLiteral(["constellation"]))), template_string_$item(DNALab_templateObject49 || (DNALab_templateObject49 = DNALab_taggedTemplateLiteral(["Gene Tonic: Constellation"])))], [$phylum(DNALab_templateObject50 || (DNALab_templateObject50 = DNALab_taggedTemplateLiteral(["construct"]))), template_string_$item(DNALab_templateObject51 || (DNALab_templateObject51 = DNALab_taggedTemplateLiteral(["Gene Tonic: Construct"])))], [$phylum(DNALab_templateObject52 || (DNALab_templateObject52 = DNALab_taggedTemplateLiteral(["demon"]))), template_string_$item(DNALab_templateObject53 || (DNALab_templateObject53 = DNALab_taggedTemplateLiteral(["Gene Tonic: Demon"])))], [$phylum(DNALab_templateObject54 || (DNALab_templateObject54 = DNALab_taggedTemplateLiteral(["dude"]))), template_string_$item(DNALab_templateObject55 || (DNALab_templateObject55 = DNALab_taggedTemplateLiteral(["Gene Tonic: Humanoid"])))], [$phylum(DNALab_templateObject56 || (DNALab_templateObject56 = DNALab_taggedTemplateLiteral(["elemental"]))), template_string_$item(DNALab_templateObject57 || (DNALab_templateObject57 = DNALab_taggedTemplateLiteral(["Gene Tonic: Elemental"])))], [$phylum(DNALab_templateObject58 || (DNALab_templateObject58 = DNALab_taggedTemplateLiteral(["elf"]))), template_string_$item(DNALab_templateObject59 || (DNALab_templateObject59 = DNALab_taggedTemplateLiteral(["Gene Tonic: Elf"])))], [$phylum(DNALab_templateObject60 || (DNALab_templateObject60 = DNALab_taggedTemplateLiteral(["fish"]))), template_string_$item(DNALab_templateObject61 || (DNALab_templateObject61 = DNALab_taggedTemplateLiteral(["Gene Tonic: Fish"])))], [$phylum(DNALab_templateObject62 || (DNALab_templateObject62 = DNALab_taggedTemplateLiteral(["goblin"]))), template_string_$item(DNALab_templateObject63 || (DNALab_templateObject63 = DNALab_taggedTemplateLiteral(["Gene Tonic: Goblin"])))], [$phylum(DNALab_templateObject64 || (DNALab_templateObject64 = DNALab_taggedTemplateLiteral(["hippy"]))), template_string_$item(DNALab_templateObject65 || (DNALab_templateObject65 = DNALab_taggedTemplateLiteral(["Gene Tonic: Hobo"])))], [$phylum(DNALab_templateObject66 || (DNALab_templateObject66 = DNALab_taggedTemplateLiteral(["horror"]))), template_string_$item(DNALab_templateObject67 || (DNALab_templateObject67 = DNALab_taggedTemplateLiteral(["Gene Tonic: Horror"])))], [$phylum(DNALab_templateObject68 || (DNALab_templateObject68 = DNALab_taggedTemplateLiteral(["humanoid"]))), template_string_$item(DNALab_templateObject69 || (DNALab_templateObject69 = DNALab_taggedTemplateLiteral(["Gene Tonic: Humanoid"])))], [$phylum(DNALab_templateObject70 || (DNALab_templateObject70 = DNALab_taggedTemplateLiteral(["mer-kin"]))), template_string_$item(DNALab_templateObject71 || (DNALab_templateObject71 = DNALab_taggedTemplateLiteral(["Gene Tonic: Mer-kin"])))], [$phylum(DNALab_templateObject72 || (DNALab_templateObject72 = DNALab_taggedTemplateLiteral(["orc"]))), template_string_$item(DNALab_templateObject73 || (DNALab_templateObject73 = DNALab_taggedTemplateLiteral(["Gene Tonic: Orc"])))], [$phylum(DNALab_templateObject74 || (DNALab_templateObject74 = DNALab_taggedTemplateLiteral(["penguin"]))), template_string_$item(DNALab_templateObject75 || (DNALab_templateObject75 = DNALab_taggedTemplateLiteral(["Gene Tonic: Penguin"])))], [$phylum(DNALab_templateObject76 || (DNALab_templateObject76 = DNALab_taggedTemplateLiteral(["pirate"]))), template_string_$item(DNALab_templateObject77 || (DNALab_templateObject77 = DNALab_taggedTemplateLiteral(["Gene Tonic: Pirate"])))], [$phylum(DNALab_templateObject78 || (DNALab_templateObject78 = DNALab_taggedTemplateLiteral(["plant"]))), template_string_$item(DNALab_templateObject79 || (DNALab_templateObject79 = DNALab_taggedTemplateLiteral(["Gene Tonic: Plant"])))], [$phylum(DNALab_templateObject80 || (DNALab_templateObject80 = DNALab_taggedTemplateLiteral(["slime"]))), template_string_$item(DNALab_templateObject81 || (DNALab_templateObject81 = DNALab_taggedTemplateLiteral(["Gene Tonic: Slime"])))], [$phylum(DNALab_templateObject82 || (DNALab_templateObject82 = DNALab_taggedTemplateLiteral(["undead"]))), template_string_$item(DNALab_templateObject83 || (DNALab_templateObject83 = DNALab_taggedTemplateLiteral(["Gene Tonic: Undead"])))], [$phylum(DNALab_templateObject84 || (DNALab_templateObject84 = DNALab_taggedTemplateLiteral(["weird"]))), template_string_$item(DNALab_templateObject85 || (DNALab_templateObject85 = DNALab_taggedTemplateLiteral(["Gene Tonic: Weird"])))]]);
var tonicEffects = Array.from(phylaEffects.values());
/**
 * Tells you whether you are currently hybridized. When passed with an input of any sort, tells you whether you are currently hybridized with that effect.
 * @param tonic Optional input. When passed, the function returns whether that specific effect is hybridized.
 */
function isHybridized(tonic) {
  if (!tonic) return DNALab_installed() && get("_dnaHybrid");
  var tonicEffect = tonic instanceof Effect ? tonic : tonic instanceof Phylum ? DNALab_getEffect(tonic) : getModifier("Effect", tonic);
  return tonicEffects.includes(tonicEffect) && haveEffect(tonicEffect) === 2147483647;
}
/**
 * Returns the tonic item associated with a particular phylum.
 * @param phylum The phylum in question.
 * @returns The tonic item associated with that phylum; returns $item.none for $phylum.none.
 */
function getTonic(phylum) {
  var _phylaTonics$get;
  return (_phylaTonics$get = phylaTonics.get(phylum)) !== null && _phylaTonics$get !== void 0 ? _phylaTonics$get : template_string_$item.none;
  //return $item.none rather than null because it should never happen.
}
/**
 * Returns the tonic effect associated with a particular phylum.
 * @param phylum The phylum in question.
 * @returns The tonic effect associated with that phylum; returns $effect.none for $phylum.none.
 */
function DNALab_getEffect(phylum) {
  var _phylaEffects$get;
  return (_phylaEffects$get = phylaEffects.get(phylum)) !== null && _phylaEffects$get !== void 0 ? _phylaEffects$get : $effect.none;
  //return $effect.none rather than null because it should never happen
}
/**
 * Tells you which phylum to hunt down for a given effect or item.
 * @param dnatype The tonic effect or item in question
 * @returns The Phylum associated with that effect or item; null if an invalid choice
 */
function phylumFor(dnatype) {
  if (dnatype instanceof Effect) {
    var phylumPair = Array.from(phylaEffects.entries()).find(_ref => {
      var _ref2 = DNALab_slicedToArray(_ref, 2),
        effect = _ref2[1];
      return effect === dnatype;
    });
    return phylumPair ? phylumPair[0] : null;
  } else {
    var _phylumPair = Array.from(phylaTonics.entries()).find(_ref3 => {
      var _ref4 = DNALab_slicedToArray(_ref3, 2),
        tonic = _ref4[1];
      return tonic === dnatype;
    });
    return _phylumPair ? _phylumPair[0] : null;
  }
}
/**
 * Hybridize yourself with the current contents of your syringe, if possible.
 * @returns Whether or not we succeeded
 */
function hybridize() {
  if (get("_dnaHybrid")) return false;
  if (!DNALab_installed()) return false;
  var currentSyringe = get("dnaSyringe");
  if (!currentSyringe) return false;
  var tonicPotion = getTonic(currentSyringe);
  var expectedEffect = getModifier("Effect", tonicPotion);
  cliExecute("camp dnainject");
  return isHybridized(expectedEffect);
}
/**
 * Makes tonics with whatever phylum is currently in your syringe
 * @param {number} [amount=1] the number of tonics to make
 * @returns Whether we successfully made tonics; returns true if we made as many as we could, regardless of whether that was the number requested
 */
function makeTonic() {
  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  if (!DNALab_installed()) return false;
  var currentSyringe = property_get("dnaSyringe");
  if (!currentSyringe) return false;
  var tonicPotion = getTonic(currentSyringe);
  var amountToMake = utils_clamp(amount, 0, tonicsLeft());
  var startingAmount = (0,external_kolmafia_namespaceObject.itemAmount)(tonicPotion);
  (0,external_kolmafia_namespaceObject.cliExecute)("camp dnapotion ".concat(amountToMake));
  return (0,external_kolmafia_namespaceObject.itemAmount)(tonicPotion) - startingAmount === amountToMake;
}
/**
 * Tells you how many tonics you can make the rest of the day.
 * @returns The remaining tonics you can make
 */
function tonicsLeft() {
  return utils_clamp(3 - property_get("_dnaPotionsMade"), 0, 3);
}
;// CONCATENATED MODULE: ./src/post/workshed_utils.ts
var workshed_utils_templateObject, workshed_utils_templateObject2, workshed_utils_templateObject3, workshed_utils_templateObject4;
function workshed_utils_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function workshed_utils_toConsumableArray(arr) { return workshed_utils_arrayWithoutHoles(arr) || workshed_utils_iterableToArray(arr) || workshed_utils_unsupportedIterableToArray(arr) || workshed_utils_nonIterableSpread(); }
function workshed_utils_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function workshed_utils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return workshed_utils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return workshed_utils_arrayLikeToArray(o, minLen); }
function workshed_utils_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function workshed_utils_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return workshed_utils_arrayLikeToArray(arr); }
function workshed_utils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }





function candyFactoryValue() {
  var lastCalculated = property_get("garbo_candyFactoryValueDate", 0);
  if (!property_get("garbo_candyFactoryValue", 0) || today - lastCalculated > 7 * 24 * 60 * 60 * 1000) {
    var candyFactoryDrops = JSON.parse((0,external_kolmafia_namespaceObject.fileToBuffer)("garbo_item_lists.json"))["trainset"];
    var averageDropValue = utils_sum(candyFactoryDrops, name => garboValue((0,external_kolmafia_namespaceObject.toItem)(name), true)) / candyFactoryDrops.length;
    _set("garbo_candyFactoryValue", averageDropValue);
    _set("garbo_candyFactoryValueDate", today);
  }
  return property_get("garbo_candyFactoryValue", 0);
}
var GOOD_TRAIN_STATIONS = [{
  piece: Station.GAIN_MEAT,
  value: () => 900
}, {
  // Some day this'll be better
  piece: Station.TRACKSIDE_DINER,
  value: () => garboAverageValue.apply(void 0, workshed_utils_toConsumableArray(template_string_$items(workshed_utils_templateObject || (workshed_utils_templateObject = workshed_utils_taggedTemplateLiteral(["bowl of cottage cheese, hot buttered roll, toast"])))))
}, {
  piece: Station.CANDY_FACTORY,
  value: candyFactoryValue
}, {
  piece: Station.GRAIN_SILO,
  value: () => 2 * garboAverageValue.apply(void 0, workshed_utils_toConsumableArray(template_string_$items(workshed_utils_templateObject2 || (workshed_utils_templateObject2 = workshed_utils_taggedTemplateLiteral(["bottle of gin, bottle of vodka, bottle of whiskey, bottle of rum, bottle of tequila, boxed wine"])))))
}, {
  piece: Station.ORE_HOPPER,
  value: () => garboAverageValue.apply(void 0, workshed_utils_toConsumableArray(template_string_$items(workshed_utils_templateObject3 || (workshed_utils_templateObject3 = workshed_utils_taggedTemplateLiteral(["linoleum ore, asbestos ore, chrome ore, teflon ore, vinyl ore, velcro ore, bubblewrap ore, cardboard ore, styrofoam ore"])))))
}];
var trainCycle;
function getBestCycle() {
  if (!trainCycle) {
    var cycle = [Station.COAL_HOPPER].concat(workshed_utils_toConsumableArray(GOOD_TRAIN_STATIONS.sort((_ref, _ref2) => {
      var a = _ref.value;
      var b = _ref2.value;
      return b() - a();
    }).map(_ref3 => {
      var piece = _ref3.piece;
      return piece;
    })), [Station.TOWER_FIZZY, Station.VIEWING_PLATFORM]);
    trainCycle = cycle;
  }
  return workshed_utils_toConsumableArray(trainCycle);
}
function valueStation(station) {
  var _GOOD_TRAIN_STATIONS$, _GOOD_TRAIN_STATIONS$2;
  if (station === Station.COAL_HOPPER) {
    return valueStation(getBestCycle()[1]);
  }
  return (_GOOD_TRAIN_STATIONS$ = (_GOOD_TRAIN_STATIONS$2 = GOOD_TRAIN_STATIONS.find(_ref4 => {
    var piece = _ref4.piece;
    return piece === station;
  })) === null || _GOOD_TRAIN_STATIONS$2 === void 0 ? void 0 : _GOOD_TRAIN_STATIONS$2.value()) !== null && _GOOD_TRAIN_STATIONS$ !== void 0 ? _GOOD_TRAIN_STATIONS$ : 0;
}
function valueOffset(offset) {
  var firstFortyTurns = 5 * utils_sum(getBestCycle(), valueStation);
  var extraTurns = utils_sum(getBestCycle().slice(0, offset - 1), valueStation);
  return (firstFortyTurns + extraTurns) / (40 + offset);
}
var bestOffset = null;
function getBestOffset() {
  var _bestOffset;
  return (_bestOffset = bestOffset) !== null && _bestOffset !== void 0 ? _bestOffset : bestOffset = lib_maxBy([2, 3, 4, 5, 6, 7, 8], valueOffset);
}
function getPrioritizedStations() {
  return getBestCycle().slice(0, getBestOffset() - 1);
}
function getRotatedCycle() {
  var offset = property_get("trainsetPosition") % 8;
  var newPieces = [];
  var defaultPieces = getBestCycle();
  for (var i = 0; i < 8; i++) {
    var newPos = (i + offset) % 8;
    newPieces[newPos] = defaultPieces[i];
  }
  return newPieces;
}
function rotateToOptimalCycle() {
  return setConfiguration(getRotatedCycle());
}
function grabMedicine() {
  var options = (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=workshed");
  var i = 0;
  var match;
  var regexp = /descitem\((\d+)\)/g;
  var itemChoices = new Map();
  if (!config_globalOptions.nobarf) {
    // if spending turns at barf, we probably will be able to get an extro so always consider it
    itemChoices.set(template_string_$item(workshed_utils_templateObject4 || (workshed_utils_templateObject4 = workshed_utils_taggedTemplateLiteral(["Extrovermectin\u2122"]))), -1);
  }
  while ((match = regexp.exec(options)) !== null) {
    i++;
    var item = (0,external_kolmafia_namespaceObject.descToItem)(match[1]);
    itemChoices.set(item, i);
  }
  var bestItem = lib_maxBy(workshed_utils_toConsumableArray(itemChoices.keys()), garboValue);
  var bestChoice = itemChoices.get(bestItem);
  if (bestChoice && bestChoice > 0) {
    (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=workshed");
    (0,external_kolmafia_namespaceObject.runChoice)(bestChoice);
  }
  if ((0,external_kolmafia_namespaceObject.handlingChoice)()) (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
}
;// CONCATENATED MODULE: ./src/post/workshed.ts
var workshed_templateObject, workshed_templateObject2, workshed_templateObject3, workshed_templateObject4, workshed_templateObject5, workshed_templateObject6, workshed_templateObject7, workshed_templateObject8, workshed_templateObject9, workshed_templateObject10;
function workshed_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function workshed_toConsumableArray(arr) { return workshed_arrayWithoutHoles(arr) || workshed_iterableToArray(arr) || workshed_unsupportedIterableToArray(arr) || workshed_nonIterableSpread(); }
function workshed_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function workshed_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return workshed_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return workshed_arrayLikeToArray(o, minLen); }
function workshed_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function workshed_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return workshed_arrayLikeToArray(arr); }
function workshed_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function workshed_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function workshed_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, workshed_toPropertyKey(descriptor.key), descriptor); } }
function workshed_createClass(Constructor, protoProps, staticProps) { if (protoProps) workshed_defineProperties(Constructor.prototype, protoProps); if (staticProps) workshed_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function workshed_defineProperty(obj, key, value) { key = workshed_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function workshed_toPropertyKey(arg) { var key = workshed_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function workshed_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }








var GarboWorkshed = /*#__PURE__*/function () {
  function GarboWorkshed(options) {
    var _options$minTurns;
    workshed_classCallCheck(this, GarboWorkshed);
    workshed_defineProperty(this, "workshed", void 0);
    workshed_defineProperty(this, "done", void 0);
    workshed_defineProperty(this, "action", void 0);
    workshed_defineProperty(this, "minTurns", void 0);
    this.workshed = options.workshed;
    if (options.done) this.done = options.done;
    if (options.action) this.action = options.action;
    this.minTurns = (_options$minTurns = options.minTurns) !== null && _options$minTurns !== void 0 ? _options$minTurns : 0;
  }
  workshed_createClass(GarboWorkshed, [{
    key: "canRemove",
    value: function canRemove() {
      var _this$done, _this$done2, _GarboWorkshed$next$m, _GarboWorkshed$next;
      return ((_this$done = (_this$done2 = this.done) === null || _this$done2 === void 0 ? void 0 : _this$done2.call(this)) !== null && _this$done !== void 0 ? _this$done : true) || estimatedGarboTurns() <= ((_GarboWorkshed$next$m = (_GarboWorkshed$next = GarboWorkshed.next) === null || _GarboWorkshed$next === void 0 ? void 0 : _GarboWorkshed$next.minTurns) !== null && _GarboWorkshed$next$m !== void 0 ? _GarboWorkshed$next$m : 0);
    }
  }, {
    key: "use",
    value: function use() {
      var _this$done3, _this$action;
      if (!((_this$done3 = this.done) !== null && _this$done3 !== void 0 && _this$done3.call(this))) (_this$action = this.action) === null || _this$action === void 0 ? void 0 : _this$action.call(this);
    }
  }], [{
    key: "get",
    value: function get(item) {
      var _worksheds$find;
      return (_worksheds$find = worksheds.find(_ref => {
        var workshed = _ref.workshed;
        return workshed === item;
      })) !== null && _worksheds$find !== void 0 ? _worksheds$find : null;
    }
  }, {
    key: "current",
    get: function get() {
      var _GarboWorkshed$_curre;
      (_GarboWorkshed$_curre = GarboWorkshed._currentWorkshed) !== null && _GarboWorkshed$_curre !== void 0 ? _GarboWorkshed$_curre : GarboWorkshed._currentWorkshed = GarboWorkshed.get((0,external_kolmafia_namespaceObject.getWorkshed)());
      return GarboWorkshed._currentWorkshed;
    }
  }, {
    key: "next",
    get: function get() {
      var _GarboWorkshed$_nextW;
      if (property_get("_workshedItemUsed")) return null;
      (_GarboWorkshed$_nextW = GarboWorkshed._nextWorkshed) !== null && _GarboWorkshed$_nextW !== void 0 ? _GarboWorkshed$_nextW : GarboWorkshed._nextWorkshed = GarboWorkshed.get(config_globalOptions.workshed);
      return GarboWorkshed._nextWorkshed;
    }
  }, {
    key: "useNext",
    value: function useNext() {
      if (property_get("_workshedItemUsed")) return null;
      var next = GarboWorkshed.next;
      if (next && lib_have(next.workshed)) {
        (0,external_kolmafia_namespaceObject.use)(next.workshed);
        if (GarboWorkshed.get((0,external_kolmafia_namespaceObject.getWorkshed)()) === next) {
          GarboWorkshed._nextWorkshed = null;
          GarboWorkshed._currentWorkshed = next;
        }
      }
      return GarboWorkshed._currentWorkshed;
    }
  }]);
  return GarboWorkshed;
}();
workshed_defineProperty(GarboWorkshed, "_nextWorkshed", null);
workshed_defineProperty(GarboWorkshed, "_currentWorkshed", null);
var _attemptedMakingTonics = false;
var worksheds = [new GarboWorkshed({
  workshed: template_string_$item(workshed_templateObject || (workshed_templateObject = workshed_taggedTemplateLiteral(["model train set"]))),
  done: () => {
    // We should always get value from the trainset, so we would never switch from it
    return false;
  },
  action: () => {
    if (!canConfigure()) return;
    if (!property_get("trainsetConfiguration")) {
      // Visit the workshed to make sure it's actually empty, instead of us having not yet seen it this run
      (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=workshed");
      (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
    }
    if (!property_get("trainsetConfiguration")) {
      (0,external_kolmafia_namespaceObject.print)("Reconfiguring trainset, as it is empty", HIGHLIGHT);
      return rotateToOptimalCycle();
    } else if (config_globalOptions.ascend && estimatedGarboTurns() <= 40) {
      (0,external_kolmafia_namespaceObject.print)("Refusing to reconfigure trainset, to save a reconfiguration for your upcoming ascension.", HIGHLIGHT);
      return;
    } else {
      var bestStations = getPrioritizedStations();
      if (bestStations.includes(next())) return;
      (0,external_kolmafia_namespaceObject.print)("Reconfiguring trainset, as our next station is ".concat(next()), HIGHLIGHT);
      return rotateToOptimalCycle();
    }
  }
}), new GarboWorkshed({
  workshed: template_string_$item(workshed_templateObject2 || (workshed_templateObject2 = workshed_taggedTemplateLiteral(["cold medicine cabinet"]))),
  done: () => property_get("_coldMedicineConsults") >= 5,
  action: () => {
    if (property_get("_nextColdMedicineConsult") > (0,external_kolmafia_namespaceObject.totalTurnsPlayed)()) return;
    grabMedicine();
  },
  minTurns: 80
}), new GarboWorkshed({
  workshed: template_string_$item(workshed_templateObject3 || (workshed_templateObject3 = workshed_taggedTemplateLiteral(["Asdon Martin keyfob"]))),
  done: () => {
    return (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(workshed_templateObject4 || (workshed_templateObject4 = workshed_taggedTemplateLiteral(["Driving Observantly"])))) >= estimatedGarboTurns() + (config_globalOptions.ascend ? 0 : estimatedTurnsTomorrow);
  },
  action: () => {
    drive(template_string_$effect(workshed_templateObject5 || (workshed_templateObject5 = workshed_taggedTemplateLiteral(["Driving Observantly"]))), estimatedGarboTurns() + (config_globalOptions.ascend ? 0 : estimatedTurnsTomorrow));
  }
}), new GarboWorkshed({
  workshed: template_string_$item(workshed_templateObject6 || (workshed_templateObject6 = workshed_taggedTemplateLiteral(["Little Geneticist DNA-Splicing Lab"]))),
  done: () => {
    // This will likely always return true or false for now, depending on the start state of garbo
    // Since we don't actually support using the syringe in combat at this time, the counter will never change
    return _attemptedMakingTonics || property_get("_dnaPotionsMade") >= 3;
  },
  action: () => {
    // Just grab whatever tonics for now, since we don't actually have support for DNA
    if (property_get("dnaSyringe")) makeTonic(3);
    _attemptedMakingTonics = true;
  }
}), new GarboWorkshed({
  workshed: template_string_$item(workshed_templateObject7 || (workshed_templateObject7 = workshed_taggedTemplateLiteral(["spinning wheel"]))),
  done: () => property_get("_spinningWheel"),
  action: () => {
    // We simply assume you will not gain a level while garboing, since we do not do powerlevellings
    // So we will just use the spinning wheel immediately
    (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=spinningwheel");
  }
})].concat(workshed_toConsumableArray(template_string_$items(workshed_templateObject8 || (workshed_templateObject8 = workshed_taggedTemplateLiteral(["diabolic pizza cube, portable Mayo Clinic, warbear high-efficiency still, warbear induction oven"]))).map(item => new GarboWorkshed({
  workshed: item,
  done: dietCompleted
}))), workshed_toConsumableArray(template_string_$items(workshed_templateObject9 || (workshed_templateObject9 = workshed_taggedTemplateLiteral(["warbear chemistry lab, warbear LP-ROM burner"]))).map(item => new GarboWorkshed({
  workshed: item,
  done: potionSetupCompleted
}))), workshed_toConsumableArray(template_string_$items(workshed_templateObject10 || (workshed_templateObject10 = workshed_taggedTemplateLiteral(["snow machine, warbear jackhammer drill press, warbear auto-anvil"]))).map(item => new GarboWorkshed({
  workshed: item
}))));
function handleWorkshed() {
  var _GarboWorkshed$curren, _GarboWorkshed$curren2, _GarboWorkshed$curren3;
  (_GarboWorkshed$curren = GarboWorkshed.current) === null || _GarboWorkshed$curren === void 0 ? void 0 : _GarboWorkshed$curren.use();
  if (!property_get("_workshedItemUsed") && ((_GarboWorkshed$curren2 = (_GarboWorkshed$curren3 = GarboWorkshed.current) === null || _GarboWorkshed$curren3 === void 0 ? void 0 : _GarboWorkshed$curren3.canRemove()) !== null && _GarboWorkshed$curren2 !== void 0 ? _GarboWorkshed$curren2 : true) && GarboWorkshed.next && lib_have(GarboWorkshed.next.workshed)) {
    var _GarboWorkshed$curren4;
    GarboWorkshed.useNext();
    (_GarboWorkshed$curren4 = GarboWorkshed.current) === null || _GarboWorkshed$curren4 === void 0 ? void 0 : _GarboWorkshed$curren4.use();
  }
}
;// CONCATENATED MODULE: ./src/post/index.ts
var post_templateObject, post_templateObject2, post_templateObject3, post_templateObject4, post_templateObject5, post_templateObject6, post_templateObject7, post_templateObject8, post_templateObject9, post_templateObject10, post_templateObject11, post_templateObject12, post_templateObject13, post_templateObject14, post_templateObject15, post_templateObject16, post_templateObject17;
function post_toConsumableArray(arr) { return post_arrayWithoutHoles(arr) || post_iterableToArray(arr) || post_unsupportedIterableToArray(arr) || post_nonIterableSpread(); }
function post_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function post_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function post_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return post_arrayLikeToArray(arr); }
function post_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function post_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = post_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function post_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return post_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return post_arrayLikeToArray(o, minLen); }
function post_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }












function closetStuff() {
  var _iterator = post_createForOfIteratorHelper(template_string_$items(post_templateObject || (post_templateObject = post_taggedTemplateLiteral(["bowling ball, funky junk key"])))),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var i = _step.value;
      (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(i), i);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function floristFriars() {
  if (!Florist_have() || (0,external_kolmafia_namespaceObject.myLocation)() !== $location(post_templateObject2 || (post_templateObject2 = post_taggedTemplateLiteral(["Barf Mountain"]))) || isFull()) {
    return;
  }
  [StealingMagnolia, AloeGuvnor, PitcherPlant].forEach(flower => flower.plant());
}
function fillPantsgivingFullness() {
  if (getRemainingStomach() > 0 && (!config_globalOptions.prefs.yachtzeechain || property_get("_garboYachtzeeChainCompleted", false))) {
    consumeDiet(computeDiet().pantsgiving(), "PANTSGIVING");
  }
}
function fillSweatyLiver() {
  if (config_globalOptions.prefs.yachtzeechain && !property_get("_garboYachtzeeChainCompleted", false)) return;
  var castsWanted = 3 - property_get("_sweatOutSomeBoozeUsed");
  if (castsWanted <= 0 || !lib_have(template_string_$item(post_templateObject3 || (post_templateObject3 = post_taggedTemplateLiteral(["designer sweatpants"]))))) return;
  var sweatNeeded = 25 * castsWanted;
  if (property_get("sweat") >= sweatNeeded) {
    while (property_get("_sweatOutSomeBoozeUsed") < 3) {
      (0,external_kolmafia_namespaceObject.useSkill)($skill(post_templateObject4 || (post_templateObject4 = post_taggedTemplateLiteral(["Sweat Out Some Booze"]))));
    }
    consumeDiet(computeDiet().sweatpants(), "SWEATPANTS");
  }
}
function numberology() {
  if ((0,external_kolmafia_namespaceObject.myAdventures)() > 0 && Object.keys((0,external_kolmafia_namespaceObject.reverseNumberology)()).includes("69") && property_get("_universeCalculated") < property_get("skillLevel144")) {
    (0,external_kolmafia_namespaceObject.cliExecute)("numberology 69");
  }
}
function updateMallPrices() {
  sessionSinceStart().value(garboValue);
}
var juneCleaverSkipChoices;
function skipJuneCleaverChoices() {
  if (!juneCleaverSkipChoices) {
    juneCleaverSkipChoices = post_toConsumableArray(choices).sort((a, b) => valueJuneCleaverOption(juneCleaverChoiceValues[a][bestJuneCleaverOption(a)]) - valueJuneCleaverOption(juneCleaverChoiceValues[b][bestJuneCleaverOption(b)])).splice(0, 3);
  }
  if (skipsRemaining() > 0) {
    var _iterator2 = post_createForOfIteratorHelper(juneCleaverSkipChoices),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var choice = _step2.value;
        setChoice(choice, 4);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  } else {
    var _iterator3 = post_createForOfIteratorHelper(juneCleaverSkipChoices),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _choice = _step3.value;
        setChoice(_choice, bestJuneCleaverOption(_choice));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }
}
function juneCleave() {
  if (property_get("_juneCleaverFightsLeft") <= 0 && teleportEffects.every(e => !lib_have(e))) {
    (0,external_kolmafia_namespaceObject.equip)($slot(post_templateObject5 || (post_templateObject5 = post_taggedTemplateLiteral(["weapon"]))), template_string_$item(post_templateObject6 || (post_templateObject6 = post_taggedTemplateLiteral(["June cleaver"]))));
    skipJuneCleaverChoices();
    withProperty("recoveryScript", "", () => {
      garboAdventure($location(post_templateObject7 || (post_templateObject7 = post_taggedTemplateLiteral(["Noob Cave"]))), combat_Macro.abort());
      if (["Poetic Justice", "Lost and Found"].includes(property_get("lastEncounter"))) {
        lib_uneffect(template_string_$effect(post_templateObject8 || (post_templateObject8 = post_taggedTemplateLiteral(["Beaten Up"]))));
      }
    });
  }
}
function stillsuit() {
  if ((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(post_templateObject9 || (post_templateObject9 = post_taggedTemplateLiteral(["tiny stillsuit"]))))) {
    var familiarTarget = $familiar(post_templateObject10 || (post_templateObject10 = post_taggedTemplateLiteral(["Blood-Faced Volleyball"])));
    if (lib_have(familiarTarget)) (0,external_kolmafia_namespaceObject.equip)(familiarTarget, template_string_$item(post_templateObject11 || (post_templateObject11 = post_taggedTemplateLiteral(["tiny stillsuit"]))));
  }
}
var funguyWorthIt = true;
function funguySpores() {
  // Mush-Mouth will drop an expensive mushroom if you do a combat with one turn of it left
  if ((0,external_kolmafia_namespaceObject.myLevel)() >= 15 &&
  // It applies -100 to all stats, and Level 15 seems to be a reasonable place where you will survive -100 to all stats
  !lib_have(template_string_$effect(post_templateObject12 || (post_templateObject12 = post_taggedTemplateLiteral(["Mush-Mouth"])))) && (!config_globalOptions.ascend || (0,external_kolmafia_namespaceObject.myAdventures)() > 11) && property_get("dinseyRollercoasterNext") &&
  // If it were to expire on a rails adventure, you'd waste the cost of the spore. Using it when next turn is rails is easiest way to make sure it won't
  funguyWorthIt) {
    // According to wiki, it has a 75% chance of being a stat mushroom and 25% chance of being another mushroom
    var value = 0.75 * garboAverageValue.apply(void 0, post_toConsumableArray(template_string_$items(post_templateObject13 || (post_templateObject13 = post_taggedTemplateLiteral(["Boletus Broletus mushroom, Omphalotus Omphaloskepsis mushroom, Gyromitra Dynomita mushroom"]))))) + 0.25 * garboAverageValue.apply(void 0, post_toConsumableArray(template_string_$items(post_templateObject14 || (post_templateObject14 = post_taggedTemplateLiteral(["Helvella Haemophilia mushroom, Stemonitis Staticus mushroom, Tremella Tarantella mushroom"])))));
    if ((0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(post_templateObject15 || (post_templateObject15 = post_taggedTemplateLiteral(["Fun-Guy spore"])))) < value && acquire(1, template_string_$item(post_templateObject16 || (post_templateObject16 = post_taggedTemplateLiteral(["Fun-Guy spore"]))), value, false) > 0) {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(post_templateObject17 || (post_templateObject17 = post_taggedTemplateLiteral(["Fun-Guy spore"]))));
    } else funguyWorthIt = false;
  }
}
function postCombatActions() {
  var skipDiet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  closetStuff();
  juneCleave();
  numberology();
  if (!skipDiet && !config_globalOptions.nodiet) {
    fillPantsgivingFullness();
    fillSweatyLiver();
  }
  floristFriars();
  handleWorkshed();
  safeInterrupt();
  safeRestore();
  updateMallPrices();
  stillsuit();
  funguySpores();
  if (config_globalOptions.ascend || turnsForQuest() < estimatedGarboTurns() + remainingUserTurns()) {
    sendTo(bestAutumnatonLocation);
  }
}
;// CONCATENATED MODULE: ./src/fights.ts
var fights_templateObject, fights_templateObject2, fights_templateObject3, fights_templateObject4, fights_templateObject5, fights_templateObject6, fights_templateObject7, fights_templateObject8, fights_templateObject9, fights_templateObject10, fights_templateObject11, fights_templateObject12, fights_templateObject13, fights_templateObject14, fights_templateObject15, fights_templateObject16, fights_templateObject17, fights_templateObject18, fights_templateObject19, fights_templateObject20, fights_templateObject21, fights_templateObject22, fights_templateObject23, fights_templateObject24, fights_templateObject25, fights_templateObject26, fights_templateObject27, fights_templateObject28, fights_templateObject29, fights_templateObject30, fights_templateObject31, fights_templateObject32, fights_templateObject33, fights_templateObject34, fights_templateObject35, fights_templateObject36, fights_templateObject37, fights_templateObject38, fights_templateObject39, fights_templateObject40, fights_templateObject41, fights_templateObject42, fights_templateObject43, fights_templateObject44, fights_templateObject45, fights_templateObject46, fights_templateObject47, fights_templateObject48, fights_templateObject49, fights_templateObject50, fights_templateObject51, fights_templateObject52, fights_templateObject53, fights_templateObject54, fights_templateObject55, fights_templateObject56, fights_templateObject57, fights_templateObject58, fights_templateObject59, fights_templateObject60, fights_templateObject61, fights_templateObject62, fights_templateObject63, fights_templateObject64, fights_templateObject65, fights_templateObject66, fights_templateObject67, fights_templateObject68, fights_templateObject69, fights_templateObject70, fights_templateObject71, fights_templateObject72, fights_templateObject73, fights_templateObject74, fights_templateObject75, fights_templateObject76, fights_templateObject77, fights_templateObject78, fights_templateObject79, fights_templateObject80, fights_templateObject81, fights_templateObject82, fights_templateObject83, fights_templateObject84, fights_templateObject85, fights_templateObject86, fights_templateObject87, fights_templateObject88, fights_templateObject89, fights_templateObject90, fights_templateObject91, fights_templateObject92, fights_templateObject93, fights_templateObject94, fights_templateObject95, fights_templateObject96, fights_templateObject97, fights_templateObject98, fights_templateObject99, fights_templateObject100, fights_templateObject101, fights_templateObject102, fights_templateObject103, fights_templateObject104, fights_templateObject105, fights_templateObject106, fights_templateObject107, fights_templateObject108, fights_templateObject109, fights_templateObject110, fights_templateObject111, fights_templateObject112, fights_templateObject113, fights_templateObject114, fights_templateObject115, fights_templateObject116, fights_templateObject117, fights_templateObject118, fights_templateObject119, fights_templateObject120, fights_templateObject121, fights_templateObject122, fights_templateObject123, fights_templateObject124, fights_templateObject125, fights_templateObject126, fights_templateObject127, fights_templateObject128, fights_templateObject129, fights_templateObject130, fights_templateObject131, fights_templateObject132, fights_templateObject133, fights_templateObject134, fights_templateObject135, fights_templateObject136, fights_templateObject137, fights_templateObject138, fights_templateObject139, fights_templateObject140, fights_templateObject141, fights_templateObject142, fights_templateObject143, fights_templateObject144, fights_templateObject145, fights_templateObject146, fights_templateObject147, fights_templateObject148, fights_templateObject149, fights_templateObject150, fights_templateObject151, fights_templateObject152, fights_templateObject153, fights_templateObject154, fights_templateObject155, fights_templateObject156, fights_templateObject157, fights_templateObject158, fights_templateObject159, fights_templateObject160, fights_templateObject161, fights_templateObject162, fights_templateObject163, fights_templateObject164, fights_templateObject165, fights_templateObject166, fights_templateObject167, fights_templateObject168, fights_templateObject169, fights_templateObject170, fights_templateObject171, fights_templateObject172, fights_templateObject173, fights_templateObject174, fights_templateObject175, fights_templateObject176, fights_templateObject177, fights_templateObject178, fights_templateObject179, fights_templateObject180, fights_templateObject181, fights_templateObject182, fights_templateObject183, fights_templateObject184, fights_templateObject185, fights_templateObject186, fights_templateObject187, fights_templateObject188, fights_templateObject189, fights_templateObject190, fights_templateObject191, fights_templateObject192, fights_templateObject193, fights_templateObject194, fights_templateObject195, fights_templateObject196, fights_templateObject197, fights_templateObject198, fights_templateObject199, fights_templateObject200, fights_templateObject201, fights_templateObject202, fights_templateObject203, fights_templateObject204, fights_templateObject205, fights_templateObject206, fights_templateObject207, fights_templateObject208, fights_templateObject209, fights_templateObject210, _templateObject211, _templateObject212, _templateObject213, _templateObject214, _templateObject215, _templateObject216, _templateObject217, _templateObject218, _templateObject219, _templateObject220, _templateObject221, _templateObject222, _templateObject223, _templateObject224, _templateObject225, _templateObject226, _templateObject227, _templateObject228, _templateObject229, _templateObject230, _templateObject231, _templateObject232, _templateObject233, _templateObject234, _templateObject235, _templateObject236, _templateObject237, _templateObject238, _templateObject239, _templateObject240, _templateObject241, _templateObject242, _templateObject243, _templateObject244, _templateObject245, _templateObject246, _templateObject247, _templateObject248, _templateObject249, _templateObject250, _templateObject251, _templateObject252, _templateObject253, _templateObject254, _templateObject255, _templateObject256, _templateObject257, _templateObject258, _templateObject259, _templateObject260, _templateObject261, _templateObject262, _templateObject263, _templateObject264, _templateObject265, _templateObject266, _templateObject267, _templateObject268, _templateObject269, _templateObject270, _templateObject271, _templateObject272, _templateObject273, _templateObject274, _templateObject275, _templateObject276, _templateObject277, _templateObject278, _templateObject279, _templateObject280, _templateObject281, _templateObject282, _templateObject283, _templateObject284, _templateObject285, _templateObject286, _templateObject287, _templateObject288, _templateObject289, _templateObject290, _templateObject291, _templateObject292, _templateObject293, _templateObject294, _templateObject295, _templateObject296, _templateObject297, _templateObject298, _templateObject299, _templateObject300, _templateObject301, _templateObject302, _templateObject303, _templateObject304, _templateObject305, _templateObject306, _templateObject307, _templateObject308, _templateObject309, _templateObject310, _templateObject311, _templateObject312, _templateObject313, _templateObject314, _templateObject315, _templateObject316, _templateObject317, _templateObject318, _templateObject319, _templateObject320, _templateObject321, _templateObject322, _templateObject323, _templateObject324, _templateObject325, _templateObject326, _templateObject327, _templateObject328, _templateObject329, _templateObject330, _templateObject331, _templateObject332, _templateObject333, _templateObject334, _templateObject335, _templateObject336, _templateObject337, _templateObject338, _templateObject339, _templateObject340, _templateObject341, _templateObject342, _templateObject343, _templateObject344, _templateObject345, _templateObject346, _templateObject347, _templateObject348, _templateObject349, _templateObject350, _templateObject351, _templateObject352, _templateObject353, _templateObject354, _templateObject355, _templateObject356, _templateObject357, _templateObject358, _templateObject359, _templateObject360, _templateObject361, _templateObject362, _templateObject363, _templateObject364, _templateObject365, _templateObject366, _templateObject367, _templateObject368, _templateObject369, _templateObject370, _templateObject371, _templateObject372, _templateObject373, _templateObject374, _templateObject375, _templateObject376, _templateObject377, _templateObject378, _templateObject379, _templateObject380, _templateObject381, _templateObject382, _templateObject383, _templateObject384, _templateObject385, _templateObject386, _templateObject387, _templateObject388, _templateObject389, _templateObject390, _templateObject391, _templateObject392, _templateObject393, _templateObject394, _templateObject395, _templateObject396, _templateObject397, _templateObject398, _templateObject399, _templateObject400, _templateObject401, _templateObject402, _templateObject403, _templateObject404, _templateObject405, _templateObject406, _templateObject407, _templateObject408, _templateObject409, _templateObject410, _templateObject411, _templateObject412, _templateObject413, _templateObject414, _templateObject415, _templateObject416, _templateObject417, _templateObject418, _templateObject419, _templateObject420, _templateObject421, _templateObject422, _templateObject423, _templateObject424, _templateObject425, _templateObject426, _templateObject427, _templateObject428, _templateObject429, _templateObject430, _templateObject431, _templateObject432, _templateObject433, _templateObject434, _templateObject435, _templateObject436, _templateObject437, _templateObject438, _templateObject439, _templateObject440, _templateObject441, _templateObject442, _templateObject443, _templateObject444, _templateObject445, _templateObject446, _templateObject447, _templateObject448, _templateObject449, _templateObject450, _templateObject451, _templateObject452, _templateObject453, _templateObject454, _templateObject455, _templateObject456, _templateObject457, _templateObject458, _templateObject459, _templateObject460, _templateObject461, _templateObject462, _templateObject463, _templateObject464, _templateObject465, _templateObject466, _templateObject467, _templateObject468, _templateObject469, _templateObject470, _templateObject471, _templateObject472, _templateObject473, _templateObject474, _templateObject475, _templateObject476, _templateObject477, _templateObject478, _templateObject479, _templateObject480, _templateObject481, _templateObject482, _templateObject483, _templateObject484, _templateObject485, _templateObject486, _templateObject487, _templateObject488, _templateObject489, _templateObject490, _templateObject491, _templateObject492, _templateObject493, _templateObject494, _templateObject495, _templateObject496, _templateObject497, _templateObject498, _templateObject499, _templateObject500, _templateObject501, _templateObject502, _templateObject503, _templateObject504, _templateObject505, _templateObject506, _templateObject507, _templateObject508, _templateObject509, _templateObject510, _templateObject511, _templateObject512, _templateObject513, _templateObject514, _templateObject515, _templateObject516, _templateObject517, _templateObject518, _templateObject519, _templateObject520, _templateObject521, _templateObject522, _templateObject523, _templateObject524, _templateObject525, _templateObject526, _templateObject527, _templateObject528, _templateObject529, _templateObject530, _templateObject531, _templateObject532, _templateObject533, _templateObject534, _templateObject535, _templateObject536, _templateObject537, _templateObject538, _templateObject539, _templateObject540, _templateObject541, _templateObject542, _templateObject543, _templateObject544, _templateObject545, _templateObject546, _templateObject547, _templateObject548, _templateObject549, _templateObject550, _templateObject551, _templateObject552, _templateObject553, _templateObject554, _templateObject555, _templateObject556, _templateObject557, _templateObject558, _templateObject559, _templateObject560;
function fights_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = fights_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function fights_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function fights_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? fights_ownKeys(Object(source), !0).forEach(function (key) { fights_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : fights_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function fights_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) fights_setPrototypeOf(subClass, superClass); }
function fights_setPrototypeOf(o, p) { fights_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return fights_setPrototypeOf(o, p); }
function fights_createSuper(Derived) { var hasNativeReflectConstruct = fights_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = fights_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = fights_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return fights_possibleConstructorReturn(this, result); }; }
function fights_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return fights_assertThisInitialized(self); }
function fights_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function fights_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function fights_getPrototypeOf(o) { fights_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return fights_getPrototypeOf(o); }
function fights_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function fights_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, fights_toPropertyKey(descriptor.key), descriptor); } }
function fights_createClass(Constructor, protoProps, staticProps) { if (protoProps) fights_defineProperties(Constructor.prototype, protoProps); if (staticProps) fights_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function fights_defineProperty(obj, key, value) { key = fights_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function fights_toPropertyKey(arg) { var key = fights_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function fights_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function fights_toConsumableArray(arr) { return fights_arrayWithoutHoles(arr) || fights_iterableToArray(arr) || fights_unsupportedIterableToArray(arr) || fights_nonIterableSpread(); }
function fights_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function fights_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return fights_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return fights_arrayLikeToArray(o, minLen); }
function fights_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function fights_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return fights_arrayLikeToArray(arr); }
function fights_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function fights_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


















var firstChainMacro = () => combat_Macro.if_($monster(fights_templateObject || (fights_templateObject = fights_taggedTemplateLiteral(["Knob Goblin Embezzler"]))), combat_Macro.if_("!hasskill Lecture on Relativity", combat_Macro.externalIf(getDigitizeMonster() !== $monster(fights_templateObject2 || (fights_templateObject2 = fights_taggedTemplateLiteral(["Knob Goblin Embezzler"]))), combat_Macro.tryCopier($skill(fights_templateObject3 || (fights_templateObject3 = fights_taggedTemplateLiteral(["Digitize"]))))).tryCopier(template_string_$item(fights_templateObject4 || (fights_templateObject4 = fights_taggedTemplateLiteral(["Spooky Putty sheet"])))).tryCopier(template_string_$item(fights_templateObject5 || (fights_templateObject5 = fights_taggedTemplateLiteral(["Rain-Doh black box"])))).tryCopier(template_string_$item(fights_templateObject6 || (fights_templateObject6 = fights_taggedTemplateLiteral(["4-d camera"])))).tryCopier(template_string_$item(fights_templateObject7 || (fights_templateObject7 = fights_taggedTemplateLiteral(["unfinished ice sculpture"])))).externalIf(property_get("_enamorangs") === 0, combat_Macro.tryCopier(template_string_$item(fights_templateObject8 || (fights_templateObject8 = fights_taggedTemplateLiteral(["LOV Enamorang"])))))).trySkill($skill(fights_templateObject9 || (fights_templateObject9 = fights_taggedTemplateLiteral(["lecture on relativity"])))).meatKill()).abort();
var secondChainMacro = () => combat_Macro.if_($monster(fights_templateObject10 || (fights_templateObject10 = fights_taggedTemplateLiteral(["Knob Goblin Embezzler"]))), combat_Macro.if_("!hasskill Lecture on Relativity", combat_Macro.trySkill($skill(fights_templateObject11 || (fights_templateObject11 = fights_taggedTemplateLiteral(["Meteor Shower"]))))).if_("!hasskill Lecture on Relativity", combat_Macro.externalIf(property_get("_sourceTerminalDigitizeMonster") !== $monster(fights_templateObject12 || (fights_templateObject12 = fights_taggedTemplateLiteral(["Knob Goblin Embezzler"]))), combat_Macro.tryCopier($skill(fights_templateObject13 || (fights_templateObject13 = fights_taggedTemplateLiteral(["Digitize"]))))).tryCopier(template_string_$item(fights_templateObject14 || (fights_templateObject14 = fights_taggedTemplateLiteral(["Spooky Putty sheet"])))).tryCopier(template_string_$item(fights_templateObject15 || (fights_templateObject15 = fights_taggedTemplateLiteral(["Rain-Doh black box"])))).tryCopier(template_string_$item(fights_templateObject16 || (fights_templateObject16 = fights_taggedTemplateLiteral(["4-d camera"])))).tryCopier(template_string_$item(fights_templateObject17 || (fights_templateObject17 = fights_taggedTemplateLiteral(["unfinished ice sculpture"])))).externalIf(property_get("_enamorangs") === 0, combat_Macro.tryCopier(template_string_$item(fights_templateObject18 || (fights_templateObject18 = fights_taggedTemplateLiteral(["LOV Enamorang"])))))).trySkill($skill(fights_templateObject19 || (fights_templateObject19 = fights_taggedTemplateLiteral(["lecture on relativity"])))).meatKill()).abort();
function embezzlerSetup() {
  (0,external_kolmafia_namespaceObject.setLocation)($location(fights_templateObject20 || (fights_templateObject20 = fights_taggedTemplateLiteral(["none"]))));
  potionSetup(false);
  (0,external_kolmafia_namespaceObject.maximize)("MP", false);
  meatMood(true, 750 + baseMeat).execute(embezzlerCount());
  safeRestore();
  freeFightMood().execute(50);
  useBuffExtenders();
  burnLibrams(400);
  if (config_globalOptions.ascend && lib_questStep("questM16Temple") > 0 && property_get("lastTempleAdventures") < (0,external_kolmafia_namespaceObject.myAscensions)() && acquire(1, template_string_$item(fights_templateObject21 || (fights_templateObject21 = fights_taggedTemplateLiteral(["stone wool"]))), 3 * property_get("valueOfAdventure") + 100, false) > 0) {
    ensureEffect(template_string_$effect(fights_templateObject22 || (fights_templateObject22 = fights_taggedTemplateLiteral(["Stone-Faced"]))));
    setChoice(582, 1);
    setChoice(579, 3);
    while (property_get("lastTempleAdventures") < (0,external_kolmafia_namespaceObject.myAscensions)()) {
      var _tryFindFreeRun, _run$constraints$fami, _run$constraints$fami2, _run$constraints, _run$constraints$prep, _run$constraints2, _run$constraints$equi, _run$constraints3;
      var run = (_tryFindFreeRun = tryFindFreeRun()) !== null && _tryFindFreeRun !== void 0 ? _tryFindFreeRun : ltbRun();
      if (!run) break;
      (0,external_kolmafia_namespaceObject.useFamiliar)((_run$constraints$fami = (_run$constraints$fami2 = (_run$constraints = run.constraints).familiar) === null || _run$constraints$fami2 === void 0 ? void 0 : _run$constraints$fami2.call(_run$constraints)) !== null && _run$constraints$fami !== void 0 ? _run$constraints$fami : freeFightFamiliar());
      (_run$constraints$prep = (_run$constraints2 = run.constraints).preparation) === null || _run$constraints$prep === void 0 ? void 0 : _run$constraints$prep.call(_run$constraints2);
      freeFightOutfit((_run$constraints$equi = (_run$constraints3 = run.constraints).equipmentRequirements) === null || _run$constraints$equi === void 0 ? void 0 : _run$constraints$equi.call(_run$constraints3));
      garboAdventure($location(fights_templateObject23 || (fights_templateObject23 = fights_taggedTemplateLiteral(["The Hidden Temple"]))), run.macro);
    }
  }
  bathroomFinance(embezzlerCount());
  if (SourceTerminal_have()) educate([$skill(fights_templateObject24 || (fights_templateObject24 = fights_taggedTemplateLiteral(["Extract"]))), $skill(fights_templateObject25 || (fights_templateObject25 = fights_taggedTemplateLiteral(["Digitize"])))]);
  if (!property_get("_cameraUsed") && !lib_have(template_string_$item(fights_templateObject26 || (fights_templateObject26 = fights_taggedTemplateLiteral(["shaking 4-d camera"])))) && expectedEmbezzlerProfit() > (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject27 || (fights_templateObject27 = fights_taggedTemplateLiteral(["4-d camera"]))))) {
    withProperty("autoSatisfyWithCloset", true, () => (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject28 || (fights_templateObject28 = fights_taggedTemplateLiteral(["4-d camera"])))));
  }
  if (!property_get("_iceSculptureUsed") && !lib_have(template_string_$item(fights_templateObject29 || (fights_templateObject29 = fights_taggedTemplateLiteral(["ice sculpture"])))) && expectedEmbezzlerProfit() > ((0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject30 || (fights_templateObject30 = fights_taggedTemplateLiteral(["snow berries"])))) + (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject31 || (fights_templateObject31 = fights_taggedTemplateLiteral(["ice harvest"]))))) * 3) {
    withProperty("autoSatisfyWithCloset", true, () => {
      (0,external_kolmafia_namespaceObject.cliExecute)("refresh inventory");
      (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject32 || (fights_templateObject32 = fights_taggedTemplateLiteral(["unfinished ice sculpture"]))));
    });
  }
  if (!property_get("_enamorangs") && !(0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(fights_templateObject33 || (fights_templateObject33 = fights_taggedTemplateLiteral(["LOV Enamorang"])))) && expectedEmbezzlerProfit() > 20000) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject34 || (fights_templateObject34 = fights_taggedTemplateLiteral(["LOV Enamorang"]))));
  }

  // Fix invalid copiers (caused by ascending or combat text-effects)
  if (lib_have(template_string_$item(fights_templateObject35 || (fights_templateObject35 = fights_taggedTemplateLiteral(["Spooky Putty monster"])))) && !property_get("spookyPuttyMonster")) {
    // Visit the description to update the monster as it may be valid but not tracked correctly
    (0,external_kolmafia_namespaceObject.visitUrl)("desc_item.php?whichitem=".concat(template_string_$item(fights_templateObject36 || (fights_templateObject36 = fights_taggedTemplateLiteral(["Spooky Putty monster"]))).descid), false, false);
    if (!property_get("spookyPuttyMonster")) {
      // Still invalid, use it to turn back into the spooky putty sheet
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(fights_templateObject37 || (fights_templateObject37 = fights_taggedTemplateLiteral(["Spooky Putty monster"]))));
    }
  }
  if (lib_have(template_string_$item(fights_templateObject38 || (fights_templateObject38 = fights_taggedTemplateLiteral(["Rain-Doh box full of monster"])))) && !property_get("rainDohMonster")) {
    (0,external_kolmafia_namespaceObject.visitUrl)("desc_item.php?whichitem=".concat(template_string_$item(fights_templateObject39 || (fights_templateObject39 = fights_taggedTemplateLiteral(["Rain-Doh box full of monster"]))).descid), false, false);
  }
  if (lib_have(template_string_$item(fights_templateObject40 || (fights_templateObject40 = fights_taggedTemplateLiteral(["shaking 4-d camera"])))) && !property_get("cameraMonster")) {
    (0,external_kolmafia_namespaceObject.visitUrl)("desc_item.php?whichitem=".concat(template_string_$item(fights_templateObject41 || (fights_templateObject41 = fights_taggedTemplateLiteral(["shaking 4-d camera"]))).descid), false, false);
  }
  if (lib_have(template_string_$item(fights_templateObject42 || (fights_templateObject42 = fights_taggedTemplateLiteral(["envyfish egg"])))) && !property_get("envyfishMonster")) {
    (0,external_kolmafia_namespaceObject.visitUrl)("desc_item.php?whichitem=".concat(template_string_$item(fights_templateObject43 || (fights_templateObject43 = fights_taggedTemplateLiteral(["envyfish egg"]))).descid), false, false);
  }
  if (lib_have(template_string_$item(fights_templateObject44 || (fights_templateObject44 = fights_taggedTemplateLiteral(["ice sculpture"])))) && !property_get("iceSculptureMonster")) {
    (0,external_kolmafia_namespaceObject.visitUrl)("desc_item.php?whichitem=".concat(template_string_$item(fights_templateObject45 || (fights_templateObject45 = fights_taggedTemplateLiteral(["ice sculpture"]))).descid), false, false);
  }
  if (doingExtrovermectin()) {
    initializeExtrovermectinZones();
  }
}
function startWandererCounter() {
  var nextFight = getNextEmbezzlerFight();
  if (!nextFight || nextFight.canInitializeWandererCounters || nextFight.draggable) {
    return;
  }
  var digitizeNeedsStarting = counter_get("Digitize Monster") === Infinity && getDigitizeUses() !== 0;
  var romanceNeedsStarting = property_get("_romanticFightsLeft") > 0 && counter_get("Romantic Monster window begin") === Infinity && counter_get("Romantic Monster window end") === Infinity;
  if (digitizeNeedsStarting || romanceNeedsStarting) {
    if (digitizeNeedsStarting) (0,external_kolmafia_namespaceObject.print)("Starting digitize counter by visiting the Haunted Kitchen!");
    if (romanceNeedsStarting) (0,external_kolmafia_namespaceObject.print)("Starting romance counter by visiting the Haunted Kitchen!");
    do {
      var run = void 0;
      if (property_get("beGregariousFightsLeft") > 0) {
        var _run$constraints$prep2, _run$constraints4;
        (0,external_kolmafia_namespaceObject.print)("You still have gregs active, so we're going to wear your meat outfit.");
        run = ltbRun();
        (_run$constraints$prep2 = (_run$constraints4 = run.constraints).preparation) === null || _run$constraints$prep2 === void 0 ? void 0 : _run$constraints$prep2.call(_run$constraints4);
        (0,external_kolmafia_namespaceObject.useFamiliar)(meatFamiliar());
        meatOutfit(true);
      } else {
        var _tryFindFreeRun2, _run$constraints$fami3, _run$constraints$fami4, _run$constraints5, _run$constraints$prep3, _run$constraints6, _run$constraints$equi2, _run$constraints7;
        (0,external_kolmafia_namespaceObject.print)("You do not have gregs active, so this is a regular free run.");
        run = (_tryFindFreeRun2 = tryFindFreeRun()) !== null && _tryFindFreeRun2 !== void 0 ? _tryFindFreeRun2 : ltbRun();
        (0,external_kolmafia_namespaceObject.useFamiliar)((_run$constraints$fami3 = (_run$constraints$fami4 = (_run$constraints5 = run.constraints).familiar) === null || _run$constraints$fami4 === void 0 ? void 0 : _run$constraints$fami4.call(_run$constraints5)) !== null && _run$constraints$fami3 !== void 0 ? _run$constraints$fami3 : freeFightFamiliar({
          canChooseMacro: false
        }));
        (_run$constraints$prep3 = (_run$constraints6 = run.constraints).preparation) === null || _run$constraints$prep3 === void 0 ? void 0 : _run$constraints$prep3.call(_run$constraints6);
        freeFightOutfit((_run$constraints$equi2 = (_run$constraints7 = run.constraints).equipmentRequirements) === null || _run$constraints$equi2 === void 0 ? void 0 : _run$constraints$equi2.call(_run$constraints7));
      }
      garboAdventure($location(fights_templateObject47 || (fights_templateObject47 = fights_taggedTemplateLiteral(["The Haunted Kitchen"]))), combat_Macro.if_($monster(fights_templateObject48 || (fights_templateObject48 = fights_taggedTemplateLiteral(["Knob Goblin Embezzler"]))), embezzlerMacro()).step(run.macro));
    } while (property_get("lastCopyableMonster") === $monster(fights_templateObject46 || (fights_templateObject46 = fights_taggedTemplateLiteral(["Government agent"]))) || dogOrHolidayWanderer(["Lights Out in the Kitchen"]));
  }
}
var witchessPieces = [{
  piece: $monster(fights_templateObject49 || (fights_templateObject49 = fights_taggedTemplateLiteral(["Witchess Bishop"]))),
  drop: template_string_$item(fights_templateObject50 || (fights_templateObject50 = fights_taggedTemplateLiteral(["Sacramento wine"])))
}, {
  piece: $monster(fights_templateObject51 || (fights_templateObject51 = fights_taggedTemplateLiteral(["Witchess Knight"]))),
  drop: template_string_$item(fights_templateObject52 || (fights_templateObject52 = fights_taggedTemplateLiteral(["jumping horseradish"])))
}, {
  piece: $monster(fights_templateObject53 || (fights_templateObject53 = fights_taggedTemplateLiteral(["Witchess Pawn"]))),
  drop: template_string_$item(fights_templateObject54 || (fights_templateObject54 = fights_taggedTemplateLiteral(["armored prawn"])))
}, {
  piece: $monster(fights_templateObject55 || (fights_templateObject55 = fights_taggedTemplateLiteral(["Witchess Rook"]))),
  drop: template_string_$item(fights_templateObject56 || (fights_templateObject56 = fights_taggedTemplateLiteral(["Greek fire"])))
}];
function bestWitchessPiece() {
  return lib_maxBy(witchessPieces, _ref => {
    var drop = _ref.drop;
    return garboValue(drop);
  }).piece;
}
function pygmyOptions() {
  var forceEquip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return {
    requirements: () => [new Requirement([], {
      forceEquip: forceEquip,
      preventEquip: template_string_$items(fights_templateObject57 || (fights_templateObject57 = fights_taggedTemplateLiteral(["Staff of Queso Escusado, stinky cheese sword"]))),
      bonusEquip: new Map([[template_string_$item(fights_templateObject58 || (fights_templateObject58 = fights_taggedTemplateLiteral(["garbage sticker"]))), 100]].concat(fights_toConsumableArray(magnifyingGlass())))
    })],
    macroAllowsFamiliarActions: false
  };
}
function dailyFights() {
  if ((0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) return;
  if (getFoldGroup(template_string_$item(fights_templateObject59 || (fights_templateObject59 = fights_taggedTemplateLiteral(["Spooky Putty sheet"])))).some(item => lib_have(item))) {
    (0,external_kolmafia_namespaceObject.cliExecute)("fold spooky putty sheet");
  }
  if (embezzlerSources.some(source => source.potential())) {
    withStash(template_string_$items(fights_templateObject60 || (fights_templateObject60 = fights_taggedTemplateLiteral(["Spooky Putty sheet"]))), () => {
      // check if user wants to wish for embezzler before doing setup
      if (!getNextEmbezzlerFight()) return;
      embezzlerSetup();

      // PROFESSOR COPIES
      if (lib_have($familiar(fights_templateObject61 || (fights_templateObject61 = fights_taggedTemplateLiteral(["Pocket Professor"]))))) {
        var potentialPocketProfessorLectures = [{
          property: "_garbo_meatChain",
          maximizeParameters: [],
          // implicitly maximize against meat
          macro: firstChainMacro,
          goalMaximize: requirements => meatOutfit(true, requirements)
        }, {
          property: "_garbo_weightChain",
          maximizeParameters: ["Familiar Weight"],
          macro: secondChainMacro,
          goalMaximize: requirements => maximizeCached(requirements.maximizeParameters, requirements.maximizeOptions)
        }];
        for (var _i = 0, _potentialPocketProfe = potentialPocketProfessorLectures; _i < _potentialPocketProfe.length; _i++) {
          var potentialLecture = _potentialPocketProfe[_i];
          var _property = potentialLecture.property,
            maximizeParameters = potentialLecture.maximizeParameters,
            macro = potentialLecture.macro,
            goalMaximize = potentialLecture.goalMaximize;
          var fightSource = getNextEmbezzlerFight();
          if (!fightSource) return;
          if (property_get(_property, false)) continue;
          if (fightSource.gregariousReplace) {
            var crateIsSabered = property_get("_saberForceMonster") === $monster(fights_templateObject62 || (fights_templateObject62 = fights_taggedTemplateLiteral(["crate"])));
            var notEnoughCratesSabered = property_get("_saberForceMonsterCount") < 2;
            var weWantToSaberCrates = !crateIsSabered || notEnoughCratesSabered;
            if (weWantToSaberCrates) saberCrateIfSafe();
          }
          (0,external_kolmafia_namespaceObject.useFamiliar)($familiar(fights_templateObject63 || (fights_templateObject63 = fights_taggedTemplateLiteral(["Pocket Professor"]))));
          if (!lib_have(template_string_$item(fights_templateObject64 || (fights_templateObject64 = fights_taggedTemplateLiteral(["Pocket Professor memory chip"]))))) {
            if ((0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject65 || (fights_templateObject65 = fights_taggedTemplateLiteral(["box of Familiar Jacks"])))) < (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject66 || (fights_templateObject66 = fights_taggedTemplateLiteral(["Pocket Professor memory chip"]))))) {
              (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject67 || (fights_templateObject67 = fights_taggedTemplateLiteral(["box of Familiar Jacks"]))));
              (0,external_kolmafia_namespaceObject.use)(template_string_$item(fights_templateObject68 || (fights_templateObject68 = fights_taggedTemplateLiteral(["box of Familiar Jacks"]))));
            } else {
              (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject69 || (fights_templateObject69 = fights_taggedTemplateLiteral(["Pocket Professor memory chip"]))));
            }
          }
          var professorRequirement = lib_have(template_string_$item(fights_templateObject70 || (fights_templateObject70 = fights_taggedTemplateLiteral(["Pocket Professor memory chip"])))) ? new Requirement(maximizeParameters, {
            forceEquip: template_string_$items(fights_templateObject71 || (fights_templateObject71 = fights_taggedTemplateLiteral(["Pocket Professor memory chip"])))
          }) : new Requirement(maximizeParameters, {});
          goalMaximize(Requirement.merge([professorRequirement].concat(fights_toConsumableArray(fightSource.requirements))));
          if (property_get("_pocketProfessorLectures") < pocketProfessorLectures()) {
            var _embezzlerLog$sources;
            var startLectures = property_get("_pocketProfessorLectures");
            fightSource.run({
              macro: macro(),
              useAuto: false
            });
            embezzlerLog.initialEmbezzlersFought += 1 + property_get("_pocketProfessorLectures") - startLectures;
            embezzlerLog.sources.push(fightSource.name);
            (_embezzlerLog$sources = embezzlerLog.sources).push.apply(_embezzlerLog$sources, fights_toConsumableArray(new Array(property_get("_pocketProfessorLectures") - startLectures).fill("Pocket Professor")));
          }
          _set(_property, true);
          postCombatActions();
          var predictedNextFight = getNextEmbezzlerFight();
          if (!(predictedNextFight !== null && predictedNextFight !== void 0 && predictedNextFight.draggable)) doSausage();
          doGhost();
          startWandererCounter();
        }
      }
      (0,external_kolmafia_namespaceObject.useFamiliar)(meatFamiliar());

      // REMAINING EMBEZZLER FIGHTS
      var nextFight = getNextEmbezzlerFight();
      while (nextFight !== null && (0,external_kolmafia_namespaceObject.myAdventures)()) {
        (0,external_kolmafia_namespaceObject.print)("Running fight ".concat(nextFight.name));
        var startTurns = (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
        if (nextFight.draggable === "backup" && lib_have($skill(fights_templateObject72 || (fights_templateObject72 = fights_taggedTemplateLiteral(["Musk of the Moose"])))) && !lib_have(template_string_$effect(fights_templateObject73 || (fights_templateObject73 = fights_taggedTemplateLiteral(["Musk of the Moose"]))))) {
          (0,external_kolmafia_namespaceObject.useSkill)($skill(fights_templateObject74 || (fights_templateObject74 = fights_taggedTemplateLiteral(["Musk of the Moose"]))));
        }
        if (nextFight.gregariousReplace) {
          var _crateIsSabered = property_get("_saberForceMonster") === $monster(fights_templateObject75 || (fights_templateObject75 = fights_taggedTemplateLiteral(["crate"])));
          var _notEnoughCratesSabered = property_get("_saberForceMonsterCount") < 2;
          var _weWantToSaberCrates = !_crateIsSabered || _notEnoughCratesSabered;
          if (_weWantToSaberCrates) saberCrateIfSafe();
        }
        var underwater = nextFight.location().environment === "underwater";
        var romanticFamiliar = $familiars(fights_templateObject76 || (fights_templateObject76 = fights_taggedTemplateLiteral(["Obtuse Angel, Reanimated Reanimator"]))).find(lib_have);
        if (romanticFamiliar && property_get("_badlyRomanticArrows") === 0 && !underwater) {
          (0,external_kolmafia_namespaceObject.useFamiliar)(romanticFamiliar);
        } else {
          (0,external_kolmafia_namespaceObject.useFamiliar)(meatFamiliar());
        }
        (0,external_kolmafia_namespaceObject.setLocation)(nextFight.location());
        meatOutfit(true, Requirement.merge(nextFight.requirements), underwater);
        nextFight.run();
        postCombatActions();
        (0,external_kolmafia_namespaceObject.print)("Finished ".concat(nextFight.name));
        if ((0,external_kolmafia_namespaceObject.totalTurnsPlayed)() - startTurns === 1 && property_get("lastCopyableMonster") === $monster(fights_templateObject77 || (fights_templateObject77 = fights_taggedTemplateLiteral(["Knob Goblin Embezzler"]))) && (nextFight.wrongEncounterName || property_get("lastEncounter") === "Knob Goblin Embezzler")) {
          embezzlerLog.initialEmbezzlersFought++;
          embezzlerLog.sources.push(nextFight.name);
        }
        nextFight = getNextEmbezzlerFight();
        if (romanticMonsterImpossible() && (!nextFight || !nextFight.draggable)) {
          doSausage();
          yachtzee();
        }
        doGhost();
        startWandererCounter();
      }
    });
  }
}
var FreeFight = /*#__PURE__*/function () {
  function FreeFight(available, run, tentacle) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    fights_classCallCheck(this, FreeFight);
    fights_defineProperty(this, "available", void 0);
    fights_defineProperty(this, "run", void 0);
    fights_defineProperty(this, "tentacle", void 0);
    fights_defineProperty(this, "options", void 0);
    this.available = available;
    this.run = run;
    this.tentacle = tentacle;
    this.options = options;
  }
  fights_createClass(FreeFight, [{
    key: "pickFamiliar",
    value: function pickFamiliar() {
      var _this$options$familia, _this$options;
      var mandatory = (_this$options$familia = (_this$options = this.options).familiar) === null || _this$options$familia === void 0 ? void 0 : _this$options$familia.call(_this$options);
      if (mandatory) return mandatory;
      return freeFightFamiliar({
        canChooseMacro: this.options.macroAllowsFamiliarActions
      });
    }
  }, {
    key: "isAvailable",
    value: function isAvailable() {
      var avail = this.available();
      return typeof avail === "number" ? avail > 0 : avail;
    }
  }, {
    key: "runAll",
    value: function runAll() {
      if (!this.isAvailable()) return;
      if ((this.options.cost ? this.options.cost() : 0) > config_globalOptions.prefs.valueOfFreeFight) {
        return;
      }
      while (this.isAvailable()) {
        var _this$options2, _this$options2$noncom, _this$options3, _this$options$effects, _this$options$effects2, _this$options4;
        voidMonster();
        var noncombat = !!((_this$options2 = this.options) !== null && _this$options2 !== void 0 && (_this$options2$noncom = (_this$options3 = _this$options2).noncombat) !== null && _this$options2$noncom !== void 0 && _this$options2$noncom.call(_this$options3));
        if (!noncombat) {
          (0,external_kolmafia_namespaceObject.useFamiliar)(this.pickFamiliar());
        }
        var effects = (_this$options$effects = (_this$options$effects2 = (_this$options4 = this.options).effects) === null || _this$options$effects2 === void 0 ? void 0 : _this$options$effects2.call(_this$options4)) !== null && _this$options$effects !== void 0 ? _this$options$effects : [];
        freeFightMood.apply(void 0, fights_toConsumableArray(effects)).execute();
        freeFightOutfit(this.options.requirements ? Requirement.merge(this.options.requirements()) : undefined);
        safeRestore();
        withMacro(combat_Macro.basicCombat(), this.run);
        postCombatActions();
        // Slot in our Professor Thesis if it's become available
        if (!lib_have(template_string_$effect(fights_templateObject78 || (fights_templateObject78 = fights_taggedTemplateLiteral(["Feeling Lost"]))))) deliverThesisIfAble();
      }
    }
  }]);
  return FreeFight;
}();
var FreeRunFight = /*#__PURE__*/function (_FreeFight) {
  fights_inherits(FreeRunFight, _FreeFight);
  var _super = fights_createSuper(FreeRunFight);
  function FreeRunFight(available, run) {
    var _this;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var freeRunPicker = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    fights_classCallCheck(this, FreeRunFight);
    _this = _super.call(this, available, () => null, false, fights_objectSpread(fights_objectSpread({}, options), {}, {
      macroAllowsFamiliarActions: false
    }));
    fights_defineProperty(fights_assertThisInitialized(_this), "freeRun", void 0);
    fights_defineProperty(fights_assertThisInitialized(_this), "constraints", void 0);
    _this.freeRun = run;
    _this.constraints = freeRunPicker;
    return _this;
  }
  fights_createClass(FreeRunFight, [{
    key: "runAll",
    value: function runAll() {
      var _this2 = this;
      if (!this.isAvailable()) return;
      if ((this.options.cost ? this.options.cost() : 0) > config_globalOptions.prefs.valueOfFreeFight) {
        return;
      }
      var _loop = function _loop() {
        var _ref2, _runSource$constraint, _runSource$constraint2, _runSource$constraint3, _this2$options$famili, _this2$options, _runSource$constraint4, _runSource$constraint5, _this2$options$effect, _this2$options$effect2, _this2$options2;
        var constraints = fights_objectSpread({
          noFamiliar: () => _this2.options.familiar !== undefined
        }, _this2.constraints);
        var runSource = tryFindFreeRun(constraints);
        if (!runSource) return "break";
        (0,external_kolmafia_namespaceObject.useFamiliar)((_ref2 = (_runSource$constraint = (_runSource$constraint2 = (_runSource$constraint3 = runSource.constraints).familiar) === null || _runSource$constraint2 === void 0 ? void 0 : _runSource$constraint2.call(_runSource$constraint3)) !== null && _runSource$constraint !== void 0 ? _runSource$constraint : (_this2$options$famili = (_this2$options = _this2.options).familiar) === null || _this2$options$famili === void 0 ? void 0 : _this2$options$famili.call(_this2$options)) !== null && _ref2 !== void 0 ? _ref2 : freeFightFamiliar());
        (_runSource$constraint4 = (_runSource$constraint5 = runSource.constraints).preparation) === null || _runSource$constraint4 === void 0 ? void 0 : _runSource$constraint4.call(_runSource$constraint5);
        freeFightOutfit(Requirement.merge([].concat(fights_toConsumableArray(_this2.options.requirements ? _this2.options.requirements() : []), fights_toConsumableArray(runSource.constraints.equipmentRequirements ? [runSource.constraints.equipmentRequirements()] : []))));
        freeFightMood.apply(void 0, fights_toConsumableArray((_this2$options$effect = (_this2$options$effect2 = (_this2$options2 = _this2.options).effects) === null || _this2$options$effect2 === void 0 ? void 0 : _this2$options$effect2.call(_this2$options2)) !== null && _this2$options$effect !== void 0 ? _this2$options$effect : []));
        safeRestore();
        withMacro(combat_Macro.step(runSource.macro), () => _this2.freeRun(runSource));
        postCombatActions();
      };
      while (this.isAvailable()) {
        var _ret = _loop();
        if (_ret === "break") break;
      }
    }
  }]);
  return FreeRunFight;
}(FreeFight);
var pygmyBanishHandlers = [{
  pygmy: $monster(fights_templateObject79 || (fights_templateObject79 = fights_taggedTemplateLiteral(["pygmy bowler"]))),
  skill: $skill(fights_templateObject80 || (fights_templateObject80 = fights_taggedTemplateLiteral(["Snokebomb"]))),
  check: "_snokebombUsed",
  limit: 3,
  item: template_string_$item(fights_templateObject81 || (fights_templateObject81 = fights_taggedTemplateLiteral(["Louder Than Bomb"])))
}, {
  pygmy: $monster(fights_templateObject82 || (fights_templateObject82 = fights_taggedTemplateLiteral(["pygmy orderlies"]))),
  skill: $skill(fights_templateObject83 || (fights_templateObject83 = fights_taggedTemplateLiteral(["Feel Hatred"]))),
  check: "_feelHatredUsed",
  limit: 3,
  item: template_string_$item(fights_templateObject84 || (fights_templateObject84 = fights_taggedTemplateLiteral(["divine champagne popper"])))
}, {
  pygmy: $monster(fights_templateObject85 || (fights_templateObject85 = fights_taggedTemplateLiteral(["pygmy janitor"]))),
  skill: undefined,
  check: undefined,
  limit: 0,
  item: template_string_$item(fights_templateObject86 || (fights_templateObject86 = fights_taggedTemplateLiteral(["tennis ball"])))
}];
var pygmyMacro = combat_Macro.step.apply(combat_Macro, fights_toConsumableArray(pygmyBanishHandlers.map(_ref3 => {
  var pygmy = _ref3.pygmy,
    skill = _ref3.skill,
    item = _ref3.item;
  return combat_Macro.if_(pygmy, skill ? combat_Macro.trySkill(skill).item(item) : combat_Macro.item(item));
}))).if_($monster(fights_templateObject87 || (fights_templateObject87 = fights_taggedTemplateLiteral(["drunk pygmy"]))), combat_Macro.trySkill($skill(fights_templateObject88 || (fights_templateObject88 = fights_taggedTemplateLiteral(["Extract"])))).trySkill($skill(fights_templateObject89 || (fights_templateObject89 = fights_taggedTemplateLiteral(["Sing Along"]))))).ifHolidayWanderer(combat_Macro.basicCombat()).abort();
function getStenchLocation() {
  var _find;
  return (_find = $locations(fights_templateObject90 || (fights_templateObject90 = fights_taggedTemplateLiteral(["Uncle Gator's Country Fun-Time Liquid Waste Sluice, The Hippy Camp (Bombed Back to the Stone Age), The Dark and Spooky Swamp"]))).find(l => (0,external_kolmafia_namespaceObject.canAdventure)(l))) !== null && _find !== void 0 ? _find : $location(fights_templateObject91 || (fights_templateObject91 = fights_taggedTemplateLiteral(["none"])));
}
function bowlOfScorpionsAvailable() {
  if (property_get("hiddenTavernUnlock") === (0,external_kolmafia_namespaceObject.myAscensions)()) {
    return true;
  } else if (config_globalOptions.triedToUnlockHiddenTavern) {
    return false;
  } else {
    config_globalOptions.triedToUnlockHiddenTavern = true;
    (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject92 || (fights_templateObject92 = fights_taggedTemplateLiteral(["book of matches"]))));
    if (lib_have(template_string_$item(fights_templateObject93 || (fights_templateObject93 = fights_taggedTemplateLiteral(["book of matches"]))))) {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(fights_templateObject94 || (fights_templateObject94 = fights_taggedTemplateLiteral(["book of matches"]))));
    }
    return property_get("hiddenTavernUnlock") === (0,external_kolmafia_namespaceObject.myAscensions)() || (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject95 || (fights_templateObject95 = fights_taggedTemplateLiteral(["Bowl of Scorpions"])))) < 1000;
  }
}
var freeFightSources = [new FreeFight(() => lib_have(template_string_$item(fights_templateObject96 || (fights_templateObject96 = fights_taggedTemplateLiteral(["protonic accelerator pack"])))) && property_get("questPAGhost") !== "unstarted" && property_get("ghostLocation") !== null, () => {
  var ghostLocation = property_get("ghostLocation");
  if (!ghostLocation) return;
  garboAdventure(ghostLocation, combat_Macro.ghostBustin());
}, true, {
  requirements: () => [new Requirement([], {
    forceEquip: template_string_$items(fights_templateObject97 || (fights_templateObject97 = fights_taggedTemplateLiteral(["protonic accelerator pack"])))
  })]
}), new FreeFight(() => lib_have(template_string_$item(fights_templateObject98 || (fights_templateObject98 = fights_taggedTemplateLiteral(["molehill mountain"])))) && !property_get("_molehillMountainUsed") ? 1 : 0, () => withMacro(combat_Macro.basicCombat(), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(fights_templateObject99 || (fights_templateObject99 = fights_taggedTemplateLiteral(["molehill mountain"]))))), true), new FreeFight(() => TunnelOfLove_have() && !isUsed(), () => {
  fightAll("LOV Epaulettes", "Open Heart Surgery", "LOV Extraterrestrial Chocolate");
}, false, {
  macroAllowsFamiliarActions: true
}), new FreeFight(() => {
  var _ChateauMantegna$pain, _ChateauMantegna$pain2, _ChateauMantegna$pain3;
  return ChateauMantegna_have() && !paintingFought() && ((_ChateauMantegna$pain = (_ChateauMantegna$pain2 = paintingMonster()) === null || _ChateauMantegna$pain2 === void 0 ? void 0 : (_ChateauMantegna$pain3 = _ChateauMantegna$pain2.attributes) === null || _ChateauMantegna$pain3 === void 0 ? void 0 : _ChateauMantegna$pain3.includes("FREE")) !== null && _ChateauMantegna$pain !== void 0 ? _ChateauMantegna$pain : false);
}, () => fightPainting(), true, {
  familiar: () => lib_have($familiar(fights_templateObject100 || (fights_templateObject100 = fights_taggedTemplateLiteral(["Robortender"])))) && $phyla(fights_templateObject101 || (fights_templateObject101 = fights_taggedTemplateLiteral(["elf, fish, hobo, penguin, constellation"]))).some(phylum => {
    var _ChateauMantegna$pain4;
    return phylum === ((_ChateauMantegna$pain4 = paintingMonster()) === null || _ChateauMantegna$pain4 === void 0 ? void 0 : _ChateauMantegna$pain4.phylum);
  }) ? $familiar(fights_templateObject102 || (fights_templateObject102 = fights_taggedTemplateLiteral(["Robortender"]))) : null
}), new FreeFight(() => property_get("questL02Larva") !== "unstarted" && !property_get("_eldritchTentacleFought"), () => {
  var haveEldritchEssence = (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(fights_templateObject103 || (fights_templateObject103 = fights_taggedTemplateLiteral(["eldritch essence"])))) !== 0;
  (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=forestvillage&action=fv_scientist", false);
  if (!(0,external_kolmafia_namespaceObject.handlingChoice)()) throw "No choice?";
  (0,external_kolmafia_namespaceObject.runChoice)(haveEldritchEssence ? 2 : 1);
}, false), new FreeFight(() => lib_have($skill(fights_templateObject104 || (fights_templateObject104 = fights_taggedTemplateLiteral(["Evoke Eldritch Horror"])))) && !property_get("_eldritchHorrorEvoked"), () => {
  if (!lib_have(template_string_$effect(fights_templateObject105 || (fights_templateObject105 = fights_taggedTemplateLiteral(["Crappily Disguised as a Waiter"]))))) {
    var expectedIchors = 1;
    var rate = 11 / 200;
    var value = expectedIchors * garboValue(template_string_$item(fights_templateObject106 || (fights_templateObject106 = fights_taggedTemplateLiteral(["eldritch ichor"])))) * rate - (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject107 || (fights_templateObject107 = fights_taggedTemplateLiteral(["crappy waiter disguise"]))));
    if (value > 0) {
      (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject108 || (fights_templateObject108 = fights_taggedTemplateLiteral(["crappy waiter disguise"]))));
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(fights_templateObject109 || (fights_templateObject109 = fights_taggedTemplateLiteral(["crappy waiter disguise"]))));
    }
  }
  withMacro(combat_Macro.if_($monster(fights_templateObject110 || (fights_templateObject110 = fights_taggedTemplateLiteral(["Sssshhsssblllrrggghsssssggggrrgglsssshhssslblgl"]))),
  // Using while_ here in case you run out of mp
  combat_Macro.while_("hasskill Awesome Balls of Fire", combat_Macro.skill($skill(fights_templateObject111 || (fights_templateObject111 = fights_taggedTemplateLiteral(["Awesome Balls of Fire"]))))).while_("hasskill Eggsplosion", combat_Macro.skill($skill(fights_templateObject112 || (fights_templateObject112 = fights_taggedTemplateLiteral(["Eggsplosion"]))))).while_("hasskill Saucegeyser", combat_Macro.skill($skill(fights_templateObject113 || (fights_templateObject113 = fights_taggedTemplateLiteral(["Saucegeyser"]))))).while_("hasskill Weapon of the Pastalord", combat_Macro.skill($skill(fights_templateObject114 || (fights_templateObject114 = fights_taggedTemplateLiteral(["Weapon of the Pastalord"]))))).while_("hasskill Lunging Thrust-Smack", combat_Macro.skill($skill(fights_templateObject115 || (fights_templateObject115 = fights_taggedTemplateLiteral(["Lunging Thrust-Smack"]))))).attack().repeat()).basicCombat(), () => {
    (0,external_kolmafia_namespaceObject.useSkill)($skill(fights_templateObject116 || (fights_templateObject116 = fights_taggedTemplateLiteral(["Evoke Eldritch Horror"]))));
    if (lib_have(template_string_$effect(fights_templateObject117 || (fights_templateObject117 = fights_taggedTemplateLiteral(["Beaten Up"]))))) lib_uneffect(template_string_$effect(fights_templateObject118 || (fights_templateObject118 = fights_taggedTemplateLiteral(["Beaten Up"]))));
  }, false);
}, false), new FreeFight(() => utils_clamp(3 - property_get("_lynyrdSnareUses"), 0, 3), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(fights_templateObject119 || (fights_templateObject119 = fights_taggedTemplateLiteral(["lynyrd snare"])))), true, {
  cost: () => (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject120 || (fights_templateObject120 = fights_taggedTemplateLiteral(["lynyrd snare"]))))
}), new FreeFight(() => lib_have(template_string_$item(fights_templateObject121 || (fights_templateObject121 = fights_taggedTemplateLiteral(["[glitch season reward name]"])))) && !property_get("_glitchMonsterFights") && property_get("garbo_fightGlitch", false), () => withMacro(combat_Macro.trySkill($skill(fights_templateObject122 || (fights_templateObject122 = fights_taggedTemplateLiteral(["Curse of Marinara"])))).trySkill($skill(fights_templateObject123 || (fights_templateObject123 = fights_taggedTemplateLiteral(["Conspiratorial Whispers"])))).trySkill($skill(fights_templateObject124 || (fights_templateObject124 = fights_taggedTemplateLiteral(["Shadow Noodles"])))).externalIf(property_get("glitchItemImplementationCount") * (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(fights_templateObject125 || (fights_templateObject125 = fights_taggedTemplateLiteral(["[glitch season reward name]"])))) >= 2000, combat_Macro.item([template_string_$item(fights_templateObject126 || (fights_templateObject126 = fights_taggedTemplateLiteral(["gas can"]))), template_string_$item(fights_templateObject127 || (fights_templateObject127 = fights_taggedTemplateLiteral(["gas can"])))])).externalIf(property_get("lovebugsUnlocked"), combat_Macro.trySkill($skill(fights_templateObject128 || (fights_templateObject128 = fights_taggedTemplateLiteral(["Summon Love Gnats"])))).trySkill($skill(fights_templateObject129 || (fights_templateObject129 = fights_taggedTemplateLiteral(["Summon Love Mosquito"]))))).tryItem(template_string_$item(fights_templateObject130 || (fights_templateObject130 = fights_taggedTemplateLiteral(["train whistle"])))).trySkill($skill(fights_templateObject131 || (fights_templateObject131 = fights_taggedTemplateLiteral(["Micrometeorite"])))).tryItem(template_string_$item(fights_templateObject132 || (fights_templateObject132 = fights_taggedTemplateLiteral(["Time-Spinner"])))).tryItem(template_string_$item(fights_templateObject133 || (fights_templateObject133 = fights_taggedTemplateLiteral(["little red book"])))).tryItem(template_string_$item(fights_templateObject134 || (fights_templateObject134 = fights_taggedTemplateLiteral(["Rain-Doh blue balls"])))).tryItem(template_string_$item(fights_templateObject135 || (fights_templateObject135 = fights_taggedTemplateLiteral(["Rain-Doh indigo cup"])))).trySkill($skill(fights_templateObject136 || (fights_templateObject136 = fights_taggedTemplateLiteral(["Entangling Noodles"])))).trySkill($skill(fights_templateObject137 || (fights_templateObject137 = fights_taggedTemplateLiteral(["Frost Bite"])))).kill(), () => {
  (0,external_kolmafia_namespaceObject.restoreHp)((0,external_kolmafia_namespaceObject.myMaxhp)());
  if (lib_have($skill(fights_templateObject138 || (fights_templateObject138 = fights_taggedTemplateLiteral(["Ruthless Efficiency"]))))) ensureEffect(template_string_$effect(fights_templateObject139 || (fights_templateObject139 = fights_taggedTemplateLiteral(["Ruthlessly Efficient"]))));
  if (lib_have($skill(fights_templateObject140 || (fights_templateObject140 = fights_taggedTemplateLiteral(["Mathematical Precision"]))))) ensureEffect(template_string_$effect(fights_templateObject141 || (fights_templateObject141 = fights_taggedTemplateLiteral(["Mathematically Precise"]))));
  if (lib_have($skill(fights_templateObject142 || (fights_templateObject142 = fights_taggedTemplateLiteral(["Blood Bubble"]))))) ensureEffect(template_string_$effect(fights_templateObject143 || (fights_templateObject143 = fights_taggedTemplateLiteral(["Blood Bubble"]))));
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject144 || (fights_templateObject144 = fights_taggedTemplateLiteral(["[glitch season reward name]"]))));
  if (property_get("glitchItemImplementationCount") * (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(fights_templateObject145 || (fights_templateObject145 = fights_taggedTemplateLiteral(["[glitch season reward name]"])))) >= 2000) {
    (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject146 || (fights_templateObject146 = fights_taggedTemplateLiteral(["gas can"]))), 2);
  }
  (0,external_kolmafia_namespaceObject.visitUrl)("inv_eat.php?pwd&whichitem=10207");
  (0,external_kolmafia_namespaceObject.runCombat)();
}), true, {
  requirements: () => [new Requirement(["1000 mainstat"], {
    preventEquip: template_string_$items(fights_templateObject147 || (fights_templateObject147 = fights_taggedTemplateLiteral(["mutant crown, mutant arm, mutant legs, shield of the Skeleton Lord"])))
  })],
  macroAllowsFamiliarActions: false
}),
// 6	10	0	0	Infernal Seals	variety of items; must be Seal Clubber for 5, must also have Claw of the Infernal Seal in inventory for 10.
new FreeFight(() => {
  var maxSeals = (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(fights_templateObject148 || (fights_templateObject148 = fights_taggedTemplateLiteral(["Claw of the Infernal Seal"])))) ? 10 : 5;
  var maxSealsAvailable = property_get("lastGuildStoreOpen") === (0,external_kolmafia_namespaceObject.myAscensions)() ? maxSeals : Math.min(maxSeals, Math.floor((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(fights_templateObject149 || (fights_templateObject149 = fights_taggedTemplateLiteral(["seal-blubber candle"])))) / 3));
  return (0,external_kolmafia_namespaceObject.myClass)() === $class(fights_templateObject150 || (fights_templateObject150 = fights_taggedTemplateLiteral(["Seal Clubber"]))) ? Math.max(maxSealsAvailable - property_get("_sealsSummoned"), 0) : 0;
}, () => {
  var figurine = property_get("lastGuildStoreOpen") === (0,external_kolmafia_namespaceObject.myAscensions)() ? template_string_$item(fights_templateObject151 || (fights_templateObject151 = fights_taggedTemplateLiteral(["figurine of a wretched-looking seal"]))) : template_string_$item(fights_templateObject152 || (fights_templateObject152 = fights_taggedTemplateLiteral(["figurine of an ancient seal"])));
  (0,external_kolmafia_namespaceObject.retrieveItem)(1, figurine);
  (0,external_kolmafia_namespaceObject.retrieveItem)(property_get("lastGuildStoreOpen") === (0,external_kolmafia_namespaceObject.myAscensions)() ? 1 : 3, template_string_$item(fights_templateObject153 || (fights_templateObject153 = fights_taggedTemplateLiteral(["seal-blubber candle"]))));
  withMacro(combat_Macro.startCombat().trySkill($skill(fights_templateObject154 || (fights_templateObject154 = fights_taggedTemplateLiteral(["Furious Wallop"])))).while_("hasskill Lunging Thrust-Smack", combat_Macro.skill($skill(fights_templateObject155 || (fights_templateObject155 = fights_taggedTemplateLiteral(["Lunging Thrust-Smack"]))))).while_("hasskill Thrust-Smack", combat_Macro.skill($skill(fights_templateObject156 || (fights_templateObject156 = fights_taggedTemplateLiteral(["Thrust-Smack"]))))).while_("hasskill Lunge Smack", combat_Macro.skill($skill(fights_templateObject157 || (fights_templateObject157 = fights_taggedTemplateLiteral(["Lunge Smack"]))))).attack().repeat(), () => (0,external_kolmafia_namespaceObject.use)(figurine));
}, true, {
  requirements: () => [new Requirement(["Club"], {})]
}), new FreeFight(() => utils_clamp(10 - property_get("_brickoFights"), 0, 10), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(fights_templateObject158 || (fights_templateObject158 = fights_taggedTemplateLiteral(["BRICKO ooze"])))), true, {
  cost: () => (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject159 || (fights_templateObject159 = fights_taggedTemplateLiteral(["BRICKO eye brick"])))) + 2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fights_templateObject160 || (fights_templateObject160 = fights_taggedTemplateLiteral(["BRICKO brick"])))),
  // They just die too dang quickly
  macroAllowsFamiliarActions: false
}), new FreeFight(() => wantPills() ? 5 - property_get("_saberForceUses") : 0, () => {
  if (lib_have($familiar(fights_templateObject161 || (fights_templateObject161 = fights_taggedTemplateLiteral(["Red-Nosed Snapper"]))))) (0,external_kolmafia_namespaceObject.cliExecute)("snapper ".concat($phylum(fights_templateObject162 || (fights_templateObject162 = fights_taggedTemplateLiteral(["dude"])))));
  setChoice(1387, 3);
  if (lib_have($skill(fights_templateObject163 || (fights_templateObject163 = fights_taggedTemplateLiteral(["Comprehensive Cartography"])))) && property_get("_monstersMapped") < (getBestItemStealZone(true) && property_get("_fireExtinguisherCharge") >= 10 ? 2 : 3) // Save a map to use for polar vortex
  ) {
    withMacro(combat_Macro.skill($skill(fights_templateObject164 || (fights_templateObject164 = fights_taggedTemplateLiteral(["Use the Force"])))), () => {
      mapMonster($location(fights_templateObject165 || (fights_templateObject165 = fights_taggedTemplateLiteral(["Domed City of Grimacia"]))), $monster(fights_templateObject166 || (fights_templateObject166 = fights_taggedTemplateLiteral(["grizzled survivor"]))));
      (0,external_kolmafia_namespaceObject.runCombat)();
      (0,external_kolmafia_namespaceObject.runChoice)(-1);
    });
  } else {
    if ((0,external_kolmafia_namespaceObject.numericModifier)(template_string_$item(fights_templateObject167 || (fights_templateObject167 = fights_taggedTemplateLiteral(["Grimacite guayabera"]))), "Monster Level") < 40) {
      (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(fights_templateObject168 || (fights_templateObject168 = fights_taggedTemplateLiteral(["tennis ball"]))));
      (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(fights_templateObject169 || (fights_templateObject169 = fights_taggedTemplateLiteral(["Louder Than Bomb"]))));
      (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(fights_templateObject170 || (fights_templateObject170 = fights_taggedTemplateLiteral(["divine champagne popper"]))));
    }
    garboAdventure($location(fights_templateObject171 || (fights_templateObject171 = fights_taggedTemplateLiteral(["Domed City of Grimacia"]))), combat_Macro.if_($monster(fights_templateObject172 || (fights_templateObject172 = fights_taggedTemplateLiteral(["alielf"]))), combat_Macro.trySkill($skill(fights_templateObject173 || (fights_templateObject173 = fights_taggedTemplateLiteral(["Asdon Martin: Spring-Loaded Front Bumper"])))).tryItem(template_string_$item(fights_templateObject174 || (fights_templateObject174 = fights_taggedTemplateLiteral(["Louder Than Bomb"]))))).if_($monster(fights_templateObject175 || (fights_templateObject175 = fights_taggedTemplateLiteral(["cat-alien"]))), combat_Macro.trySkill($skill(fights_templateObject176 || (fights_templateObject176 = fights_taggedTemplateLiteral(["Snokebomb"])))).tryItem(template_string_$item(fights_templateObject177 || (fights_templateObject177 = fights_taggedTemplateLiteral(["tennis ball"]))))).if_($monster(fights_templateObject178 || (fights_templateObject178 = fights_taggedTemplateLiteral(["dog-alien"]))), combat_Macro.trySkill($skill(fights_templateObject179 || (fights_templateObject179 = fights_taggedTemplateLiteral(["Feel Hatred"])))).tryItem(template_string_$item(fights_templateObject180 || (fights_templateObject180 = fights_taggedTemplateLiteral(["divine champagne popper"]))))).step("pickpocket").skill($skill(fights_templateObject181 || (fights_templateObject181 = fights_taggedTemplateLiteral(["Use the Force"])))));
  }
}, false, {
  requirements: () => {
    var canPickPocket = (0,external_kolmafia_namespaceObject.myPrimestat)() === $stat(fights_templateObject182 || (fights_templateObject182 = fights_taggedTemplateLiteral(["Moxie"])));
    var bestPickpocketItem = template_string_$items(fights_templateObject183 || (fights_templateObject183 = fights_taggedTemplateLiteral(["tiny black hole, mime army infiltration glove"]))).find(item => lib_have(item) && (0,external_kolmafia_namespaceObject.canEquip)(item));
    var reqs = [new Requirement(["1000 Pickpocket Chance"], {
      forceEquip: template_string_$items(fights_templateObject184 || (fights_templateObject184 = fights_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))
    })];
    if (!canPickPocket && bestPickpocketItem) {
      reqs.push(new Requirement([], {
        forceEquip: [bestPickpocketItem]
      }));
    }
    return reqs;
  },
  familiar: () => lib_have($familiar(fights_templateObject185 || (fights_templateObject185 = fights_taggedTemplateLiteral(["Red-Nosed Snapper"])))) ? $familiar(fights_templateObject186 || (fights_templateObject186 = fights_taggedTemplateLiteral(["Red-Nosed Snapper"]))) : null,
  effects: () => $effects(fights_templateObject187 || (fights_templateObject187 = fights_taggedTemplateLiteral(["Transpondent"]))),
  macroAllowsFamiliarActions: false
}),
// Initial 9 Pygmy fights
new FreeFight(() => property_get("questL11Worship") !== "unstarted" && bowlOfScorpionsAvailable() ? utils_clamp(9 - property_get("_drunkPygmyBanishes"), 0, 9) : 0, () => {
  (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(fights_templateObject188 || (fights_templateObject188 = fights_taggedTemplateLiteral(["bowling ball"])))), template_string_$item(fights_templateObject189 || (fights_templateObject189 = fights_taggedTemplateLiteral(["bowling ball"]))));
  (0,external_kolmafia_namespaceObject.retrieveItem)(utils_clamp(9 - property_get("_drunkPygmyBanishes"), 0, 9), template_string_$item(fights_templateObject190 || (fights_templateObject190 = fights_taggedTemplateLiteral(["Bowl of Scorpions"]))));
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject191 || (fights_templateObject191 = fights_taggedTemplateLiteral(["Louder Than Bomb"]))));
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject192 || (fights_templateObject192 = fights_taggedTemplateLiteral(["tennis ball"]))));
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject193 || (fights_templateObject193 = fights_taggedTemplateLiteral(["divine champagne popper"]))));
  garboAdventure($location(fights_templateObject194 || (fights_templateObject194 = fights_taggedTemplateLiteral(["The Hidden Bowling Alley"]))), pygmyMacro);
}, true, {
  cost: () => {
    var banishers = pygmyBanishHandlers.filter(_ref4 => {
      var skill = _ref4.skill,
        check = _ref4.check,
        limit = _ref4.limit;
      return !skill || !lib_have(skill) || check && property_get(check) >= limit;
    }).map(_ref5 => {
      var item = _ref5.item;
      return item;
    });
    return (0,external_kolmafia_namespaceObject.retrievePrice)(template_string_$item(fights_templateObject195 || (fights_templateObject195 = fights_taggedTemplateLiteral(["Bowl of Scorpions"])))) + utils_sum(banishers, external_kolmafia_namespaceObject.mallPrice) / 11;
  }
}),
// 10th Pygmy fight. If we have an orb, equip it for this fight, to save for later
new FreeFight(() => property_get("questL11Worship") !== "unstarted" && property_get("_drunkPygmyBanishes") === 9, () => {
  (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(fights_templateObject196 || (fights_templateObject196 = fights_taggedTemplateLiteral(["bowling ball"])))), template_string_$item(fights_templateObject197 || (fights_templateObject197 = fights_taggedTemplateLiteral(["bowling ball"]))));
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject198 || (fights_templateObject198 = fights_taggedTemplateLiteral(["Bowl of Scorpions"]))));
  garboAdventure($location(fights_templateObject199 || (fights_templateObject199 = fights_taggedTemplateLiteral(["The Hidden Bowling Alley"]))), pygmyMacro);
}, true, pygmyOptions(template_string_$items(fights_templateObject200 || (fights_templateObject200 = fights_taggedTemplateLiteral(["miniature crystal ball"]))).filter(item => lib_have(item)))),
// 11th pygmy fight if we lack a saber
new FreeFight(() => property_get("questL11Worship") !== "unstarted" && property_get("_drunkPygmyBanishes") === 10 && (!lib_have(template_string_$item(fights_templateObject201 || (fights_templateObject201 = fights_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) || crateStrategy() === "Saber"), () => {
  (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(fights_templateObject202 || (fights_templateObject202 = fights_taggedTemplateLiteral(["bowling ball"])))), template_string_$item(fights_templateObject203 || (fights_templateObject203 = fights_taggedTemplateLiteral(["bowling ball"]))));
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(fights_templateObject204 || (fights_templateObject204 = fights_taggedTemplateLiteral(["Bowl of Scorpions"]))));
  garboAdventureAuto($location(fights_templateObject205 || (fights_templateObject205 = fights_taggedTemplateLiteral(["The Hidden Bowling Alley"]))), pygmyMacro);
}, true, pygmyOptions()),
// 11th+ pygmy fight if we have a saber- saber friends
new FreeFight(() => {
  var rightTime = lib_have(template_string_$item(fights_templateObject206 || (fights_templateObject206 = fights_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) && crateStrategy() !== "Saber" && property_get("_drunkPygmyBanishes") >= 10;
  var saberedMonster = property_get("_saberForceMonster");
  var wrongPygmySabered = saberedMonster && $monsters(fights_templateObject207 || (fights_templateObject207 = fights_taggedTemplateLiteral(["pygmy orderlies, pygmy bowler, pygmy janitor"]))).includes(saberedMonster);
  var drunksCanAppear = property_get("_drunkPygmyBanishes") === 10 || saberedMonster === $monster(fights_templateObject208 || (fights_templateObject208 = fights_taggedTemplateLiteral(["drunk pygmy"]))) && property_get("_saberForceMonsterCount");
  return property_get("questL11Worship") !== "unstarted" && rightTime && !wrongPygmySabered && drunksCanAppear;
}, () => {
  if ((property_get("_saberForceMonster") !== $monster(fights_templateObject209 || (fights_templateObject209 = fights_taggedTemplateLiteral(["drunk pygmy"]))) || property_get("_saberForceMonsterCount") === 1) && property_get("_saberForceUses") < 5) {
    (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(fights_templateObject210 || (fights_templateObject210 = fights_taggedTemplateLiteral(["bowling ball"])))), template_string_$item(_templateObject211 || (_templateObject211 = fights_taggedTemplateLiteral(["bowling ball"]))));
    (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(_templateObject212 || (_templateObject212 = fights_taggedTemplateLiteral(["Bowl of Scorpions"])))), template_string_$item(_templateObject213 || (_templateObject213 = fights_taggedTemplateLiteral(["Bowl of Scorpions"]))));
    garboAdventure($location(_templateObject214 || (_templateObject214 = fights_taggedTemplateLiteral(["The Hidden Bowling Alley"]))), combat_Macro.skill($skill(_templateObject215 || (_templateObject215 = fights_taggedTemplateLiteral(["Use the Force"])))));
  } else {
    if ((0,external_kolmafia_namespaceObject.closetAmount)(template_string_$item(_templateObject216 || (_templateObject216 = fights_taggedTemplateLiteral(["Bowl of Scorpions"])))) > 0) {
      (0,external_kolmafia_namespaceObject.takeCloset)((0,external_kolmafia_namespaceObject.closetAmount)(template_string_$item(_templateObject217 || (_templateObject217 = fights_taggedTemplateLiteral(["Bowl of Scorpions"])))), template_string_$item(_templateObject218 || (_templateObject218 = fights_taggedTemplateLiteral(["Bowl of Scorpions"]))));
    } else (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(_templateObject219 || (_templateObject219 = fights_taggedTemplateLiteral(["Bowl of Scorpions"]))));
    garboAdventure($location(_templateObject220 || (_templateObject220 = fights_taggedTemplateLiteral(["The Hidden Bowling Alley"]))), pygmyMacro);
  }
}, false, pygmyOptions(template_string_$items(_templateObject221 || (_templateObject221 = fights_taggedTemplateLiteral(["Fourth of May Cosplay Saber"]))))),
// Finally, saber or not, if we have a drunk pygmy in our crystal ball, let it out.
new FreeFight(() => property_get("questL11Worship") !== "unstarted" && ponder().get($location(_templateObject222 || (_templateObject222 = fights_taggedTemplateLiteral(["The Hidden Bowling Alley"])))) === $monster(_templateObject223 || (_templateObject223 = fights_taggedTemplateLiteral(["drunk pygmy"]))) && property_get("_drunkPygmyBanishes") >= 11, () => {
  (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(_templateObject224 || (_templateObject224 = fights_taggedTemplateLiteral(["bowling ball"])))), template_string_$item(_templateObject225 || (_templateObject225 = fights_taggedTemplateLiteral(["bowling ball"]))));
  (0,external_kolmafia_namespaceObject.retrieveItem)(1, template_string_$item(_templateObject226 || (_templateObject226 = fights_taggedTemplateLiteral(["Bowl of Scorpions"]))));
  garboAdventure($location(_templateObject227 || (_templateObject227 = fights_taggedTemplateLiteral(["The Hidden Bowling Alley"]))), combat_Macro.if_($monster(_templateObject228 || (_templateObject228 = fights_taggedTemplateLiteral(["drunk pygmy"]))), pygmyMacro).abort());
}, true, pygmyOptions(template_string_$items(_templateObject229 || (_templateObject229 = fights_taggedTemplateLiteral(["miniature crystal ball"]))).filter(item => lib_have(item)))), new FreeFight(() => lib_have(template_string_$item(_templateObject230 || (_templateObject230 = fights_taggedTemplateLiteral(["Time-Spinner"])))) && !doingExtrovermectin() && $location(_templateObject231 || (_templateObject231 = fights_taggedTemplateLiteral(["The Hidden Bowling Alley"]))).combatQueue.includes("drunk pygmy") && property_get("_timeSpinnerMinutesUsed") < 8, () => {
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(_templateObject232 || (_templateObject232 = fights_taggedTemplateLiteral(["Bowl of Scorpions"]))));
  combat_Macro.trySkill($skill(_templateObject233 || (_templateObject233 = fights_taggedTemplateLiteral(["Extract"])))).trySkill($skill(_templateObject234 || (_templateObject234 = fights_taggedTemplateLiteral(["Sing Along"])))).setAutoAttack();
  (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?whichitem=".concat((0,external_kolmafia_namespaceObject.toInt)(template_string_$item(_templateObject235 || (_templateObject235 = fights_taggedTemplateLiteral(["Time-Spinner"]))))));
  (0,external_kolmafia_namespaceObject.runChoice)(1);
  (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1196&monid=".concat($monster(_templateObject236 || (_templateObject236 = fights_taggedTemplateLiteral(["drunk pygmy"]))).id, "&option=1"));
}, true, pygmyOptions()), new FreeFight(() => property_get("_sausageFights") === 0 && lib_have(template_string_$item(_templateObject237 || (_templateObject237 = fights_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))), () => (0,external_kolmafia_namespaceObject.adv1)(wanderWhere("wanderer"), -1, ""), true, {
  requirements: () => [new Requirement([], {
    forceEquip: template_string_$items(_templateObject238 || (_templateObject238 = fights_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))
  })]
}), new FreeFight(() => property_get("questL11Ron") === "finished" ? utils_clamp(5 - property_get("_glarkCableUses"), 0, (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(_templateObject239 || (_templateObject239 = fights_taggedTemplateLiteral(["glark cable"]))))) : 0, () => {
  garboAdventure($location(_templateObject240 || (_templateObject240 = fights_taggedTemplateLiteral(["The Red Zeppelin"]))), combat_Macro.item(template_string_$item(_templateObject241 || (_templateObject241 = fights_taggedTemplateLiteral(["glark cable"])))));
}, true, {
  macroAllowsFamiliarActions: false
}),
// Mushroom garden
new FreeFight(() => (lib_have(template_string_$item(_templateObject242 || (_templateObject242 = fights_taggedTemplateLiteral(["packet of mushroom spores"])))) || (0,external_kolmafia_namespaceObject.getCampground)()["packet of mushroom spores"] !== undefined) && property_get("_mushroomGardenFights") === 0, () => {
  if (lib_have(template_string_$item(_templateObject243 || (_templateObject243 = fights_taggedTemplateLiteral(["packet of mushroom spores"]))))) (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject244 || (_templateObject244 = fights_taggedTemplateLiteral(["packet of mushroom spores"]))));
  if (SourceTerminal_have()) {
    educate([$skill(_templateObject245 || (_templateObject245 = fights_taggedTemplateLiteral(["Extract"]))), $skill(_templateObject246 || (_templateObject246 = fights_taggedTemplateLiteral(["Portscan"])))]);
  }
  garboAdventure($location(_templateObject247 || (_templateObject247 = fights_taggedTemplateLiteral(["Your Mushroom Garden"]))), combat_Macro.externalIf(!doingExtrovermectin(), combat_Macro.if_($skill(_templateObject248 || (_templateObject248 = fights_taggedTemplateLiteral(["Macrometeorite"]))), combat_Macro.trySkill($skill(_templateObject249 || (_templateObject249 = fights_taggedTemplateLiteral(["Portscan"])))))).basicCombat());
  if (lib_have(template_string_$item(_templateObject250 || (_templateObject250 = fights_taggedTemplateLiteral(["packet of tall grass seeds"]))))) (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject251 || (_templateObject251 = fights_taggedTemplateLiteral(["packet of tall grass seeds"]))));
}, true, {
  familiar: () => lib_have($familiar(_templateObject252 || (_templateObject252 = fights_taggedTemplateLiteral(["Robortender"])))) ? $familiar(_templateObject253 || (_templateObject253 = fights_taggedTemplateLiteral(["Robortender"]))) : null
}),
// Portscan and mushroom garden
new FreeFight(() => !doingExtrovermectin() && (lib_have(template_string_$item(_templateObject254 || (_templateObject254 = fights_taggedTemplateLiteral(["packet of mushroom spores"])))) || (0,external_kolmafia_namespaceObject.getCampground)()["packet of mushroom spores"] !== undefined) && counter_get("portscan.edu") === 0 && lib_have($skill(_templateObject255 || (_templateObject255 = fights_taggedTemplateLiteral(["Macrometeorite"])))) && property_get("_macrometeoriteUses") < 10, () => {
  if (lib_have(template_string_$item(_templateObject256 || (_templateObject256 = fights_taggedTemplateLiteral(["packet of mushroom spores"]))))) (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject257 || (_templateObject257 = fights_taggedTemplateLiteral(["packet of mushroom spores"]))));
  if (SourceTerminal_have()) {
    educate([$skill(_templateObject258 || (_templateObject258 = fights_taggedTemplateLiteral(["Extract"]))), $skill(_templateObject259 || (_templateObject259 = fights_taggedTemplateLiteral(["Portscan"])))]);
  }
  garboAdventure($location(_templateObject260 || (_templateObject260 = fights_taggedTemplateLiteral(["Your Mushroom Garden"]))), combat_Macro.if_($monster(_templateObject261 || (_templateObject261 = fights_taggedTemplateLiteral(["Government agent"]))), combat_Macro.skill($skill(_templateObject262 || (_templateObject262 = fights_taggedTemplateLiteral(["Macrometeorite"]))))).if_($monster(_templateObject263 || (_templateObject263 = fights_taggedTemplateLiteral(["piranha plant"]))), combat_Macro.if_($skill(_templateObject264 || (_templateObject264 = fights_taggedTemplateLiteral(["Macrometeorite"]))), combat_Macro.trySkill($skill(_templateObject265 || (_templateObject265 = fights_taggedTemplateLiteral(["Portscan"]))))).basicCombat()));
  if (lib_have(template_string_$item(_templateObject266 || (_templateObject266 = fights_taggedTemplateLiteral(["packet of tall grass seeds"]))))) (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject267 || (_templateObject267 = fights_taggedTemplateLiteral(["packet of tall grass seeds"]))));
}, true), new FreeFight(() => lib_have($familiar(_templateObject268 || (_templateObject268 = fights_taggedTemplateLiteral(["God Lobster"])))) ? utils_clamp(3 - property_get("_godLobsterFights"), 0, 3) : 0, () => {
  propertyManager.setChoices({
    1310: !lib_have(template_string_$item(_templateObject269 || (_templateObject269 = fights_taggedTemplateLiteral(["God Lobster's Crown"])))) ? 1 : 2 // god lob equipment, then stats
  });

  (0,external_kolmafia_namespaceObject.restoreHp)((0,external_kolmafia_namespaceObject.myMaxhp)());
  (0,external_kolmafia_namespaceObject.visitUrl)("main.php?fightgodlobster=1");
  (0,external_kolmafia_namespaceObject.runCombat)();
  (0,external_kolmafia_namespaceObject.visitUrl)("choice.php");
  if ((0,external_kolmafia_namespaceObject.handlingChoice)()) (0,external_kolmafia_namespaceObject.runChoice)(-1);
}, false, {
  familiar: () => $familiar(_templateObject270 || (_templateObject270 = fights_taggedTemplateLiteral(["God Lobster"]))),
  requirements: () => [new Requirement([], {
    bonusEquip: new Map([[template_string_$item(_templateObject271 || (_templateObject271 = fights_taggedTemplateLiteral(["God Lobster's Scepter"]))), 1000], [template_string_$item(_templateObject272 || (_templateObject272 = fights_taggedTemplateLiteral(["God Lobster's Ring"]))), 2000], [template_string_$item(_templateObject273 || (_templateObject273 = fights_taggedTemplateLiteral(["God Lobster's Rod"]))), 3000], [template_string_$item(_templateObject274 || (_templateObject274 = fights_taggedTemplateLiteral(["God Lobster's Robe"]))), 4000], [template_string_$item(_templateObject275 || (_templateObject275 = fights_taggedTemplateLiteral(["God Lobster's Crown"]))), 5000]])
  })]
}), new FreeFight(() => lib_have($familiar(_templateObject276 || (_templateObject276 = fights_taggedTemplateLiteral(["Machine Elf"])))) ? utils_clamp(5 - property_get("_machineTunnelsAdv"), 0, 5) : 0, () => {
  propertyManager.setChoices({
    1119: 6 // escape DMT
  });

  var thought = garboValue(template_string_$item(_templateObject277 || (_templateObject277 = fights_taggedTemplateLiteral(["abstraction: certainty"])))) >= garboValue(template_string_$item(_templateObject278 || (_templateObject278 = fights_taggedTemplateLiteral(["abstraction: thought"]))));
  var action = garboValue(template_string_$item(_templateObject279 || (_templateObject279 = fights_taggedTemplateLiteral(["abstraction: joy"])))) >= garboValue(template_string_$item(_templateObject280 || (_templateObject280 = fights_taggedTemplateLiteral(["abstraction: action"]))));
  var sensation = garboValue(template_string_$item(_templateObject281 || (_templateObject281 = fights_taggedTemplateLiteral(["abstraction: motion"])))) >= garboValue(template_string_$item(_templateObject282 || (_templateObject282 = fights_taggedTemplateLiteral(["abstraction: sensation"]))));
  if (thought) {
    acquire(1, template_string_$item(_templateObject283 || (_templateObject283 = fights_taggedTemplateLiteral(["abstraction: thought"]))), garboValue(template_string_$item(_templateObject284 || (_templateObject284 = fights_taggedTemplateLiteral(["abstraction: certainty"])))), false);
  }
  if (action) {
    acquire(1, template_string_$item(_templateObject285 || (_templateObject285 = fights_taggedTemplateLiteral(["abstraction: action"]))), garboValue(template_string_$item(_templateObject286 || (_templateObject286 = fights_taggedTemplateLiteral(["abstraction: joy"])))), false);
  }
  if (sensation) {
    acquire(1, template_string_$item(_templateObject287 || (_templateObject287 = fights_taggedTemplateLiteral(["abstraction: sensation"]))), garboValue(template_string_$item(_templateObject288 || (_templateObject288 = fights_taggedTemplateLiteral(["abstraction: motion"])))), false);
  }
  garboAdventure($location(_templateObject289 || (_templateObject289 = fights_taggedTemplateLiteral(["The Deep Machine Tunnels"]))), combat_Macro.externalIf(thought, combat_Macro.if_($monster(_templateObject290 || (_templateObject290 = fights_taggedTemplateLiteral(["Perceiver of Sensations"]))), combat_Macro.tryItem(template_string_$item(_templateObject291 || (_templateObject291 = fights_taggedTemplateLiteral(["abstraction: thought"])))))).externalIf(action, combat_Macro.if_($monster(_templateObject292 || (_templateObject292 = fights_taggedTemplateLiteral(["Thinker of Thoughts"]))), combat_Macro.tryItem(template_string_$item(_templateObject293 || (_templateObject293 = fights_taggedTemplateLiteral(["abstraction: action"])))))).externalIf(sensation, combat_Macro.if_($monster(_templateObject294 || (_templateObject294 = fights_taggedTemplateLiteral(["Performer of Actions"]))), combat_Macro.tryItem(template_string_$item(_templateObject295 || (_templateObject295 = fights_taggedTemplateLiteral(["abstraction: sensation"])))))).basicCombat());
}, false,
// Marked like this as 2 DMT fights get overriden by tentacles.
{
  familiar: () => $familiar(_templateObject296 || (_templateObject296 = fights_taggedTemplateLiteral(["Machine Elf"])))
}),
// 28	5	0	0	Witchess pieces	must have a Witchess Set; can copy for more
new FreeFight(() => Witchess_have() ? utils_clamp(5 - fightsDone(), 0, 5) : 0, () => fightPiece(bestWitchessPiece()), true), new FreeFight(() => property_get("snojoAvailable") && property_get("snojoSetting") !== null && utils_clamp(10 - property_get("_snojoFreeFights"), 0, 10), () => {
  (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject297 || (_templateObject297 = fights_taggedTemplateLiteral(["The X-32-F Combat Training Snowman"]))), -1, "");
}, false), new FreeFight(() => property_get("neverendingPartyAlways") && lib_questStep("_questPartyFair") < 999 ? utils_clamp(10 - property_get("_neverendingPartyFreeTurns") - (property_get("_thesisDelivered") || !lib_have($familiar(_templateObject298 || (_templateObject298 = fights_taggedTemplateLiteral(["Pocket Professor"])))) ? 0 : 1), 0, 10) : 0, () => {
  var constructedMacro = combat_Macro.tryHaveSkill($skill(_templateObject299 || (_templateObject299 = fights_taggedTemplateLiteral(["Feel Pride"])))).basicCombat();
  setNepQuestChoicesAndPrepItems();
  garboAdventure($location(_templateObject300 || (_templateObject300 = fights_taggedTemplateLiteral(["The Neverending Party"]))), constructedMacro);
}, true, {
  requirements: () => [new Requirement([].concat(fights_toConsumableArray(property_get("_questPartyFairQuest") === "trash" ? ["100 Item Drop"] : []), fights_toConsumableArray(property_get("_questPartyFairQuest") === "dj" ? ["100 Meat Drop"] : [])), {
    forceEquip: fights_toConsumableArray(lib_have(template_string_$item(_templateObject301 || (_templateObject301 = fights_taggedTemplateLiteral(["January's Garbage Tote"])))) ? template_string_$items(_templateObject302 || (_templateObject302 = fights_taggedTemplateLiteral(["makeshift garbage shirt"]))) : [])
  })]
}), new FreeFight(() => property_get("ownsSpeakeasy") ? 3 - property_get("_speakeasyFreeFights") : 0, () => (0,external_kolmafia_namespaceObject.adv1)($location(_templateObject303 || (_templateObject303 = fights_taggedTemplateLiteral(["An Unusually Quiet Barroom Brawl"]))), -1, ""), true), new FreeFight(() => CombatLoversLocket_have() && !!locketMonster() && reminiscesLeft() > 1, () => {
  var monster = locketMonster();
  if (!monster) return;
  reminisce(monster);
}, true, {
  familiar: () => {
    var _find2;
    return (_find2 = $familiars(_templateObject304 || (_templateObject304 = fights_taggedTemplateLiteral(["Robortender"]))).find(lib_have)) !== null && _find2 !== void 0 ? _find2 : null;
  }
}),
// Get a li'l ninja costume for 150% item drop
new FreeFight(() => !lib_have(template_string_$item(_templateObject305 || (_templateObject305 = fights_taggedTemplateLiteral(["li'l ninja costume"])))) && lib_have($familiar(_templateObject306 || (_templateObject306 = fights_taggedTemplateLiteral(["Trick-or-Treating Tot"])))) && !property_get("_firedJokestersGun") && lib_have(template_string_$item(_templateObject307 || (_templateObject307 = fights_taggedTemplateLiteral(["The Jokester's gun"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(_templateObject308 || (_templateObject308 = fights_taggedTemplateLiteral(["The Jokester's gun"])))) && lib_questStep("questL08Trapper") >= 2, () => garboAdventure($location(_templateObject309 || (_templateObject309 = fights_taggedTemplateLiteral(["Lair of the Ninja Snowmen"]))), combat_Macro.skill($skill(_templateObject310 || (_templateObject310 = fights_taggedTemplateLiteral(["Fire the Jokester's Gun"])))).abort()), true, {
  requirements: () => [new Requirement([], {
    forceEquip: template_string_$items(_templateObject311 || (_templateObject311 = fights_taggedTemplateLiteral(["The Jokester's gun"])))
  })],
  macroAllowsFamiliarActions: false
}),
// Fallback for li'l ninja costume if Lair of the Ninja Snowmen is unavailable
new FreeFight(() => !lib_have(template_string_$item(_templateObject312 || (_templateObject312 = fights_taggedTemplateLiteral(["li'l ninja costume"])))) && lib_have($familiar(_templateObject313 || (_templateObject313 = fights_taggedTemplateLiteral(["Trick-or-Treating Tot"])))) && !property_get("_firedJokestersGun") && lib_have(template_string_$item(_templateObject314 || (_templateObject314 = fights_taggedTemplateLiteral(["The Jokester's gun"])))) && (0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(_templateObject315 || (_templateObject315 = fights_taggedTemplateLiteral(["The Jokester's gun"])))) && lib_have($skill(_templateObject316 || (_templateObject316 = fights_taggedTemplateLiteral(["Comprehensive Cartography"])))) && property_get("_monstersMapped") < 3, () => {
  try {
    combat_Macro.skill($skill(_templateObject317 || (_templateObject317 = fights_taggedTemplateLiteral(["Fire the Jokester's Gun"])))).abort().setAutoAttack();
    mapMonster($location(_templateObject318 || (_templateObject318 = fights_taggedTemplateLiteral(["The Haiku Dungeon"]))), $monster(_templateObject319 || (_templateObject319 = fights_taggedTemplateLiteral(["amateur ninja"]))));
  } finally {
    (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
  }
}, true, {
  requirements: () => [new Requirement([], {
    forceEquip: template_string_$items(_templateObject320 || (_templateObject320 = fights_taggedTemplateLiteral(["The Jokester's gun"])))
  })],
  macroAllowsFamiliarActions: false
})];
var freeRunFightSources = [
// Unlock Latte ingredients
new FreeRunFight(() => lib_have(template_string_$item(_templateObject321 || (_templateObject321 = fights_taggedTemplateLiteral(["latte lovers member's mug"])))) && !property_get("latteUnlocks").includes("cajun") && lib_questStep("questL11MacGuffin") > -1, runSource => {
  var _propertyManager$setC;
  propertyManager.setChoices((_propertyManager$setC = {}, fights_defineProperty(_propertyManager$setC, 923, 1), fights_defineProperty(_propertyManager$setC, 924, 1), _propertyManager$setC));
  garboAdventure($location(_templateObject322 || (_templateObject322 = fights_taggedTemplateLiteral(["The Black Forest"]))), runSource.macro);
}, {
  requirements: () => [new Requirement([], {
    forceEquip: template_string_$items(_templateObject323 || (_templateObject323 = fights_taggedTemplateLiteral(["latte lovers member's mug"])))
  })]
}, latteActionSourceFinderConstraints), new FreeRunFight(() => lib_have(template_string_$item(_templateObject324 || (_templateObject324 = fights_taggedTemplateLiteral(["latte lovers member's mug"])))) && !property_get("latteUnlocks").includes("rawhide") && lib_questStep("questL02Larva") > -1, runSource => {
  var _propertyManager$setC2;
  propertyManager.setChoices((_propertyManager$setC2 = {}, fights_defineProperty(_propertyManager$setC2, 502, 2), fights_defineProperty(_propertyManager$setC2, 505, 2), _propertyManager$setC2));
  garboAdventure($location(_templateObject325 || (_templateObject325 = fights_taggedTemplateLiteral(["The Spooky Forest"]))), runSource.macro);
}, {
  requirements: () => [new Requirement([], {
    forceEquip: template_string_$items(_templateObject326 || (_templateObject326 = fights_taggedTemplateLiteral(["latte lovers member's mug"])))
  })]
}, latteActionSourceFinderConstraints), new FreeRunFight(() => lib_have(template_string_$item(_templateObject327 || (_templateObject327 = fights_taggedTemplateLiteral(["latte lovers member's mug"])))) && !property_get("latteUnlocks").includes("carrot") && property_get("latteUnlocks").includes("cajun") && property_get("latteUnlocks").includes("rawhide"), runSource => {
  garboAdventure($location(_templateObject328 || (_templateObject328 = fights_taggedTemplateLiteral(["The Dire Warren"]))), runSource.macro);
}, {
  requirements: () => [new Requirement([], {
    forceEquip: template_string_$items(_templateObject329 || (_templateObject329 = fights_taggedTemplateLiteral(["latte lovers member's mug"])))
  })]
}, latteActionSourceFinderConstraints), new FreeRunFight(() => lib_have($familiar(_templateObject330 || (_templateObject330 = fights_taggedTemplateLiteral(["Space Jellyfish"])))) && property_get("_spaceJellyfishDrops") < 5 && getStenchLocation() !== $location(_templateObject331 || (_templateObject331 = fights_taggedTemplateLiteral(["none"]))), runSource => {
  garboAdventure(getStenchLocation(), combat_Macro.trySkill($skill(_templateObject332 || (_templateObject332 = fights_taggedTemplateLiteral(["Extract Jelly"])))).step(runSource.macro));
}, {
  familiar: () => $familiar(_templateObject333 || (_templateObject333 = fights_taggedTemplateLiteral(["Space Jellyfish"])))
}), new FreeRunFight(() => !doingExtrovermectin() && lib_have($familiar(_templateObject334 || (_templateObject334 = fights_taggedTemplateLiteral(["Space Jellyfish"])))) && lib_have($skill(_templateObject335 || (_templateObject335 = fights_taggedTemplateLiteral(["Meteor Lore"])))) && property_get("_macrometeoriteUses") < 10 && getStenchLocation() !== $location(_templateObject336 || (_templateObject336 = fights_taggedTemplateLiteral(["none"]))), runSource => {
  garboAdventure(getStenchLocation(), combat_Macro.while_("!pastround 28 && hasskill macrometeorite", combat_Macro.skill($skill(_templateObject337 || (_templateObject337 = fights_taggedTemplateLiteral(["Extract Jelly"])))).skill($skill(_templateObject338 || (_templateObject338 = fights_taggedTemplateLiteral(["Macrometeorite"]))))).trySkill($skill(_templateObject339 || (_templateObject339 = fights_taggedTemplateLiteral(["Extract Jelly"])))).step(runSource.macro));
}, {
  familiar: () => $familiar(_templateObject340 || (_templateObject340 = fights_taggedTemplateLiteral(["Space Jellyfish"])))
}), new FreeRunFight(() => !doingExtrovermectin() && lib_have($familiar(_templateObject341 || (_templateObject341 = fights_taggedTemplateLiteral(["Space Jellyfish"])))) && lib_have(template_string_$item(_templateObject342 || (_templateObject342 = fights_taggedTemplateLiteral(["Powerful Glove"])))) && property_get("_powerfulGloveBatteryPowerUsed") < 91 && getStenchLocation() !== $location(_templateObject343 || (_templateObject343 = fights_taggedTemplateLiteral(["none"]))), runSource => {
  garboAdventure(getStenchLocation(), combat_Macro.while_("!pastround 28 && hasskill CHEAT CODE: Replace Enemy", combat_Macro.skill($skill(_templateObject344 || (_templateObject344 = fights_taggedTemplateLiteral(["Extract Jelly"])))).skill($skill(_templateObject345 || (_templateObject345 = fights_taggedTemplateLiteral(["CHEAT CODE: Replace Enemy"]))))).trySkill($skill(_templateObject346 || (_templateObject346 = fights_taggedTemplateLiteral(["Extract Jelly"])))).step(runSource.macro));
}, {
  familiar: () => $familiar(_templateObject347 || (_templateObject347 = fights_taggedTemplateLiteral(["Space Jellyfish"]))),
  requirements: () => [new Requirement([], {
    forceEquip: template_string_$items(_templateObject348 || (_templateObject348 = fights_taggedTemplateLiteral(["Powerful Glove"])))
  })]
}), new FreeFight(() => (property_get("gingerbreadCityAvailable") || property_get("_gingerbreadCityToday")) && property_get("gingerAdvanceClockUnlocked") && !property_get("_gingerbreadClockVisited") && property_get("_gingerbreadCityTurns") <= 3, () => {
  propertyManager.setChoices({
    1215: 1 // Gingerbread Civic Center advance clock
  });

  garboAdventure($location(_templateObject349 || (_templateObject349 = fights_taggedTemplateLiteral(["Gingerbread Civic Center"]))), combat_Macro.abort());
}, false, {
  noncombat: () => true
}), new FreeRunFight(() => (property_get("gingerbreadCityAvailable") || property_get("_gingerbreadCityToday")) && property_get("_gingerbreadCityTurns") + (property_get("_gingerbreadClockAdvanced") ? 5 : 0) < 9, runSource => {
  propertyManager.setChoices({
    1215: 1 // Gingerbread Civic Center advance clock
  });

  garboAdventure($location(_templateObject350 || (_templateObject350 = fights_taggedTemplateLiteral(["Gingerbread Civic Center"]))), runSource.macro);
  if (["Even Tamer Than Usual", "Never Break the Chain", "Close, but Yes Cigar", "Armchair Quarterback"].includes(property_get("lastEncounter"))) {
    _set("_gingerbreadCityTurns", 1 + property_get("_gingerbreadCityTurns"));
  }
}, {
  requirements: () => [new Requirement([], {
    bonusEquip: new Map(template_string_$items(_templateObject351 || (_templateObject351 = fights_taggedTemplateLiteral(["carnivorous potted plant"]))).map(item => [item, 100]))
  })]
}), new FreeFight(() => (property_get("gingerbreadCityAvailable") || property_get("_gingerbreadCityToday")) && property_get("_gingerbreadCityTurns") + (property_get("_gingerbreadClockAdvanced") ? 5 : 0) === 9, () => {
  propertyManager.setChoices({
    1204: 1 // Gingerbread Train Station Noon random candy
  });

  garboAdventure($location(_templateObject352 || (_templateObject352 = fights_taggedTemplateLiteral(["Gingerbread Train Station"]))), combat_Macro.abort());
}, false, {
  noncombat: () => true
}), new FreeRunFight(() => (property_get("gingerbreadCityAvailable") || property_get("_gingerbreadCityToday")) && property_get("_gingerbreadCityTurns") + (property_get("_gingerbreadClockAdvanced") ? 5 : 0) >= 10 && property_get("_gingerbreadCityTurns") + (property_get("_gingerbreadClockAdvanced") ? 5 : 0) < 19 && ((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject353 || (_templateObject353 = fights_taggedTemplateLiteral(["sprinkles"])))) > 5 || (0,external_kolmafia_namespaceObject.haveOutfit)("gingerbread best")), runSource => {
  propertyManager.setChoices({
    1215: 1 // Gingerbread Civic Center advance clock
  });

  garboAdventure($location(_templateObject354 || (_templateObject354 = fights_taggedTemplateLiteral(["Gingerbread Civic Center"]))), runSource.macro);
  if (["Even Tamer Than Usual", "Never Break the Chain", "Close, but Yes Cigar", "Armchair Quarterback"].includes(property_get("lastEncounter"))) {
    _set("_gingerbreadCityTurns", 1 + property_get("_gingerbreadCityTurns"));
  }
}, {
  requirements: () => [new Requirement([], {
    bonusEquip: new Map(template_string_$items(_templateObject355 || (_templateObject355 = fights_taggedTemplateLiteral(["carnivorous potted plant"]))).map(item => [item, 100]))
  })]
}), new FreeFight(() => (property_get("gingerbreadCityAvailable") || property_get("_gingerbreadCityToday")) && property_get("_gingerbreadCityTurns") + (property_get("_gingerbreadClockAdvanced") ? 5 : 0) === 19 && ((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject356 || (_templateObject356 = fights_taggedTemplateLiteral(["sprinkles"])))) > 5 || (0,external_kolmafia_namespaceObject.haveOutfit)("gingerbread best")), () => {
  propertyManager.setChoices({
    1203: 4,
    // Gingerbread Civic Center 5 gingerbread cigarettes
    1215: 1,
    // Gingerbread Civic Center advance clock
    1209: 2,
    // enter the gallery at Upscale Midnight
    1214: 1 // get High-End ginger wine
  });

  var best = bestConsumable("booze", true, template_string_$items(_templateObject357 || (_templateObject357 = fights_taggedTemplateLiteral(["high-end ginger wine, astral pilsner"]))));
  var gingerWineValue = (0.5 * 30 * (baseMeat + 750) + getAverageAdventures(template_string_$item(_templateObject358 || (_templateObject358 = fights_taggedTemplateLiteral(["high-end ginger wine"])))) * property_get("valueOfAdventure")) / 2;
  var valueDif = gingerWineValue - best.value;
  if ((0,external_kolmafia_namespaceObject.haveOutfit)("gingerbread best") && ((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject359 || (_templateObject359 = fights_taggedTemplateLiteral(["sprinkles"])))) < 5 || valueDif * 2 > garboValue(template_string_$item(_templateObject360 || (_templateObject360 = fights_taggedTemplateLiteral(["gingerbread cigarette"])))) * 5 && (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(_templateObject361 || (_templateObject361 = fights_taggedTemplateLiteral(["high-end ginger wine"])))) < 11)) {
    (0,external_kolmafia_namespaceObject.outfit)("gingerbread best");
    garboAdventure($location(_templateObject362 || (_templateObject362 = fights_taggedTemplateLiteral(["Gingerbread Upscale Retail District"]))), combat_Macro.abort());
  } else {
    garboAdventure($location(_templateObject363 || (_templateObject363 = fights_taggedTemplateLiteral(["Gingerbread Civic Center"]))), combat_Macro.abort());
  }
}, false, {
  noncombat: () => true
}),
// Fire Extinguisher on best available target.
new FreeRunFight(() => (lib_have(template_string_$item(_templateObject364 || (_templateObject364 = fights_taggedTemplateLiteral(["industrial fire extinguisher"])))) && property_get("_fireExtinguisherCharge") >= 10 || lib_have($familiar(_templateObject365 || (_templateObject365 = fights_taggedTemplateLiteral(["XO Skeleton"])))) && property_get("_xoHugsUsed") < 11) && property_get("_VYKEACompanionLevel") === 0 &&
// don't attempt this in case you re-run garbo after making a vykea furniture
getBestItemStealZone(true) !== null, runSource => {
  setupItemStealZones();
  var best = getBestItemStealZone(true);
  if (!best) throw "Unable to find fire extinguisher zone?";
  var mappingMonster = lib_have($skill(_templateObject366 || (_templateObject366 = fights_taggedTemplateLiteral(["Comprehensive Cartography"])))) && property_get("_monstersMapped") < 3 && best.location.wanderers && lib_have($skill(_templateObject367 || (_templateObject367 = fights_taggedTemplateLiteral(["Comprehensive Cartography"])))) && property_get("_monstersMapped") < 3;
  var monsters = asArray(best.monster);
  try {
    if (best.preReq) best.preReq();
    var vortex = $skill(_templateObject368 || (_templateObject368 = fights_taggedTemplateLiteral(["Fire Extinguisher: Polar Vortex"])));
    var hasXO = (0,external_kolmafia_namespaceObject.myFamiliar)() === $familiar(_templateObject369 || (_templateObject369 = fights_taggedTemplateLiteral(["XO Skeleton"])));
    if ((0,external_kolmafia_namespaceObject.myThrall)() !== $thrall.none) (0,external_kolmafia_namespaceObject.useSkill)($skill(_templateObject370 || (_templateObject370 = fights_taggedTemplateLiteral(["Dismiss Pasta Thrall"]))));
    combat_Macro.if_(monsters.map(m => "!monsterid ".concat(m.id)).join(" && "), runSource.macro).externalIf(hasXO && property_get("_xoHugsUsed") < 11, combat_Macro.skill($skill(_templateObject371 || (_templateObject371 = fights_taggedTemplateLiteral(["Hugs and Kisses!"]))))).externalIf(!best.requireMapTheMonsters && hasXO && property_get("_xoHugsUsed") < 10, combat_Macro.step(itemStealOlfact(best))).while_("hasskill ".concat((0,external_kolmafia_namespaceObject.toInt)(vortex)), combat_Macro.skill(vortex)).step(runSource.macro).setAutoAttack();
    if (mappingMonster) {
      mapMonster(best.location, monsters[0]);
    } else {
      (0,external_kolmafia_namespaceObject.adv1)(best.location, -1, "");
    }
  } finally {
    (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
  }
}, {
  familiar: () => lib_have($familiar(_templateObject372 || (_templateObject372 = fights_taggedTemplateLiteral(["XO Skeleton"])))) && property_get("_xoHugsUsed") < 11 ? $familiar(_templateObject373 || (_templateObject373 = fights_taggedTemplateLiteral(["XO Skeleton"]))) : null,
  requirements: () => {
    var _zone$maximize;
    var zone = getBestItemStealZone();
    return [new Requirement((_zone$maximize = zone === null || zone === void 0 ? void 0 : zone.maximize) !== null && _zone$maximize !== void 0 ? _zone$maximize : [], {
      forceEquip: lib_have(template_string_$item(_templateObject374 || (_templateObject374 = fights_taggedTemplateLiteral(["industrial fire extinguisher"])))) && property_get("_fireExtinguisherCharge") >= 10 ? template_string_$items(_templateObject375 || (_templateObject375 = fights_taggedTemplateLiteral(["industrial fire extinguisher"]))) : []
    })];
  }
}),
// Try for mini-hipster\goth kid free fights with any remaining non-familiar free runs
new FreeRunFight(() => property_get("_hipsterAdv") < 7 && (lib_have($familiar(_templateObject376 || (_templateObject376 = fights_taggedTemplateLiteral(["Mini-Hipster"])))) || lib_have($familiar(_templateObject377 || (_templateObject377 = fights_taggedTemplateLiteral(["Artistic Goth Kid"]))))), runSource => {
  var targetLocation = wanderWhere("backup");
  garboAdventure(targetLocation, combat_Macro.if_("(monsterid 969) || (monsterid 970) || (monsterid 971) || (monsterid 972) || (monsterid 973) || (monstername Black Crayon *)", combat_Macro.basicCombat()).step(runSource.macro));
}, {
  familiar: () => lib_have($familiar(_templateObject378 || (_templateObject378 = fights_taggedTemplateLiteral(["Mini-Hipster"])))) ? $familiar(_templateObject379 || (_templateObject379 = fights_taggedTemplateLiteral(["Mini-Hipster"]))) : $familiar(_templateObject380 || (_templateObject380 = fights_taggedTemplateLiteral(["Artistic Goth Kid"]))),
  requirements: () => [new Requirement([], {
    bonusEquip: new Map(lib_have($familiar(_templateObject381 || (_templateObject381 = fights_taggedTemplateLiteral(["Mini-Hipster"])))) ? [[template_string_$item(_templateObject382 || (_templateObject382 = fights_taggedTemplateLiteral(["ironic moustache"]))), garboValue(template_string_$item(_templateObject383 || (_templateObject383 = fights_taggedTemplateLiteral(["mole skin notebook"]))))], [template_string_$item(_templateObject384 || (_templateObject384 = fights_taggedTemplateLiteral(["chiptune guitar"]))), garboValue(template_string_$item(_templateObject385 || (_templateObject385 = fights_taggedTemplateLiteral(["ironic knit cap"]))))], [template_string_$item(_templateObject386 || (_templateObject386 = fights_taggedTemplateLiteral(["fixed-gear bicycle"]))), garboValue(template_string_$item(_templateObject387 || (_templateObject387 = fights_taggedTemplateLiteral(["ironic oversized sunglasses"]))))]] : [])
  })]
}),
// Try for an ultra-rare with mayfly runs ;)
new FreeRunFight(() => lib_have(template_string_$item(_templateObject388 || (_templateObject388 = fights_taggedTemplateLiteral(["mayfly bait necklace"])))) && (0,external_kolmafia_namespaceObject.canAdventure)($location(_templateObject389 || (_templateObject389 = fights_taggedTemplateLiteral(["Cobb's Knob Menagerie, Level 1"])))) && property_get("_mayflySummons") < 30, runSource => {
  garboAdventure($location(_templateObject390 || (_templateObject390 = fights_taggedTemplateLiteral(["Cobb's Knob Menagerie, Level 1"]))), combat_Macro.if_($monster(_templateObject391 || (_templateObject391 = fights_taggedTemplateLiteral(["QuickBASIC elemental"]))), combat_Macro.basicCombat()).if_($monster(_templateObject392 || (_templateObject392 = fights_taggedTemplateLiteral(["BASIC Elemental"]))), combat_Macro.trySkill($skill(_templateObject393 || (_templateObject393 = fights_taggedTemplateLiteral(["Summon Mayfly Swarm"]))))).step(runSource.macro));
}, {
  requirements: () => [new Requirement([], {
    forceEquip: template_string_$items(_templateObject394 || (_templateObject394 = fights_taggedTemplateLiteral(["mayfly bait necklace"]))),
    bonusEquip: new Map(template_string_$items(_templateObject395 || (_templateObject395 = fights_taggedTemplateLiteral(["carnivorous potted plant"]))).map(item => [item, 100]))
  })]
})];
function sandwormRequirement() {
  return Requirement.merge([new Requirement(["100 Item Drop"], lib_have(template_string_$item(_templateObject396 || (_templateObject396 = fights_taggedTemplateLiteral(["January's Garbage Tote"])))) && property_get("garbageChampagneCharge") > 0 ? {
    forceEquip: template_string_$items(_templateObject397 || (_templateObject397 = fights_taggedTemplateLiteral(["broken champagne bottle"])))
  } : {}), new Requirement([], lib_have(template_string_$item(_templateObject398 || (_templateObject398 = fights_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))) && property_get("_otoscopeUsed") < 3 ? {
    forceEquip: template_string_$items(_templateObject399 || (_templateObject399 = fights_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))
  } : {}), new Requirement([], bestFairy() === $familiar(_templateObject400 || (_templateObject400 = fights_taggedTemplateLiteral(["Reagnimated Gnome"]))) ? {
    forceEquip: template_string_$items(_templateObject401 || (_templateObject401 = fights_taggedTemplateLiteral(["gnomish housemaid's kgnee"])))
  } : {})]);
}
var freeKillSources = [
// 22	3	0	0	Chest X-Ray	combat skill	must have a Lil' Doctor™ bag equipped
new FreeFight(() => lib_have(template_string_$item(_templateObject402 || (_templateObject402 = fights_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))) ? utils_clamp(3 - property_get("_chestXRayUsed"), 0, 3) : 0, () => {
  ensureBeachAccess();
  withMacro(combat_Macro.trySkill($skill(_templateObject403 || (_templateObject403 = fights_taggedTemplateLiteral(["Sing Along"])))).tryHaveSkill($skill(_templateObject404 || (_templateObject404 = fights_taggedTemplateLiteral(["Otoscope"])))).trySkill($skill(_templateObject405 || (_templateObject405 = fights_taggedTemplateLiteral(["Chest X-Ray"])))), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject406 || (_templateObject406 = fights_taggedTemplateLiteral(["drum machine"])))));
}, true, {
  familiar: bestFairy,
  requirements: () => [sandwormRequirement().merge(new Requirement([], {
    forceEquip: template_string_$items(_templateObject407 || (_templateObject407 = fights_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"])))
  }))],
  effects: () => lib_have($skill(_templateObject408 || (_templateObject408 = fights_taggedTemplateLiteral(["Emotionally Chipped"])))) && property_get("_feelLostUsed") < 3 ? $effects(_templateObject409 || (_templateObject409 = fights_taggedTemplateLiteral(["Feeling Lost"]))) : []
}), new FreeFight(() => !property_get("_gingerbreadMobHitUsed") && lib_have($skill(_templateObject410 || (_templateObject410 = fights_taggedTemplateLiteral(["Gingerbread Mob Hit"])))), () => {
  ensureBeachAccess();
  withMacro(combat_Macro.trySkill($skill(_templateObject411 || (_templateObject411 = fights_taggedTemplateLiteral(["Sing Along"])))).tryHaveSkill($skill(_templateObject412 || (_templateObject412 = fights_taggedTemplateLiteral(["Otoscope"])))).trySkill($skill(_templateObject413 || (_templateObject413 = fights_taggedTemplateLiteral(["Gingerbread Mob Hit"])))), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject414 || (_templateObject414 = fights_taggedTemplateLiteral(["drum machine"])))));
}, true, {
  familiar: bestFairy,
  requirements: () => [sandwormRequirement()],
  effects: () => lib_have($skill(_templateObject415 || (_templateObject415 = fights_taggedTemplateLiteral(["Emotionally Chipped"])))) && property_get("_feelLostUsed") < 3 ? $effects(_templateObject416 || (_templateObject416 = fights_taggedTemplateLiteral(["Feeling Lost"]))) : []
}), new FreeFight(() => lib_have($skill(_templateObject417 || (_templateObject417 = fights_taggedTemplateLiteral(["Shattering Punch"])))) ? utils_clamp(3 - property_get("_shatteringPunchUsed"), 0, 3) : 0, () => {
  ensureBeachAccess();
  withMacro(combat_Macro.trySkill($skill(_templateObject418 || (_templateObject418 = fights_taggedTemplateLiteral(["Sing Along"])))).tryHaveSkill($skill(_templateObject419 || (_templateObject419 = fights_taggedTemplateLiteral(["Otoscope"])))).trySkill($skill(_templateObject420 || (_templateObject420 = fights_taggedTemplateLiteral(["Shattering Punch"])))), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject421 || (_templateObject421 = fights_taggedTemplateLiteral(["drum machine"])))));
}, true, {
  familiar: bestFairy,
  requirements: () => [sandwormRequirement()],
  effects: () => lib_have($skill(_templateObject422 || (_templateObject422 = fights_taggedTemplateLiteral(["Emotionally Chipped"])))) && property_get("_feelLostUsed") < 3 ? $effects(_templateObject423 || (_templateObject423 = fights_taggedTemplateLiteral(["Feeling Lost"]))) : []
}), new FreeFight(() => lib_have(template_string_$item(_templateObject424 || (_templateObject424 = fights_taggedTemplateLiteral(["replica bat-oomerang"])))) ? utils_clamp(3 - property_get("_usedReplicaBatoomerang"), 0, 3) : 0, () => {
  ensureBeachAccess();
  withMacro(combat_Macro.trySkill($skill(_templateObject425 || (_templateObject425 = fights_taggedTemplateLiteral(["Sing Along"])))).tryHaveSkill($skill(_templateObject426 || (_templateObject426 = fights_taggedTemplateLiteral(["Otoscope"])))).item(template_string_$item(_templateObject427 || (_templateObject427 = fights_taggedTemplateLiteral(["replica bat-oomerang"])))), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject428 || (_templateObject428 = fights_taggedTemplateLiteral(["drum machine"])))));
}, true, {
  familiar: bestFairy,
  requirements: () => [sandwormRequirement()],
  effects: () => lib_have($skill(_templateObject429 || (_templateObject429 = fights_taggedTemplateLiteral(["Emotionally Chipped"])))) && property_get("_feelLostUsed") < 3 ? $effects(_templateObject430 || (_templateObject430 = fights_taggedTemplateLiteral(["Feeling Lost"]))) : []
}), new FreeFight(() => !property_get("_missileLauncherUsed") && (0,external_kolmafia_namespaceObject.getCampground)()["Asdon Martin keyfob"] !== undefined, () => {
  ensureBeachAccess();
  fillTo(100);
  withMacro(combat_Macro.trySkill($skill(_templateObject431 || (_templateObject431 = fights_taggedTemplateLiteral(["Sing Along"])))).tryHaveSkill($skill(_templateObject432 || (_templateObject432 = fights_taggedTemplateLiteral(["Otoscope"])))).skill($skill(_templateObject433 || (_templateObject433 = fights_taggedTemplateLiteral(["Asdon Martin: Missile Launcher"])))), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject434 || (_templateObject434 = fights_taggedTemplateLiteral(["drum machine"])))));
}, true, {
  familiar: bestFairy,
  requirements: () => [sandwormRequirement()],
  effects: () => lib_have($skill(_templateObject435 || (_templateObject435 = fights_taggedTemplateLiteral(["Emotionally Chipped"])))) && property_get("_feelLostUsed") < 3 ? $effects(_templateObject436 || (_templateObject436 = fights_taggedTemplateLiteral(["Feeling Lost"]))) : []
}), new FreeFight(() => config_globalOptions.ascend ? property_get("shockingLickCharges") : 0, () => {
  ensureBeachAccess();
  withMacro(combat_Macro.trySkill($skill(_templateObject437 || (_templateObject437 = fights_taggedTemplateLiteral(["Sing Along"])))).tryHaveSkill($skill(_templateObject438 || (_templateObject438 = fights_taggedTemplateLiteral(["Otoscope"])))).skill($skill(_templateObject439 || (_templateObject439 = fights_taggedTemplateLiteral(["Shocking Lick"])))), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject440 || (_templateObject440 = fights_taggedTemplateLiteral(["drum machine"])))));
}, true, {
  familiar: bestFairy,
  requirements: () => [sandwormRequirement()],
  effects: () => lib_have($skill(_templateObject441 || (_templateObject441 = fights_taggedTemplateLiteral(["Emotionally Chipped"])))) && property_get("_feelLostUsed") < 3 ? $effects(_templateObject442 || (_templateObject442 = fights_taggedTemplateLiteral(["Feeling Lost"]))) : []
}), new FreeFight(() => lib_have(template_string_$item(_templateObject443 || (_templateObject443 = fights_taggedTemplateLiteral(["Jurassic Parka"])))) && !lib_have(template_string_$effect(_templateObject444 || (_templateObject444 = fights_taggedTemplateLiteral(["Everything Looks Yellow"])))), () => {
  ensureBeachAccess();
  (0,external_kolmafia_namespaceObject.cliExecute)("parka dilophosaur");
  withMacro(combat_Macro.trySkill($skill(_templateObject445 || (_templateObject445 = fights_taggedTemplateLiteral(["Sing Along"])))).tryHaveSkill($skill(_templateObject446 || (_templateObject446 = fights_taggedTemplateLiteral(["Otoscope"])))).trySkill($skill(_templateObject447 || (_templateObject447 = fights_taggedTemplateLiteral(["Spit jurassic acid"])))), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject448 || (_templateObject448 = fights_taggedTemplateLiteral(["drum machine"])))));
}, true, {
  familiar: bestFairy,
  requirements: () => [sandwormRequirement().merge(new Requirement([], {
    forceEquip: template_string_$items(_templateObject449 || (_templateObject449 = fights_taggedTemplateLiteral(["Jurassic Parka"])))
  }))],
  effects: () => lib_have($skill(_templateObject450 || (_templateObject450 = fights_taggedTemplateLiteral(["Emotionally Chipped"])))) && property_get("_feelLostUsed") < 3 ? $effects(_templateObject451 || (_templateObject451 = fights_taggedTemplateLiteral(["Feeling Lost"]))) : []
})];
function freeRunFights() {
  if ((0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) return;
  if (config_globalOptions.prefs.yachtzeechain && !property_get("_garboYachtzeeChainCompleted", false)) return;
  if (property_get("beGregariousFightsLeft") > 0 && property_get("beGregariousMonster") === $monster(_templateObject452 || (_templateObject452 = fights_taggedTemplateLiteral(["Knob Goblin Embezzler"])))) {
    return;
  }
  propertyManager.setChoices({
    1387: 2,
    // "You will go find two friends and meet me here."
    1324: 5 // Fight a random partier
  });

  var stashRun = (0,external_kolmafia_namespaceObject.stashAmount)(template_string_$item(_templateObject453 || (_templateObject453 = fights_taggedTemplateLiteral(["navel ring of navel gazing"])))) ? template_string_$items(_templateObject454 || (_templateObject454 = fights_taggedTemplateLiteral(["navel ring of navel gazing"]))) : (0,external_kolmafia_namespaceObject.stashAmount)(template_string_$item(_templateObject455 || (_templateObject455 = fights_taggedTemplateLiteral(["Greatest American Pants"])))) ? template_string_$items(_templateObject456 || (_templateObject456 = fights_taggedTemplateLiteral(["Greatest American Pants"]))) : [];
  (0,external_kolmafia_namespaceObject.refreshStash)();
  withStash(stashRun, () => {
    var _iterator = fights_createForOfIteratorHelper(freeRunFightSources),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var freeRunFightSource = _step.value;
        freeRunFightSource.runAll();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
}
function freeFights() {
  if ((0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) return;
  if (property_get("beGregariousFightsLeft") > 0 && property_get("beGregariousMonster") === $monster(_templateObject457 || (_templateObject457 = fights_taggedTemplateLiteral(["Knob Goblin Embezzler"])))) {
    return;
  }
  propertyManager.setChoices({
    1387: 2,
    // "You will go find two friends and meet me here."
    1324: 5 // Fight a random partier
  });

  freeRunFights();
  killRobortCreaturesForFree();

  //  Use free fights on melanges if we have Tote/Squint and prices are reasonable.
  var canSquint = lib_have(template_string_$effect(_templateObject458 || (_templateObject458 = fights_taggedTemplateLiteral(["Steely-Eyed Squint"])))) || lib_have($skill(_templateObject459 || (_templateObject459 = fights_taggedTemplateLiteral(["Steely-Eyed Squint"])))) && !property_get("_steelyEyedSquintUsed");
  if (lib_have(template_string_$item(_templateObject460 || (_templateObject460 = fights_taggedTemplateLiteral(["January's Garbage Tote"])))) && canSquint && (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject461 || (_templateObject461 = fights_taggedTemplateLiteral(["drum machine"])))) < 0.02 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject462 || (_templateObject462 = fights_taggedTemplateLiteral(["spice melange"]))))) {
    try {
      var _iterator2 = fights_createForOfIteratorHelper(freeKillSources),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var freeKillSource = _step2.value;
          if (freeKillSource.isAvailable()) {
            // TODO: Add potions that are profitable for free kills.
            ensureEffect(template_string_$effect(_templateObject463 || (_templateObject463 = fights_taggedTemplateLiteral(["Steely-Eyed Squint"]))));
          }
          freeKillSource.runAll();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } finally {
      if (lib_have(template_string_$item(_templateObject464 || (_templateObject464 = fights_taggedTemplateLiteral(["January's Garbage Tote"]))))) (0,external_kolmafia_namespaceObject.cliExecute)("fold wad of used tape");
    }
  }
  if ((0,external_kolmafia_namespaceObject.canAdventure)($location(_templateObject465 || (_templateObject465 = fights_taggedTemplateLiteral(["The Red Zeppelin"])))) && !lib_have(template_string_$item(_templateObject466 || (_templateObject466 = fights_taggedTemplateLiteral(["glark cable"]))), utils_clamp(5 - property_get("_glarkCableUses"), 0, 5))) {
    (0,external_kolmafia_namespaceObject.buy)(utils_clamp(5 - property_get("_glarkCableUses"), 0, 5), template_string_$item(_templateObject467 || (_templateObject467 = fights_taggedTemplateLiteral(["glark cable"]))), config_globalOptions.prefs.valueOfFreeFight);
  }
  var _iterator3 = fights_createForOfIteratorHelper(freeFightSources),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var freeFightSource = _step3.value;
      freeFightSource.runAll();
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  tryFillLatte();
}
function setNepQuestChoicesAndPrepItems() {
  var quest = property_get("_questPartyFairQuest");
  if (quest === "food") {
    if (!lib_questStep("_questPartyFair")) {
      setChoice(1324, 2); // Check out the kitchen
      setChoice(1326, 3); // Talk to the woman
    } else if (property_get("choiceAdventure1324") !== 5) {
      setChoice(1324, 5);
      (0,external_kolmafia_namespaceObject.print)("Found Geraldine!", HIGHLIGHT);
      // Format of this property is count, space, item ID.
      var partyFairInfo = property_get("_questPartyFairProgress").split(" ");
      logMessage("Geraldine wants ".concat(partyFairInfo[0], " ").concat((0,external_kolmafia_namespaceObject.toItem)(partyFairInfo[1]).plural, ", please!"));
    }
  } else if (quest === "booze") {
    if (!lib_questStep("_questPartyFair")) {
      setChoice(1324, 3); // Go to the back yard
      setChoice(1327, 3); // Find Gerald
    } else if (property_get("choiceAdventure1324") !== 5) {
      setChoice(1324, 5);
      (0,external_kolmafia_namespaceObject.print)("Found Gerald!", HIGHLIGHT);
      var _partyFairInfo = property_get("_questPartyFairProgress").split(" ");
      logMessage("Gerald wants ".concat(_partyFairInfo[0], " ").concat((0,external_kolmafia_namespaceObject.toItem)(_partyFairInfo[1]).plural, ", please!"));
    }
  } else {
    setChoice(1324, 5); // Pick a fight
  }
}

function thesisReady() {
  return !property_get("_thesisDelivered") && lib_have($familiar(_templateObject468 || (_templateObject468 = fights_taggedTemplateLiteral(["Pocket Professor"])))) && $familiar(_templateObject469 || (_templateObject469 = fights_taggedTemplateLiteral(["Pocket Professor"]))).experience >= 400;
}
function deliverThesisIfAble() {
  if (!thesisReady()) return;
  var thesisInNEP = (property_get("neverendingPartyAlways") || property_get("_neverEndingPartyToday")) && lib_questStep("_questPartyFair") < 999;
  (0,external_kolmafia_namespaceObject.useFamiliar)($familiar(_templateObject470 || (_templateObject470 = fights_taggedTemplateLiteral(["Pocket Professor"]))));
  freeFightMood().execute();
  freeFightOutfit(new Requirement(["100 muscle"], {}));
  safeRestore();
  if (lib_have(template_string_$item(_templateObject471 || (_templateObject471 = fights_taggedTemplateLiteral(["Powerful Glove"])))) && !lib_have(template_string_$effect(_templateObject472 || (_templateObject472 = fights_taggedTemplateLiteral(["Triple-Sized"])))) && property_get("_powerfulGloveBatteryPowerUsed") <= 95 && (
  // We only get triple-sized if it doesn't lose us a replace enemy use
  property_get("_powerfulGloveBatteryPowerUsed") % 10 === 5 || !doingExtrovermectin())) {
    (0,external_kolmafia_namespaceObject.cliExecute)("checkpoint");
    (0,external_kolmafia_namespaceObject.equip)($slot(_templateObject473 || (_templateObject473 = fights_taggedTemplateLiteral(["acc1"]))), template_string_$item(_templateObject474 || (_templateObject474 = fights_taggedTemplateLiteral(["Powerful Glove"]))));
    ensureEffect(template_string_$effect(_templateObject475 || (_templateObject475 = fights_taggedTemplateLiteral(["Triple-Sized"]))));
    (0,external_kolmafia_namespaceObject.outfit)("checkpoint");
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("gain 1800 muscle");
  var thesisLocation = $location(_templateObject476 || (_templateObject476 = fights_taggedTemplateLiteral(["Uncle Gator's Country Fun-Time Liquid Waste Sluice"])));
  if (thesisInNEP) {
    // Set up NEP if we haven't yet
    setNepQuestChoicesAndPrepItems();
    thesisLocation = $location(_templateObject477 || (_templateObject477 = fights_taggedTemplateLiteral(["The Neverending Party"])));
  }
  // if running nobarf, might not have access to Uncle Gator's. Space is cheaper.
  else if (!(0,external_kolmafia_namespaceObject.canAdventure)(thesisLocation)) {
    if (!lib_have(template_string_$item(_templateObject478 || (_templateObject478 = fights_taggedTemplateLiteral(["transporter transponder"]))))) {
      acquire(1, template_string_$item(_templateObject479 || (_templateObject479 = fights_taggedTemplateLiteral(["transporter transponder"]))), 10000);
    }
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject480 || (_templateObject480 = fights_taggedTemplateLiteral(["transporter transponder"]))));
    thesisLocation = $location(_templateObject481 || (_templateObject481 = fights_taggedTemplateLiteral(["Hamburglaris Shield Generator"])));
  }
  garboAdventure(thesisLocation, combat_Macro.skill($skill(_templateObject482 || (_templateObject482 = fights_taggedTemplateLiteral(["deliver your thesis!"])))));
  postCombatActions();
}
function doSausage() {
  if (!kramcoGuaranteed()) {
    return;
  }
  (0,external_kolmafia_namespaceObject.useFamiliar)(freeFightFamiliar());
  freeFightOutfit(new Requirement([], {
    forceEquip: template_string_$items(_templateObject483 || (_templateObject483 = fights_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))
  }));
  do {
    garboAdventureAuto(wanderWhere("wanderer"), combat_Macro.if_($monster(_templateObject484 || (_templateObject484 = fights_taggedTemplateLiteral(["sausage goblin"]))), combat_Macro.basicCombat()).ifHolidayWanderer(combat_Macro.basicCombat()).abort());
  } while (dogOrHolidayWanderer());
  if ((0,external_kolmafia_namespaceObject.getAutoAttack)() !== 0) (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
  postCombatActions();
}
function doGhost() {
  if (!lib_have(template_string_$item(_templateObject485 || (_templateObject485 = fights_taggedTemplateLiteral(["protonic accelerator pack"])))) || property_get("questPAGhost") === "unstarted") return;
  var ghostLocation = property_get("ghostLocation");
  if (!ghostLocation) return;
  (0,external_kolmafia_namespaceObject.useFamiliar)(freeFightFamiliar());
  freeFightOutfit(new Requirement([], {
    forceEquip: template_string_$items(_templateObject486 || (_templateObject486 = fights_taggedTemplateLiteral(["protonic accelerator pack"])))
  }));
  garboAdventure(ghostLocation, combat_Macro.ghostBustin());
  postCombatActions();
}
function ensureBeachAccess() {
  if (property_get("lastDesertUnlock") !== (0,external_kolmafia_namespaceObject.myAscensions)() && (0,external_kolmafia_namespaceObject.myPath)() !== $path(_templateObject487 || (_templateObject487 = fights_taggedTemplateLiteral(["Actually Ed the Undying"]))) /* Actually Ed the Undying*/) {
    (0,external_kolmafia_namespaceObject.create)(template_string_$item(_templateObject488 || (_templateObject488 = fights_taggedTemplateLiteral(["bitchin' meatcar"]))));
  }
}
var itemStealZones = [{
  location: $location(_templateObject489 || (_templateObject489 = fights_taggedTemplateLiteral(["The Deep Dark Jungle"]))),
  monster: $monster(_templateObject490 || (_templateObject490 = fights_taggedTemplateLiteral(["smoke monster"]))),
  item: template_string_$item(_templateObject491 || (_templateObject491 = fights_taggedTemplateLiteral(["transdermal smoke patch"]))),
  dropRate: 1,
  maximize: [],
  requireMapTheMonsters: false,
  isOpen: () => property_get("_spookyAirportToday") || property_get("spookyAirportAlways"),
  openCost: () => 0,
  preReq: null
}, {
  location: $location(_templateObject492 || (_templateObject492 = fights_taggedTemplateLiteral(["The Ice Hotel"]))),
  monster: $monster(_templateObject493 || (_templateObject493 = fights_taggedTemplateLiteral(["ice bartender"]))),
  item: template_string_$item(_templateObject494 || (_templateObject494 = fights_taggedTemplateLiteral(["perfect ice cube"]))),
  dropRate: 1,
  maximize: [],
  requireMapTheMonsters: false,
  isOpen: () => property_get("_coldAirportToday") || property_get("coldAirportAlways"),
  openCost: () => 0,
  preReq: null
}, {
  location: $location(_templateObject495 || (_templateObject495 = fights_taggedTemplateLiteral(["The Haunted Library"]))),
  monster: $monster(_templateObject496 || (_templateObject496 = fights_taggedTemplateLiteral(["bookbat"]))),
  item: template_string_$item(_templateObject497 || (_templateObject497 = fights_taggedTemplateLiteral(["tattered scrap of paper"]))),
  dropRate: 1,
  maximize: ["99 monster level 100 max"],
  // Bookbats need up to +100 ML to survive the polar vortices
  requireMapTheMonsters: false,
  isOpen: () => lib_have(template_string_$item(_templateObject498 || (_templateObject498 = fights_taggedTemplateLiteral(["[7302]Spookyraven library key"])))),
  openCost: () => 0,
  preReq: null
}, {
  location: $location(_templateObject499 || (_templateObject499 = fights_taggedTemplateLiteral(["The Stately Pleasure Dome"]))),
  monster: $monster(_templateObject500 || (_templateObject500 = fights_taggedTemplateLiteral(["toothless mastiff bitch"]))),
  item: template_string_$item(_templateObject501 || (_templateObject501 = fights_taggedTemplateLiteral(["disintegrating spiky collar"]))),
  dropRate: 1,
  maximize: ["99 muscle 100 max"],
  // Ensure mastiff is at least 100 hp
  requireMapTheMonsters: false,
  isOpen: () => true,
  openCost: () => !lib_have(template_string_$effect(_templateObject502 || (_templateObject502 = fights_taggedTemplateLiteral(["Absinthe-Minded"])))) ? (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(_templateObject503 || (_templateObject503 = fights_taggedTemplateLiteral(["tiny bottle of absinthe"])))) : 0,
  preReq: () => {
    if (!lib_have(template_string_$effect(_templateObject504 || (_templateObject504 = fights_taggedTemplateLiteral(["Absinthe-Minded"]))))) {
      if (!lib_have(template_string_$item(_templateObject505 || (_templateObject505 = fights_taggedTemplateLiteral(["tiny bottle of absinthe"]))))) (0,external_kolmafia_namespaceObject.buy)(1, template_string_$item(_templateObject506 || (_templateObject506 = fights_taggedTemplateLiteral(["tiny bottle of absinthe"]))));
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject507 || (_templateObject507 = fights_taggedTemplateLiteral(["tiny bottle of absinthe"]))));
    }
  }
}, {
  location: $location(_templateObject508 || (_templateObject508 = fights_taggedTemplateLiteral(["Twin Peak"]))),
  monster: $monsters(_templateObject509 || (_templateObject509 = fights_taggedTemplateLiteral(["bearpig topiary animal, elephant (meatcar?) topiary animal, spider (duck?) topiary animal"]))),
  item: template_string_$item(_templateObject510 || (_templateObject510 = fights_taggedTemplateLiteral(["rusty hedge trimmers"]))),
  dropRate: 0.5,
  maximize: ["99 monster level 11 max"],
  // Topiary animals need an extra 11 HP to survive polar vortices
  requireMapTheMonsters: false,
  isOpen: () => (0,external_kolmafia_namespaceObject.myLevel)() >= 9 && property_get("chasmBridgeProgress") >= 30 && property_get("twinPeakProgress") >= 15,
  openCost: () => 0,
  preReq: null
}, {
  location: $location(_templateObject511 || (_templateObject511 = fights_taggedTemplateLiteral(["The Hidden Temple"]))),
  monster: $monster(_templateObject512 || (_templateObject512 = fights_taggedTemplateLiteral(["baa-relief sheep"]))),
  item: template_string_$item(_templateObject513 || (_templateObject513 = fights_taggedTemplateLiteral(["stone wool"]))),
  requireMapTheMonsters: true,
  dropRate: 1,
  maximize: ["99 monster level 100 max"],
  // Sheeps need up to +100 ML to survive the polar vortices
  isOpen: () => property_get("lastTempleUnlock") === (0,external_kolmafia_namespaceObject.myAscensions)(),
  openCost: () => 0,
  preReq: null
}, {
  location: $location(_templateObject514 || (_templateObject514 = fights_taggedTemplateLiteral(["Shadow Rift"]))),
  monster: $monster(_templateObject515 || (_templateObject515 = fights_taggedTemplateLiteral(["shadow slab"]))),
  item: template_string_$item(_templateObject516 || (_templateObject516 = fights_taggedTemplateLiteral(["shadow brick"]))),
  requireMapTheMonsters: false,
  dropRate: 1,
  isOpen: () => ["pyramid", "hiddencity", "cemetery"].includes(property_get("shadowRiftIngress")),
  openCost: () => 0,
  preReq: null
}];
function getBestItemStealZone() {
  var mappingMonster = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var targets = itemStealZones.filter(zone => zone.isOpen() && (mappingMonster || !zone.requireMapTheMonsters) && asArray(zone.monster).some(m => !(0,external_kolmafia_namespaceObject.isBanished)(m) || property_get("olfactedMonster") === m || property_get("_gallapagosMonster") === m));
  var vorticesAvail = lib_have(template_string_$item(_templateObject517 || (_templateObject517 = fights_taggedTemplateLiteral(["industrial fire extinguisher"])))) ? Math.floor(property_get("_fireExtinguisherCharge") / 10) : 0;
  var hugsAvail = lib_have($familiar(_templateObject518 || (_templateObject518 = fights_taggedTemplateLiteral(["XO Skeleton"])))) ? utils_clamp(11 - property_get("_xoHugsUsed"), 0, 11) : 0;
  var value = zone => {
    // We have to divide hugs by 2 - will likely use a banish as a free run so we will be alternating zones.
    return zone.dropRate * garboValue(zone.item) * (vorticesAvail + hugsAvail / 2) - zone.openCost();
  };
  return targets.length ? lib_maxBy(targets, value) : null;
}
function setupItemStealZones() {
  // Haunted Library is full of free noncombats
  propertyManager.set({
    lightsOutAutomation: 2
  });
  propertyManager.setChoices({
    163: 4,
    164: 3,
    165: 4,
    166: 1,
    888: 4,
    889: 5
  });
}
function itemStealOlfact(best) {
  return combat_Macro.externalIf(lib_have($skill(_templateObject519 || (_templateObject519 = fights_taggedTemplateLiteral(["Transcendent Olfaction"])))) && property_get("_olfactionsUsed") < 1 && itemStealZones.every(zone => !asArray(zone.monster).includes(property_get("olfactedMonster"))), combat_Macro.skill($skill(_templateObject520 || (_templateObject520 = fights_taggedTemplateLiteral(["Transcendent Olfaction"]))))).externalIf(lib_have($skill(_templateObject521 || (_templateObject521 = fights_taggedTemplateLiteral(["Gallapagosian Mating Call"])))) && property_get("_gallapagosMonster") !== best.monster, combat_Macro.skill($skill(_templateObject522 || (_templateObject522 = fights_taggedTemplateLiteral(["Gallapagosian Mating Call"])))));
}
var haveEnoughPills = utils_clamp((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject523 || (_templateObject523 = fights_taggedTemplateLiteral(["synthetic dog hair pill"])))), 0, 100) + utils_clamp((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject524 || (_templateObject524 = fights_taggedTemplateLiteral(["distention pill"])))), 0, 100) + (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject525 || (_templateObject525 = fights_taggedTemplateLiteral(["Map to Safety Shelter Grimace Prime"])))) < 200 && (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject526 || (_templateObject526 = fights_taggedTemplateLiteral(["Map to Safety Shelter Grimace Prime"])))) < ESTIMATED_OVERDRUNK_TURNS;
function wantPills() {
  return lib_have(template_string_$item(_templateObject527 || (_templateObject527 = fights_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))) && crateStrategy() !== "Saber" && haveEnoughPills;
}
function voidMonster() {
  if (property_get("cursedMagnifyingGlassCount") < 13 || !lib_have(template_string_$item(_templateObject528 || (_templateObject528 = fights_taggedTemplateLiteral(["cursed magnifying glass"])))) || property_get("_voidFreeFights") >= 5) {
    return;
  }
  (0,external_kolmafia_namespaceObject.useFamiliar)(freeFightFamiliar());
  freeFightOutfit(new Requirement([], {
    forceEquip: template_string_$items(_templateObject529 || (_templateObject529 = fights_taggedTemplateLiteral(["cursed magnifying glass"])))
  }));
  garboAdventure(wanderWhere("wanderer"), combat_Macro.basicCombat());
  postCombatActions();
}
function printEmbezzlerLog() {
  if (resetDailyPreference("garboEmbezzlerDate")) {
    _set("garboEmbezzlerCount", 0);
    _set("garboEmbezzlerSources", "");
  }
  var totalEmbezzlers = getNumber("garboEmbezzlerCount", 0) + embezzlerLog.initialEmbezzlersFought + embezzlerLog.digitizedEmbezzlersFought;
  var allEmbezzlerSources = getString("garboEmbezzlerSources").split(",").filter(source => source);
  allEmbezzlerSources.push.apply(allEmbezzlerSources, fights_toConsumableArray(embezzlerLog.sources));
  _set("garboEmbezzlerCount", totalEmbezzlers);
  _set("garboEmbezzlerSources", allEmbezzlerSources.join(","));
  (0,external_kolmafia_namespaceObject.print)("You fought ".concat(embezzlerLog.initialEmbezzlersFought, " KGEs at the beginning of the day, and an additional ").concat(embezzlerLog.digitizedEmbezzlersFought, " digitized KGEs throughout the day. Good work, probably!"), HIGHLIGHT);
  (0,external_kolmafia_namespaceObject.print)("Including this, you have fought ".concat(totalEmbezzlers, " across all ascensions today"), HIGHLIGHT);
}
var freeKills = [{
  source: template_string_$item(_templateObject530 || (_templateObject530 = fights_taggedTemplateLiteral(["The Jokester's gun"]))),
  macro: $skill(_templateObject531 || (_templateObject531 = fights_taggedTemplateLiteral(["Fire the Jokester's Gun"]))),
  used: () => property_get("_firedJokestersGun")
}, {
  source: template_string_$item(_templateObject532 || (_templateObject532 = fights_taggedTemplateLiteral(["Lil' Doctor\u2122 bag"]))),
  macro: $skill(_templateObject533 || (_templateObject533 = fights_taggedTemplateLiteral(["Chest X-Ray"]))),
  used: () => property_get("_chestXRayUsed") >= 3
}, {
  macro: $skill(_templateObject534 || (_templateObject534 = fights_taggedTemplateLiteral(["Shattering Punch"]))),
  used: () => property_get("_shatteringPunchUsed") >= 3
}, {
  macro: $skill(_templateObject535 || (_templateObject535 = fights_taggedTemplateLiteral(["Gingerbread Mob Hit"]))),
  used: () => property_get("_gingerbreadMobHitUsed")
}, {
  macro: template_string_$item(_templateObject536 || (_templateObject536 = fights_taggedTemplateLiteral(["replica bat-oomerang"]))),
  used: () => property_get("_usedReplicaBatoomerang") >= 3
}];
var canUseSource = _ref6 => {
  var source = _ref6.source,
    macro = _ref6.macro,
    used = _ref6.used;
  return lib_have(source !== null && source !== void 0 ? source : macro) && !used();
};
var toRequirement = _ref7 => {
  var source = _ref7.source;
  return source ? new Requirement([], {
    forceEquip: [source]
  }) : new Requirement([], {});
};
function findFreeKill() {
  var _freeKills$find;
  return (_freeKills$find = freeKills.find(canUseSource)) !== null && _freeKills$find !== void 0 ? _freeKills$find : null;
}
function killRobortCreaturesForFree() {
  if (!lib_have($familiar(_templateObject537 || (_templateObject537 = fights_taggedTemplateLiteral(["Robortender"]))))) return;
  (0,external_kolmafia_namespaceObject.useFamiliar)($familiar(_templateObject538 || (_templateObject538 = fights_taggedTemplateLiteral(["Robortender"]))));
  var currentHeads = (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject539 || (_templateObject539 = fights_taggedTemplateLiteral(["fish head"]))));
  var freeKill = findFreeKill();
  while (freeKill && (0,external_kolmafia_namespaceObject.canAdventure)($location(_templateObject540 || (_templateObject540 = fights_taggedTemplateLiteral(["The Copperhead Club"])))) && lib_have($skill(_templateObject541 || (_templateObject541 = fights_taggedTemplateLiteral(["Comprehensive Cartography"])))) && property_get("_monstersMapped") < 3) {
    if (lib_have(template_string_$effect(_templateObject542 || (_templateObject542 = fights_taggedTemplateLiteral(["Crappily Disguised as a Waiter"]))))) {
      setChoice(855, 4);
      garboAdventure($location(_templateObject543 || (_templateObject543 = fights_taggedTemplateLiteral(["The Copperhead Club"]))), combat_Macro.abort());
    }
    freeFightOutfit(toRequirement(freeKill));
    withMacro(freeKill.macro instanceof external_kolmafia_namespaceObject.Item ? combat_Macro.item(freeKill.macro) : combat_Macro.skill(freeKill.macro), () => {
      mapMonster($location(_templateObject544 || (_templateObject544 = fights_taggedTemplateLiteral(["The Copperhead Club"]))), $monster(_templateObject545 || (_templateObject545 = fights_taggedTemplateLiteral(["Mob Penguin Capo"]))));
      (0,external_kolmafia_namespaceObject.runCombat)();
    }, true);
    freeKill = findFreeKill();
  }
  var _loop2 = function _loop2() {
    var roboTarget = findMonster(() => true, monster => valueDrops(monster) + garboValue(dropFrom(monster)) * dropChance());
    if (!roboTarget) return "break";
    var regularTarget = findMonster(() => true, valueDrops);
    if (regularTarget === roboTarget) {
      (0,external_kolmafia_namespaceObject.useFamiliar)(freeFightFamiliar({
        canChooseMacro: roboTarget.attributes.includes("FREE")
      }));
    } else {
      (0,external_kolmafia_namespaceObject.useFamiliar)($familiar(_templateObject551 || (_templateObject551 = fights_taggedTemplateLiteral(["Robortender"]))));
    }
    freeFightOutfit(roboTarget.attributes.includes("FREE") ? new Requirement([], {}) : toRequirement(freeKill));
    withMacro(isFree(roboTarget) ? combat_Macro.basicCombat() : freeKill.macro instanceof external_kolmafia_namespaceObject.Item ? combat_Macro.item(freeKill.macro) : combat_Macro.skill(freeKill.macro), () => reminisce(roboTarget), true);
    freeKill = findFreeKill();
  };
  while (freeKill && CombatLoversLocket_have() && reminiscesLeft() > 1) {
    var _ret2 = _loop2();
    if (_ret2 === "break") break;
  }
  if (!currentDrinks().includes(template_string_$item(_templateObject546 || (_templateObject546 = fights_taggedTemplateLiteral(["drive-by shooting"])))) && (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(_templateObject547 || (_templateObject547 = fights_taggedTemplateLiteral(["fish head"])))) > currentHeads && userConfirmDialog("Garbo managed to rustle up a fish head, would you like it to use it to make a drive-by shooting so you can benefit from your robortender? Sorry for flip-flopping on this, life is hard.", true)) {
    if (!lib_have(template_string_$item(_templateObject548 || (_templateObject548 = fights_taggedTemplateLiteral(["drive-by shooting"]))))) (0,external_kolmafia_namespaceObject.create)(template_string_$item(_templateObject549 || (_templateObject549 = fights_taggedTemplateLiteral(["drive-by shooting"]))));
    feed(template_string_$item(_templateObject550 || (_templateObject550 = fights_taggedTemplateLiteral(["drive-by shooting"]))));
    setBestLeprechaunAsMeatFamiliar();
  }
}
var isFree = monster => monster.attributes.includes("FREE");
var valueDrops = monster => utils_sum((0,external_kolmafia_namespaceObject.itemDropsArray)(monster), _ref8 => {
  var drop = _ref8.drop,
    rate = _ref8.rate;
  return garboValue(drop, true) * rate / 100;
});
var locketMonster = () => findMonster(isFree, valueDrops);
function estimatedFreeFights() {
  return sum(freeFightSources, source => {
    var avail = source.available();
    return typeof avail === "number" ? avail : toInt(avail);
  });
}
function estimatedTentacles() {
  return utils_sum(freeFightSources, source => {
    var avail = source.tentacle ? source.available() : 0;
    return typeof avail === "number" ? avail : (0,external_kolmafia_namespaceObject.toInt)(avail);
  });
}
function yachtzee() {
  if (!realmAvailable("sleaze") || !lib_have(template_string_$effect(_templateObject552 || (_templateObject552 = fights_taggedTemplateLiteral(["Fishy"]))))) return;
  for (var _i2 = 0, _arr = [{
      available: lib_have(template_string_$item(_templateObject553 || (_templateObject553 = fights_taggedTemplateLiteral(["Clara's bell"])))) && !config_globalOptions.clarasBellClaimed,
      success: () => {
        config_globalOptions.clarasBellClaimed = true;
        if ((0,external_kolmafia_namespaceObject.use)(template_string_$item(_templateObject554 || (_templateObject554 = fights_taggedTemplateLiteral(["Clara's bell"]))))) return true;
        return false;
      }
    }, {
      available: lib_have(template_string_$item(_templateObject555 || (_templateObject555 = fights_taggedTemplateLiteral(["Eight Days a Week Pill Keeper"])))) && !property_get("_freePillKeeperUsed"),
      success: () => {
        if ((0,external_kolmafia_namespaceObject.cliExecute)("pillkeeper noncombat") && property_get("_freePillKeeperUsed")) {
          // Defense against mis-set counters
          _set("_freePillKeeperUsed", true);
          return true;
        }
        return false;
      }
    }]; _i2 < _arr.length; _i2++) {
    var _arr$_i = _arr[_i2],
      available = _arr$_i.available,
      success = _arr$_i.success;
    if (available) {
      var familiarOptions = external_kolmafia_namespaceObject.Familiar.all().filter(familiar => lib_have(familiar) && familiar.underwater && familiar !== $familiar(_templateObject556 || (_templateObject556 = fights_taggedTemplateLiteral(["Robortender"]))));
      var familiarChoice = familiarOptions.length ? lib_maxBy(familiarOptions, findLeprechaunMultiplier) : $familiar.none;
      (0,external_kolmafia_namespaceObject.useFamiliar)(familiarChoice);
      var underwaterBreathingGear = waterBreathingEquipment.find(item => lib_have(item));
      if (!underwaterBreathingGear) return;
      var equippedOutfit = new Requirement(["meat", "-tie"], {
        forceEquip: [underwaterBreathingGear]
      }).maximize();
      if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(_templateObject557 || (_templateObject557 = fights_taggedTemplateLiteral(["The Crown of Ed the Undying"]))))) (0,external_kolmafia_namespaceObject.cliExecute)("edpiece fish");
      if (!equippedOutfit || !success()) return;
      var lastUMDDate = getString("umdLastObtained");
      var getUMD = !property_get("_sleazeAirportToday") &&
      // We cannot get the UMD with a one-day pass
      garboValue(template_string_$item(_templateObject558 || (_templateObject558 = fights_taggedTemplateLiteral(["Ultimate Mind Destroyer"])))) >= 2000 * (1 + (0,external_kolmafia_namespaceObject.numericModifier)("meat drop") / 100) && (!lastUMDDate || today - Date.parse(lastUMDDate) >= 1000 * 60 * 60 * 24 * 7);
      setChoice(918, getUMD ? 1 : 2);
      garboAdventureAuto($location(_templateObject559 || (_templateObject559 = fights_taggedTemplateLiteral(["The Sunken Party Yacht"]))), combat_Macro.abort());
      if ((0,external_kolmafia_namespaceObject.visitUrl)("forestvillage.php").includes("friarcottage.gif") && !property_get("_floristPlantsUsed").split(",").includes("Crookweed")) {
        (0,external_kolmafia_namespaceObject.cliExecute)("florist plant Crookweed");
      }
      if (property_get("lastEncounter") === "Yacht, See?") {
        garboAdventureAuto($location(_templateObject560 || (_templateObject560 = fights_taggedTemplateLiteral(["The Sunken Party Yacht"]))), combat_Macro.abort());
      }
      return;
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2017/Pantogram.js
var Pantogram_templateObject, Pantogram_templateObject2, _Alignment, _Element, Pantogram_templateObject3, Pantogram_templateObject4, Pantogram_templateObject5, Pantogram_templateObject6, Pantogram_templateObject7, Pantogram_templateObject8, Pantogram_templateObject9, _LeftSacrifice, Pantogram_templateObject10, Pantogram_templateObject11, Pantogram_templateObject12, Pantogram_templateObject13, Pantogram_templateObject14, Pantogram_templateObject15, Pantogram_templateObject16, Pantogram_templateObject17, Pantogram_templateObject18, _MiddleSacrifice, Pantogram_templateObject19, Pantogram_templateObject20, Pantogram_templateObject21, Pantogram_templateObject22, Pantogram_templateObject23, Pantogram_templateObject24, Pantogram_templateObject25, Pantogram_templateObject26, Pantogram_templateObject27, Pantogram_templateObject28, _RightSacrifice;
function Pantogram_slicedToArray(arr, i) { return Pantogram_arrayWithHoles(arr) || Pantogram_iterableToArrayLimit(arr, i) || Pantogram_unsupportedIterableToArray(arr, i) || Pantogram_nonIterableRest(); }
function Pantogram_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Pantogram_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Pantogram_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Pantogram_arrayLikeToArray(o, minLen); }
function Pantogram_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Pantogram_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function Pantogram_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Pantogram_defineProperty(obj, key, value) { key = Pantogram_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Pantogram_toPropertyKey(arg) { var key = Pantogram_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function Pantogram_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function Pantogram_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



var pantogram = template_string_$item(Pantogram_templateObject || (Pantogram_templateObject = Pantogram_taggedTemplateLiteral(["portable pantogram"])));
var pants = template_string_$item(Pantogram_templateObject2 || (Pantogram_templateObject2 = Pantogram_taggedTemplateLiteral(["pantogram pants"])));
function Pantogram_have() {
  return lib_have(pantogram);
}
function havePants() {
  return lib_have(pants);
}
var Alignment = (_Alignment = {}, Pantogram_defineProperty(_Alignment, "Muscle", 1), Pantogram_defineProperty(_Alignment, "Mysticality", 2), Pantogram_defineProperty(_Alignment, "Moxie", 3), _Alignment);
var Element = (_Element = {}, Pantogram_defineProperty(_Element, "Hot Resistance: 2", 1), Pantogram_defineProperty(_Element, "Cold Resistance: 2", 2), Pantogram_defineProperty(_Element, "Spooky Resistance: 2", 3), Pantogram_defineProperty(_Element, "Sleaze Resistance: 2", 4), Pantogram_defineProperty(_Element, "Stench Resistance: 2", 5), _Element);
var LeftSacrifice = (_LeftSacrifice = {}, Pantogram_defineProperty(_LeftSacrifice, "Maximum HP: 40", [-1, 0]), Pantogram_defineProperty(_LeftSacrifice, "Maximum MP: 20", [-2, 0]), Pantogram_defineProperty(_LeftSacrifice, "HP Regen Max: 10", [template_string_$item(Pantogram_templateObject3 || (Pantogram_templateObject3 = Pantogram_taggedTemplateLiteral(["red pixel potion"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "HP Regen Max: 15", [template_string_$item(Pantogram_templateObject4 || (Pantogram_templateObject4 = Pantogram_taggedTemplateLiteral(["royal jelly"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "HP Regen Max: 20", [template_string_$item(Pantogram_templateObject5 || (Pantogram_templateObject5 = Pantogram_taggedTemplateLiteral(["scented massage oil"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "MP Regen Max: 10", [template_string_$item(Pantogram_templateObject6 || (Pantogram_templateObject6 = Pantogram_taggedTemplateLiteral(["Cherry Cloaca Cola"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "MP Regen Max: 15", [template_string_$item(Pantogram_templateObject7 || (Pantogram_templateObject7 = Pantogram_taggedTemplateLiteral(["bubblin' crude"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "MP Regen Max: 20", [template_string_$item(Pantogram_templateObject8 || (Pantogram_templateObject8 = Pantogram_taggedTemplateLiteral(["glowing New Age crystal"]))), 1]), Pantogram_defineProperty(_LeftSacrifice, "Mana Cost: -3", [template_string_$item(Pantogram_templateObject9 || (Pantogram_templateObject9 = Pantogram_taggedTemplateLiteral(["baconstone"]))), 1]), _LeftSacrifice);
function getLeftSacPair(mod) {
  return LeftSacrifice[mod];
}
var MiddleSacrifice = (_MiddleSacrifice = {}, Pantogram_defineProperty(_MiddleSacrifice, "Combat Rate: -5", [-1, 0]), Pantogram_defineProperty(_MiddleSacrifice, "Combat Rate: 5", [-2, 0]), Pantogram_defineProperty(_MiddleSacrifice, "Critical Hit Percent: 10", [template_string_$item(Pantogram_templateObject10 || (Pantogram_templateObject10 = Pantogram_taggedTemplateLiteral(["hamethyst"]))), 1]), Pantogram_defineProperty(_MiddleSacrifice, "Initiative: 50", [template_string_$item(Pantogram_templateObject11 || (Pantogram_templateObject11 = Pantogram_taggedTemplateLiteral(["bar skin"]))), 1]), Pantogram_defineProperty(_MiddleSacrifice, "Familiar Weight: 10", [template_string_$item(Pantogram_templateObject12 || (Pantogram_templateObject12 = Pantogram_taggedTemplateLiteral(["lead necklace"]))), 11]), Pantogram_defineProperty(_MiddleSacrifice, "Candy Drop: 100", [template_string_$item(Pantogram_templateObject13 || (Pantogram_templateObject13 = Pantogram_taggedTemplateLiteral(["huge bowl of candy"]))), 1]), Pantogram_defineProperty(_MiddleSacrifice, "Item Drop Penalty: -10", [template_string_$item(Pantogram_templateObject14 || (Pantogram_templateObject14 = Pantogram_taggedTemplateLiteral(["sea salt crystal"]))), 11]), Pantogram_defineProperty(_MiddleSacrifice, "Fishing Skill: 5", [template_string_$item(Pantogram_templateObject15 || (Pantogram_templateObject15 = Pantogram_taggedTemplateLiteral(["wriggling worm"]))), 1]), Pantogram_defineProperty(_MiddleSacrifice, "Pool Skill: 5", [template_string_$item(Pantogram_templateObject16 || (Pantogram_templateObject16 = Pantogram_taggedTemplateLiteral(["8-ball"]))), 15]), Pantogram_defineProperty(_MiddleSacrifice, "Avatar: Purple", [template_string_$item(Pantogram_templateObject17 || (Pantogram_templateObject17 = Pantogram_taggedTemplateLiteral(["moxie weed"]))), 99]), Pantogram_defineProperty(_MiddleSacrifice, "Drops Items: true", [template_string_$item(Pantogram_templateObject18 || (Pantogram_templateObject18 = Pantogram_taggedTemplateLiteral(["ten-leaf clover"]))), 1]), _MiddleSacrifice);
function getMiddleSacPair(mod) {
  return MiddleSacrifice[mod];
}
var RightSacrifice = (_RightSacrifice = {}, Pantogram_defineProperty(_RightSacrifice, "Weapon Damage: 20", [-1, 0]), Pantogram_defineProperty(_RightSacrifice, "Spell Damage Percent: 20", [-2, 0]), Pantogram_defineProperty(_RightSacrifice, "Meat Drop: 30", [template_string_$item(Pantogram_templateObject19 || (Pantogram_templateObject19 = Pantogram_taggedTemplateLiteral(["taco shell"]))), 1]), Pantogram_defineProperty(_RightSacrifice, "Meat Drop: 60", [template_string_$item(Pantogram_templateObject20 || (Pantogram_templateObject20 = Pantogram_taggedTemplateLiteral(["porquoise"]))), 1]), Pantogram_defineProperty(_RightSacrifice, "Item Drop: 15", [template_string_$item(Pantogram_templateObject21 || (Pantogram_templateObject21 = Pantogram_taggedTemplateLiteral(["fairy gravy boat"]))), 1]), Pantogram_defineProperty(_RightSacrifice, "Item Drop: 30", [template_string_$item(Pantogram_templateObject22 || (Pantogram_templateObject22 = Pantogram_taggedTemplateLiteral(["tiny dancer"]))), 1]), Pantogram_defineProperty(_RightSacrifice, "Muscle Experience: 3", [template_string_$item(Pantogram_templateObject23 || (Pantogram_templateObject23 = Pantogram_taggedTemplateLiteral(["Knob Goblin firecracker"]))), 3]), Pantogram_defineProperty(_RightSacrifice, "Mysticality Experience: 3", [template_string_$item(Pantogram_templateObject24 || (Pantogram_templateObject24 = Pantogram_taggedTemplateLiteral(["razor-sharp can lid"]))), 3]), Pantogram_defineProperty(_RightSacrifice, "Moxie Experience: 3", [template_string_$item(Pantogram_templateObject25 || (Pantogram_templateObject25 = Pantogram_taggedTemplateLiteral(["spider web"]))), 3]), Pantogram_defineProperty(_RightSacrifice, "Muscle Experience Percent: 25", [template_string_$item(Pantogram_templateObject26 || (Pantogram_templateObject26 = Pantogram_taggedTemplateLiteral(["synthetic marrow"]))), 5]), Pantogram_defineProperty(_RightSacrifice, "Mysticality Experience Percent: 25", [template_string_$item(Pantogram_templateObject27 || (Pantogram_templateObject27 = Pantogram_taggedTemplateLiteral(["haunted battery"]))), 5]), Pantogram_defineProperty(_RightSacrifice, "Moxie Experience Percent: 25", [template_string_$item(Pantogram_templateObject28 || (Pantogram_templateObject28 = Pantogram_taggedTemplateLiteral(["the funk"]))), 5]), _RightSacrifice);
function getRightSacPair(mod) {
  return RightSacrifice[mod];
}
/**
 * Finds the item requirements for a particular pair of pants.
 * @param modifiers An object consisting of the modifiers you want on your pants. For modifiers repeated across a particular sacrifice, use a tuple of that modifier and its value.
 * @returns A map of the items you need to make these pants and the quantities needed.
 */
function findRequirements(modifiers) {
  var leftSac = modifiers.leftSac,
    rightSac = modifiers.rightSac,
    middleSac = modifiers.middleSac;
  var returnValue = new Map();
  if (leftSac) {
    var _getLeftSacPair = getLeftSacPair(leftSac),
      _getLeftSacPair2 = Pantogram_slicedToArray(_getLeftSacPair, 2),
      sacrifice = _getLeftSacPair2[0],
      quantity = _getLeftSacPair2[1];
    if (sacrifice instanceof external_kolmafia_namespaceObject.Item) {
      returnValue.set(sacrifice, quantity);
    }
  }
  if (rightSac) {
    var _getRightSacPair = getRightSacPair(rightSac),
      _getRightSacPair2 = Pantogram_slicedToArray(_getRightSacPair, 2),
      _sacrifice = _getRightSacPair2[0],
      _quantity = _getRightSacPair2[1];
    if (_sacrifice instanceof external_kolmafia_namespaceObject.Item) {
      returnValue.set(_sacrifice, _quantity);
    }
  }
  if (middleSac) {
    var _getMiddleSacPair = getMiddleSacPair(middleSac),
      _getMiddleSacPair2 = Pantogram_slicedToArray(_getMiddleSacPair, 2),
      _sacrifice2 = _getMiddleSacPair2[0],
      _quantity2 = _getMiddleSacPair2[1];
    if (_sacrifice2 instanceof external_kolmafia_namespaceObject.Item) {
      returnValue.set(_sacrifice2, _quantity2);
    }
  }
  return returnValue;
}
function sacrificePairToURL(pair) {
  var _pair = Pantogram_slicedToArray(pair, 2),
    rawSacrifice = _pair[0],
    quantity = _pair[1];
  var sacrifice = rawSacrifice instanceof external_kolmafia_namespaceObject.Item ? (0,external_kolmafia_namespaceObject.toInt)(rawSacrifice) : rawSacrifice;
  return "".concat(sacrifice, ",").concat(quantity);
}
/**
 * Makes a pair of pants with the given modifiers
 * @param alignment The stat you'd like your pants to improve. Moxie, Mysticality, or Muscle
 * @param element The element you'd like your pants to provide resistance for
 * @param leftSac The modifier you'd like to get from your leftmost sacrifice in Pantagramming.
 * @param middleSac The modifier you'd like to get from your middle sacrifice in Pantagramming.
 * @param rightSac The modifier you'd like to get from your rightmost sacrifice in Pantagramming.
 * @returns Whether or not you successfully created a pair of pants. False if you don't own the pantogram or if you already have pantogram pants.
 */
function makePants(alignment, element, leftSac, middleSac, rightSac) {
  if (lib_have(pants) || !lib_have(pantogram)) return false;
  var requirements = findRequirements({
    alignment: alignment,
    element: element,
    leftSac: leftSac,
    rightSac: rightSac,
    middleSac: middleSac
  });
  if (Array.from(requirements.entries()).some(_ref => {
    var _ref2 = Pantogram_slicedToArray(_ref, 2),
      item = _ref2[0],
      quantity = _ref2[1];
    return !lib_have(item, quantity);
  })) {
    return false;
  }
  var s1 = sacrificePairToURL(getLeftSacPair(leftSac));
  var s2 = sacrificePairToURL(getRightSacPair(rightSac));
  var s3 = sacrificePairToURL(getMiddleSacPair(middleSac));
  var url = "choice.php?whichchoice=1270&pwd&option=1&m=".concat(Alignment[alignment], "&e=").concat(Element[element], "&s1=").concat(s1, "&s2=").concat(s2, "&s3=").concat(s3);
  (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?pwd&whichitem=9573");
  (0,external_kolmafia_namespaceObject.visitUrl)(url);
  return lib_have(pants);
}
/**
 * Creates a pair of pants from a Pants object.
 * @param pants An object consisting of the modifiers you'd like the pants to give you.
 * @returns Whether or not you successfully created a pair of pants. False if you don't own the pantogram or if you already have pantogram pants.
 */
function makePantsFromObject(pants) {
  return makePants(pants.alignment, pants.element, pants.leftSac, pants.middleSac, pants.rightSac);
}
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2019/BeachComb.js
var BeachComb_templateObject, BeachComb_templateObject2, BeachComb_templateObject3, BeachComb_templateObject4, BeachComb_templateObject5, BeachComb_templateObject6, BeachComb_templateObject7, BeachComb_templateObject8, BeachComb_templateObject9, BeachComb_templateObject10, BeachComb_templateObject11, BeachComb_templateObject12, BeachComb_templateObject13, BeachComb_templateObject14, BeachComb_templateObject15, BeachComb_templateObject16, BeachComb_templateObject17, BeachComb_templateObject18, BeachComb_templateObject19, BeachComb_templateObject20, BeachComb_templateObject21;
function BeachComb_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





function BeachComb_have() {
  return have_(Item.get("Beach Comb"));
}
var headBuffs = [template_string_$effect(BeachComb_templateObject || (BeachComb_templateObject = BeachComb_taggedTemplateLiteral(["Hot-Headed"]))), template_string_$effect(BeachComb_templateObject2 || (BeachComb_templateObject2 = BeachComb_taggedTemplateLiteral(["Cold as Nice"]))), template_string_$effect(BeachComb_templateObject3 || (BeachComb_templateObject3 = BeachComb_taggedTemplateLiteral(["A Brush with Grossness"]))), template_string_$effect(BeachComb_templateObject4 || (BeachComb_templateObject4 = BeachComb_taggedTemplateLiteral(["Does It Have a Skull In There??"]))), template_string_$effect(BeachComb_templateObject5 || (BeachComb_templateObject5 = BeachComb_taggedTemplateLiteral(["Oiled, Slick"]))), template_string_$effect(BeachComb_templateObject6 || (BeachComb_templateObject6 = BeachComb_taggedTemplateLiteral(["Lack of Body-Building"]))), template_string_$effect(BeachComb_templateObject7 || (BeachComb_templateObject7 = BeachComb_taggedTemplateLiteral(["We're All Made of Starfish"]))), template_string_$effect(BeachComb_templateObject8 || (BeachComb_templateObject8 = BeachComb_taggedTemplateLiteral(["Pomp & Circumsands"]))), template_string_$effect(BeachComb_templateObject9 || (BeachComb_templateObject9 = BeachComb_taggedTemplateLiteral(["Resting Beach Face"]))), template_string_$effect(BeachComb_templateObject10 || (BeachComb_templateObject10 = BeachComb_taggedTemplateLiteral(["Do I Know You From Somewhere?"]))), template_string_$effect(BeachComb_templateObject11 || (BeachComb_templateObject11 = BeachComb_taggedTemplateLiteral(["You Learned Something Maybe!"])))];
var head = {
  HOT: template_string_$effect(BeachComb_templateObject12 || (BeachComb_templateObject12 = BeachComb_taggedTemplateLiteral(["Hot-Headed"]))),
  COLD: template_string_$effect(BeachComb_templateObject13 || (BeachComb_templateObject13 = BeachComb_taggedTemplateLiteral(["Cold as Nice"]))),
  STENCH: template_string_$effect(BeachComb_templateObject14 || (BeachComb_templateObject14 = BeachComb_taggedTemplateLiteral(["A Brush with Grossness"]))),
  SPOOKY: template_string_$effect(BeachComb_templateObject15 || (BeachComb_templateObject15 = BeachComb_taggedTemplateLiteral(["Does It Have a Skull In There??"]))),
  SLEAZE: template_string_$effect(BeachComb_templateObject16 || (BeachComb_templateObject16 = BeachComb_taggedTemplateLiteral(["Oiled, Slick"]))),
  MUSCLE: template_string_$effect(BeachComb_templateObject17 || (BeachComb_templateObject17 = BeachComb_taggedTemplateLiteral(["Lack of Body-Building"]))),
  MYSTICALITY: template_string_$effect(BeachComb_templateObject18 || (BeachComb_templateObject18 = BeachComb_taggedTemplateLiteral(["We're All Made of Starfish"]))),
  INITIATIVE: template_string_$effect(BeachComb_templateObject19 || (BeachComb_templateObject19 = BeachComb_taggedTemplateLiteral(["Resting Beach Face"]))),
  FAMILIAR: template_string_$effect(BeachComb_templateObject20 || (BeachComb_templateObject20 = BeachComb_taggedTemplateLiteral(["Do I Know You From Somewhere?"]))),
  EXPERIENCE: template_string_$effect(BeachComb_templateObject21 || (BeachComb_templateObject21 = BeachComb_taggedTemplateLiteral(["You Learned Something Maybe!"])))
};
function tideLevel() {
  var day = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : gamedayToInt();
  var dayOfMonth = 1 + day % 8;
  return 4 - Math.abs(4 - dayOfMonth);
}
function canComb(_ref) {
  var row = _ref.row;
  return row > tideLevel();
}
function freeCombs() {
  return BeachComb_have() ? clamp(11 - get("_freeBeachWalksUsed"), 0, 11) : 0;
}
function comb() {
  for (var _len = arguments.length, tiles = new Array(_len), _key = 0; _key < _len; _key++) {
    tiles[_key] = arguments[_key];
  }
  if (!BeachComb_have() || !tiles.length) return;
  for (var _i = 0, _tiles = tiles; _i < _tiles.length; _i++) {
    var tile = _tiles[_i];
    if (canComb(tile)) {
      var minute = tile.minute,
        row = tile.row,
        column = tile.column;
      cliExecute("beach wander ".concat(minute));
      cliExecute("beach comb ".concat(row, " ").concat(column));
    }
  }
  if (handlingChoice()) runChoice(5);
}
function headAvailable(target) {
  var effect = target instanceof external_kolmafia_namespaceObject.Effect ? target : head[target];
  var headNumber = 1 + headBuffs.indexOf(effect);
  return (0,external_kolmafia_namespaceObject.getProperty)("beachHeadsUnlocked").split(",").includes(headNumber.toString()) && !(0,external_kolmafia_namespaceObject.getProperty)("_beachHeadsUsed").split(",").includes(headNumber.toString());
}
function tryHead(target) {
  var effect = target instanceof external_kolmafia_namespaceObject.Effect ? target : head[target];
  if (!headBuffs.includes(effect)) return false;
  if (!headAvailable(target)) return false;
  (0,external_kolmafia_namespaceObject.cliExecute)(effect.default);
  return lib_have(effect);
}
;// CONCATENATED MODULE: ./src/tasks/daily.ts
var daily_templateObject, daily_templateObject2, daily_templateObject3, daily_templateObject4, daily_templateObject5, daily_templateObject6, daily_templateObject7, daily_templateObject8, daily_templateObject9, daily_templateObject10, daily_templateObject11, daily_templateObject12, daily_templateObject13, daily_templateObject14, daily_templateObject15, daily_templateObject16, daily_templateObject17, daily_templateObject18, daily_templateObject19, daily_templateObject20, daily_templateObject21, daily_templateObject22, daily_templateObject23, daily_templateObject24, daily_templateObject25, daily_templateObject26, daily_templateObject27, daily_templateObject28, daily_templateObject29, daily_templateObject30, daily_templateObject31, daily_templateObject32, daily_templateObject33, daily_templateObject34, daily_templateObject35, daily_templateObject36, daily_templateObject37, daily_templateObject38, daily_templateObject39, daily_templateObject40, daily_templateObject41, daily_templateObject42, daily_templateObject43, daily_templateObject44, daily_templateObject45, daily_templateObject46, daily_templateObject47, daily_templateObject48, daily_templateObject49, daily_templateObject50, daily_templateObject51, daily_templateObject52, daily_templateObject53, daily_templateObject54, daily_templateObject55, daily_templateObject56, daily_templateObject57, daily_templateObject58, daily_templateObject59, daily_templateObject60, daily_templateObject61, daily_templateObject62, daily_templateObject63, daily_templateObject64, daily_templateObject65, daily_templateObject66, daily_templateObject67, daily_templateObject68, daily_templateObject69, daily_templateObject70, daily_templateObject71;
function daily_slicedToArray(arr, i) { return daily_arrayWithHoles(arr) || daily_iterableToArrayLimit(arr, i) || daily_unsupportedIterableToArray(arr, i) || daily_nonIterableRest(); }
function daily_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function daily_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function daily_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function daily_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = daily_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function daily_toConsumableArray(arr) { return daily_arrayWithoutHoles(arr) || daily_iterableToArray(arr) || daily_unsupportedIterableToArray(arr) || daily_nonIterableSpread(); }
function daily_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function daily_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return daily_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return daily_arrayLikeToArray(o, minLen); }
function daily_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function daily_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return daily_arrayLikeToArray(arr); }
function daily_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function daily_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }











var closetItems = template_string_$items(daily_templateObject || (daily_templateObject = daily_taggedTemplateLiteral(["4-d camera, sand dollar, unfinished ice sculpture"])));
var retrieveItems = template_string_$items(daily_templateObject2 || (daily_templateObject2 = daily_taggedTemplateLiteral(["Half a Purse, seal tooth, The Jokester's gun"])));
var latteRefreshed = false;
var horseryRefreshed = false;
var attemptCompletingBarfQuest = true;
var snojoConfigured = false;
function voterSetup() {
  var initPriority = new Map([["Meat Drop: +30", 0.3 * ((baseMeat + 750) * embezzlerCount() + baseMeat * (estimatedGarboTurns() - embezzlerCount()))], ["Item Drop: +15", 0.15 * (4 * 100 * 0.3 * embezzlerCount() + 3 * 200 * 0.15 * (estimatedGarboTurns() - embezzlerCount()))], ["Adventures: +1", config_globalOptions.ascend ? 0 : property_get("valueOfAdventure")], ["Familiar Experience: +2", 8], ["Monster Level: +10", 5], ["".concat((0,external_kolmafia_namespaceObject.myPrimestat)(), " Percent: +25"), 3], ["Experience (".concat((0,external_kolmafia_namespaceObject.myPrimestat)(), "): +4"), 2], ["Meat Drop: -30", -2], ["Item Drop: -15", -2], ["Familiar Experience: -2", -2]]);
  if (!property_get("voteAlways") && !property_get("_voteToday")) {
    var availableInitiatives = new Map(Object.keys((0,external_kolmafia_namespaceObject.votingBoothInitiatives)((0,external_kolmafia_namespaceObject.myClass)(), (0,external_kolmafia_namespaceObject.myPath)(), (0,external_kolmafia_namespaceObject.myDaycount)())).map(init => {
      var _initPriority$get;
      var val = (_initPriority$get = initPriority.get(init)) !== null && _initPriority$get !== void 0 ? _initPriority$get : 0;
      return [init, val];
    }));
    var initiativeValue = 2 * Math.max.apply(Math, daily_toConsumableArray(availableInitiatives.values()));
    var fightValue = 3 * config_globalOptions.prefs.valueOfFreeFight;
    var ballotValue = initiativeValue + fightValue;
    if (ballotValue > (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(daily_templateObject3 || (daily_templateObject3 = daily_taggedTemplateLiteral(["absentee voter ballot"])))) && acquire(1, template_string_$item(daily_templateObject4 || (daily_templateObject4 = daily_taggedTemplateLiteral(["absentee voter ballot"]))), ballotValue, false)) {
      (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?which=3&whichitem=9991&pwd=".concat((0,external_kolmafia_namespaceObject.myHash)()));
    } else return;
  }

  // We do this funny logic on annoyed snake & slime blob because they both suck for profits
  // And because we don't want to lock people out of grabbing an outfit
  var voterValueTable = [{
    monster: $monster(daily_templateObject5 || (daily_templateObject5 = daily_taggedTemplateLiteral(["terrible mutant"]))),
    value: garboValue(template_string_$item(daily_templateObject6 || (daily_templateObject6 = daily_taggedTemplateLiteral(["glob of undifferentiated tissue"])))) + 10
  }, {
    monster: $monster(daily_templateObject7 || (daily_templateObject7 = daily_taggedTemplateLiteral(["angry ghost"]))),
    value: garboValue(template_string_$item(daily_templateObject8 || (daily_templateObject8 = daily_taggedTemplateLiteral(["ghostly ectoplasm"])))) * 1.11
  }, {
    monster: $monster(daily_templateObject9 || (daily_templateObject9 = daily_taggedTemplateLiteral(["government bureaucrat"]))),
    value: garboValue(template_string_$item(daily_templateObject10 || (daily_templateObject10 = daily_taggedTemplateLiteral(["absentee voter ballot"])))) * 0.05 + 75 * 0.25 + 50
  }, {
    monster: $monster(daily_templateObject11 || (daily_templateObject11 = daily_taggedTemplateLiteral(["annoyed snake"]))),
    value: (0,external_kolmafia_namespaceObject.gamedayToInt)()
  }, {
    monster: $monster(daily_templateObject12 || (daily_templateObject12 = daily_taggedTemplateLiteral(["slime blob"]))),
    value: 95 - (0,external_kolmafia_namespaceObject.gamedayToInt)()
  }];
  (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=town_right&action=townright_vote");
  var votingMonsterPriority = voterValueTable.sort((a, b) => b.value - a.value).map(element => element.monster.name);
  var monsterVote = votingMonsterPriority.indexOf(property_get("_voteMonster1")) < votingMonsterPriority.indexOf(property_get("_voteMonster2")) ? 1 : 2;
  var voteLocalPriorityArr = [[0, initPriority.get(property_get("_voteLocal1")) || (property_get("_voteLocal1").indexOf("-") === -1 ? 1 : -1)], [1, initPriority.get(property_get("_voteLocal2")) || (property_get("_voteLocal2").indexOf("-") === -1 ? 1 : -1)], [2, initPriority.get(property_get("_voteLocal3")) || (property_get("_voteLocal3").indexOf("-") === -1 ? 1 : -1)], [3, initPriority.get(property_get("_voteLocal4")) || (property_get("_voteLocal4").indexOf("-") === -1 ? 1 : -1)]];
  var init = lib_maxBy(voteLocalPriorityArr, 1)[0];
  (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?option=1&whichchoice=1331&g=".concat(monsterVote, "&local[]=").concat(init, "&local[]=").concat(init));
}
function daily_pantogram() {
  if (!Pantogram_have() || havePants()) return;
  var pantogramValue;
  if (lib_have(template_string_$item(daily_templateObject13 || (daily_templateObject13 = daily_taggedTemplateLiteral(["repaid diaper"])))) && lib_have($familiar(daily_templateObject14 || (daily_templateObject14 = daily_taggedTemplateLiteral(["Robortender"]))))) {
    var expectedBarfTurns = config_globalOptions.nobarf ? 0 : estimatedGarboTurns() - digitizedMonstersRemaining() - embezzlerCount();
    pantogramValue = 100 * expectedBarfTurns;
  } else {
    var lepMult = findLeprechaunMultiplier(meatFamiliar());
    var lepBonus = 2 * lepMult + Math.sqrt(lepMult);
    var totalPantsValue = pants => modifier_get("Meat Drop", pants) + modifier_get("Familiar Weight", pants) * lepBonus;
    var alternativePants = external_kolmafia_namespaceObject.Item.all().filter(item => lib_have(item) && (0,external_kolmafia_namespaceObject.toSlot)(item) === $slot(daily_templateObject15 || (daily_templateObject15 = daily_taggedTemplateLiteral(["pants"])))).map(pants => totalPantsValue(pants));
    var bestPantsValue = Math.max.apply(Math, [0].concat(daily_toConsumableArray(alternativePants)));
    pantogramValue = (100 + 0.6 * baseMeat - bestPantsValue * baseMeat / 100) * estimatedGarboTurns();
  }
  var cloverPrice = Math.min.apply(Math, daily_toConsumableArray(template_string_$items(daily_templateObject16 || (daily_templateObject16 = daily_taggedTemplateLiteral(["ten-leaf clover, disassembled clover"]))).map(item => (0,external_kolmafia_namespaceObject.mallPrice)(item))));
  if (cloverPrice + (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(daily_templateObject17 || (daily_templateObject17 = daily_taggedTemplateLiteral(["porquoise"])))) > pantogramValue) {
    return;
  }
  acquire(1, template_string_$item(daily_templateObject18 || (daily_templateObject18 = daily_taggedTemplateLiteral(["porquoise"]))), pantogramValue - cloverPrice, false);
  if (!lib_have(template_string_$item(daily_templateObject19 || (daily_templateObject19 = daily_taggedTemplateLiteral(["porquoise"]))))) return;
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(daily_templateObject20 || (daily_templateObject20 = daily_taggedTemplateLiteral(["ten-leaf clover"]))));
  (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(daily_templateObject21 || (daily_templateObject21 = daily_taggedTemplateLiteral(["bubblin' crude"]))));
  makePants((0,external_kolmafia_namespaceObject.myPrimestat)().toString(), "Sleaze Resistance: 2", "MP Regen Max: 15", "Drops Items: true", "Meat Drop: 60");
}
function nepQuest() {
  if (!(property_get("neverendingPartyAlways") || property_get("_neverendingPartyToday"))) return;
  if (property_get("_questPartyFair") === "unstarted") {
    (0,external_kolmafia_namespaceObject.visitUrl)((0,external_kolmafia_namespaceObject.toUrl)($location(daily_templateObject22 || (daily_templateObject22 = daily_taggedTemplateLiteral(["The Neverending Party"])))));
    if (["food", "booze", "trash", "dj"].includes(property_get("_questPartyFairQuest"))) {
      (0,external_kolmafia_namespaceObject.runChoice)(1); // Accept quest
    } else {
      (0,external_kolmafia_namespaceObject.runChoice)(2); // Decline quest
    }
  }

  if (["food", "booze"].includes(property_get("_questPartyFairQuest"))) {
    (0,external_kolmafia_namespaceObject.print)("Gerald/ine quest!", HIGHLIGHT);
    config_globalOptions.clarasBellClaimed = true;
  }
}
function completeBarfQuest() {
  if (!attemptCompletingBarfQuest) return;
  if (property_get("questEStGiveMeFuel") === "started") {
    var globuleCosts = (0,external_kolmafia_namespaceObject.retrievePrice)(template_string_$item(daily_templateObject23 || (daily_templateObject23 = daily_taggedTemplateLiteral(["toxic globule"]))), 20);
    if (globuleCosts < 3 * garboValue(template_string_$item(daily_templateObject24 || (daily_templateObject24 = daily_taggedTemplateLiteral(["FunFunds\u2122"]))))) {
      (0,external_kolmafia_namespaceObject.print)("The cost of 20 toxic globules (".concat(globuleCosts, ") is less than the profits expected from 3 FunFunds\u2122 (").concat(3 * garboValue(template_string_$item(daily_templateObject25 || (daily_templateObject25 = daily_taggedTemplateLiteral(["FunFunds\u2122"])))), "). Proceeding to acquire toxic globules."), "green");
      attemptCompletingBarfQuest = acquire(20, template_string_$item(daily_templateObject26 || (daily_templateObject26 = daily_taggedTemplateLiteral(["toxic globule"]))), 1.5 * globuleCosts / 20, false) >= 20;
    } else {
      attemptCompletingBarfQuest = false;
      (0,external_kolmafia_namespaceObject.print)("The cost of 20 toxic globules (".concat(globuleCosts, ") exceeds the profits expected from 3 FunFunds\u2122 (").concat(3 * garboValue(template_string_$item(daily_templateObject27 || (daily_templateObject27 = daily_taggedTemplateLiteral(["FunFunds\u2122"])))), "). Consider farming some globules yourself."), "red");
    }
  }
  if (property_get("questEStSuperLuber") === "step2" || property_get("questEStGiveMeFuel") === "step1") {
    (0,external_kolmafia_namespaceObject.print)("Completing Barf Quest", "blue");
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=airport_stench&action=airport3_kiosk");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1066&pwd&option=3");
  }
  return;
}
function checkBarfQuest() {
  var _page$match$2$match$, _page$match, _page$match$, _page$match$$match, _page$match$2$match$2, _page$match2, _page$match2$, _page$match2$$match;
  var page = (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=airport_stench&action=airport3_kiosk");

  // If we are on an assignment, try completing and then return after
  if (page.includes("Current Assignment")) {
    return completeBarfQuest();
  }

  // If there are no available nor current assignments, then we are done for the day
  if (!page.includes("Available Assignments")) {
    // Reset prefs to unstarted just in case (since they do not automatically reset on rollover)
    _set("questEStSuperLuber", "unstarted");
    _set("questEStGiveMeFuel", "unstarted");
    return;
  }
  var targets = config_globalOptions.nobarf ? ["Electrical Maintenance"] : ["Track Maintenance", "Electrical Maintenance"]; // In decreasing order of priority

  // Page includes Track/Electrical Maintenance and we aren't on an assignment -> choose assignment
  var quests = [(_page$match$2$match$ = (_page$match = page.match("(width=250>)(.*?)(value=1>)")) === null || _page$match === void 0 ? void 0 : (_page$match$ = _page$match[2]) === null || _page$match$ === void 0 ? void 0 : (_page$match$$match = _page$match$.match("(<b>)(.*?)(</b>)")) === null || _page$match$$match === void 0 ? void 0 : _page$match$$match[2]) !== null && _page$match$2$match$ !== void 0 ? _page$match$2$match$ : "", (_page$match$2$match$2 = (_page$match2 = page.match("(value=1>)(.*?)(value=2>)")) === null || _page$match2 === void 0 ? void 0 : (_page$match2$ = _page$match2[2]) === null || _page$match2$ === void 0 ? void 0 : (_page$match2$$match = _page$match2$.match("(<b>)(.*?)(</b>)")) === null || _page$match2$$match === void 0 ? void 0 : _page$match2$$match[2]) !== null && _page$match$2$match$2 !== void 0 ? _page$match$2$match$2 : ""];
  (0,external_kolmafia_namespaceObject.print)("Barf Quests Available:", "blue");
  quests.forEach(quest => (0,external_kolmafia_namespaceObject.print)(quest, "blue"));

  // If page does not include Track/Electrical Maintenance quest, return
  if (!targets.some(target => page.includes(target))) {
    (0,external_kolmafia_namespaceObject.print)("No suitable Barf Quests available.", "red");
    return;
  }
  for (var _i = 0, _targets = targets; _i < _targets.length; _i++) {
    var target = _targets[_i];
    var _iterator = daily_createForOfIteratorHelper(quests.entries()),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = daily_slicedToArray(_step.value, 2),
          idx = _step$value[0],
          qst = _step$value[1];
        if (target === qst) {
          (0,external_kolmafia_namespaceObject.print)("Accepting Barf Quest: ".concat(qst), "blue");
          (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1066&pwd&option=".concat(idx + 1));
          return completeBarfQuest();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return;
}
function configureSnojo() {
  if (snojoConfigured) return;

  // if we're ascending, pick whichever consumable has the best price
  // each consumable takes 7 turns and we can spend 10 per day
  var options = new Map([[10 / 7 * garboValue(template_string_$item(daily_templateObject28 || (daily_templateObject28 = daily_taggedTemplateLiteral(["ancient medicinal herbs"])))), 1], [10 / 7 * garboValue(template_string_$item(daily_templateObject29 || (daily_templateObject29 = daily_taggedTemplateLiteral(["ice rice"])))), 2], [10 / 7 * garboValue(template_string_$item(daily_templateObject30 || (daily_templateObject30 = daily_taggedTemplateLiteral(["iced plum wine"])))), 3]]);
  // otherwise, assume we're in for at least five days and consider scrolls
  // we get 7 consumables in 5 days, plus a scroll
  if (!config_globalOptions.ascend) {
    if (property_get("snojoMuscleWins") < 50) {
      options.set((7 * garboValue(template_string_$item(daily_templateObject31 || (daily_templateObject31 = daily_taggedTemplateLiteral(["ancient medicinal herbs"])))) + garboValue(template_string_$item(daily_templateObject32 || (daily_templateObject32 = daily_taggedTemplateLiteral(["training scroll:  Shattering Punch"]))))) / 5, 1);
    }
    if (property_get("snojoMysticalityWins") < 50) {
      options.set((7 * garboValue(template_string_$item(daily_templateObject33 || (daily_templateObject33 = daily_taggedTemplateLiteral(["ice rice"])))) + garboValue(template_string_$item(daily_templateObject34 || (daily_templateObject34 = daily_taggedTemplateLiteral(["training scroll:  Snokebomb"]))))) / 5, 2);
    }
    if (property_get("snojoMoxieWins") < 50) {
      options.set((7 * garboValue(template_string_$item(daily_templateObject35 || (daily_templateObject35 = daily_taggedTemplateLiteral(["iced plum wine"])))) + garboValue(template_string_$item(daily_templateObject36 || (daily_templateObject36 = daily_taggedTemplateLiteral(["training scroll:  Shivering Monkey Technique"]))))) / 5, 3);
    }
  }
  var bestProfit = Math.max.apply(Math, daily_toConsumableArray(options.keys()));
  var option = options.get(bestProfit);
  if (option) {
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=snojo&action=snojo_controller");
    (0,external_kolmafia_namespaceObject.runChoice)(option);
    snojoConfigured = true;
  }
}
var DailyTasks = [{
  name: "Refresh Latte",
  ready: () => lib_have(template_string_$item(daily_templateObject37 || (daily_templateObject37 = daily_taggedTemplateLiteral(["latte lovers member's mug"])))),
  completed: () => latteRefreshed,
  do: () => {
    (0,external_kolmafia_namespaceObject.visitUrl)("main.php?latte=1", false);
    latteRefreshed = true;
  }
}, {
  name: "Configure I Voted! Sticker",
  ready: () => true,
  completed: () => lib_have(template_string_$item(daily_templateObject38 || (daily_templateObject38 = daily_taggedTemplateLiteral(["\"I Voted!\" sticker"])))),
  do: () => voterSetup()
}, {
  name: "Configure Pantogram",
  ready: () => Pantogram_have(),
  completed: () => havePants(),
  do: () => daily_pantogram()
}, {
  name: "Configure Fourth of May Cosplay Saber",
  ready: () => lib_have(template_string_$item(daily_templateObject39 || (daily_templateObject39 = daily_taggedTemplateLiteral(["Fourth of May Cosplay Saber"])))),
  completed: () => property_get("_saberMod") !== 0,
  do: () => {
    (0,external_kolmafia_namespaceObject.visitUrl)("main.php?action=may4");
    // Familiar weight
    (0,external_kolmafia_namespaceObject.runChoice)(4);
  }
}, {
  name: "Bastille Battalion",
  ready: () => lib_have(template_string_$item(daily_templateObject40 || (daily_templateObject40 = daily_taggedTemplateLiteral(["Bastille Battalion control rig"])))),
  completed: () => property_get("_bastilleGames") !== 0,
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("bastille myst brutalist gesture")
}, {
  name: "11th Precinct",
  ready: () => property_get("hasDetectiveSchool"),
  completed: () => property_get("_detectiveCasesCompleted") >= 3,
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("Detective Solver.ash")
}, {
  name: "Getaway Campsite Buffs",
  ready: () => property_get("getawayCampsiteUnlocked"),
  completed: () => property_get("_campAwayCloudBuffs") + property_get("_campAwaySmileBuffs") === 4,
  do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=campaway&action=campaway_sky"),
  limit: {
    soft: 4
  }
}, {
  name: "Verify Horsery",
  ready: () => true,
  completed: () => horseryRefreshed || property_get("horseryAvailable"),
  do: () => {
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=town_right");
    horseryRefreshed = true;
  }
}, {
  name: "Prepare Horsery",
  after: ["Verify Horsery"],
  ready: () => property_get("horseryAvailable"),
  completed: () => property_get("_horsery") === "dark horse",
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("horsery dark")
}, {
  name: "Beach Comb One-Day",
  ready: () => lib_have(template_string_$item(daily_templateObject41 || (daily_templateObject41 = daily_taggedTemplateLiteral(["piece of driftwood"])))) && !lib_have(template_string_$item(daily_templateObject42 || (daily_templateObject42 = daily_taggedTemplateLiteral(["Beach Comb"])))),
  completed: () => lib_have(template_string_$item(daily_templateObject43 || (daily_templateObject43 = daily_taggedTemplateLiteral(["driftwood beach comb"])))),
  do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(daily_templateObject44 || (daily_templateObject44 = daily_taggedTemplateLiteral(["piece of driftwood"]))))
}, {
  name: "Beach Comb Buff",
  ready: () => lib_have(template_string_$item(daily_templateObject45 || (daily_templateObject45 = daily_taggedTemplateLiteral(["Beach Comb"])))) || lib_have(template_string_$item(daily_templateObject46 || (daily_templateObject46 = daily_taggedTemplateLiteral(["driftwood beach comb"])))),
  completed: () => property_get("_beachHeadsUsed").split(",").includes("10") || property_get("_freeBeachWalksUsed") >= 11,
  do: () => tryHead(template_string_$effect(daily_templateObject47 || (daily_templateObject47 = daily_taggedTemplateLiteral(["Do I Know You From Somewhere?"]))))
}, {
  name: "Beach Comb Free Walks",
  ready: () => lib_have(template_string_$item(daily_templateObject48 || (daily_templateObject48 = daily_taggedTemplateLiteral(["Beach Comb"])))) || lib_have(template_string_$item(daily_templateObject49 || (daily_templateObject49 = daily_taggedTemplateLiteral(["driftwood beach comb"])))),
  completed: () => property_get("_freeBeachWalksUsed") >= 11,
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("combo ".concat(11 - property_get("_freeBeachWalksUsed")))
}, {
  name: "Clan Fortune Buff",
  ready: () => lib_have(template_string_$item(daily_templateObject50 || (daily_templateObject50 = daily_taggedTemplateLiteral(["Clan VIP Lounge key"])))) && (0,external_kolmafia_namespaceObject.getClanLounge)()["Clan Carnival Game"] !== undefined,
  completed: () => property_get("_clanFortuneBuffUsed"),
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("fortune buff meat")
}, {
  name: "Summon Demon",
  ready: () => !!property_get("demonName2") && property_get("questL11Manor") === "finished",
  completed: () => property_get("demonSummoned"),
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("summon Preternatural Greed")
}, {
  name: "Source Terminal Enhance",
  ready: () => SourceTerminal_have(),
  completed: () => enhanceUsesRemaining() === 0,
  do: () => enhance(template_string_$effect(daily_templateObject51 || (daily_templateObject51 = daily_taggedTemplateLiteral(["meat.enh"])))),
  limit: {
    soft: 3
  }
}, {
  name: "Source Terminal Enquire",
  ready: () => SourceTerminal_have(),
  completed: () => property_get("sourceTerminalEnquiry") === "familiar.enq",
  do: () => enquiry(template_string_$effect(daily_templateObject52 || (daily_templateObject52 = daily_taggedTemplateLiteral(["familiar.enq"]))))
}, {
  name: "Mad Tea Party Buff",
  ready: () => !property_get("_madTeaParty"),
  completed: () => property_get("_madTeaParty"),
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("hatter 22"),
  acquire: [{
    item: template_string_$item(daily_templateObject53 || (daily_templateObject53 = daily_taggedTemplateLiteral(["filthy knitted dread sack"])))
  }],
  effects: [template_string_$effect(daily_templateObject54 || (daily_templateObject54 = daily_taggedTemplateLiteral(["Down the Rabbit Hole"])))]
}, {
  name: "SongBoom Buff",
  ready: () => SongBoom_have() && songChangesLeft() > 0 && (0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)(),
  completed: () => song() === "Total Eclipse of Your Meat",
  do: () => setSong("Total Eclipse of Your Meat")
}, {
  name: "SongBoom Buff (Drunk)",
  ready: () => SongBoom_have() && songChangesLeft() > 0 && (0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)(),
  completed: () => song() === "Food Vibrations",
  do: () => setSong("Food Vibrations")
}, {
  name: "Set Mind Control Device",
  ready: () => (0,external_kolmafia_namespaceObject.canadiaAvailable)() || (0,external_kolmafia_namespaceObject.gnomadsAvailable)() || lib_have(template_string_$item(daily_templateObject55 || (daily_templateObject55 = daily_taggedTemplateLiteral(["detuned radio"])))),
  completed: () => (0,external_kolmafia_namespaceObject.currentMcd)() === ((0,external_kolmafia_namespaceObject.canadiaAvailable)() ? 11 : 10),
  do: () => (0,external_kolmafia_namespaceObject.changeMcd)((0,external_kolmafia_namespaceObject.canadiaAvailable)() ? 11 : 10)
}, {
  name: "Implement [glitch season reward name]",
  ready: () => lib_have(template_string_$item(daily_templateObject56 || (daily_templateObject56 = daily_taggedTemplateLiteral(["[glitch season reward name]"])))),
  completed: () => property_get("_glitchItemImplemented"),
  do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(daily_templateObject57 || (daily_templateObject57 = daily_taggedTemplateLiteral(["[glitch season reward name]"]))))
}, {
  name: "Use BittyCar MeatCart",
  ready: () => property_get("_bittycar") !== "meatcar",
  completed: () => property_get("_bittycar") === "meatcar",
  do: () => withStash([template_string_$item(daily_templateObject58 || (daily_templateObject58 = daily_taggedTemplateLiteral(["BittyCar MeatCar"])))], () => (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(daily_templateObject59 || (daily_templateObject59 = daily_taggedTemplateLiteral(["BittyCar MeatCar"])))))
}, {
  name: "Use BittyCar SoulCar",
  ready: () => property_get("_bittycar") !== "meatcar" && property_get("_bittycar") !== "soulcar",
  completed: () => property_get("_bittycar") === "soulcar",
  do: () => withStash([template_string_$item(daily_templateObject60 || (daily_templateObject60 = daily_taggedTemplateLiteral(["BittyCar SoulCar"])))], () => (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(daily_templateObject61 || (daily_templateObject61 = daily_taggedTemplateLiteral(["BittyCar SoulCar"])))))
}, {
  name: "Holiday Eldritch Attunement",
  ready: () => (0,external_kolmafia_namespaceObject.holiday)() === "Generic Summer Holiday" && !lib_have(template_string_$effect(daily_templateObject62 || (daily_templateObject62 = daily_taggedTemplateLiteral(["Eldritch Attunement"])))) && estimatedTentacles() * config_globalOptions.prefs.valueOfFreeFight > property_get("valueOfAdventure"),
  completed: () => lib_have(template_string_$effect(daily_templateObject63 || (daily_templateObject63 = daily_taggedTemplateLiteral(["Eldritch Attunement"])))),
  do: () => (0,external_kolmafia_namespaceObject.adv1)($location(daily_templateObject64 || (daily_templateObject64 = daily_taggedTemplateLiteral(["Generic Summer Holiday Swimming!"])))),
  acquire: [{
    item: template_string_$item(daily_templateObject65 || (daily_templateObject65 = daily_taggedTemplateLiteral(["water wings"])))
  }],
  outfit: {
    acc1: template_string_$item(daily_templateObject66 || (daily_templateObject66 = daily_taggedTemplateLiteral(["water wings"])))
  }
}, {
  name: "Check Neverending Party Quest",
  ready: () => (property_get("neverendingPartyAlways") || property_get("_neverendingPartyToday")) && property_get("_questPartyFair") === "unstarted",
  completed: () => property_get("_questPartyFair") !== "unstarted",
  do: () => nepQuest()
}, {
  name: "Check Barf Mountain Quest",
  ready: () => property_get("stenchAirportAlways") || property_get("_stenchAirportToday"),
  completed: () => !attemptCompletingBarfQuest,
  do: () => checkBarfQuest()
}, {
  name: "Configure Snojo",
  ready: () => property_get("snojoAvailable") && property_get("_snojoFreeFights") < 10,
  completed: () => snojoConfigured,
  do: () => configureSnojo()
},
// Final tasks
{
  name: "Closet Items",
  ready: () => closetItems.some(item => (0,external_kolmafia_namespaceObject.itemAmount)(item)),
  completed: () => closetItems.every(item => (0,external_kolmafia_namespaceObject.itemAmount)(item) === 0),
  do: () => closetItems.forEach(item => (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(item), item))
}, {
  name: "Closet Hobo Nickels",
  ready: () => lib_have($familiar(daily_templateObject67 || (daily_templateObject67 = daily_taggedTemplateLiteral(["Hobo Monkey"])))) || lib_have(template_string_$item(daily_templateObject68 || (daily_templateObject68 = daily_taggedTemplateLiteral(["hobo nickel"]))), 1000),
  completed: () => (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(daily_templateObject69 || (daily_templateObject69 = daily_taggedTemplateLiteral(["hobo nickel"])))) === 0,
  do: () => (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(daily_templateObject70 || (daily_templateObject70 = daily_taggedTemplateLiteral(["hobo nickel"])))), template_string_$item(daily_templateObject71 || (daily_templateObject71 = daily_taggedTemplateLiteral(["hobo nickel"]))))
}, {
  name: "Retrieve Items",
  ready: () => retrieveItems.some(item => (0,external_kolmafia_namespaceObject.itemAmount)(item) === 0),
  completed: () => retrieveItems.every(item => (0,external_kolmafia_namespaceObject.itemAmount)(item) > 0),
  do: () => retrieveItems.forEach(item => (0,external_kolmafia_namespaceObject.retrieveItem)(item))
}];
;// CONCATENATED MODULE: ./src/tasks/postFreeFight.ts
var postFreeFight_templateObject, postFreeFight_templateObject2, postFreeFight_templateObject3, postFreeFight_templateObject4, postFreeFight_templateObject5, postFreeFight_templateObject6, postFreeFight_templateObject7, postFreeFight_templateObject8, postFreeFight_templateObject9, postFreeFight_templateObject10, postFreeFight_templateObject11, postFreeFight_templateObject12;
function postFreeFight_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




function bestVykeaLevel() {
  var vykeas = [{
    level: 1,
    dowelCost: 0
  }, {
    level: 2,
    dowelCost: 1
  }, {
    level: 3,
    dowelCost: 11
  }]; // excluding 4 and 5 as per bean's suggestion
  var vykeaProfit = vykea => {
    var level = vykea.level,
      dowelCost = vykea.dowelCost;
    return estimatedGarboTurns() * baseMeat * 0.1 * level - (5 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(postFreeFight_templateObject || (postFreeFight_templateObject = postFreeFight_taggedTemplateLiteral(["VYKEA rail"])))) + dowelCost * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(postFreeFight_templateObject2 || (postFreeFight_templateObject2 = postFreeFight_taggedTemplateLiteral(["VYKEA dowel"])))) + 5 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(postFreeFight_templateObject3 || (postFreeFight_templateObject3 = postFreeFight_taggedTemplateLiteral(["VYKEA plank"])))) + 1 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(postFreeFight_templateObject4 || (postFreeFight_templateObject4 = postFreeFight_taggedTemplateLiteral(["VYKEA instructions"])))));
  };
  if (vykeas.some(vykea => vykeaProfit(vykea) > 0)) {
    return lib_maxBy(vykeas, vykeaProfit).level;
  }
  return 0;
}
var PostFreeFightTasks = [{
  name: "Configure Vykea",
  ready: () => property_get("_VYKEACompanionLevel") === 0 && bestVykeaLevel() > 0,
  completed: () => property_get("_VYKEACompanionLevel") > 0,
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("create level ".concat(bestVykeaLevel(), " couch")),
  acquire: [{
    item: template_string_$item(postFreeFight_templateObject5 || (postFreeFight_templateObject5 = postFreeFight_taggedTemplateLiteral(["VYKEA hex key"])))
  }]
}, {
  name: "Configure Thrall",
  ready: () => (0,external_kolmafia_namespaceObject.myClass)() === $class(postFreeFight_templateObject6 || (postFreeFight_templateObject6 = postFreeFight_taggedTemplateLiteral(["Pastamancer"]))) && lib_have($skill(postFreeFight_templateObject7 || (postFreeFight_templateObject7 = postFreeFight_taggedTemplateLiteral(["Bind Lasagmbie"])))),
  completed: () => (0,external_kolmafia_namespaceObject.myThrall)() === $thrall(postFreeFight_templateObject8 || (postFreeFight_templateObject8 = postFreeFight_taggedTemplateLiteral(["Lasagmbie"]))),
  do: () => (0,external_kolmafia_namespaceObject.useSkill)($skill(postFreeFight_templateObject9 || (postFreeFight_templateObject9 = postFreeFight_taggedTemplateLiteral(["Bind Lasagmbie"]))))
}, {
  name: "Level Up Thrall",
  ready: () => (0,external_kolmafia_namespaceObject.myClass)() === $class(postFreeFight_templateObject10 || (postFreeFight_templateObject10 = postFreeFight_taggedTemplateLiteral(["Pastamancer"]))) && lib_have(template_string_$item(postFreeFight_templateObject11 || (postFreeFight_templateObject11 = postFreeFight_taggedTemplateLiteral(["experimental carbon fiber pasta additive"])))) && (0,external_kolmafia_namespaceObject.myThrall)() !== $thrall.none,
  completed: () => property_get("_pastaAdditive") || (0,external_kolmafia_namespaceObject.myThrall)().level >= 10,
  do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(postFreeFight_templateObject12 || (postFreeFight_templateObject12 = postFreeFight_taggedTemplateLiteral(["experimental carbon fiber pasta additive"]))))
}];
;// CONCATENATED MODULE: ./src/tasks/dailyItems.ts
var dailyItems_templateObject, dailyItems_templateObject2, dailyItems_templateObject3, dailyItems_templateObject4, dailyItems_templateObject5, dailyItems_templateObject6, dailyItems_templateObject7, dailyItems_templateObject8, dailyItems_templateObject9, dailyItems_templateObject10, dailyItems_templateObject11, dailyItems_templateObject12, dailyItems_templateObject13, dailyItems_templateObject14, dailyItems_templateObject15, dailyItems_templateObject16, dailyItems_templateObject17, dailyItems_templateObject18, dailyItems_templateObject19, dailyItems_templateObject20, dailyItems_templateObject21, dailyItems_templateObject22, dailyItems_templateObject23, dailyItems_templateObject24, dailyItems_templateObject25, dailyItems_templateObject26, dailyItems_templateObject27, dailyItems_templateObject28, dailyItems_templateObject29, dailyItems_templateObject30, dailyItems_templateObject31, dailyItems_templateObject32, dailyItems_templateObject33, dailyItems_templateObject34, dailyItems_templateObject35, dailyItems_templateObject36, dailyItems_templateObject37, dailyItems_templateObject38, dailyItems_templateObject39, dailyItems_templateObject40, dailyItems_templateObject41, dailyItems_templateObject42, dailyItems_templateObject43, dailyItems_templateObject44, dailyItems_templateObject45, dailyItems_templateObject46, dailyItems_templateObject47, dailyItems_templateObject48, dailyItems_templateObject49, dailyItems_templateObject50, dailyItems_templateObject51, dailyItems_templateObject52, dailyItems_templateObject53, dailyItems_templateObject54, dailyItems_templateObject55, dailyItems_templateObject56, dailyItems_templateObject57, dailyItems_templateObject58, dailyItems_templateObject59, dailyItems_templateObject60, dailyItems_templateObject61, dailyItems_templateObject62, dailyItems_templateObject63, dailyItems_templateObject64, dailyItems_templateObject65, dailyItems_templateObject66, dailyItems_templateObject67, dailyItems_templateObject68, dailyItems_templateObject69, dailyItems_templateObject70, dailyItems_templateObject71, dailyItems_templateObject72, dailyItems_templateObject73, dailyItems_templateObject74, dailyItems_templateObject75, dailyItems_templateObject76, dailyItems_templateObject77, dailyItems_templateObject78;
function dailyItems_defineProperty(obj, key, value) { key = dailyItems_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function dailyItems_toPropertyKey(arg) { var key = dailyItems_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function dailyItems_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function dailyItems_toConsumableArray(arr) { return dailyItems_arrayWithoutHoles(arr) || dailyItems_iterableToArray(arr) || dailyItems_unsupportedIterableToArray(arr) || dailyItems_nonIterableSpread(); }
function dailyItems_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function dailyItems_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function dailyItems_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return dailyItems_arrayLikeToArray(arr); }
function dailyItems_slicedToArray(arr, i) { return dailyItems_arrayWithHoles(arr) || dailyItems_iterableToArrayLimit(arr, i) || dailyItems_unsupportedIterableToArray(arr, i) || dailyItems_nonIterableRest(); }
function dailyItems_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function dailyItems_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function dailyItems_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function dailyItems_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = dailyItems_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function dailyItems_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dailyItems_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dailyItems_arrayLikeToArray(o, minLen); }
function dailyItems_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function dailyItems_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





var SummonTomes = $skills(dailyItems_templateObject || (dailyItems_templateObject = dailyItems_taggedTemplateLiteral(["Summon Snowcones, Summon Stickers, Summon Sugar Sheets, Summon Rad Libs, Summon Smithsness"])));
var Wads = template_string_$items(dailyItems_templateObject2 || (dailyItems_templateObject2 = dailyItems_taggedTemplateLiteral(["twinkly wad, cold wad, stench wad, hot wad, sleaze wad, spooky wad"])));
function drawBestCards() {
  var cardsLeft = Math.floor(3 - property_get("_deckCardsDrawn") / 5);
  var cardsSeen = property_get("_deckCardsSeen").toLowerCase();
  var bestCards = [{
    card: "Island",
    item: template_string_$item(dailyItems_templateObject3 || (dailyItems_templateObject3 = dailyItems_taggedTemplateLiteral(["blue mana"])))
  }, {
    card: "Ancestral Recall",
    item: template_string_$item(dailyItems_templateObject4 || (dailyItems_templateObject4 = dailyItems_taggedTemplateLiteral(["blue mana"])))
  }, {
    card: "Plains",
    item: template_string_$item(dailyItems_templateObject5 || (dailyItems_templateObject5 = dailyItems_taggedTemplateLiteral(["white mana"])))
  }, {
    card: "Healing Salve",
    item: template_string_$item(dailyItems_templateObject6 || (dailyItems_templateObject6 = dailyItems_taggedTemplateLiteral(["white mana"])))
  }, {
    card: "Swamp",
    item: template_string_$item(dailyItems_templateObject7 || (dailyItems_templateObject7 = dailyItems_taggedTemplateLiteral(["black mana"])))
  }, {
    card: "Dark Ritual",
    item: template_string_$item(dailyItems_templateObject8 || (dailyItems_templateObject8 = dailyItems_taggedTemplateLiteral(["black mana"])))
  }, {
    card: "Mountain",
    item: template_string_$item(dailyItems_templateObject9 || (dailyItems_templateObject9 = dailyItems_taggedTemplateLiteral(["red mana"])))
  }, {
    card: "Lightning bolt",
    item: template_string_$item(dailyItems_templateObject10 || (dailyItems_templateObject10 = dailyItems_taggedTemplateLiteral(["red mana"])))
  }, {
    card: "Forest",
    item: template_string_$item(dailyItems_templateObject11 || (dailyItems_templateObject11 = dailyItems_taggedTemplateLiteral(["green mana"])))
  }, {
    card: "Giant Growth",
    item: template_string_$item(dailyItems_templateObject12 || (dailyItems_templateObject12 = dailyItems_taggedTemplateLiteral(["green mana"])))
  }, {
    card: "Gift Card",
    item: template_string_$item(dailyItems_templateObject13 || (dailyItems_templateObject13 = dailyItems_taggedTemplateLiteral(["gift card"])))
  }, {
    card: "Mickey",
    item: template_string_$item(dailyItems_templateObject14 || (dailyItems_templateObject14 = dailyItems_taggedTemplateLiteral(["1952 Mickey Mantle card"])))
  }].filter(_ref => {
    var card = _ref.card;
    return !cardsSeen.includes(card.toLowerCase());
  }).sort((a, b) => garboValue(b.item) - garboValue(a.item)).splice(0, cardsLeft).map(_ref2 => {
    var card = _ref2.card;
    return card;
  });
  var _iterator = dailyItems_createForOfIteratorHelper(bestCards),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var card = _step.value;
      (0,external_kolmafia_namespaceObject.cliExecute)("cheat ".concat(card));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function bestExtrude() {
  return lib_maxBy(template_string_$items(dailyItems_templateObject15 || (dailyItems_templateObject15 = dailyItems_taggedTemplateLiteral(["browser cookie, hacked gibson"]))), garboValue);
}
function pickCargoPocket() {
  var picked = (0,external_kolmafia_namespaceObject.pickedPockets)();
  var items = (0,external_kolmafia_namespaceObject.itemPockets)();
  var meats = (0,external_kolmafia_namespaceObject.meatPockets)();
  var scraps = (0,external_kolmafia_namespaceObject.scrapPockets)();
  function pocketValue(pocket) {
    var value = 0;
    if (pocket in picked) {
      return value;
    }
    if (pocket in items) {
      value += utils_sum(Object.entries((0,external_kolmafia_namespaceObject.pocketItems)(pocket)), _ref3 => {
        var _ref4 = dailyItems_slicedToArray(_ref3, 2),
          item = _ref4[0],
          count = _ref4[1];
        return garboValue((0,external_kolmafia_namespaceObject.toItem)(item), true) * count;
      });
    }
    if (pocket in meats) {
      value += utils_sum(Object.values((0,external_kolmafia_namespaceObject.pocketMeat)(pocket)), x => parseInt(x));
    }
    if (pocket in scraps) {
      value += 200;
    }
    return value;
  }
  var pockets = [];
  for (var i = 1; i <= 666; i++) {
    var value = pocketValue(i);
    if (value > 0) {
      pockets.push([i, value]);
    }
  }
  if (pockets.length > 0) {
    (0,external_kolmafia_namespaceObject.cliExecute)("cargo ".concat(Math.trunc(lib_maxBy(pockets, 1)[0])));
  }
}
var DailyItemTasks = [].concat(dailyItems_toConsumableArray(SummonTomes.map(skill => ({
  name: "{skill}",
  ready: () => lib_have(skill),
  completed: () => skill.dailylimit === 0,
  do: () => (0,external_kolmafia_namespaceObject.useSkill)(skill, skill.dailylimit)
}))), [{
  name: "Summon Clip Art",
  ready: () => lib_have($skill(dailyItems_templateObject16 || (dailyItems_templateObject16 = dailyItems_taggedTemplateLiteral(["Summon Clip Art"])))),
  completed: () => $skill(dailyItems_templateObject17 || (dailyItems_templateObject17 = dailyItems_taggedTemplateLiteral(["Summon Clip Art"]))).dailylimit === 0,
  do: () => {
    var best = template_string_$item.none;
    for (var itemId = 5224; itemId <= 5283; itemId++) {
      var current = external_kolmafia_namespaceObject.Item.get("[".concat(itemId, "]"));
      if (garboValue(current) > garboValue(best)) {
        best = current;
      }
    }
    if (best !== template_string_$item.none) {
      (0,external_kolmafia_namespaceObject.cliExecute)("try; create ".concat($skill(dailyItems_templateObject18 || (dailyItems_templateObject18 = dailyItems_taggedTemplateLiteral(["Summon Clip Art"]))).dailylimit, " ").concat(best));
    }
  }
}, {
  name: "Chateau Mantegna Desk",
  ready: () => ChateauMantegna_have(),
  completed: () => property_get("_chateauDeskHarvested"),
  do: () => (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=chateau&action=chateau_desk2", false)
}, {
  name: "Kremlin's Greatest Briefcase Collect",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject19 || (dailyItems_templateObject19 = dailyItems_taggedTemplateLiteral(["Kremlin's Greatest Briefcase"])))),
  completed: () => property_get("_kgbClicksUsed") > 17 || property_get("_kgbDispenserUses") >= 3,
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("Briefcase collect")
}, {
  name: "Ice Cold April Shower",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject20 || (dailyItems_templateObject20 = dailyItems_taggedTemplateLiteral(["Clan VIP Lounge key"])))) && (0,external_kolmafia_namespaceObject.getClanLounge)()["Clan shower"] !== undefined,
  completed: () => property_get("_aprilShower"),
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("try; shower ice")
}, {
  name: "Swimming Pool Item",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject21 || (dailyItems_templateObject21 = dailyItems_taggedTemplateLiteral(["Clan VIP Lounge key"])))) && (0,external_kolmafia_namespaceObject.getClanLounge)()["Olympic-sized Clan crate"] !== undefined,
  completed: () => property_get("_olympicSwimmingPoolItemFound"),
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("swim item")
}, {
  name: "Cheat Deck of Every Card",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject22 || (dailyItems_templateObject22 = dailyItems_taggedTemplateLiteral(["Deck of Every Card"])))),
  completed: () => Math.floor(3 - property_get("_deckCardsDrawn") / 5) === 0,
  do: () => drawBestCards()
}, {
  name: "Source Terminal Extrude",
  ready: () => SourceTerminal_have(),
  completed: () => property_get("_sourceTerminalExtrudes") === 3 || garboValue(bestExtrude()) < garboValue(template_string_$item(dailyItems_templateObject23 || (dailyItems_templateObject23 = dailyItems_taggedTemplateLiteral(["Source essence"])))) * 10,
  do: () => extrude(bestExtrude()),
  acquire: [{
    item: template_string_$item(dailyItems_templateObject24 || (dailyItems_templateObject24 = dailyItems_taggedTemplateLiteral(["Source essence"]))),
    num: 10
  }],
  limit: {
    soft: 3
  }
}, {
  name: "Internet Meme Shop viral video",
  completed: () => property_get("_internetViralVideoBought") || garboValue(template_string_$item(dailyItems_templateObject25 || (dailyItems_templateObject25 = dailyItems_taggedTemplateLiteral(["viral video"])))) < garboValue(template_string_$item(dailyItems_templateObject26 || (dailyItems_templateObject26 = dailyItems_taggedTemplateLiteral(["BACON"])))) * coinmasterPrice(template_string_$item(dailyItems_templateObject27 || (dailyItems_templateObject27 = dailyItems_taggedTemplateLiteral(["viral video"])))),
  do: () => (0,external_kolmafia_namespaceObject.buy)($coinmaster(dailyItems_templateObject28 || (dailyItems_templateObject28 = dailyItems_taggedTemplateLiteral(["Internet Meme Shop"]))), 1, template_string_$item(dailyItems_templateObject29 || (dailyItems_templateObject29 = dailyItems_taggedTemplateLiteral(["viral video"])))),
  acquire: [{
    item: template_string_$item(dailyItems_templateObject30 || (dailyItems_templateObject30 = dailyItems_taggedTemplateLiteral(["BACON"]))),
    num: coinmasterPrice(template_string_$item(dailyItems_templateObject31 || (dailyItems_templateObject31 = dailyItems_taggedTemplateLiteral(["viral video"]))))
  }]
}, {
  name: "Internet Meme Shop plus one",
  completed: () => property_get("_internetPlusOneBought") || garboValue(template_string_$item(dailyItems_templateObject32 || (dailyItems_templateObject32 = dailyItems_taggedTemplateLiteral(["plus one"])))) < garboValue(template_string_$item(dailyItems_templateObject33 || (dailyItems_templateObject33 = dailyItems_taggedTemplateLiteral(["BACON"])))) * coinmasterPrice(template_string_$item(dailyItems_templateObject34 || (dailyItems_templateObject34 = dailyItems_taggedTemplateLiteral(["plus one"])))),
  do: () => (0,external_kolmafia_namespaceObject.buy)($coinmaster(dailyItems_templateObject35 || (dailyItems_templateObject35 = dailyItems_taggedTemplateLiteral(["Internet Meme Shop"]))), 1, template_string_$item(dailyItems_templateObject36 || (dailyItems_templateObject36 = dailyItems_taggedTemplateLiteral(["plus one"])))),
  acquire: [{
    item: template_string_$item(dailyItems_templateObject37 || (dailyItems_templateObject37 = dailyItems_taggedTemplateLiteral(["BACON"]))),
    num: coinmasterPrice(template_string_$item(dailyItems_templateObject38 || (dailyItems_templateObject38 = dailyItems_taggedTemplateLiteral(["plus one"]))))
  }]
}, {
  name: "Internet Meme Shop gallon of milk",
  completed: () => property_get("_internetGallonOfMilkBought") || garboValue(template_string_$item(dailyItems_templateObject39 || (dailyItems_templateObject39 = dailyItems_taggedTemplateLiteral(["gallon of milk"])))) < garboValue(template_string_$item(dailyItems_templateObject40 || (dailyItems_templateObject40 = dailyItems_taggedTemplateLiteral(["BACON"])))) * coinmasterPrice(template_string_$item(dailyItems_templateObject41 || (dailyItems_templateObject41 = dailyItems_taggedTemplateLiteral(["gallon of milk"])))),
  do: () => (0,external_kolmafia_namespaceObject.buy)($coinmaster(dailyItems_templateObject42 || (dailyItems_templateObject42 = dailyItems_taggedTemplateLiteral(["Internet Meme Shop"]))), 1, template_string_$item(dailyItems_templateObject43 || (dailyItems_templateObject43 = dailyItems_taggedTemplateLiteral(["gallon of milk"])))),
  acquire: [{
    item: template_string_$item(dailyItems_templateObject44 || (dailyItems_templateObject44 = dailyItems_taggedTemplateLiteral(["BACON"]))),
    num: coinmasterPrice(template_string_$item(dailyItems_templateObject45 || (dailyItems_templateObject45 = dailyItems_taggedTemplateLiteral(["gallon of milk"]))))
  }]
}, {
  name: "Internet Meme Shop print screen button",
  completed: () => property_get("_internetPrintScreenButtonBought") || garboValue(template_string_$item(dailyItems_templateObject46 || (dailyItems_templateObject46 = dailyItems_taggedTemplateLiteral(["print screen button"])))) < garboValue(template_string_$item(dailyItems_templateObject47 || (dailyItems_templateObject47 = dailyItems_taggedTemplateLiteral(["BACON"])))) * coinmasterPrice(template_string_$item(dailyItems_templateObject48 || (dailyItems_templateObject48 = dailyItems_taggedTemplateLiteral(["print screen button"])))),
  do: () => (0,external_kolmafia_namespaceObject.buy)($coinmaster(dailyItems_templateObject49 || (dailyItems_templateObject49 = dailyItems_taggedTemplateLiteral(["Internet Meme Shop"]))), 1, template_string_$item(dailyItems_templateObject50 || (dailyItems_templateObject50 = dailyItems_taggedTemplateLiteral(["print screen button"])))),
  acquire: [{
    item: template_string_$item(dailyItems_templateObject51 || (dailyItems_templateObject51 = dailyItems_taggedTemplateLiteral(["BACON"]))),
    num: coinmasterPrice(template_string_$item(dailyItems_templateObject52 || (dailyItems_templateObject52 = dailyItems_taggedTemplateLiteral(["print screen button"]))))
  }]
}, {
  name: "Internet Meme Shop daily dungeon malware",
  completed: () => property_get("_internetDailyDungeonMalwareBought") || garboValue(template_string_$item(dailyItems_templateObject53 || (dailyItems_templateObject53 = dailyItems_taggedTemplateLiteral(["daily dungeon malware"])))) < garboValue(template_string_$item(dailyItems_templateObject54 || (dailyItems_templateObject54 = dailyItems_taggedTemplateLiteral(["BACON"])))) * coinmasterPrice(template_string_$item(dailyItems_templateObject55 || (dailyItems_templateObject55 = dailyItems_taggedTemplateLiteral(["daily dungeon malware"])))),
  do: () => (0,external_kolmafia_namespaceObject.buy)($coinmaster(dailyItems_templateObject56 || (dailyItems_templateObject56 = dailyItems_taggedTemplateLiteral(["Internet Meme Shop"]))), 1, template_string_$item(dailyItems_templateObject57 || (dailyItems_templateObject57 = dailyItems_taggedTemplateLiteral(["daily dungeon malware"])))),
  acquire: [{
    item: template_string_$item(dailyItems_templateObject58 || (dailyItems_templateObject58 = dailyItems_taggedTemplateLiteral(["BACON"]))),
    num: coinmasterPrice(template_string_$item(dailyItems_templateObject59 || (dailyItems_templateObject59 = dailyItems_taggedTemplateLiteral(["daily dungeon malware"]))))
  }]
}, {
  name: "Rainbow Gravitation",
  ready: () => lib_have($skill(dailyItems_templateObject60 || (dailyItems_templateObject60 = dailyItems_taggedTemplateLiteral(["Rainbow Gravitation"])))),
  completed: () => property_get("prismaticSummons") === 3 || garboValue(template_string_$item(dailyItems_templateObject61 || (dailyItems_templateObject61 = dailyItems_taggedTemplateLiteral(["prismatic wad"])))) < utils_sum(Wads, garboValue),
  do: () => (0,external_kolmafia_namespaceObject.useSkill)($skill(dailyItems_templateObject62 || (dailyItems_templateObject62 = dailyItems_taggedTemplateLiteral(["Rainbow Gravitation"]))), 3 - property_get("prismaticSummons")),
  acquire: () => Wads.map(x => ({
    item: x,
    num: 3 - property_get("prismaticSummons")
  }))
}, {
  name: "Request Sandwich",
  ready: () => lib_have($skill(dailyItems_templateObject63 || (dailyItems_templateObject63 = dailyItems_taggedTemplateLiteral(["Request Sandwich"])))),
  completed: () => property_get("_requestSandwichSucceeded"),
  do: () => (0,external_kolmafia_namespaceObject.useSkill)($skill(dailyItems_templateObject64 || (dailyItems_templateObject64 = dailyItems_taggedTemplateLiteral(["Request Sandwich"])))),
  limit: {
    soft: 10
  }
}, {
  name: "Demand Sandwich",
  ready: () => lib_have($skill(dailyItems_templateObject65 || (dailyItems_templateObject65 = dailyItems_taggedTemplateLiteral(["Demand Sandwich"])))),
  completed: () => property_get("_demandSandwich") > 0,
  do: () => (0,external_kolmafia_namespaceObject.useSkill)($skill(dailyItems_templateObject66 || (dailyItems_templateObject66 = dailyItems_taggedTemplateLiteral(["Demand Sandwich"]))))
}, {
  name: "Tea Tree",
  ready: () => (0,external_kolmafia_namespaceObject.getCampground)()["potted tea tree"] !== undefined,
  completed: () => property_get("_pottedTeaTreeUsed"),
  do: () => {
    var teas = template_string_$items(dailyItems_templateObject67 || (dailyItems_templateObject67 = dailyItems_taggedTemplateLiteral(["cuppa Activi tea, cuppa Alacri tea, cuppa Boo tea, cuppa Chari tea, cuppa Craft tea, cuppa Cruel tea, cuppa Dexteri tea, cuppa Feroci tea, cuppa Flamibili tea, cuppa Flexibili tea, cuppa Frost tea, cuppa Gill tea, cuppa Impregnabili tea, cuppa Improprie tea, cuppa Insani tea, cuppa Irritabili tea, cuppa Loyal tea, cuppa Mana tea, cuppa Mediocri tea, cuppa Monstrosi tea, cuppa Morbidi tea, cuppa Nas tea, cuppa Net tea, cuppa Neuroplastici tea, cuppa Obscuri tea, cuppa Physicali tea, cuppa Proprie tea, cuppa Royal tea, cuppa Serendipi tea, cuppa Sobrie tea, cuppa Toast tea, cuppa Twen tea, cuppa Uncertain tea, cuppa Vitali tea, cuppa Voraci tea, cuppa Wit tea, cuppa Yet tea"])));
    var bestTea = lib_maxBy(teas, garboValue);
    var shakeVal = 3 * garboAverageValue.apply(void 0, dailyItems_toConsumableArray(teas));
    var teaAction = shakeVal > garboValue(bestTea) ? "shake" : bestTea.name;
    (0,external_kolmafia_namespaceObject.cliExecute)("teatree ".concat(teaAction));
  }
}, {
  name: "Check Jick Jar",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject68 || (dailyItems_templateObject68 = dailyItems_taggedTemplateLiteral(["psychoanalytic jar"])))),
  completed: () => property_get("_jickJarAvailable") !== "unknown",
  do: () => (0,external_kolmafia_namespaceObject.visitUrl)("showplayer.php?who=1")
}, {
  name: "Acquire Jick Jar",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject69 || (dailyItems_templateObject69 = dailyItems_taggedTemplateLiteral(["psychoanalytic jar"])))) && property_get("_jickJarAvailable") === "true",
  completed: () => property_get("_psychoJarFilled"),
  do: () => (0,external_kolmafia_namespaceObject.visitUrl)("showplayer.php?who=1&action=jung&whichperson=jick")
}, {
  name: "Cargo Shorts Pocket",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject70 || (dailyItems_templateObject70 = dailyItems_taggedTemplateLiteral(["Cargo Cultist Shorts"])))),
  completed: () => property_get("_cargoPocketEmptied"),
  do: () => pickCargoPocket()
}, {
  name: "Time-Spinner Gin",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject71 || (dailyItems_templateObject71 = dailyItems_taggedTemplateLiteral(["Time-Spinner"])))) && !doingExtrovermectin() && property_get("timeSpinnerMedals") >= 5 && property_get("_timeSpinnerMinutesUsed") <= 8,
  completed: () => property_get("_timeSpinnerReplicatorUsed"),
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("FarFuture drink")
}, {
  name: "FantasyRealm Hat",
  ready: () => property_get("frAlways") || property_get("_frToday"),
  completed: () => lib_have(template_string_$item(dailyItems_templateObject72 || (dailyItems_templateObject72 = dailyItems_taggedTemplateLiteral(["FantasyRealm G. E. M."])))),
  do: () => {
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=realm_fantasy&action=fr_initcenter");
    (0,external_kolmafia_namespaceObject.runChoice)(-1);
  },
  choices: {
    1280: 1
  }
}, {
  name: "Lodestone",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject73 || (dailyItems_templateObject73 = dailyItems_taggedTemplateLiteral(["lodestone"])))) && !property_get("_lodestoneUsed"),
  completed: () => property_get("_lodestoneUsed"),
  do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(dailyItems_templateObject74 || (dailyItems_templateObject74 = dailyItems_taggedTemplateLiteral(["lodestone"]))))
}, {
  name: "Update Garbage Tote",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject75 || (dailyItems_templateObject75 = dailyItems_taggedTemplateLiteral(["January's Garbage Tote"])))) && !property_get("_garbageItemChanged"),
  completed: () => property_get("_garbageItemChanged"),
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("fold broken champagne bottle")
}, {
  name: "Learn About Bugs",
  ready: () => lib_have(template_string_$item(dailyItems_templateObject76 || (dailyItems_templateObject76 = dailyItems_taggedTemplateLiteral(["S.I.T. Course Completion Certificate"])))),
  completed: () => property_get("_sitCourseCompleted", true) || lib_have($skill(dailyItems_templateObject77 || (dailyItems_templateObject77 = dailyItems_taggedTemplateLiteral(["Insectologist"])))),
  do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(dailyItems_templateObject78 || (dailyItems_templateObject78 = dailyItems_taggedTemplateLiteral(["S.I.T. Course Completion Certificate"])))),
  choices: dailyItems_defineProperty({}, 1494, 2)
}]);
;// CONCATENATED MODULE: ./src/tasks/dailyVolcano.ts
var dailyVolcano_templateObject, dailyVolcano_templateObject2, dailyVolcano_templateObject3, dailyVolcano_templateObject4, dailyVolcano_templateObject5, dailyVolcano_templateObject6, dailyVolcano_templateObject7, dailyVolcano_templateObject8, dailyVolcano_templateObject9;
function dailyVolcano_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





function volcanoItemValue(_ref) {
  var quantity = _ref.quantity,
    item = _ref.item;
  var basePrice = (0,external_kolmafia_namespaceObject.retrievePrice)(item, quantity);
  if (basePrice >= 0) return basePrice;
  if (item === template_string_$item(dailyVolcano_templateObject || (dailyVolcano_templateObject = dailyVolcano_taggedTemplateLiteral(["fused fuse"])))) {
    // Check if clara's bell is available and unused
    if (!lib_have(template_string_$item(dailyVolcano_templateObject2 || (dailyVolcano_templateObject2 = dailyVolcano_taggedTemplateLiteral(["Clara's bell"])))) || config_globalOptions.clarasBellClaimed) return Infinity;
    // Check if we can use Clara's bell for Yachtzee
    // If so, we call the opportunity cost of this about 40k
    if (realmAvailable("sleaze") && lib_have(template_string_$item(dailyVolcano_templateObject3 || (dailyVolcano_templateObject3 = dailyVolcano_taggedTemplateLiteral(["fishy pipe"])))) && !property_get("_fishyPipeUsed")) {
      return quantity * 40000;
    } else {
      return quantity * property_get("valueOfAdventure");
    }
  }
  return Infinity;
}
function checkVolcanoQuest() {
  var _property$getItem, _property$getItem2, _property$getItem3;
  (0,external_kolmafia_namespaceObject.print)("Checking volcano quest", HIGHLIGHT);
  (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=airport_hot&action=airport4_questhub");
  var volcoinoValue = garboValue(template_string_$item(dailyVolcano_templateObject4 || (dailyVolcano_templateObject4 = dailyVolcano_taggedTemplateLiteral(["Volcoino"]))));
  var bestItem = lib_maxBy([{
    item: (_property$getItem = getItem("_volcanoItem1")) !== null && _property$getItem !== void 0 ? _property$getItem : template_string_$item.none,
    quantity: property_get("_volcanoItemCount1"),
    choice: 1
  }, {
    item: (_property$getItem2 = getItem("_volcanoItem2")) !== null && _property$getItem2 !== void 0 ? _property$getItem2 : template_string_$item.none,
    quantity: property_get("_volcanoItemCount2"),
    choice: 2
  }, {
    item: (_property$getItem3 = getItem("_volcanoItem3")) !== null && _property$getItem3 !== void 0 ? _property$getItem3 : template_string_$item.none,
    quantity: property_get("_volcanoItemCount3"),
    choice: 3
  }], volcanoItemValue, true);
  if (bestItem.item === template_string_$item(dailyVolcano_templateObject5 || (dailyVolcano_templateObject5 = dailyVolcano_taggedTemplateLiteral(["fused fuse"])))) {
    config_globalOptions.clarasBellClaimed = true;
    logMessage("Grab a fused fused with your clara's bell charge while overdrunk!");
  } else if (volcanoItemValue(bestItem) < volcoinoValue) {
    withProperty("autoBuyPriceLimit", volcoinoValue, () => (0,external_kolmafia_namespaceObject.retrieveItem)(bestItem.item, bestItem.quantity));
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=airport_hot&action=airport4_questhub");
    (0,external_kolmafia_namespaceObject.runChoice)(bestItem.choice);
  }
}
var DailyVolcanoTasks = [{
  name: "Volcano Quest",
  ready: () => realmAvailable("hot"),
  completed: () => property_get("_volcanoItemRedeemed"),
  do: () => checkVolcanoQuest()
}, {
  name: "Free Volcoino",
  ready: () => realmAvailable("hot"),
  completed: () => property_get("_infernoDiscoVisited"),
  do: () => {
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=airport_hot&action=airport4_zone1");
    (0,external_kolmafia_namespaceObject.runChoice)(7);
  },
  acquire: () => template_string_$items(dailyVolcano_templateObject6 || (dailyVolcano_templateObject6 = dailyVolcano_taggedTemplateLiteral(["smooth velvet pocket square, smooth velvet socks, smooth velvet hat, smooth velvet shirt, smooth velvet hanky, smooth velvet pants"]))).map(x => ({
    item: x
  })),
  outfit: {
    modifier: "disco style"
  }
}, {
  name: "Free Volcano Mining",
  ready: () => realmAvailable("hot") && lib_have($skill(dailyVolcano_templateObject7 || (dailyVolcano_templateObject7 = dailyVolcano_taggedTemplateLiteral(["Unaccompanied Miner"])))),
  completed: () => property_get("_unaccompaniedMinerUsed") >= 5,
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("minevolcano.ash ".concat(5 - property_get("_unaccompaniedMinerUsed"))),
  prepare: () => (0,external_kolmafia_namespaceObject.restoreHp)((0,external_kolmafia_namespaceObject.myMaxhp)() * 0.9),
  post: () => {
    if (lib_have(template_string_$effect(dailyVolcano_templateObject8 || (dailyVolcano_templateObject8 = dailyVolcano_taggedTemplateLiteral(["Beaten Up"]))))) {
      lib_uneffect(template_string_$effect(dailyVolcano_templateObject9 || (dailyVolcano_templateObject9 = dailyVolcano_taggedTemplateLiteral(["Beaten Up"]))));
    }
    if ((0,external_kolmafia_namespaceObject.myHp)() < (0,external_kolmafia_namespaceObject.myMaxhp)() * 0.5) {
      (0,external_kolmafia_namespaceObject.restoreHp)((0,external_kolmafia_namespaceObject.myMaxhp)() * 0.9);
    }
  }
}];
;// CONCATENATED MODULE: ./node_modules/libram/dist/resources/2014/CrimboShrub.js
var CrimboShrub_templateObject, CrimboShrub_templateObject2, CrimboShrub_templateObject3, CrimboShrub_templateObject4;
function CrimboShrub_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }




function CrimboShrub_have() {
  return lib_have($familiar(CrimboShrub_templateObject || (CrimboShrub_templateObject = CrimboShrub_taggedTemplateLiteral(["Crimbo Shrub"]))));
}
var Toppers = {
  Muscle: 1,
  Mysticality: 2,
  Moxie: 3
};
var Lights = {
  "Prismatic Damage": 1,
  "Hot Damage": 2,
  "Cold Damage": 3,
  "Stench Damage": 4,
  "Spooky Damage": 5,
  "Sleaze Damage": 6
};
var Garland = {
  "HP Regen": 1,
  "PvP Fights": 2,
  Blocking: 3
};
var Gifts = {
  "Yellow Ray": 1,
  "Red Ray": 2,
  Gifts: 3
};
var Prefs = {
  Muscle: "Muscle",
  Mysticality: "Mysticality",
  Moxie: "Moxie",
  Prismatic: "Prismatic Damage",
  Hot: "Hot Damage",
  Cold: "Cold Damage",
  Stench: "Stench Damage",
  Spooky: "Spooky Damage",
  Sleaze: "Sleaze Damage",
  HP: "HP Regen",
  PvP: "PvP Fights",
  blocking: "Blocking",
  yellow: "Yellow Ray",
  meat: "Red Ray",
  gifts: "Gifts"
};
function isDecoratedWith(topper, lights, garland, gifts) {
  var decorations = [property_get("shrubTopper"), property_get("shrubLights"), property_get("shrubGarland"), property_get("shrubGifts")].map(x => Prefs[x]);
  return [topper, lights, garland, gifts].every((x, i) => x === decorations[i]);
}
function decorate(topper, lights, garland, gifts) {
  if (!CrimboShrub_have()) return false;
  if (property_get("_shrubDecorated")) return isDecoratedWith(topper, lights, garland, gifts);
  if (!lib_have(template_string_$item(CrimboShrub_templateObject2 || (CrimboShrub_templateObject2 = CrimboShrub_taggedTemplateLiteral(["box of old Crimbo decorations"]))))) {
    (0,external_kolmafia_namespaceObject.useFamiliar)($familiar(CrimboShrub_templateObject3 || (CrimboShrub_templateObject3 = CrimboShrub_taggedTemplateLiteral(["Crimbo Shrub"]))));
  }
  (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?pwd=&which=99&whichitem=".concat((0,external_kolmafia_namespaceObject.toInt)(template_string_$item(CrimboShrub_templateObject4 || (CrimboShrub_templateObject4 = CrimboShrub_taggedTemplateLiteral(["box of old Crimbo decorations"]))))));
  (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=999&pwd=&option=1&topper=".concat(Toppers[topper], "&lights=").concat(Lights[lights], "&garland=").concat(Garland[garland], "&gift=").concat(Gifts[gifts]));
  return true;
}
;// CONCATENATED MODULE: ./src/tasks/dailyFamiliars.ts
var dailyFamiliars_templateObject, dailyFamiliars_templateObject2, dailyFamiliars_templateObject3, dailyFamiliars_templateObject4, dailyFamiliars_templateObject5, dailyFamiliars_templateObject6, dailyFamiliars_templateObject7, dailyFamiliars_templateObject8, dailyFamiliars_templateObject9, dailyFamiliars_templateObject10, dailyFamiliars_templateObject11, dailyFamiliars_templateObject12, dailyFamiliars_templateObject13, dailyFamiliars_templateObject14, dailyFamiliars_templateObject15, dailyFamiliars_templateObject16, dailyFamiliars_templateObject17, dailyFamiliars_templateObject18, dailyFamiliars_templateObject19, dailyFamiliars_templateObject20, dailyFamiliars_templateObject21, dailyFamiliars_templateObject22, dailyFamiliars_templateObject23, dailyFamiliars_templateObject24, dailyFamiliars_templateObject25, dailyFamiliars_templateObject26, dailyFamiliars_templateObject27, dailyFamiliars_templateObject28, dailyFamiliars_templateObject29, dailyFamiliars_templateObject30, dailyFamiliars_templateObject31, dailyFamiliars_templateObject32, dailyFamiliars_templateObject33, dailyFamiliars_templateObject34;
function dailyFamiliars_toConsumableArray(arr) { return dailyFamiliars_arrayWithoutHoles(arr) || dailyFamiliars_iterableToArray(arr) || dailyFamiliars_unsupportedIterableToArray(arr) || dailyFamiliars_nonIterableSpread(); }
function dailyFamiliars_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function dailyFamiliars_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function dailyFamiliars_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return dailyFamiliars_arrayLikeToArray(arr); }
function dailyFamiliars_slicedToArray(arr, i) { return dailyFamiliars_arrayWithHoles(arr) || dailyFamiliars_iterableToArrayLimit(arr, i) || dailyFamiliars_unsupportedIterableToArray(arr, i) || dailyFamiliars_nonIterableRest(); }
function dailyFamiliars_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function dailyFamiliars_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dailyFamiliars_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dailyFamiliars_arrayLikeToArray(o, minLen); }
function dailyFamiliars_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function dailyFamiliars_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function dailyFamiliars_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function dailyFamiliars_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }









function newarkValue() {
  var lastCalculated = property_get("garbo_newarkValueDate", 0);
  if (!property_get("garbo_newarkValue", 0) || today - lastCalculated > 7 * 24 * 60 * 60 * 1000) {
    var newarkDrops = JSON.parse((0,external_kolmafia_namespaceObject.fileToBuffer)("garbo_item_lists.json"))["Newark"];
    _set("garbo_newarkValue", (utils_sum(newarkDrops, name => garboValue((0,external_kolmafia_namespaceObject.toItem)(name))) / newarkDrops.length).toFixed(0));
    _set("garbo_newarkValueDate", today);
  }
  return property_get("garbo_newarkValue", 0) * 0.25 * estimatedGarboTurns();
}
function felizValue() {
  var lastCalculated = property_get("garbo_felizValueDate", 0);
  if (!property_get("garbo_felizValue", 0) || today - lastCalculated > 7 * 24 * 60 * 60 * 1000) {
    var felizDrops = JSON.parse((0,external_kolmafia_namespaceObject.fileToBuffer)("garbo_item_lists.json"))["Feliz Navidad"];
    _set("garbo_felizValue", (utils_sum(felizDrops, name => garboValue((0,external_kolmafia_namespaceObject.toItem)(name))) / felizDrops.length).toFixed(0));
    _set("garbo_felizValueDate", today);
  }
  return property_get("garbo_felizValue", 0) * 0.25 * estimatedGarboTurns();
}
function drivebyValue() {
  var embezzlers = embezzlerCount();
  var tourists = (estimatedGarboTurns() - embezzlers) * turnsToNC / (turnsToNC + 1);
  var marginalRoboWeight = 50;
  var meatPercentDelta = Math.sqrt(220 * 2 * marginalRoboWeight) - Math.sqrt(220 * 2 * marginalRoboWeight) + 2 * marginalRoboWeight;
  return meatPercentDelta / 100 * ((750 + baseMeat) * embezzlers + baseMeat * tourists);
}
function entendreValue() {
  var embezzlers = embezzlerCount();
  var tourists = (estimatedGarboTurns() - embezzlers) * turnsToNC / (turnsToNC + 1);
  var marginalRoboWeight = 50;
  var itemPercent = Math.sqrt(55 * marginalRoboWeight) + marginalRoboWeight - 3;
  var garbageBagsDropRate = 0.15 * 3; // 3 bags each with a 15% drop chance
  var meatStackDropRate = 0.3 * 4; // 4 stacks each with a 30% drop chance
  return itemPercent / 100 * (meatStackDropRate * embezzlers + garbageBagsDropRate * tourists * garbageTouristRatio);
}
function prepRobortender() {
  if (!lib_have($familiar(dailyFamiliars_templateObject || (dailyFamiliars_templateObject = dailyFamiliars_taggedTemplateLiteral(["Robortender"]))))) return;
  var roboDrinks = {
    "Drive-by shooting": {
      priceCap: drivebyValue(),
      mandatory: true
    },
    Newark: {
      priceCap: newarkValue(),
      mandatory: false
    },
    "Feliz Navidad": {
      priceCap: felizValue(),
      mandatory: false
    },
    "Bloody Nora": {
      priceCap: property_get("_envyfishEggUsed") ? (750 + baseMeat) * (0.5 + (4 + Math.sqrt(110 / 100)) * 30 / 100) : 0,
      mandatory: false
    },
    "Single entendre": {
      priceCap: entendreValue(),
      mandatory: false
    }
  };
  var _loop = function _loop() {
    var _Object$entries$_i = dailyFamiliars_slicedToArray(_Object$entries[_i], 2),
      drinkName = _Object$entries$_i[0],
      _Object$entries$_i$ = _Object$entries$_i[1],
      priceCap = _Object$entries$_i$.priceCap,
      mandatory = _Object$entries$_i$.mandatory;
    if (property_get("_roboDrinks").toLowerCase().includes(drinkName.toLowerCase())) return "continue";
    (0,external_kolmafia_namespaceObject.useFamiliar)($familiar(dailyFamiliars_templateObject2 || (dailyFamiliars_templateObject2 = dailyFamiliars_taggedTemplateLiteral(["Robortender"]))));
    var drink = (0,external_kolmafia_namespaceObject.toItem)(drinkName);
    if ((0,external_kolmafia_namespaceObject.retrievePrice)(drink) > priceCap) {
      if (mandatory) {
        setBestLeprechaunAsMeatFamiliar();
        if (!userConfirmDialog("Garbo cannot find a reasonably priced drive-by-shooting (price cap: ".concat(priceCap, "), and will not be using your robortender. Is that cool with you?"), true)) {
          (0,external_kolmafia_namespaceObject.abort)("Alright, then, I guess you should try to find a reasonbly priced drive-by-shooting. Or do different things with your day.");
        }
        return "break";
      }
      return "continue";
    }
    withProperty("autoBuyPriceLimit", priceCap, () => (0,external_kolmafia_namespaceObject.retrieveItem)(1, drink));
    if (lib_have(drink)) feed(drink);
  };
  for (var _i = 0, _Object$entries = Object.entries(roboDrinks); _i < _Object$entries.length; _i++) {
    var _ret = _loop();
    if (_ret === "continue") continue;
    if (_ret === "break") break;
  }
}
var DailyFamiliarTasks = [{
  name: "Prepare Shorter-Order Cook",
  ready: () => lib_have($familiar(dailyFamiliars_templateObject3 || (dailyFamiliars_templateObject3 = dailyFamiliars_taggedTemplateLiteral(["Shorter-Order Cook"])))) && lib_have(template_string_$item(dailyFamiliars_templateObject4 || (dailyFamiliars_templateObject4 = dailyFamiliars_taggedTemplateLiteral(["blue plate"])))),
  completed: () => (0,external_kolmafia_namespaceObject.familiarEquippedEquipment)($familiar(dailyFamiliars_templateObject5 || (dailyFamiliars_templateObject5 = dailyFamiliars_taggedTemplateLiteral(["Shorter-Order Cook"])))) === template_string_$item(dailyFamiliars_templateObject6 || (dailyFamiliars_templateObject6 = dailyFamiliars_taggedTemplateLiteral(["blue plate"]))),
  do: () => (0,external_kolmafia_namespaceObject.equip)($familiar(dailyFamiliars_templateObject7 || (dailyFamiliars_templateObject7 = dailyFamiliars_taggedTemplateLiteral(["Shorter-Order Cook"]))), template_string_$item(dailyFamiliars_templateObject8 || (dailyFamiliars_templateObject8 = dailyFamiliars_taggedTemplateLiteral(["blue plate"]))))
}, {
  name: "Prepare Robortender",
  ready: () => lib_have($familiar(dailyFamiliars_templateObject9 || (dailyFamiliars_templateObject9 = dailyFamiliars_taggedTemplateLiteral(["Robortender"])))),
  completed: () => property_get("_roboDrinks").toLowerCase().includes("drive-by shooting"),
  do: () => prepRobortender()
}, {
  name: "Acquire amulet coin",
  ready: () => lib_have($familiar(dailyFamiliars_templateObject10 || (dailyFamiliars_templateObject10 = dailyFamiliars_taggedTemplateLiteral(["Cornbeefadon"])))),
  completed: () => lib_have(template_string_$item(dailyFamiliars_templateObject11 || (dailyFamiliars_templateObject11 = dailyFamiliars_taggedTemplateLiteral(["amulet coin"])))),
  do: () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(dailyFamiliars_templateObject12 || (dailyFamiliars_templateObject12 = dailyFamiliars_taggedTemplateLiteral(["box of Familiar Jacks"])))),
  acquire: [{
    item: template_string_$item(dailyFamiliars_templateObject13 || (dailyFamiliars_templateObject13 = dailyFamiliars_taggedTemplateLiteral(["box of Familiar Jacks"])))
  }],
  outfit: {
    familiar: $familiar(dailyFamiliars_templateObject14 || (dailyFamiliars_templateObject14 = dailyFamiliars_taggedTemplateLiteral(["Cornbeefadon"])))
  }
}, {
  // TODO: Consider other familiars?
  name: "Equip tiny stillsuit",
  ready: () => (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(dailyFamiliars_templateObject15 || (dailyFamiliars_templateObject15 = dailyFamiliars_taggedTemplateLiteral(["tiny stillsuit"])))) > 0 && lib_have($familiar(dailyFamiliars_templateObject16 || (dailyFamiliars_templateObject16 = dailyFamiliars_taggedTemplateLiteral(["Cornbeefadon"])))),
  completed: () => (0,external_kolmafia_namespaceObject.familiarEquippedEquipment)($familiar(dailyFamiliars_templateObject17 || (dailyFamiliars_templateObject17 = dailyFamiliars_taggedTemplateLiteral(["Cornbeefadon"])))) === template_string_$item(dailyFamiliars_templateObject18 || (dailyFamiliars_templateObject18 = dailyFamiliars_taggedTemplateLiteral(["tiny stillsuit"]))),
  do: () => (0,external_kolmafia_namespaceObject.equip)($familiar(dailyFamiliars_templateObject19 || (dailyFamiliars_templateObject19 = dailyFamiliars_taggedTemplateLiteral(["Cornbeefadon"]))), template_string_$item(dailyFamiliars_templateObject20 || (dailyFamiliars_templateObject20 = dailyFamiliars_taggedTemplateLiteral(["tiny stillsuit"]))))
}, {
  name: "Acquire box of old Crimbo decorations",
  ready: () => lib_have($familiar(dailyFamiliars_templateObject21 || (dailyFamiliars_templateObject21 = dailyFamiliars_taggedTemplateLiteral(["Crimbo Shrub"])))),
  completed: () => lib_have(template_string_$item(dailyFamiliars_templateObject22 || (dailyFamiliars_templateObject22 = dailyFamiliars_taggedTemplateLiteral(["box of old Crimbo decorations"])))),
  do: () => {
    (0,external_kolmafia_namespaceObject.useFamiliar)($familiar(dailyFamiliars_templateObject23 || (dailyFamiliars_templateObject23 = dailyFamiliars_taggedTemplateLiteral(["Crimbo Shrub"]))));
  },
  outfit: {
    familiar: $familiar(dailyFamiliars_templateObject24 || (dailyFamiliars_templateObject24 = dailyFamiliars_taggedTemplateLiteral(["Crimbo Shrub"])))
  }
}, {
  name: "Decorate Crimbo Shrub",
  ready: () => lib_have(template_string_$item(dailyFamiliars_templateObject25 || (dailyFamiliars_templateObject25 = dailyFamiliars_taggedTemplateLiteral(["box of old Crimbo decorations"])))),
  completed: () => property_get("_shrubDecorated"),
  do: () => decorate((0,external_kolmafia_namespaceObject.myPrimestat)().toString(), "Stench Damage", (0,external_kolmafia_namespaceObject.hippyStoneBroken)() ? "PvP Fights" : "HP Regen", "Red Ray"),
  outfit: {
    familiar: $familiar(dailyFamiliars_templateObject26 || (dailyFamiliars_templateObject26 = dailyFamiliars_taggedTemplateLiteral(["Crimbo Shrub"])))
  }
}, {
  name: "Mummery Meat",
  ready: () => lib_have(template_string_$item(dailyFamiliars_templateObject27 || (dailyFamiliars_templateObject27 = dailyFamiliars_taggedTemplateLiteral(["mumming trunk"])))),
  completed: () => property_get("_mummeryMods").includes("Meat Drop"),
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("mummery meat"),
  outfit: {
    familiar: meatFamiliar()
  }
}, {
  name: "Mummery Item",
  ready: () => lib_have(template_string_$item(dailyFamiliars_templateObject28 || (dailyFamiliars_templateObject28 = dailyFamiliars_taggedTemplateLiteral(["mumming trunk"])))) && lib_have($familiar(dailyFamiliars_templateObject29 || (dailyFamiliars_templateObject29 = dailyFamiliars_taggedTemplateLiteral(["Trick-or-Treating Tot"])))),
  completed: () => property_get("_mummeryMods").includes("Item Drop"),
  do: () => (0,external_kolmafia_namespaceObject.cliExecute)("mummery item"),
  outfit: {
    familiar: $familiar(dailyFamiliars_templateObject30 || (dailyFamiliars_templateObject30 = dailyFamiliars_taggedTemplateLiteral(["Trick-or-Treating Tot"])))
  }
}, {
  name: "Moveable feast",
  ready: () => lib_have(template_string_$item(dailyFamiliars_templateObject31 || (dailyFamiliars_templateObject31 = dailyFamiliars_taggedTemplateLiteral(["moveable feast"])))) || config_globalOptions.prefs.stashClan !== "none",
  completed: () => property_get("_feastUsed") > 0,
  do: () => {
    withStash(template_string_$items(dailyFamiliars_templateObject32 || (dailyFamiliars_templateObject32 = dailyFamiliars_taggedTemplateLiteral(["moveable feast"]))), () => {
      if (lib_have(template_string_$item(dailyFamiliars_templateObject33 || (dailyFamiliars_templateObject33 = dailyFamiliars_taggedTemplateLiteral(["moveable feast"]))))) {
        [].concat(dailyFamiliars_toConsumableArray($familiars(dailyFamiliars_templateObject34 || (dailyFamiliars_templateObject34 = dailyFamiliars_taggedTemplateLiteral(["Pocket Professor, Frumious Bandersnatch, Pair of Stomping Boots"])))), [meatFamiliar()]).forEach(tryFeast);
      }
    });
  }
}];
;// CONCATENATED MODULE: ./src/tasks/engine.ts
function tasks_engine_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function tasks_engine_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, tasks_engine_toPropertyKey(descriptor.key), descriptor); } }
function tasks_engine_createClass(Constructor, protoProps, staticProps) { if (protoProps) tasks_engine_defineProperties(Constructor.prototype, protoProps); if (staticProps) tasks_engine_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function tasks_engine_toPropertyKey(arg) { var key = tasks_engine_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function tasks_engine_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function engine_get() { if (typeof Reflect !== "undefined" && Reflect.get) { engine_get = Reflect.get.bind(); } else { engine_get = function _get(target, property, receiver) { var base = engine_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return engine_get.apply(this, arguments); }
function engine_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = engine_getPrototypeOf(object); if (object === null) break; } return object; }
function engine_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) engine_setPrototypeOf(subClass, superClass); }
function engine_setPrototypeOf(o, p) { engine_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return engine_setPrototypeOf(o, p); }
function engine_createSuper(Derived) { var hasNativeReflectConstruct = engine_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = engine_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = engine_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return engine_possibleConstructorReturn(this, result); }; }
function engine_possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return engine_assertThisInitialized(self); }
function engine_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function engine_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function engine_getPrototypeOf(o) { engine_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return engine_getPrototypeOf(o); }




/** A base engine for Garbo!
 * Runs extra logic before executing all tasks.
 */
var BaseGarboEngine = /*#__PURE__*/function (_Engine) {
  engine_inherits(BaseGarboEngine, _Engine);
  var _super = engine_createSuper(BaseGarboEngine);
  function BaseGarboEngine() {
    tasks_engine_classCallCheck(this, BaseGarboEngine);
    return _super.apply(this, arguments);
  }
  tasks_engine_createClass(BaseGarboEngine, [{
    key: "execute",
    value:
    // Check for interrupt before executing a task
    function execute(task) {
      safeInterrupt();
      engine_get(engine_getPrototypeOf(BaseGarboEngine.prototype), "execute", this).call(this, task);
    }
  }]);
  return BaseGarboEngine;
}(Engine);

/**
 * A safe engine for Garbo!
 * Treats soft limits as tasks that should be skipped, with a default max of one attempt for any task.
 */
var SafeGarboEngine = /*#__PURE__*/function (_BaseGarboEngine) {
  engine_inherits(SafeGarboEngine, _BaseGarboEngine);
  var _super2 = engine_createSuper(SafeGarboEngine);
  function SafeGarboEngine() {
    tasks_engine_classCallCheck(this, SafeGarboEngine);
    return _super2.apply(this, arguments);
  }
  tasks_engine_createClass(SafeGarboEngine, [{
    key: "markAttempt",
    value:
    // Garbo treats soft limits as completed, and continues on.
    function markAttempt(task) {
      var _task$limit;
      engine_get(engine_getPrototypeOf(SafeGarboEngine.prototype), "markAttempt", this).call(this, task);
      if (task.completed()) return;
      var limit = ((_task$limit = task.limit) === null || _task$limit === void 0 ? void 0 : _task$limit.soft) || 1;
      if (this.attempts[task.name] >= limit) {
        task.completed = () => true;
        (0,external_kolmafia_namespaceObject.print)("Task ".concat(task.name, " did not complete within ").concat(limit, " attempts. Skipping."), HIGHLIGHT);
      }
    }
  }]);
  return SafeGarboEngine;
}(BaseGarboEngine);
function runSafeGarboTasks(tasks) {
  var engine = new SafeGarboEngine(tasks);
  try {
    engine.run();
  } finally {
    engine.destruct();
  }
}
function runGarboTasks(tasks) {
  var engine = new BaseGarboEngine(tasks);
  try {
    engine.run();
  } finally {
    engine.destruct();
  }
}
;// CONCATENATED MODULE: ./src/tasks/ascending.ts
var ascending_templateObject, ascending_templateObject2, ascending_templateObject3, ascending_templateObject4, ascending_templateObject5, ascending_templateObject6, ascending_templateObject7, ascending_templateObject8, ascending_templateObject9, ascending_templateObject10, ascending_templateObject11, ascending_templateObject12, ascending_templateObject13, ascending_templateObject14;
function ascending_defineProperty(obj, key, value) { key = ascending_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function ascending_toPropertyKey(arg) { var key = ascending_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function ascending_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function ascending_toConsumableArray(arr) { return ascending_arrayWithoutHoles(arr) || ascending_iterableToArray(arr) || ascending_unsupportedIterableToArray(arr) || ascending_nonIterableSpread(); }
function ascending_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function ascending_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ascending_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ascending_arrayLikeToArray(o, minLen); }
function ascending_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function ascending_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return ascending_arrayLikeToArray(arr); }
function ascending_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ascending_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }





function bestLockPickChoice() {
  return 1 + (0,external_kolmafia_namespaceObject.toInt)(lib_maxBy(template_string_$items(ascending_templateObject || (ascending_templateObject = ascending_taggedTemplateLiteral(["Boris's key lime, Jarlsberg's key lime, Sneaky Pete's key lime"]))), garboValue)) - (0,external_kolmafia_namespaceObject.toInt)(template_string_$item(ascending_templateObject2 || (ascending_templateObject2 = ascending_taggedTemplateLiteral(["Boris's key lime"]))));
}
var AscendingTasks = [{
  name: "Lock Picking",
  ready: () => lib_have($skill(ascending_templateObject3 || (ascending_templateObject3 = ascending_taggedTemplateLiteral(["Lock Picking"])))) && config_globalOptions.ascend,
  completed: () => property_get("lockPicked"),
  do: () => {
    (0,external_kolmafia_namespaceObject.useSkill)($skill(ascending_templateObject4 || (ascending_templateObject4 = ascending_taggedTemplateLiteral(["Lock Picking"]))));
    if ((0,external_kolmafia_namespaceObject.handlingChoice)()) (0,external_kolmafia_namespaceObject.runChoice)(-1);
  },
  choices: ascending_defineProperty({}, 1414, () => bestLockPickChoice())
}].concat(ascending_toConsumableArray([{
  key: template_string_$item(ascending_templateObject5 || (ascending_templateObject5 = ascending_taggedTemplateLiteral(["Boris's key"]))),
  lime: template_string_$item(ascending_templateObject6 || (ascending_templateObject6 = ascending_taggedTemplateLiteral(["Boris's key lime"])))
}, {
  key: template_string_$item(ascending_templateObject7 || (ascending_templateObject7 = ascending_taggedTemplateLiteral(["Jarlsberg's key"]))),
  lime: template_string_$item(ascending_templateObject8 || (ascending_templateObject8 = ascending_taggedTemplateLiteral(["Jarlsberg's key lime"])))
}, {
  key: template_string_$item(ascending_templateObject9 || (ascending_templateObject9 = ascending_taggedTemplateLiteral(["Sneaky Pete's key"]))),
  lime: template_string_$item(ascending_templateObject10 || (ascending_templateObject10 = ascending_taggedTemplateLiteral(["Sneaky Pete's key lime"])))
}, {
  key: template_string_$item(ascending_templateObject11 || (ascending_templateObject11 = ascending_taggedTemplateLiteral(["Richard's star key"]))),
  lime: template_string_$item(ascending_templateObject12 || (ascending_templateObject12 = ascending_taggedTemplateLiteral(["star key lime"])))
}].map(_ref => {
  var key = _ref.key,
    lime = _ref.lime;
  return {
    name: "Cook ".concat(lime),
    completed: () => !lib_have(key) || garboValue(lime) < garboValue(template_string_$item(ascending_templateObject13 || (ascending_templateObject13 = ascending_taggedTemplateLiteral(["lime"])))),
    do: () => (0,external_kolmafia_namespaceObject.create)(lime),
    ready: () => config_globalOptions.ascend && (freeCrafts() > 0 || lib_have($familiar(ascending_templateObject14 || (ascending_templateObject14 = ascending_taggedTemplateLiteral(["Cookbookbat"])))) && property_get("_cookbookbatCrafting") < 5) || property_get("hasChef")
  };
})));
;// CONCATENATED MODULE: ./src/dailies.ts
function dailies_toConsumableArray(arr) { return dailies_arrayWithoutHoles(arr) || dailies_iterableToArray(arr) || dailies_unsupportedIterableToArray(arr) || dailies_nonIterableSpread(); }
function dailies_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function dailies_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dailies_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dailies_arrayLikeToArray(o, minLen); }
function dailies_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function dailies_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return dailies_arrayLikeToArray(arr); }
function dailies_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }







function dailySetup() {
  runSafeGarboTasks([].concat(dailies_toConsumableArray(DailyFamiliarTasks), dailies_toConsumableArray(DailyItemTasks), dailies_toConsumableArray(DailyVolcanoTasks), dailies_toConsumableArray(DailyTasks), dailies_toConsumableArray(AscendingTasks)));
}
function postFreeFightDailySetup() {
  runSafeGarboTasks(PostFreeFightTasks);
}
;// CONCATENATED MODULE: ./src/yachtzee/lib.ts
var yachtzee_lib_templateObject, yachtzee_lib_templateObject2, yachtzee_lib_templateObject3, yachtzee_lib_templateObject4, yachtzee_lib_templateObject5, yachtzee_lib_templateObject6, yachtzee_lib_templateObject7, yachtzee_lib_templateObject8, yachtzee_lib_templateObject9, yachtzee_lib_templateObject10, yachtzee_lib_templateObject11, yachtzee_lib_templateObject12, yachtzee_lib_templateObject13, yachtzee_lib_templateObject14, yachtzee_lib_templateObject15;
function yachtzee_lib_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = yachtzee_lib_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function yachtzee_lib_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return yachtzee_lib_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return yachtzee_lib_arrayLikeToArray(o, minLen); }
function yachtzee_lib_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function yachtzee_lib_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }










var ignoredSources = ["Orb Prediction", "Pillkeeper Semirare", "Lucky!", "11-leaf clover (untapped potential)"];
var expectedEmbezzlers = utils_sum(embezzlerSources.filter(source => !ignoredSources.includes(source.name)), source => source.potential());
function pyecAvailable() {
  if (property_get("_PYECAvailable") === "") {
    _set("_PYECAvailable", property_get("expressCardUsed") ? false : lib_have(template_string_$item(yachtzee_lib_templateObject || (yachtzee_lib_templateObject = yachtzee_lib_taggedTemplateLiteral(["Platinum Yendorian Express Card"])))) ? true : withStash(template_string_$items(yachtzee_lib_templateObject2 || (yachtzee_lib_templateObject2 = yachtzee_lib_taggedTemplateLiteral(["Platinum Yendorian Express Card"]))), () => {
      return lib_have(template_string_$item(yachtzee_lib_templateObject3 || (yachtzee_lib_templateObject3 = yachtzee_lib_taggedTemplateLiteral(["Platinum Yendorian Express Card"]))));
    }));
  }
  return property_get("_PYECAvailable", false);
}
function shrugIrrelevantSongs() {
  var _iterator = yachtzee_lib_createForOfIteratorHelper(lib_getActiveSongs()),
    _step;
  try {
    var _loop = function _loop() {
      var song = _step.value;
      var slot = Mood.defaultOptions.songSlots.find(slot => slot.includes(song));
      if (!slot && song !== template_string_$effect(yachtzee_lib_templateObject4 || (yachtzee_lib_templateObject4 = yachtzee_lib_taggedTemplateLiteral(["Ode to Booze"]))) && song !== template_string_$effect(yachtzee_lib_templateObject5 || (yachtzee_lib_templateObject5 = yachtzee_lib_taggedTemplateLiteral(["Polka of Plenty"]))) && song !== template_string_$effect(yachtzee_lib_templateObject6 || (yachtzee_lib_templateObject6 = yachtzee_lib_taggedTemplateLiteral(["Chorale of Companionship"]))) && song !== template_string_$effect(yachtzee_lib_templateObject7 || (yachtzee_lib_templateObject7 = yachtzee_lib_taggedTemplateLiteral(["The Ballad of Richie Thingfinder"])))) {
        (0,external_kolmafia_namespaceObject.cliExecute)("shrug ".concat(song));
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
    // Shrug default Mood songs
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  (0,external_kolmafia_namespaceObject.cliExecute)("shrug ur-kel");
  (0,external_kolmafia_namespaceObject.cliExecute)("shrug phat loot");
}
var freeNCs = () => (lib_have(template_string_$item(yachtzee_lib_templateObject8 || (yachtzee_lib_templateObject8 = yachtzee_lib_taggedTemplateLiteral(["Clara's bell"])))) && !config_globalOptions.clarasBellClaimed ? 1 : 0) + (lib_have(template_string_$item(yachtzee_lib_templateObject9 || (yachtzee_lib_templateObject9 = yachtzee_lib_taggedTemplateLiteral(["Jurassic Parka"])))) ? 5 - property_get("_spikolodonSpikeUses") : 0);
function yachtzeeBuffValue(obj) {
  return 2000 * (modifier_get("Meat Drop", obj) + modifier_get("Familiar Weight", obj) * 2.5) / 100;
}
function useSpikolodonSpikes() {
  var _tryFindFreeRun, _run$constraints$fami, _run$constraints$fami2, _run$constraints, _run$constraints$equi, _run$constraints$equi2, _run$constraints2, _run$constraints$prep, _run$constraints3;
  if (property_get("_spikolodonSpikeUses") >= 5) return;
  var run = (_tryFindFreeRun = tryFindFreeRun()) !== null && _tryFindFreeRun !== void 0 ? _tryFindFreeRun : ltbRun();
  var canJelly = lib_have($familiar(yachtzee_lib_templateObject10 || (yachtzee_lib_templateObject10 = yachtzee_lib_taggedTemplateLiteral(["Space Jellyfish"])))) && !run.constraints.familiar && realmAvailable("stench");
  var familiar = (_run$constraints$fami = (_run$constraints$fami2 = (_run$constraints = run.constraints).familiar) === null || _run$constraints$fami2 === void 0 ? void 0 : _run$constraints$fami2.call(_run$constraints)) !== null && _run$constraints$fami !== void 0 ? _run$constraints$fami : canJelly ? $familiar(yachtzee_lib_templateObject11 || (yachtzee_lib_templateObject11 = yachtzee_lib_taggedTemplateLiteral(["Space Jellyfish"]))) : freeFightFamiliar({
    allowAttackFamiliars: false
  });
  (0,external_kolmafia_namespaceObject.useFamiliar)(familiar);
  var mergedRequirements = new Requirement([], {
    forceEquip: template_string_$items(yachtzee_lib_templateObject12 || (yachtzee_lib_templateObject12 = yachtzee_lib_taggedTemplateLiteral(["Jurassic Parka"])))
  }).merge((_run$constraints$equi = (_run$constraints$equi2 = (_run$constraints2 = run.constraints).equipmentRequirements) === null || _run$constraints$equi2 === void 0 ? void 0 : _run$constraints$equi2.call(_run$constraints2)) !== null && _run$constraints$equi !== void 0 ? _run$constraints$equi : new Requirement([], {}));
  (_run$constraints$prep = (_run$constraints3 = run.constraints).preparation) === null || _run$constraints$prep === void 0 ? void 0 : _run$constraints$prep.call(_run$constraints3);
  freeFightOutfit(mergedRequirements);
  (0,external_kolmafia_namespaceObject.cliExecute)("parka spikolodon");
  var targetZone = canJelly ? $location(yachtzee_lib_templateObject13 || (yachtzee_lib_templateObject13 = yachtzee_lib_taggedTemplateLiteral(["Pirates of the Garbage Barges"]))) : $location(yachtzee_lib_templateObject14 || (yachtzee_lib_templateObject14 = yachtzee_lib_taggedTemplateLiteral(["Sloppy Seconds Diner"])));
  var macro = combat_Macro.familiarActions().skill($skill(yachtzee_lib_templateObject15 || (yachtzee_lib_templateObject15 = yachtzee_lib_taggedTemplateLiteral(["Launch spikolodon spikes"])))).step(run.macro);
  var startingSpikes = property_get("_spikolodonSpikeUses");
  do {
    garboAdventureAuto(targetZone, macro);
  } while (property_get("_spikolodonSpikeUses") === startingSpikes);
  postCombatActions();
}
;// CONCATENATED MODULE: ./src/yachtzee/familiar.ts
var familiar_templateObject, familiar_templateObject2, familiar_templateObject3, familiar_templateObject4, familiar_templateObject5, familiar_templateObject6, familiar_templateObject7, familiar_templateObject8, familiar_templateObject9, familiar_templateObject10, familiar_templateObject11;
function familiar_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }



function bestFamUnderwaterGear(fam) {
  // Returns best familiar gear for yachtzee chaining
  return fam.underwater || lib_have(template_string_$effect(familiar_templateObject || (familiar_templateObject = familiar_taggedTemplateLiteral(["Driving Waterproofly"])))) || lib_have(template_string_$effect(familiar_templateObject2 || (familiar_templateObject2 = familiar_taggedTemplateLiteral(["Wet Willied"])))) ? lib_have(template_string_$item(familiar_templateObject3 || (familiar_templateObject3 = familiar_taggedTemplateLiteral(["amulet coin"])))) ? template_string_$item(familiar_templateObject4 || (familiar_templateObject4 = familiar_taggedTemplateLiteral(["amulet coin"]))) : template_string_$item(familiar_templateObject5 || (familiar_templateObject5 = familiar_taggedTemplateLiteral(["filthy child leash"]))) : lib_have(template_string_$item(familiar_templateObject6 || (familiar_templateObject6 = familiar_taggedTemplateLiteral(["das boot"])))) ? template_string_$item(familiar_templateObject7 || (familiar_templateObject7 = familiar_taggedTemplateLiteral(["das boot"]))) : template_string_$item(familiar_templateObject8 || (familiar_templateObject8 = familiar_taggedTemplateLiteral(["little bitty bathysphere"])));
}
function bestYachtzeeFamiliar() {
  var haveUnderwaterFamEquipment = familiarWaterBreathingEquipment.some(item => lib_have(item));
  var famWt = (0,external_kolmafia_namespaceObject.familiarWeight)((0,external_kolmafia_namespaceObject.myFamiliar)()) + (0,external_kolmafia_namespaceObject.weightAdjustment)() - (0,external_kolmafia_namespaceObject.numericModifier)((0,external_kolmafia_namespaceObject.equippedItem)($slot(familiar_templateObject9 || (familiar_templateObject9 = familiar_taggedTemplateLiteral(["familiar"])))), "Familiar Weight");
  var sortedUnderwaterFamiliars = external_kolmafia_namespaceObject.Familiar.all().filter(fam => lib_have(fam) && findLeprechaunMultiplier(fam) > 0 && fam !== $familiar(familiar_templateObject10 || (familiar_templateObject10 = familiar_taggedTemplateLiteral(["Ghost of Crimbo Commerce"]))) && fam !== $familiar(familiar_templateObject11 || (familiar_templateObject11 = familiar_taggedTemplateLiteral(["Robortender"]))) && (fam.underwater || haveUnderwaterFamEquipment)).sort((left, right) => (0,external_kolmafia_namespaceObject.numericModifier)(right, "Meat Drop", famWt, bestFamUnderwaterGear(right)) - (0,external_kolmafia_namespaceObject.numericModifier)(left, "Meat Drop", famWt, bestFamUnderwaterGear(left)));
  (0,external_kolmafia_namespaceObject.print)("Familiar bonus meat%:", "blue");
  sortedUnderwaterFamiliars.forEach(fam => {
    (0,external_kolmafia_namespaceObject.print)("".concat(fam, " (").concat((0,external_kolmafia_namespaceObject.numericModifier)(fam, "Meat Drop", famWt, bestFamUnderwaterGear(fam)).toFixed(2), "%)"), "blue");
  });
  if (sortedUnderwaterFamiliars.length === 0) return $familiar.none;
  (0,external_kolmafia_namespaceObject.print)("Best Familiar: ".concat(sortedUnderwaterFamiliars[0]), "blue");
  return sortedUnderwaterFamiliars[0];
}
;// CONCATENATED MODULE: ./src/yachtzee/outfit.ts
var yachtzee_outfit_templateObject, yachtzee_outfit_templateObject2, yachtzee_outfit_templateObject3, yachtzee_outfit_templateObject4, yachtzee_outfit_templateObject5, yachtzee_outfit_templateObject6, yachtzee_outfit_templateObject7, yachtzee_outfit_templateObject8;
function yachtzee_outfit_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function yachtzee_outfit_toConsumableArray(arr) { return yachtzee_outfit_arrayWithoutHoles(arr) || yachtzee_outfit_iterableToArray(arr) || yachtzee_outfit_unsupportedIterableToArray(arr) || yachtzee_outfit_nonIterableSpread(); }
function yachtzee_outfit_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function yachtzee_outfit_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return yachtzee_outfit_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return yachtzee_outfit_arrayLikeToArray(o, minLen); }
function yachtzee_outfit_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function yachtzee_outfit_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return yachtzee_outfit_arrayLikeToArray(arr); }
function yachtzee_outfit_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }









var maximizeMeat = () => new Requirement(["meat"].concat(yachtzee_outfit_toConsumableArray((0,external_kolmafia_namespaceObject.myFamiliar)().underwater || lib_have(template_string_$effect(yachtzee_outfit_templateObject || (yachtzee_outfit_templateObject = yachtzee_outfit_taggedTemplateLiteral(["Driving Waterproofly"])))) || lib_have(template_string_$effect(yachtzee_outfit_templateObject2 || (yachtzee_outfit_templateObject2 = yachtzee_outfit_taggedTemplateLiteral(["Wet Willied"])))) ? [] : ["underwater familiar"])), {
  preventEquip: template_string_$items(yachtzee_outfit_templateObject3 || (yachtzee_outfit_templateObject3 = yachtzee_outfit_taggedTemplateLiteral(["anemoney clip, cursed magnifying glass, Kramco Sausage-o-Matic\u2122, cheap sunglasses"])))
}).maximize();
function getBestWaterBreathingEquipment(yachtzeeTurns) {
  var waterBreathingEquipmentCosts = waterBreathingEquipment.map(it => ({
    item: it,
    cost: lib_have(it) && (0,external_kolmafia_namespaceObject.canEquip)(it) ? yachtzeeTurns * yachtzeeBuffValue((0,external_kolmafia_namespaceObject.equippedItem)((0,external_kolmafia_namespaceObject.toSlot)(it))) : Infinity
  }));
  var bestWaterBreathingEquipment = waterBreathingEquipment.some(item => (0,external_kolmafia_namespaceObject.haveEquipped)(item)) ? {
    item: template_string_$item.none,
    cost: 0
  } : lib_maxBy(waterBreathingEquipmentCosts, "cost", true);
  return bestWaterBreathingEquipment;
}
function prepareOutfitAndFamiliar() {
  (0,external_kolmafia_namespaceObject.useFamiliar)(bestYachtzeeFamiliar());
  if (!property_get("_feastedFamiliars").includes((0,external_kolmafia_namespaceObject.myFamiliar)().toString()) && property_get("_feastedFamiliars").split(";").length < 5) {
    withStash(template_string_$items(yachtzee_outfit_templateObject4 || (yachtzee_outfit_templateObject4 = yachtzee_outfit_taggedTemplateLiteral(["moveable feast"]))), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(yachtzee_outfit_templateObject5 || (yachtzee_outfit_templateObject5 = yachtzee_outfit_taggedTemplateLiteral(["moveable feast"])))));
  }
  maximizeMeat();
  if (!(0,external_kolmafia_namespaceObject.myFamiliar)().underwater) {
    (0,external_kolmafia_namespaceObject.equip)($slot(yachtzee_outfit_templateObject6 || (yachtzee_outfit_templateObject6 = yachtzee_outfit_taggedTemplateLiteral(["familiar"]))), lib_maxBy(familiarWaterBreathingEquipment.filter(it => lib_have(it)), eq => modifier_get("Familiar Weight", eq)));
  }
}
function stickerSetup(expectedYachts) {
  var currentStickers = $slots(yachtzee_outfit_templateObject7 || (yachtzee_outfit_templateObject7 = yachtzee_outfit_taggedTemplateLiteral(["sticker1, sticker2, sticker3"]))).map(s => (0,external_kolmafia_namespaceObject.equippedItem)(s));
  var UPC = template_string_$item(yachtzee_outfit_templateObject8 || (yachtzee_outfit_templateObject8 = yachtzee_outfit_taggedTemplateLiteral(["scratch 'n' sniff UPC sticker"])));
  if (currentStickers.every(sticker => sticker === UPC)) return;
  var yachtOpportunityCost = 25 * findLeprechaunMultiplier(bestYachtzeeFamiliar());
  var embezzlerOpportunityCost = 25 * findLeprechaunMultiplier(meatFamiliar());
  var addedValueOfFullSword = (75 - yachtOpportunityCost) * expectedYachts * 2000 / 100 + (75 - embezzlerOpportunityCost) * Math.min(20, expectedEmbezzlers) * (750 + baseMeat) / 100;
  if ((0,external_kolmafia_namespaceObject.mallPrice)(UPC) < addedValueOfFullSword / 3) {
    var needed = 3 - currentStickers.filter(sticker => sticker === UPC).length;
    if (needed) acquire(needed, UPC, addedValueOfFullSword / 3, false);
    useUPCs();
  }
}
;// CONCATENATED MODULE: ./src/yachtzee/fishy.ts
var fishy_templateObject, fishy_templateObject2, fishy_templateObject3, fishy_templateObject4, fishy_templateObject5, fishy_templateObject6, fishy_templateObject7, fishy_templateObject8, fishy_templateObject9, fishy_templateObject10, fishy_templateObject11, fishy_templateObject12, fishy_templateObject13, fishy_templateObject14, fishy_templateObject15, fishy_templateObject16, fishy_templateObject17, fishy_templateObject18, fishy_templateObject19, fishy_templateObject20, fishy_templateObject21, fishy_templateObject22, fishy_templateObject23, fishy_templateObject24, fishy_templateObject25, fishy_templateObject26, fishy_templateObject27, fishy_templateObject28, fishy_templateObject29, fishy_templateObject30, fishy_templateObject31, fishy_templateObject32, fishy_templateObject33, fishy_templateObject34, fishy_templateObject35, fishy_templateObject36, fishy_templateObject37, fishy_templateObject38, fishy_templateObject39, fishy_templateObject40, fishy_templateObject41, fishy_templateObject42, fishy_templateObject43, fishy_templateObject44, fishy_templateObject45, fishy_templateObject46, fishy_templateObject47, fishy_templateObject48, fishy_templateObject49, fishy_templateObject50, fishy_templateObject51, fishy_templateObject52, fishy_templateObject53, fishy_templateObject54, fishy_templateObject55, fishy_templateObject56, fishy_templateObject57, fishy_templateObject58, fishy_templateObject59, fishy_templateObject60, fishy_templateObject61, fishy_templateObject62, fishy_templateObject63, fishy_templateObject64, fishy_templateObject65, fishy_templateObject66, fishy_templateObject67, fishy_templateObject68, fishy_templateObject69, fishy_templateObject70, fishy_templateObject71, fishy_templateObject72, fishy_templateObject73;
function fishy_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }







function fishyCloverAdventureOpportunityCost(pipe) {
  var willBeFishy = pipe || lib_have(template_string_$effect(fishy_templateObject || (fishy_templateObject = fishy_taggedTemplateLiteral(["Fishy"]))));
  var fishyCloverAdventureCost = willBeFishy ? 1 : 2;
  var adventureExtensionBonus = pyecAvailable() ? 5 : 0;
  return utils_sum(getActiveEffects(), currentBuff => {
    var buffValue = yachtzeeBuffValue(currentBuff);
    if (buffValue <= 0) return 0;
    var currentBuffTurns = (0,external_kolmafia_namespaceObject.haveEffect)(currentBuff);
    if (currentBuffTurns <= fishyCloverAdventureCost) {
      return (currentBuffTurns + adventureExtensionBonus) * buffValue;
    }
    return fishyCloverAdventureCost * buffValue;
  });
}
function optimizeForFishy(yachtzeeTurns, setup) {
  // Returns the lowest cost for fishy
  // Assume we already maximized for meat; this returns the cost of swapping out meat% equips for underwater breathing equips
  var bestWaterBreathingEquipment = getBestWaterBreathingEquipment(yachtzeeTurns);
  if (setup && !lib_have(template_string_$effect(fishy_templateObject2 || (fishy_templateObject2 = fishy_taggedTemplateLiteral(["Really Deep Breath"])))) && bestWaterBreathingEquipment.item !== template_string_$item.none) {
    (0,external_kolmafia_namespaceObject.equip)(bestWaterBreathingEquipment.item);
  }
  if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(fishy_templateObject3 || (fishy_templateObject3 = fishy_taggedTemplateLiteral(["The Crown of Ed the Undying"])))) && !(0,external_kolmafia_namespaceObject.booleanModifier)("Adventure Underwater")) {
    (0,external_kolmafia_namespaceObject.cliExecute)("edpiece fish");
  }
  // If we already have fishy, then we longer need to consider the cost of obtaining it
  if ((0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject4 || (fishy_templateObject4 = fishy_taggedTemplateLiteral(["Fishy"])))) >= yachtzeeTurns) return 0;

  // Restore here if we potentially need to visit an adventure.php zone to grab fishy turns
  if ((0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject5 || (fishy_templateObject5 = fishy_taggedTemplateLiteral(["Beaten Up"]))))) {
    lib_uneffect(template_string_$effect(fishy_templateObject6 || (fishy_templateObject6 = fishy_taggedTemplateLiteral(["Beaten Up"]))));
  }
  safeRestore();
  var haveFishyPipe = lib_have(template_string_$item(fishy_templateObject7 || (fishy_templateObject7 = fishy_taggedTemplateLiteral(["fishy pipe"])))) && !property_get("_fishyPipeUsed");
  var adventureExtensionBonus = pyecAvailable() ? 5 : 0;
  var fishySources = [{
    name: "fish juice box",
    turns: 20 + (haveFishyPipe ? 10 : 0),
    cost: (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject8 || (fishy_templateObject8 = fishy_taggedTemplateLiteral(["fish juice box"])))),
    action: () => {
      acquire(1, template_string_$item(fishy_templateObject9 || (fishy_templateObject9 = fishy_taggedTemplateLiteral(["fish juice box"]))), 1.2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject10 || (fishy_templateObject10 = fishy_taggedTemplateLiteral(["fish juice box"])))));
      if (!lib_have(template_string_$item(fishy_templateObject11 || (fishy_templateObject11 = fishy_taggedTemplateLiteral(["fish juice box"]))))) throw new Error("Unable to obtain fish juice box");
      (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject12 || (fishy_templateObject12 = fishy_taggedTemplateLiteral(["fish juice box"]))));
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject13 || (fishy_templateObject13 = fishy_taggedTemplateLiteral(["Fishy"])))) + adventureExtensionBonus < yachtzeeTurns) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject14 || (fishy_templateObject14 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      }
    }
  }, {
    name: "2x fish juice box",
    turns: 40 + (haveFishyPipe ? 10 : 0),
    cost: 2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject15 || (fishy_templateObject15 = fishy_taggedTemplateLiteral(["fish juice box"])))),
    action: () => {
      acquire(2, template_string_$item(fishy_templateObject16 || (fishy_templateObject16 = fishy_taggedTemplateLiteral(["fish juice box"]))), 1.2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject17 || (fishy_templateObject17 = fishy_taggedTemplateLiteral(["fish juice box"])))));
      if ((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(fishy_templateObject18 || (fishy_templateObject18 = fishy_taggedTemplateLiteral(["fish juice box"])))) < 2) {
        throw new Error("Unable to obtain sufficient fish juice boxes");
      }
      (0,external_kolmafia_namespaceObject.use)(2, template_string_$item(fishy_templateObject19 || (fishy_templateObject19 = fishy_taggedTemplateLiteral(["fish juice box"]))));
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject20 || (fishy_templateObject20 = fishy_taggedTemplateLiteral(["Fishy"])))) + adventureExtensionBonus < yachtzeeTurns) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject21 || (fishy_templateObject21 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      }
    }
  }, {
    name: "cuppa Gill tea",
    turns: 30 + (haveFishyPipe ? 10 : 0),
    cost: (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject22 || (fishy_templateObject22 = fishy_taggedTemplateLiteral(["cuppa Gill tea"])))) + bestWaterBreathingEquipment.cost,
    action: () => {
      acquire(1, template_string_$item(fishy_templateObject23 || (fishy_templateObject23 = fishy_taggedTemplateLiteral(["cuppa Gill tea"]))), 1.2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject24 || (fishy_templateObject24 = fishy_taggedTemplateLiteral(["cuppa Gill tea"])))));
      if (!lib_have(template_string_$item(fishy_templateObject25 || (fishy_templateObject25 = fishy_taggedTemplateLiteral(["cuppa Gill tea"]))))) throw new Error("Unable to obtain cuppa Gill tea");
      (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject26 || (fishy_templateObject26 = fishy_taggedTemplateLiteral(["cuppa Gill tea"]))));
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject27 || (fishy_templateObject27 = fishy_taggedTemplateLiteral(["Fishy"])))) + adventureExtensionBonus < yachtzeeTurns) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject28 || (fishy_templateObject28 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      }
    }
  }, {
    name: "powdered candy sushi set",
    turns: 30 + (haveFishyPipe ? 10 : 0),
    cost: (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject29 || (fishy_templateObject29 = fishy_taggedTemplateLiteral(["powdered candy sushi set"])))) + bestWaterBreathingEquipment.cost,
    action: () => {
      acquire(1, template_string_$item(fishy_templateObject30 || (fishy_templateObject30 = fishy_taggedTemplateLiteral(["powdered candy sushi set"]))), 1.2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject31 || (fishy_templateObject31 = fishy_taggedTemplateLiteral(["powdered candy sushi set"])))));
      if (!lib_have(template_string_$item(fishy_templateObject32 || (fishy_templateObject32 = fishy_taggedTemplateLiteral(["powdered candy sushi set"]))))) {
        throw new Error("Unable to obtain powdered candy sushi set");
      }
      (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject33 || (fishy_templateObject33 = fishy_taggedTemplateLiteral(["powdered candy sushi set"]))));
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject34 || (fishy_templateObject34 = fishy_taggedTemplateLiteral(["Fishy"])))) + adventureExtensionBonus < yachtzeeTurns) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject35 || (fishy_templateObject35 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      }
    }
  }, {
    name: "concentrated fish broth",
    turns: 30 + (haveFishyPipe ? 10 : 0),
    cost: (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject36 || (fishy_templateObject36 = fishy_taggedTemplateLiteral(["concentrated fish broth"])))) + bestWaterBreathingEquipment.cost,
    action: () => {
      acquire(1, template_string_$item(fishy_templateObject37 || (fishy_templateObject37 = fishy_taggedTemplateLiteral(["concentrated fish broth"]))), 1.2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject38 || (fishy_templateObject38 = fishy_taggedTemplateLiteral(["concentrated fish broth"])))));
      if (!lib_have(template_string_$item(fishy_templateObject39 || (fishy_templateObject39 = fishy_taggedTemplateLiteral(["concentrated fish broth"]))))) {
        throw new Error("Unable to obtain concentrated fish broth");
      }
      (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject40 || (fishy_templateObject40 = fishy_taggedTemplateLiteral(["concentrated fish broth"]))));
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject41 || (fishy_templateObject41 = fishy_taggedTemplateLiteral(["Fishy"])))) + adventureExtensionBonus < yachtzeeTurns) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject42 || (fishy_templateObject42 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      }
    }
  }, {
    name: "Lutz, the Ice Skate",
    turns: 30 + (haveFishyPipe ? 10 : 0),
    cost: property_get("_skateBuff1") || property_get("skateParkStatus") !== "ice" ? Infinity : bestWaterBreathingEquipment.cost,
    action: () => {
      (0,external_kolmafia_namespaceObject.cliExecute)("skate lutz");
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject43 || (fishy_templateObject43 = fishy_taggedTemplateLiteral(["Fishy"])))) + adventureExtensionBonus < yachtzeeTurns) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject44 || (fishy_templateObject44 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      }
    }
  }, {
    name: "Pocket Wish",
    turns: 20 + (haveFishyPipe ? 10 : 0),
    cost: (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject45 || (fishy_templateObject45 = fishy_taggedTemplateLiteral(["pocket wish"])))) + bestWaterBreathingEquipment.cost,
    action: () => {
      acquire(1, template_string_$item(fishy_templateObject46 || (fishy_templateObject46 = fishy_taggedTemplateLiteral(["pocket wish"]))), 1.2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject47 || (fishy_templateObject47 = fishy_taggedTemplateLiteral(["pocket wish"])))));
      if (!lib_have(template_string_$item(fishy_templateObject48 || (fishy_templateObject48 = fishy_taggedTemplateLiteral(["pocket wish"]))))) {
        throw new Error("Unable to obtain Pocket Wish");
      }
      (0,external_kolmafia_namespaceObject.cliExecute)("genie effect Fishy");
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject49 || (fishy_templateObject49 = fishy_taggedTemplateLiteral(["Fishy"])))) + adventureExtensionBonus < yachtzeeTurns) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject50 || (fishy_templateObject50 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      }
    }
  }, {
    name: "2x Pocket Wish",
    turns: 40 + (haveFishyPipe ? 10 : 0),
    cost: 2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject51 || (fishy_templateObject51 = fishy_taggedTemplateLiteral(["pocket wish"])))) + bestWaterBreathingEquipment.cost,
    action: () => {
      acquire(2, template_string_$item(fishy_templateObject52 || (fishy_templateObject52 = fishy_taggedTemplateLiteral(["pocket wish"]))), 1.2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject53 || (fishy_templateObject53 = fishy_taggedTemplateLiteral(["pocket wish"])))));
      if ((0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(fishy_templateObject54 || (fishy_templateObject54 = fishy_taggedTemplateLiteral(["pocket wish"])))) < 2) {
        throw new Error("Unable to obtain Pocket Wish");
      }
      (0,external_kolmafia_namespaceObject.cliExecute)("genie effect Fishy");
      (0,external_kolmafia_namespaceObject.cliExecute)("genie effect Fishy");
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject55 || (fishy_templateObject55 = fishy_taggedTemplateLiteral(["Fishy"])))) + adventureExtensionBonus < yachtzeeTurns) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject56 || (fishy_templateObject56 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      }
    }
  }, {
    name: "The Haggling",
    turns: 50 + (haveFishyPipe ? 10 : 0),
    cost: (0,external_kolmafia_namespaceObject.canAdventure)($location(fishy_templateObject57 || (fishy_templateObject57 = fishy_taggedTemplateLiteral(["The Brinier Deepers"])))) ? (lib_have(template_string_$effect(fishy_templateObject58 || (fishy_templateObject58 = fishy_taggedTemplateLiteral(["Lucky!"])))) ? 0 : (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject59 || (fishy_templateObject59 = fishy_taggedTemplateLiteral(["11-leaf clover"]))))) + property_get("valueOfAdventure") + bestWaterBreathingEquipment.cost + fishyCloverAdventureOpportunityCost(haveFishyPipe) : Infinity,
    action: () => {
      if (!lib_have(template_string_$effect(fishy_templateObject60 || (fishy_templateObject60 = fishy_taggedTemplateLiteral(["Lucky!"]))))) {
        acquire(1, template_string_$item(fishy_templateObject61 || (fishy_templateObject61 = fishy_taggedTemplateLiteral(["11-leaf clover"]))), 1.2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(fishy_templateObject62 || (fishy_templateObject62 = fishy_taggedTemplateLiteral(["11-leaf clover"])))));
        if (!lib_have(template_string_$item(fishy_templateObject63 || (fishy_templateObject63 = fishy_taggedTemplateLiteral(["11-leaf clover"]))))) {
          throw new Error("Unable to get 11-leaf clover for fishy!");
        }
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject64 || (fishy_templateObject64 = fishy_taggedTemplateLiteral(["11-leaf clover"]))));
      }
      if (haveFishyPipe) (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject65 || (fishy_templateObject65 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      garboAdventure($location(fishy_templateObject66 || (fishy_templateObject66 = fishy_taggedTemplateLiteral(["The Brinier Deepers"]))), combat_Macro.abort());
      if (property_get("lastAdventure") !== "The Brinier Deepers") {
        (0,external_kolmafia_namespaceObject.print)("We failed to adventure in The Brinier Deepers, even though we thought we could. Try manually adventuring there for a lucky adventure.", "red");
      }
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject67 || (fishy_templateObject67 = fishy_taggedTemplateLiteral(["Fishy"])))) + adventureExtensionBonus < yachtzeeTurns) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject68 || (fishy_templateObject68 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
      }
      if ((0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject69 || (fishy_templateObject69 = fishy_taggedTemplateLiteral(["Fishy"])))) < yachtzeeTurns) {
        throw new Error("Failed to get fishy from clover adv");
      }
    }
  }, {
    name: "Just Fishy Pipe",
    turns: 10,
    cost: haveFishyPipe ? bestWaterBreathingEquipment.cost : Infinity,
    action: () => {
      if (haveFishyPipe && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject70 || (fishy_templateObject70 = fishy_taggedTemplateLiteral(["Fishy"])))) < yachtzeeTurns) (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(fishy_templateObject71 || (fishy_templateObject71 = fishy_taggedTemplateLiteral(["fishy pipe"]))));
    }
  }];
  var bestFishySource = lib_maxBy(fishySources.filter(source => source.turns + (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject72 || (fishy_templateObject72 = fishy_taggedTemplateLiteral(["Fishy"])))) >= yachtzeeTurns), "cost", true);
  (0,external_kolmafia_namespaceObject.print)("Cost of viable Fishy sources:", "blue");
  fishySources.filter(source => source.turns + (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(fishy_templateObject73 || (fishy_templateObject73 = fishy_taggedTemplateLiteral(["Fishy"])))) >= yachtzeeTurns).forEach(source => {
    (0,external_kolmafia_namespaceObject.print)("".concat(source.name, " (").concat(source.cost, ")"), "blue");
  });
  if (setup) {
    (0,external_kolmafia_namespaceObject.print)("Taking best fishy source: ".concat(bestFishySource.name), "blue");
    bestFishySource.action();
  }
  return bestFishySource.cost;
}
;// CONCATENATED MODULE: ./src/yachtzee/diet.ts
var yachtzee_diet_templateObject, yachtzee_diet_templateObject2, yachtzee_diet_templateObject3, yachtzee_diet_templateObject4, yachtzee_diet_templateObject5, yachtzee_diet_templateObject6, yachtzee_diet_templateObject7, yachtzee_diet_templateObject8, yachtzee_diet_templateObject9, yachtzee_diet_templateObject10, yachtzee_diet_templateObject11, yachtzee_diet_templateObject12, yachtzee_diet_templateObject13, yachtzee_diet_templateObject14, yachtzee_diet_templateObject15, yachtzee_diet_templateObject16, yachtzee_diet_templateObject17, yachtzee_diet_templateObject18, yachtzee_diet_templateObject19, yachtzee_diet_templateObject20, yachtzee_diet_templateObject21, yachtzee_diet_templateObject22, yachtzee_diet_templateObject23, yachtzee_diet_templateObject24, yachtzee_diet_templateObject25, yachtzee_diet_templateObject26, yachtzee_diet_templateObject27, yachtzee_diet_templateObject28, yachtzee_diet_templateObject29, yachtzee_diet_templateObject30, yachtzee_diet_templateObject31, yachtzee_diet_templateObject32, yachtzee_diet_templateObject33, yachtzee_diet_templateObject34, yachtzee_diet_templateObject35, yachtzee_diet_templateObject36, yachtzee_diet_templateObject37, yachtzee_diet_templateObject38, yachtzee_diet_templateObject39, yachtzee_diet_templateObject40, yachtzee_diet_templateObject41, yachtzee_diet_templateObject42, yachtzee_diet_templateObject43, yachtzee_diet_templateObject44, yachtzee_diet_templateObject45, yachtzee_diet_templateObject46, yachtzee_diet_templateObject47, yachtzee_diet_templateObject48, yachtzee_diet_templateObject49, yachtzee_diet_templateObject50, yachtzee_diet_templateObject51, yachtzee_diet_templateObject52, yachtzee_diet_templateObject53, yachtzee_diet_templateObject54, yachtzee_diet_templateObject55, yachtzee_diet_templateObject56, yachtzee_diet_templateObject57, yachtzee_diet_templateObject58, yachtzee_diet_templateObject59, yachtzee_diet_templateObject60, yachtzee_diet_templateObject61, yachtzee_diet_templateObject62, yachtzee_diet_templateObject63, yachtzee_diet_templateObject64, yachtzee_diet_templateObject65, yachtzee_diet_templateObject66, yachtzee_diet_templateObject67, yachtzee_diet_templateObject68, yachtzee_diet_templateObject69, yachtzee_diet_templateObject70, yachtzee_diet_templateObject71, yachtzee_diet_templateObject72, yachtzee_diet_templateObject73, yachtzee_diet_templateObject74, yachtzee_diet_templateObject75, yachtzee_diet_templateObject76, yachtzee_diet_templateObject77, yachtzee_diet_templateObject78, yachtzee_diet_templateObject79, yachtzee_diet_templateObject80, yachtzee_diet_templateObject81;
function yachtzee_diet_toConsumableArray(arr) { return yachtzee_diet_arrayWithoutHoles(arr) || yachtzee_diet_iterableToArray(arr) || yachtzee_diet_unsupportedIterableToArray(arr) || yachtzee_diet_nonIterableSpread(); }
function yachtzee_diet_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function yachtzee_diet_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function yachtzee_diet_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return yachtzee_diet_arrayLikeToArray(arr); }
function yachtzee_diet_slicedToArray(arr, i) { return yachtzee_diet_arrayWithHoles(arr) || yachtzee_diet_iterableToArrayLimit(arr, i) || yachtzee_diet_unsupportedIterableToArray(arr, i) || yachtzee_diet_nonIterableRest(); }
function yachtzee_diet_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function yachtzee_diet_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function yachtzee_diet_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function yachtzee_diet_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = yachtzee_diet_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function yachtzee_diet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return yachtzee_diet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return yachtzee_diet_arrayLikeToArray(o, minLen); }
function yachtzee_diet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function yachtzee_diet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function yachtzee_diet_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, yachtzee_diet_toPropertyKey(descriptor.key), descriptor); } }
function yachtzee_diet_createClass(Constructor, protoProps, staticProps) { if (protoProps) yachtzee_diet_defineProperties(Constructor.prototype, protoProps); if (staticProps) yachtzee_diet_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function yachtzee_diet_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function yachtzee_diet_defineProperty(obj, key, value) { key = yachtzee_diet_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function yachtzee_diet_toPropertyKey(arg) { var key = yachtzee_diet_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function yachtzee_diet_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }












var YachtzeeDietEntry = /*#__PURE__*/yachtzee_diet_createClass(function YachtzeeDietEntry(name, quantity, fullness, drunkenness, spleen, action) {
  yachtzee_diet_classCallCheck(this, YachtzeeDietEntry);
  yachtzee_diet_defineProperty(this, "name", void 0);
  yachtzee_diet_defineProperty(this, "quantity", void 0);
  yachtzee_diet_defineProperty(this, "fullness", void 0);
  yachtzee_diet_defineProperty(this, "drunkenness", void 0);
  yachtzee_diet_defineProperty(this, "spleen", void 0);
  yachtzee_diet_defineProperty(this, "action", void 0);
  this.name = name;
  this.quantity = quantity;
  this.fullness = fullness;
  this.drunkenness = drunkenness;
  this.spleen = spleen;
  this.action = action;
});
function ensureConsumable(name, n, fullness, inebriety, spleenUse) {
  if ((0,external_kolmafia_namespaceObject.myFullness)() + n * fullness > (0,external_kolmafia_namespaceObject.fullnessLimit)()) {
    throw new Error("Eating ".concat(n, " ").concat(name, " exceeds our stomach capacity!"));
  } else if ((0,external_kolmafia_namespaceObject.myInebriety)() + n * inebriety > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
    throw new Error("Drinking ".concat(n, " ").concat(name, " exceeds our liver capacity!"));
  } else if ((0,external_kolmafia_namespaceObject.mySpleenUse)() + n * spleenUse > (0,external_kolmafia_namespaceObject.spleenLimit)()) {
    throw new Error("Using ".concat(n, " ").concat(name, " exceeds our spleen capacity!"));
  }
}
var YachtzeeDietUtils = /*#__PURE__*/function () {
  function YachtzeeDietUtils(action) {
    yachtzee_diet_classCallCheck(this, YachtzeeDietUtils);
    yachtzee_diet_defineProperty(this, "dietArray", void 0);
    yachtzee_diet_defineProperty(this, "pref", void 0);
    yachtzee_diet_defineProperty(this, "originalPref", void 0);
    this.originalPref = !property_get("_garboYachtzeeChainDiet") ? "" : property_get("_garboYachtzeeChainDiet");
    this.pref = "";
    this.dietArray = [new YachtzeeDietEntry("extra-greasy slider", 0, 5, 0, -5, n => {
      ensureConsumable("extra-greasy slider", n, 5, 0, -5);
      (0,external_kolmafia_namespaceObject.eat)(n, template_string_$item(yachtzee_diet_templateObject || (yachtzee_diet_templateObject = yachtzee_diet_taggedTemplateLiteral(["extra-greasy slider"]))));
    }), new YachtzeeDietEntry("jar of fermented pickle juice", 0, 0, 5, -5, n => {
      ensureConsumable("jar of fermented pickle juice", n, 0, 5, -5);
      castOde(5 * n);
      (0,external_kolmafia_namespaceObject.drink)(n, template_string_$item(yachtzee_diet_templateObject2 || (yachtzee_diet_templateObject2 = yachtzee_diet_taggedTemplateLiteral(["jar of fermented pickle juice"]))));
    }), new YachtzeeDietEntry("Extrovermectin™", 0, 0, 0, 2, n => {
      ensureConsumable("Extrovermectin™", n, 0, 0, 2);
      (0,external_kolmafia_namespaceObject.chew)(n, template_string_$item(yachtzee_diet_templateObject3 || (yachtzee_diet_templateObject3 = yachtzee_diet_taggedTemplateLiteral(["Extrovermectin\u2122"]))));
    }), new YachtzeeDietEntry("synthesis", 0, 0, 0, 1, n => {
      ensureConsumable("synthesis", n, 0, 0, 1);
      synthesize(n, template_string_$effect(yachtzee_diet_templateObject4 || (yachtzee_diet_templateObject4 = yachtzee_diet_taggedTemplateLiteral(["Synthesis: Greed"]))));
    }), new YachtzeeDietEntry("mojo filter", 0, 0, 0, -1, n => {
      (0,external_kolmafia_namespaceObject.use)(n, template_string_$item(yachtzee_diet_templateObject5 || (yachtzee_diet_templateObject5 = yachtzee_diet_taggedTemplateLiteral(["mojo filter"]))));
    }), new YachtzeeDietEntry("beggin' cologne", 0, 0, 0, 1, n => {
      ensureConsumable("beggin' cologne", n, 0, 0, 1);
      (0,external_kolmafia_namespaceObject.chew)(n, template_string_$item(yachtzee_diet_templateObject6 || (yachtzee_diet_templateObject6 = yachtzee_diet_taggedTemplateLiteral(["beggin' cologne"]))));
    }), new YachtzeeDietEntry("stench jelly", 0, 0, 0, 1, n => {
      ensureConsumable("stench jelly", n, 0, 0, 1);
      (0,external_kolmafia_namespaceObject.chew)(n, template_string_$item(yachtzee_diet_templateObject7 || (yachtzee_diet_templateObject7 = yachtzee_diet_taggedTemplateLiteral(["stench jelly"]))));
    }), new YachtzeeDietEntry("toast with stench jelly", 0, 1, 0, 0, n => {
      ensureConsumable("toast with stench jelly", n, 1, 0, 0);
      var VOA = property_get("valueOfAdventure");
      if (garboValue(template_string_$item(yachtzee_diet_templateObject8 || (yachtzee_diet_templateObject8 = yachtzee_diet_taggedTemplateLiteral(["munchies pill"])))) < 2.66 * VOA) {
        acquire(n, template_string_$item(yachtzee_diet_templateObject9 || (yachtzee_diet_templateObject9 = yachtzee_diet_taggedTemplateLiteral(["munchies pill"]))), 2.66 * VOA, false); // We should have already acquired this earlier (this is just a failsafe)
        (0,external_kolmafia_namespaceObject.use)(Math.min(n, (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(yachtzee_diet_templateObject10 || (yachtzee_diet_templateObject10 = yachtzee_diet_taggedTemplateLiteral(["munchies pill"]))))), template_string_$item(yachtzee_diet_templateObject11 || (yachtzee_diet_templateObject11 = yachtzee_diet_taggedTemplateLiteral(["munchies pill"]))));
      }
      (0,external_kolmafia_namespaceObject.eat)(n, template_string_$item(yachtzee_diet_templateObject12 || (yachtzee_diet_templateObject12 = yachtzee_diet_taggedTemplateLiteral(["toast with stench jelly"]))));
    }), new YachtzeeDietEntry("jumping horseradish", 0, 1, 0, 0, n => {
      ensureConsumable("jumping horseradish", n, 1, 0, 0);
      (0,external_kolmafia_namespaceObject.eat)(n, template_string_$item(yachtzee_diet_templateObject13 || (yachtzee_diet_templateObject13 = yachtzee_diet_taggedTemplateLiteral(["jumping horseradish"]))));
    }), new YachtzeeDietEntry("Boris's bread", 0, 1, 0, 0, n => {
      ensureConsumable("Boris's bread", n, 1, 0, 0);
      (0,external_kolmafia_namespaceObject.eat)(n, template_string_$item(yachtzee_diet_templateObject14 || (yachtzee_diet_templateObject14 = yachtzee_diet_taggedTemplateLiteral(["Boris's bread"]))));
    }), new YachtzeeDietEntry("clara's bell", 0, 0, 0, 0, () => {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(yachtzee_diet_templateObject15 || (yachtzee_diet_templateObject15 = yachtzee_diet_taggedTemplateLiteral(["Clara's bell"]))));
      config_globalOptions.clarasBellClaimed = true;
    }), new YachtzeeDietEntry("Deep Dish of Legend", 0, 2, 0, 0, n => {
      ensureConsumable("Deep Dish of Legend", n, 2, 0, 0);
      (0,external_kolmafia_namespaceObject.eat)(n, template_string_$item(yachtzee_diet_templateObject16 || (yachtzee_diet_templateObject16 = yachtzee_diet_taggedTemplateLiteral(["Deep Dish of Legend"]))));
    }), new YachtzeeDietEntry("jurassic parka", 0, 0, 0, 0, useSpikolodonSpikes)];
    if (action) this.dietArray.forEach(entry => entry.action = action);
  }
  yachtzee_diet_createClass(YachtzeeDietUtils, [{
    key: "setDietEntry",
    value: function setDietEntry(name, qty, action) {
      this.dietArray.forEach(entry => {
        if (entry.name === name) {
          if (qty) entry.quantity = qty;
          if (action) entry.action = action;
        }
      });
    }
  }, {
    key: "resetDietPref",
    value: function resetDietPref() {
      this.originalPref = "";
      this.pref = "";
    }
  }, {
    key: "addToPref",
    value: function addToPref(n, name) {
      if (!name) throw new Error("Diet pref must have a name");
      for (var i = 0; i < n; i++) {
        this.pref = this.pref.concat(name !== null && name !== void 0 ? name : "").concat(",");
      }
    }
  }, {
    key: "setDietPref",
    value: function setDietPref() {
      _set("_garboYachtzeeChainDiet", this.originalPref.concat(this.pref));
    }
  }]);
  return YachtzeeDietUtils;
}();
function splitDietEntry(entry) {
  var entries = new Array();
  for (var i = 0; i < entry.quantity; i++) {
    entries.push(new YachtzeeDietEntry(entry.name, 1, entry.fullness, entry.drunkenness, entry.spleen, entry.action));
  }
  return entries;
}
function combineDietEntries(left, right) {
  return new YachtzeeDietEntry(left.name, left.quantity + right.quantity, left.fullness, left.drunkenness, left.spleen, left.action);
}
function castOde(turns) {
  if (!lib_have($skill(yachtzee_diet_templateObject17 || (yachtzee_diet_templateObject17 = yachtzee_diet_taggedTemplateLiteral(["The Ode to Booze"]))))) return false;
  shrugIrrelevantSongs();

  // If we have the polka of plenty skill, we can re-buff up later
  // Else, get rid of chorale which is the most inefficient song
  if (lib_getActiveSongs.length === (lib_have($skill(yachtzee_diet_templateObject18 || (yachtzee_diet_templateObject18 = yachtzee_diet_taggedTemplateLiteral(["Mariachi Memory"])))) ? 4 : 3)) {
    if (lib_have($skill(yachtzee_diet_templateObject19 || (yachtzee_diet_templateObject19 = yachtzee_diet_taggedTemplateLiteral(["The Polka of Plenty"]))))) (0,external_kolmafia_namespaceObject.cliExecute)("shrug ".concat(template_string_$effect(yachtzee_diet_templateObject20 || (yachtzee_diet_templateObject20 = yachtzee_diet_taggedTemplateLiteral(["Polka of Plenty"])))));else (0,external_kolmafia_namespaceObject.cliExecute)("shrug ".concat(template_string_$effect(yachtzee_diet_templateObject21 || (yachtzee_diet_templateObject21 = yachtzee_diet_taggedTemplateLiteral(["Chorale of Companionship"])))));
  }
  while ((0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_diet_templateObject22 || (yachtzee_diet_templateObject22 = yachtzee_diet_taggedTemplateLiteral(["Ode to Booze"])))) < turns) {
    (0,external_kolmafia_namespaceObject.useSkill)($skill(yachtzee_diet_templateObject23 || (yachtzee_diet_templateObject23 = yachtzee_diet_taggedTemplateLiteral(["The Ode to Booze"]))));
  }
  return true;
}
function executeNextDietStep(stopBeforeJellies) {
  if (property_get("_stenchJellyUsed", false)) return;
  (0,external_kolmafia_namespaceObject.print)("Executing next diet steps", "blue");
  var dietUtil = new YachtzeeDietUtils();
  dietUtil.resetDietPref();
  var VOA = property_get("valueOfAdventure");
  var dietString = property_get("_garboYachtzeeChainDiet").split(",");
  var stenchJellyConsumed = false;
  var _iterator = yachtzee_diet_createForOfIteratorHelper(dietString),
    _step;
  try {
    var _loop = function _loop() {
      var name = _step.value;
      if (name.length === 0) return "continue";else if (!stenchJellyConsumed && (name.includes("stench jelly") || ["clara's bell", "jurassic parka"].includes(name))) {
        if (stopBeforeJellies) dietUtil.addToPref(1, name);else {
          var entry = dietUtil.dietArray.find(entry => entry.name === name);
          if (entry) {
            if (entry.fullness > 0) {
              if (!property_get("_milkOfMagnesiumUsed")) {
                acquire(1, template_string_$item(yachtzee_diet_templateObject24 || (yachtzee_diet_templateObject24 = yachtzee_diet_taggedTemplateLiteral(["milk of magnesium"]))), 5 * VOA);
                (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(yachtzee_diet_templateObject25 || (yachtzee_diet_templateObject25 = yachtzee_diet_taggedTemplateLiteral(["milk of magnesium"]))));
              }
              if (!property_get("_distentionPillUsed") && lib_have(template_string_$item(yachtzee_diet_templateObject26 || (yachtzee_diet_templateObject26 = yachtzee_diet_taggedTemplateLiteral(["distention pill"]))))) {
                (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(yachtzee_diet_templateObject27 || (yachtzee_diet_templateObject27 = yachtzee_diet_taggedTemplateLiteral(["distention pill"]))));
              }
            }
            entry.action(1);
          } else {
            throw new Error("Could not find ".concat(name, " in dietArray"));
          }
          _set("_stenchJellyUsed", true);
        }
        stenchJellyConsumed = true;
      } else if (!stenchJellyConsumed) {
        dietUtil.dietArray.forEach(entry => {
          if (entry.name === name) {
            if (entry.drunkenness > 0) {
              while (property_get("sweat") >= 25 && property_get("_sweatOutSomeBoozeUsed") < 3 && (0,external_kolmafia_namespaceObject.myInebriety)() > 0) {
                (0,external_kolmafia_namespaceObject.useSkill)($skill(yachtzee_diet_templateObject28 || (yachtzee_diet_templateObject28 = yachtzee_diet_taggedTemplateLiteral(["Sweat Out Some Booze"]))));
              }
              if (!property_get("_syntheticDogHairPillUsed") && lib_have(template_string_$item(yachtzee_diet_templateObject29 || (yachtzee_diet_templateObject29 = yachtzee_diet_taggedTemplateLiteral(["synthetic dog hair pill"]))))) {
                (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(yachtzee_diet_templateObject30 || (yachtzee_diet_templateObject30 = yachtzee_diet_taggedTemplateLiteral(["synthetic dog hair pill"]))));
              }
            }
            if ((0,external_kolmafia_namespaceObject.myFullness)() + entry.fullness > (0,external_kolmafia_namespaceObject.fullnessLimit)()) {
              throw new Error("consuming ".concat(entry.name, " will exceed our fullness limit"));
            } else if ((0,external_kolmafia_namespaceObject.myInebriety)() + entry.drunkenness > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
              throw new Error("consuming ".concat(entry.name, " will exceed our inebriety limit"));
            } else if ((0,external_kolmafia_namespaceObject.mySpleenUse)() + entry.spleen > (0,external_kolmafia_namespaceObject.spleenLimit)()) {
              throw new Error("consuming ".concat(entry.name, " will exceed our spleen limit"));
            }
            if (entry.fullness > 0) {
              if (!property_get("_milkOfMagnesiumUsed")) {
                acquire(1, template_string_$item(yachtzee_diet_templateObject31 || (yachtzee_diet_templateObject31 = yachtzee_diet_taggedTemplateLiteral(["milk of magnesium"]))), 5 * VOA);
                (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(yachtzee_diet_templateObject32 || (yachtzee_diet_templateObject32 = yachtzee_diet_taggedTemplateLiteral(["milk of magnesium"]))));
              }
              if (!property_get("_distentionPillUsed") && lib_have(template_string_$item(yachtzee_diet_templateObject33 || (yachtzee_diet_templateObject33 = yachtzee_diet_taggedTemplateLiteral(["distention pill"]))))) {
                (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(yachtzee_diet_templateObject34 || (yachtzee_diet_templateObject34 = yachtzee_diet_taggedTemplateLiteral(["distention pill"]))));
              }
            }
            entry.action(1);
          }
        });
      } else {
        dietUtil.addToPref(1, name);
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _ret = _loop();
      if (_ret === "continue") continue;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  dietUtil.setDietPref();
  if (!stenchJellyConsumed) {
    throw new Error("We completed our entire diet but failed to get a stench jelly charge");
  }
}
function yachtzeeDietScheduler(menu) {
  var dietSchedule = new Array();
  var remainingMenu = new Array();
  var jellies = new Array();
  var haveDistentionPill = !property_get("_distentionPillUsed") && lib_have(template_string_$item(yachtzee_diet_templateObject35 || (yachtzee_diet_templateObject35 = yachtzee_diet_taggedTemplateLiteral(["distention pill"]))));
  var toasts = new Array();
  var freeNCs = new Array();

  // We assume the menu was constructed such that we will not overshoot our fullness and inebriety limits
  // Assume all fullness/drunkenness > 0 non-spleen cleansers are inserted for buffs
  // This makes it trivial to plan the diet
  // First, lay out all the spleen cleansers (and the buff consumables at the front)
  var _iterator2 = yachtzee_diet_createForOfIteratorHelper(menu),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _entry3 = _step2.value;
      if (_entry3.spleen < 0) {
        var _iterator6 = yachtzee_diet_createForOfIteratorHelper(splitDietEntry(_entry3)),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var splitEntry = _step6.value;
            dietSchedule.push(splitEntry);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      } else if (_entry3.name === "stench jelly") {
        var _iterator7 = yachtzee_diet_createForOfIteratorHelper(splitDietEntry(_entry3)),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _splitEntry = _step7.value;
            jellies.push(_splitEntry);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      } else if (_entry3.name === "toast with stench jelly") {
        var _iterator8 = yachtzee_diet_createForOfIteratorHelper(splitDietEntry(_entry3)),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _splitEntry2 = _step8.value;
            toasts.push(_splitEntry2);
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
      } else if (_entry3.name === "jurassic parka") {
        // Parka before Clara's, since we want to use free runs asap
        // Note that since we push a flipped freeNCs onto the dietSchedule, so we put Clara's in front in freeNCs
        var _iterator9 = yachtzee_diet_createForOfIteratorHelper(splitDietEntry(_entry3)),
          _step9;
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var _splitEntry3 = _step9.value;
            freeNCs.push(_splitEntry3);
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      } else if (_entry3.name === "clara's bell") {
        var _iterator10 = yachtzee_diet_createForOfIteratorHelper(splitDietEntry(_entry3)),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var _splitEntry4 = _step10.value;
            freeNCs.splice(0, 0, _splitEntry4);
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      } else if (_entry3.fullness > 0 || _entry3.drunkenness > 0) {
        var _iterator11 = yachtzee_diet_createForOfIteratorHelper(splitDietEntry(_entry3)),
          _step11;
        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var _splitEntry5 = _step11.value;
            dietSchedule.splice(0, 0, _splitEntry5);
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      } else {
        var _iterator12 = yachtzee_diet_createForOfIteratorHelper(splitDietEntry(_entry3)),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var _splitEntry6 = _step12.value;
            remainingMenu.push(_splitEntry6);
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }
    }

    // Place toasts at the back of our schedule
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  for (var _i = 0, _toasts = toasts; _i < _toasts.length; _i++) {
    var toast = _toasts[_i];
    dietSchedule.push(toast);
  }

  // Then, greedily inject spleen items into the schedule with the ordering:
  // 1) Front to back of the schedule
  // 2) Large spleen damagers to small spleen damagers
  // This works because stench jellies are of size 1, so we can always pack efficiently using the greedy approach
  remainingMenu.sort((left, right) => {
    return right.spleen - left.spleen;
  });

  // Schedule jellies last so we definitely get spleen buffs first (e.g. synth and cologne)
  for (var _i2 = 0, _arr = [remainingMenu, jellies]; _i2 < _arr.length; _i2++) {
    var spleeners = _arr[_i2];
    var _iterator3 = yachtzee_diet_createForOfIteratorHelper(spleeners),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var entry = _step3.value;
        var _idx = 0;
        var _spleenUse = (0,external_kolmafia_namespaceObject.mySpleenUse)();
        while (_idx < dietSchedule.length && (dietSchedule[_idx].spleen >= 0 ||
        // We only insert if there's a cleanser immediately after where we want to insert
        _spleenUse + entry.spleen > (0,external_kolmafia_namespaceObject.spleenLimit)() ||
        // But don't insert if we will overshoot our spleen limit
        _idx > 0 && dietSchedule[_idx - 1].spleen < 0 && _spleenUse + dietSchedule[_idx].spleen >= 0) // And cluster spleen cleansers (continue if the next cleanser can still clean our spleen)
        ) {
          var _dietSchedule$_idx$sp;
          _spleenUse += (_dietSchedule$_idx$sp = dietSchedule[_idx++].spleen) !== null && _dietSchedule$_idx$sp !== void 0 ? _dietSchedule$_idx$sp : 0;
        }
        dietSchedule.splice(_idx, 0, entry);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }

  // Place our free NC sources immediately before any jellies
  for (var _idx2 = 0; _idx2 <= dietSchedule.length; _idx2++) {
    if (_idx2 === dietSchedule.length) {
      var _iterator4 = yachtzee_diet_createForOfIteratorHelper(freeNCs),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var freeNCSource = _step4.value;
          dietSchedule.push(freeNCSource);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      break;
    } else if (dietSchedule[_idx2].name.includes("jelly")) {
      var _iterator5 = yachtzee_diet_createForOfIteratorHelper(freeNCs),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _freeNCSource = _step5.value;
          dietSchedule.splice(_idx2, 0, _freeNCSource);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      break;
    }
  }

  // Next, combine clustered entries where possible (this is purely for aesthetic reasons)
  var idx = 0;
  while (idx < dietSchedule.length - 1) {
    if (dietSchedule[idx].name === dietSchedule[idx + 1].name) {
      dietSchedule.splice(idx, 2, combineDietEntries(dietSchedule[idx], dietSchedule[idx + 1]));
    } else idx++;
  }

  // Print diet schedule
  (0,external_kolmafia_namespaceObject.print)("Fullness:    ".concat((0,external_kolmafia_namespaceObject.myFullness)(), "/").concat((0,external_kolmafia_namespaceObject.fullnessLimit)() + (0,external_kolmafia_namespaceObject.toInt)(haveDistentionPill)), "blue");
  (0,external_kolmafia_namespaceObject.print)("Drunkenness: ".concat((0,external_kolmafia_namespaceObject.myInebriety)(), "/").concat((0,external_kolmafia_namespaceObject.inebrietyLimit)()), "blue");
  (0,external_kolmafia_namespaceObject.print)("Spleen Use:  ".concat((0,external_kolmafia_namespaceObject.mySpleenUse)(), "/").concat((0,external_kolmafia_namespaceObject.spleenLimit)()), "blue");
  (0,external_kolmafia_namespaceObject.print)("Diet schedule:", "blue");
  for (var _i3 = 0, _dietSchedule = dietSchedule; _i3 < _dietSchedule.length; _i3++) {
    var _entry = _dietSchedule[_i3];
    (0,external_kolmafia_namespaceObject.print)("Use ".concat(_entry.quantity, " ").concat(_entry.name), "blue");
  }

  // Finally, run a check to ensure everything is fine
  var fullness = (0,external_kolmafia_namespaceObject.myFullness)();
  var drunkenness = (0,external_kolmafia_namespaceObject.myInebriety)();
  var spleenUse = (0,external_kolmafia_namespaceObject.mySpleenUse)();
  var sweatOutsAvailable = utils_clamp(Math.floor(property_get("sweat") / 25), 0, 3 - property_get("_sweatOutSomeBoozeUsed"));
  var syntheticPillsAvailable = !property_get("_syntheticDogHairPillUsed") && lib_have(template_string_$item(yachtzee_diet_templateObject36 || (yachtzee_diet_templateObject36 = yachtzee_diet_taggedTemplateLiteral(["synthetic dog hair pill"])))) ? 1 : 0;
  for (var _i4 = 0, _dietSchedule2 = dietSchedule; _i4 < _dietSchedule2.length; _i4++) {
    var _entry2 = _dietSchedule2[_i4];
    fullness += _entry2.quantity * _entry2.fullness;
    drunkenness += _entry2.quantity * _entry2.drunkenness;
    spleenUse += _entry2.quantity * _entry2.spleen;
    if (fullness > (0,external_kolmafia_namespaceObject.fullnessLimit)() + (0,external_kolmafia_namespaceObject.toInt)(haveDistentionPill)) {
      throw new Error("Error in diet schedule: Overeating ".concat(_entry2.quantity, " ").concat(_entry2.name, " to ").concat(fullness, "/").concat((0,external_kolmafia_namespaceObject.fullnessLimit)() + (0,external_kolmafia_namespaceObject.toInt)(haveDistentionPill)));
    } else if (drunkenness > (0,external_kolmafia_namespaceObject.inebrietyLimit)()) {
      throw new Error("Error in diet schedule: Overdrinking ".concat(_entry2.quantity, " ").concat(_entry2.name, " to ").concat(drunkenness, "/").concat((0,external_kolmafia_namespaceObject.inebrietyLimit)()));
    } else if (spleenUse > (0,external_kolmafia_namespaceObject.spleenLimit)()) {
      throw new Error("Error in diet schedule: Overspleening ".concat(_entry2.quantity, " ").concat(_entry2.name, " to ").concat(spleenUse, "/").concat((0,external_kolmafia_namespaceObject.spleenLimit)()));
    }
    while (drunkenness > 0 && sweatOutsAvailable > 0) {
      drunkenness -= 1;
      sweatOutsAvailable -= 1;
    }
    if (drunkenness > 0 && syntheticPillsAvailable > 0) {
      drunkenness -= 1;
      syntheticPillsAvailable -= 1;
    }
  }
  return dietSchedule;
}
function yachtzeeChainDiet(simOnly) {
  var _possibleJellyYachtze;
  if (property_get("_garboYachtzeeChainDietPlanned", false)) return true;
  _set("_garboYachtzeeChainDiet", "");
  var havePYECCharge = pyecAvailable();
  var haveDistentionPill = !property_get("_distentionPillUsed") && lib_have(template_string_$item(yachtzee_diet_templateObject37 || (yachtzee_diet_templateObject37 = yachtzee_diet_taggedTemplateLiteral(["distention pill"]))));
  (0,external_kolmafia_namespaceObject.visitUrl)("desc_item.php?whichitem=".concat(template_string_$item(yachtzee_diet_templateObject38 || (yachtzee_diet_templateObject38 = yachtzee_diet_taggedTemplateLiteral(["designer sweatpants"]))).descid)); // Ensure that our sweat tracker is updated
  var sweatOutsAvailable = utils_clamp(Math.floor(property_get("sweat") / 25), 0, 3 - property_get("_sweatOutSomeBoozeUsed"));
  var syntheticPillsAvailable = !property_get("_syntheticDogHairPillUsed") && lib_have(template_string_$item(yachtzee_diet_templateObject39 || (yachtzee_diet_templateObject39 = yachtzee_diet_taggedTemplateLiteral(["synthetic dog hair pill"])))) ? 1 : 0;
  var currentSpleenLeft = (0,external_kolmafia_namespaceObject.spleenLimit)() - (0,external_kolmafia_namespaceObject.mySpleenUse)();
  var filters = 3 - property_get("currentMojoFilters");
  // save some spleen the first two extro, which are worth a lot
  // due to macrometeor and cheat code: replace enemy
  var extroSpleenSpace = hasMonsterReplacers() ? 4 - Math.min(4, 2 * property_get("beGregariousCharges")) : 0;
  var synthCastsToCoverRun = config_globalOptions.nobarf || !lib_have($skill(yachtzee_diet_templateObject40 || (yachtzee_diet_templateObject40 = yachtzee_diet_taggedTemplateLiteral(["Sweet Synthesis"])))) ? 0 : Math.max(0, Math.round((estimatedGarboTurns() - (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_diet_templateObject41 || (yachtzee_diet_templateObject41 = yachtzee_diet_taggedTemplateLiteral(["Synthesis: Greed"]))))) / 30));
  var fullnessAvailable = (0,external_kolmafia_namespaceObject.fullnessLimit)() - (0,external_kolmafia_namespaceObject.myFullness)() + (0,external_kolmafia_namespaceObject.toInt)(haveDistentionPill);
  var inebrietyAvailable = (0,external_kolmafia_namespaceObject.myLevel)() >= 13 ? (0,external_kolmafia_namespaceObject.inebrietyLimit)() - (0,external_kolmafia_namespaceObject.myInebriety)() + syntheticPillsAvailable + sweatOutsAvailable : 0;
  var spleenAvailable = currentSpleenLeft + filters;
  var organsAvailable = fullnessAvailable + inebrietyAvailable + spleenAvailable;
  var cleanableSpleen = organsAvailable - synthCastsToCoverRun - extroSpleenSpace;
  var sufficientOrgansFor = yachtzees => cleanableSpleen >= yachtzees + (havePYECCharge ? 5 : 0);
  var possibleJellyYachtzeeTurns = [35, 30, 25, 20, 15, 10];
  var jellyYachtzeeTurns = (_possibleJellyYachtze = possibleJellyYachtzeeTurns.find(sufficientOrgansFor)) !== null && _possibleJellyYachtze !== void 0 ? _possibleJellyYachtze : 0;
  var fishyPipeTurnsAvailable = (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_diet_templateObject42 || (yachtzee_diet_templateObject42 = yachtzee_diet_taggedTemplateLiteral(["Fishy"])))) + (lib_have(template_string_$item(yachtzee_diet_templateObject43 || (yachtzee_diet_templateObject43 = yachtzee_diet_taggedTemplateLiteral(["fishy pipe"])))) && !property_get("_fishyPipeUsed") ? 10 : 0);
  var canParkaChain = fishyPipeTurnsAvailable + (fishyPipeTurnsAvailable > 0 && pyecAvailable() ? 5 : 0) >= freeNCs();
  if (jellyYachtzeeTurns === 0 && !canParkaChain) {
    (0,external_kolmafia_namespaceObject.print)("Determined that there are no suitable number of turns to chain yachtzees", "red");
    return false;
  }
  (0,external_kolmafia_namespaceObject.print)("Synth Casts Wanted: ".concat(synthCastsToCoverRun), "blue");
  (0,external_kolmafia_namespaceObject.print)("Organs Available: ".concat(organsAvailable), "blue");
  (0,external_kolmafia_namespaceObject.print)("Jelly Yachtzee Turns: ".concat(jellyYachtzeeTurns), "blue");

  // Plan our diet

  var sliders = Math.floor(((0,external_kolmafia_namespaceObject.fullnessLimit)() + (0,external_kolmafia_namespaceObject.toInt)(haveDistentionPill) - (0,external_kolmafia_namespaceObject.myFullness)()) / 5);
  var pickleJuice = (0,external_kolmafia_namespaceObject.myLevel)() >= 13 ? Math.floor(((0,external_kolmafia_namespaceObject.inebrietyLimit)() - (0,external_kolmafia_namespaceObject.myInebriety)() + sweatOutsAvailable + syntheticPillsAvailable) / 5) : 0;
  var reqSynthTurns = 30; // We will be left with max(0, 30 - yachtzeeTurns) after chaining
  var synthTurnsWanted = reqSynthTurns - (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_diet_templateObject44 || (yachtzee_diet_templateObject44 = yachtzee_diet_taggedTemplateLiteral(["Synthesis: Greed"]))));
  var synthCastsWanted = Math.ceil(synthTurnsWanted / 30);
  var synthCasts = lib_have($skill(yachtzee_diet_templateObject45 || (yachtzee_diet_templateObject45 = yachtzee_diet_taggedTemplateLiteral(["Sweet Synthesis"])))) ? Math.max(synthCastsWanted, 0) : 0;
  var cologne = 0;
  var potentialSpleen = currentSpleenLeft + 5 * sliders + 5 * pickleJuice + filters;
  var availableSpleen = potentialSpleen - synthCasts - extroSpleenSpace; // Spleen available for ingesting jellies

  _set("_stenchJellyChargeTarget", 0);
  if (availableSpleen < jellyYachtzeeTurns) {
    (0,external_kolmafia_namespaceObject.print)("We were unable to generate enough organ space for optimal yachtzee chaining", "red");
    return false;
  }
  var yachtzeeTurns = freeNCs() + jellyYachtzeeTurns;
  if (availableSpleen + freeNCs() > yachtzeeTurns) cologne = 1; // If we have excess spleen, chew a cologne (representing -1 to availableSpleen, but we no longer need that variable)

  if (simOnly) (0,external_kolmafia_namespaceObject.print)("We can potentially run ".concat(yachtzeeTurns, " for yachtzee"), "purple");else (0,external_kolmafia_namespaceObject.print)("Trying to run ".concat(yachtzeeTurns, " turns of Yachtzee"), "purple");

  // Compute prices to make sure everything is worth it
  var fishyCost = optimizeForFishy(yachtzeeTurns);
  var extroPrice = (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject46 || (yachtzee_diet_templateObject46 = yachtzee_diet_taggedTemplateLiteral(["Extrovermectin\u2122"]))));
  var VOA = property_get("valueOfAdventure");
  var slidersPrice = (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject47 || (yachtzee_diet_templateObject47 = yachtzee_diet_taggedTemplateLiteral(["extra-greasy slider"]))));
  var pickleJuicePrice = (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject48 || (yachtzee_diet_templateObject48 = yachtzee_diet_taggedTemplateLiteral(["jar of fermented pickle juice"]))));
  var colognePrice = (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject49 || (yachtzee_diet_templateObject49 = yachtzee_diet_taggedTemplateLiteral(["beggin' cologne"]))));

  // We prefer using pickle juice to cleanse our spleen for stench jellies since
  // 1) It's cheaper
  // 2) Our stomach can be used for horseradish buffs
  var spleenNeeded = Math.max(0, yachtzeeTurns - freeNCs()) + synthCasts + extroSpleenSpace + cologne;
  var spleenToClean = spleenNeeded - currentSpleenLeft - filters;
  var pickleJuiceToDrink = utils_clamp(Math.ceil(spleenToClean / 5), 0, pickleJuice);
  var slidersToEat = utils_clamp(Math.ceil(spleenToClean / 5) - pickleJuiceToDrink, 0, sliders);
  var jelliesToChew = Math.max(0, yachtzeeTurns - freeNCs());
  var extrosToChew = extroSpleenSpace / 2;
  var synthToUse = synthCasts;
  var cologneToChew = cologne;

  // Compare jellies + sliders vs toasts
  var jellyPrice = (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject50 || (yachtzee_diet_templateObject50 = yachtzee_diet_taggedTemplateLiteral(["stench jelly"]))));
  var jellySlidersCosts = jellyPrice + slidersPrice / 5;
  var jellyPickleCosts = jellyPrice + pickleJuicePrice / 5;
  var toastPrice = Math.min((0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject51 || (yachtzee_diet_templateObject51 = yachtzee_diet_taggedTemplateLiteral(["toast with stench jelly"])))), jellyPrice + (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject52 || (yachtzee_diet_templateObject52 = yachtzee_diet_taggedTemplateLiteral(["toast"])))));
  var sliderAdventuresPerFull = getAverageAdventures(template_string_$item(yachtzee_diet_templateObject53 || (yachtzee_diet_templateObject53 = yachtzee_diet_taggedTemplateLiteral(["extra-greasy slider"])))) / 5;
  var toastAdventuresPerFull = getAverageAdventures(template_string_$item(yachtzee_diet_templateObject54 || (yachtzee_diet_templateObject54 = yachtzee_diet_taggedTemplateLiteral(["toast with stench jelly"])))) / 1;
  var toastOpportunityCost = toastPrice + (sliderAdventuresPerFull - toastAdventuresPerFull) * VOA;
  var toastsToEat = 0;
  if (toastOpportunityCost < jellySlidersCosts || (0,external_kolmafia_namespaceObject.myLevel)() < 13) {
    toastsToEat = 5 * slidersToEat;
    jelliesToChew -= 5 * slidersToEat;
    slidersToEat = 0;
  }
  if (toastOpportunityCost < jellyPickleCosts) {
    while (pickleJuiceToDrink > 0 && jelliesToChew >= 5 && (0,external_kolmafia_namespaceObject.myFullness)() + slidersToEat * 5 + toastsToEat + 5 <= (0,external_kolmafia_namespaceObject.fullnessLimit)() + (haveDistentionPill ? 1 : 0) - 1) {
      toastsToEat += 5;
      jelliesToChew -= 5;
      pickleJuiceToDrink -= 1;
    }
  }
  var jelliesBulkPrice = (0,external_kolmafia_namespaceObject.retrievePrice)(template_string_$item(yachtzee_diet_templateObject55 || (yachtzee_diet_templateObject55 = yachtzee_diet_taggedTemplateLiteral(["stench jelly"]))), jelliesToChew);

  // TODO: This is outdated in the era of dynamic chains - if prices are too expensive, choose a more profitable chain length!
  // If we need spleen cleansers but their prices are unreasonable, just return
  var maxSliderPrice = 150000,
    maxPickleJuicePrice = 150000;
  if (slidersToEat > 0 && (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject56 || (yachtzee_diet_templateObject56 = yachtzee_diet_taggedTemplateLiteral(["extra-greasy slider"])))) > maxSliderPrice) {
    (0,external_kolmafia_namespaceObject.print)("Sliders are way too overpriced for us to clean spleens for jellies", "red");
    return false;
  } else if (pickleJuiceToDrink > 0 && (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject57 || (yachtzee_diet_templateObject57 = yachtzee_diet_taggedTemplateLiteral(["jar of fermented pickle juice"])))) > maxPickleJuicePrice) {
    (0,external_kolmafia_namespaceObject.print)("Pickle juices are way too overpriced for us to clean spleens for jellies", "red");
    return false;
  }
  var horseradishes = (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject58 || (yachtzee_diet_templateObject58 = yachtzee_diet_taggedTemplateLiteral(["jumping horseradish"])))) <= 60000 && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_diet_templateObject59 || (yachtzee_diet_templateObject59 = yachtzee_diet_taggedTemplateLiteral(["Kicked in the Sinuses"])))) < yachtzeeTurns && (0,external_kolmafia_namespaceObject.myFullness)() + 1 + slidersToEat * 5 + toastsToEat <= (0,external_kolmafia_namespaceObject.fullnessLimit)() + (0,external_kolmafia_namespaceObject.toInt)(haveDistentionPill) ? 1 : 0;
  var borisBreads = !property_get("unknownRecipe10978") && (0,external_kolmafia_namespaceObject.retrievePrice)(template_string_$item(yachtzee_diet_templateObject60 || (yachtzee_diet_templateObject60 = yachtzee_diet_taggedTemplateLiteral(["Boris's bread"])))) <= 60000 && (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_diet_templateObject61 || (yachtzee_diet_templateObject61 = yachtzee_diet_taggedTemplateLiteral(["Inspired Chef"])))) < yachtzeeTurns && (0,external_kolmafia_namespaceObject.myFullness)() + 1 + slidersToEat * 5 + toastsToEat + horseradishes <= (0,external_kolmafia_namespaceObject.fullnessLimit)() + (0,external_kolmafia_namespaceObject.toInt)(haveDistentionPill) ? 1 : 0;
  // Opportunistically fit in Deep Dish of Legend only if we have enough stomach space
  var pizzaAdditionalAdvPerFullness = 24 / 2 - 31.5 / 5;
  var deepDishValue = yachtzeePotionProfits(new Potion(template_string_$item(yachtzee_diet_templateObject62 || (yachtzee_diet_templateObject62 = yachtzee_diet_taggedTemplateLiteral(["Deep Dish of Legend"])))), yachtzeeTurns) + pizzaAdditionalAdvPerFullness * 2 * VOA;
  var deepDishPizzas = config_globalOptions.ascend && !property_get("deepDishOfLegendEaten") && deepDishValue > (0,external_kolmafia_namespaceObject.retrievePrice)(template_string_$item(yachtzee_diet_templateObject63 || (yachtzee_diet_templateObject63 = yachtzee_diet_taggedTemplateLiteral(["Deep Dish of Legend"])))) && !property_get("unknownRecipe11000") && !property_get("unknownRecipe10988") && !property_get("unknownRecipe10978") && (0,external_kolmafia_namespaceObject.myFullness)() + 2 + slidersToEat * 5 + toastsToEat + horseradishes + borisBreads <= (0,external_kolmafia_namespaceObject.fullnessLimit)() + (0,external_kolmafia_namespaceObject.toInt)(haveDistentionPill) ? 1 : 0;
  var earlyMeatDropsEstimate = (0,external_kolmafia_namespaceObject.numericModifier)("Meat Drop") + (!lib_have(template_string_$effect(yachtzee_diet_templateObject64 || (yachtzee_diet_templateObject64 = yachtzee_diet_taggedTemplateLiteral(["Synthesis: Greed"])))) && lib_have($skill(yachtzee_diet_templateObject65 || (yachtzee_diet_templateObject65 = yachtzee_diet_taggedTemplateLiteral(["Sweet Synthesis"])))) ? 300 : 0) + ((0,external_kolmafia_namespaceObject.visitUrl)("forestvillage.php").includes("friarcottage.gif") ? 60 : 0);

  // Some iffy calculations here
  // If the best diet (at current prices) includes sliders and pickle juice (s+pj), no issues there
  // However, if the best diet does not include s+pj, then we need to compute the loss of switching
  // from the best diet to s+pj, and add it to our jellyValuePerSpleen calculations
  // Let's just say (for now) that sliders are at best worth 70k and pickle juices are worth 60k
  var slidersExcessCost = slidersPrice > 70000 ? slidersPrice - 70000 : 0;
  var pickleJuiceExcessCost = pickleJuicePrice > 60000 ? pickleJuicePrice - 60000 : 0;

  // Yachtzee has higher base meat than KGEs
  // thus some potions which aren't profitable for KGEs are profitable for yachtzees
  // Prior to entering this function, we should already have triggered potionSetup()
  // This means that any further buffs are purely profitable only for yachtzees
  // If running simOnly, there's a possibility that potionSetup() hasn't been run
  // However, this means that higherBaseMeatProfits would try to account for the lower earlyMeatDropsEstimate
  var higherBaseMeatProfits = yachtzeePotionSetup(yachtzeeTurns, true) + cologneToChew * ((yachtzeeTurns + 60 + 5 * (0,external_kolmafia_namespaceObject.toInt)(havePYECCharge)) * 1000 - colognePrice) + (horseradishes > 0 ? yachtzeeTurns * 1000 : 0) + (borisBreads > 0 ? yachtzeeTurns * 1000 : 0);

  // We assume that the embezzlers after yachtzee chaining would still benefit from our start-of-day buffs
  // so the assumption is that all the gregged embezzlies can be approximated as marginal KGEs with profits of 3 * VOA
  var extroValuePerSpleen = 6 * VOA - extroPrice / 2;
  var jellyValuePerSpleen = earlyMeatDropsEstimate * 2000 / 100 - (jelliesBulkPrice + toastsToEat * toastPrice + fishyCost + slidersToEat * slidersExcessCost + pickleJuiceToDrink * pickleJuiceExcessCost - higherBaseMeatProfits) / yachtzeeTurns;
  (0,external_kolmafia_namespaceObject.print)("Early Meat Drop Modifier: ".concat(earlyMeatDropsEstimate, "%"));
  (0,external_kolmafia_namespaceObject.print)("Extro value per spleen: ".concat(extroValuePerSpleen));
  (0,external_kolmafia_namespaceObject.print)("Jelly value per spleen: ".concat(jellyValuePerSpleen));
  if (simOnly) {
    (0,external_kolmafia_namespaceObject.print)("Jelly value estimates are wildly off for simulations because we have not properly buffed up yet", "orange");
  }
  if (jellyValuePerSpleen < extroValuePerSpleen && !simOnly && jellyYachtzeeTurns > 0) {
    // If we can't parka-chain, then return early
    if (!canParkaChain) {
      (0,external_kolmafia_namespaceObject.print)("Running extros is more profitable than chaining yachtzees", "red");
      return false; // We should do extros instead since they are more valuable
    }
    // Else, we do not want to use any toasts/jellies
    yachtzeeTurns = freeNCs();
    slidersToEat = 0;
    pickleJuiceToDrink = 0;
    toastsToEat = 0;
    jelliesToChew = 0;
    filters = Math.min((0,external_kolmafia_namespaceObject.mySpleenUse)(), filters); // We may need to filter for synth/extros, but no longer need to filter for jellies
  }

  // Schedule our diet first

  var addPref = (n, name) => {
    dietUtil.addToPref(n, name);
  };
  var dietUtil = new YachtzeeDietUtils(addPref);
  var regularEntries = [["extra-greasy slider", slidersToEat], ["jar of fermented pickle juice", pickleJuiceToDrink], ["Extrovermectin™", extrosToChew], ["synthesis", synthToUse], ["mojo filter", filters], ["beggin' cologne", cologneToChew], ["jumping horseradish", horseradishes], ["Boris's bread", borisBreads], ["Deep Dish of Legend", deepDishPizzas]];
  var specialEntries = [["stench jelly", jelliesToChew], ["toast with stench jelly", toastsToEat], ["clara's bell", lib_have(template_string_$item(yachtzee_diet_templateObject66 || (yachtzee_diet_templateObject66 = yachtzee_diet_taggedTemplateLiteral(["Clara's bell"])))) && !config_globalOptions.clarasBellClaimed ? 1 : 0], ["jurassic parka", lib_have(template_string_$item(yachtzee_diet_templateObject67 || (yachtzee_diet_templateObject67 = yachtzee_diet_taggedTemplateLiteral(["Jurassic Parka"])))) ? 5 - property_get("_spikolodonSpikeUses") : 0]].map(_ref => {
    var _ref2 = yachtzee_diet_slicedToArray(_ref, 2),
      name = _ref2[0],
      qty = _ref2[1];
    return [name, qty, (n, name) => {
      dietUtil.addToPref(n, name);
      if (!simOnly) {
        _set("_stenchJellyChargeTarget", property_get("_stenchJellyChargeTarget", 0) + n);
      }
    }];
  });
  for (var _i5 = 0, _regularEntries = regularEntries; _i5 < _regularEntries.length; _i5++) {
    var entry = _regularEntries[_i5];
    dietUtil.setDietEntry.apply(dietUtil, yachtzee_diet_toConsumableArray(entry));
  }
  var _iterator13 = yachtzee_diet_createForOfIteratorHelper(specialEntries),
    _step13;
  try {
    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
      var _entry4 = _step13.value;
      dietUtil.setDietEntry.apply(dietUtil, yachtzee_diet_toConsumableArray(_entry4));
    }

    // Run diet scheduler
  } catch (err) {
    _iterator13.e(err);
  } finally {
    _iterator13.f();
  }
  (0,external_kolmafia_namespaceObject.print)("Scheduling diet", "purple");
  var dietSchedule = yachtzeeDietScheduler(dietUtil.dietArray);

  // Now execute the diet
  var _iterator14 = yachtzee_diet_createForOfIteratorHelper(dietSchedule),
    _step14;
  try {
    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      var _entry5 = _step14.value;
      _entry5.action(_entry5.quantity, _entry5.name);
    }
  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }
  dietUtil.setDietPref();
  if (simOnly) return true;
  if (property_get("_stenchJellyChargeTarget", 0) < yachtzeeTurns) {
    throw new Error("We are only able to obtain up to ".concat(property_get("_stenchJellyChargeTarget", 0), "/").concat(yachtzeeTurns, " turns of jelly charges!"));
  }

  // Acquire everything we need
  acquire(jelliesToChew, template_string_$item(yachtzee_diet_templateObject68 || (yachtzee_diet_templateObject68 = yachtzee_diet_taggedTemplateLiteral(["stench jelly"]))), 2 * jelliesBulkPrice / jelliesToChew, true, 1.2 * jelliesBulkPrice // Bulk jelly purchases may cost > 1m in the future
  );

  acquire(toastsToEat, template_string_$item(yachtzee_diet_templateObject69 || (yachtzee_diet_templateObject69 = yachtzee_diet_taggedTemplateLiteral(["toast with stench jelly"]))), 2 * toastPrice, true, 1.2 * toastPrice * toastsToEat);
  acquire(toastsToEat, template_string_$item(yachtzee_diet_templateObject70 || (yachtzee_diet_templateObject70 = yachtzee_diet_taggedTemplateLiteral(["munchies pill"]))), 2.66 * VOA, false);
  acquire(extrosToChew, template_string_$item(yachtzee_diet_templateObject71 || (yachtzee_diet_templateObject71 = yachtzee_diet_taggedTemplateLiteral(["Extrovermectin\u2122"]))), 100000);
  acquire(pickleJuiceToDrink, template_string_$item(yachtzee_diet_templateObject72 || (yachtzee_diet_templateObject72 = yachtzee_diet_taggedTemplateLiteral(["jar of fermented pickle juice"]))), maxPickleJuicePrice);
  acquire(slidersToEat, template_string_$item(yachtzee_diet_templateObject73 || (yachtzee_diet_templateObject73 = yachtzee_diet_taggedTemplateLiteral(["extra-greasy slider"]))), maxSliderPrice);
  acquire(cologneToChew, template_string_$item(yachtzee_diet_templateObject74 || (yachtzee_diet_templateObject74 = yachtzee_diet_taggedTemplateLiteral(["beggin' cologne"]))), 2 * colognePrice);
  acquire(filters, template_string_$item(yachtzee_diet_templateObject75 || (yachtzee_diet_templateObject75 = yachtzee_diet_taggedTemplateLiteral(["mojo filter"]))), 2 * (0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(yachtzee_diet_templateObject76 || (yachtzee_diet_templateObject76 = yachtzee_diet_taggedTemplateLiteral(["mojo filter"])))));
  acquire(horseradishes, template_string_$item(yachtzee_diet_templateObject77 || (yachtzee_diet_templateObject77 = yachtzee_diet_taggedTemplateLiteral(["jumping horseradish"]))), 60000);
  acquire(borisBreads, template_string_$item(yachtzee_diet_templateObject78 || (yachtzee_diet_templateObject78 = yachtzee_diet_taggedTemplateLiteral(["Boris's bread"]))), 60000);
  acquire(deepDishPizzas, template_string_$item(yachtzee_diet_templateObject79 || (yachtzee_diet_templateObject79 = yachtzee_diet_taggedTemplateLiteral(["Deep Dish of Legend"]))), 1.2 * deepDishValue);

  // Get fishy turns
  (0,external_kolmafia_namespaceObject.print)("Getting fishy turns", "purple");
  optimizeForFishy(yachtzeeTurns, true);

  // Final checks
  if ((0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_diet_templateObject80 || (yachtzee_diet_templateObject80 = yachtzee_diet_taggedTemplateLiteral(["Fishy"])))) + 5 * (0,external_kolmafia_namespaceObject.toInt)(havePYECCharge) < yachtzeeTurns) {
    throw new Error("We only got ".concat((0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_diet_templateObject81 || (yachtzee_diet_templateObject81 = yachtzee_diet_taggedTemplateLiteral(["Fishy"])))), "/").concat(yachtzeeTurns, " turns of fishy!"));
  }
  _set("_garboYachtzeeChainDietPlanned", true);
  return true;
}
;// CONCATENATED MODULE: ./src/yachtzee/buffs.ts
var buffs_templateObject, buffs_templateObject2, buffs_templateObject3, buffs_templateObject4, buffs_templateObject5, buffs_templateObject6, buffs_templateObject7, buffs_templateObject8, buffs_templateObject9, buffs_templateObject10, buffs_templateObject11, buffs_templateObject12, buffs_templateObject13, buffs_templateObject14, buffs_templateObject15, buffs_templateObject16;
function buffs_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = buffs_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function buffs_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return buffs_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return buffs_arrayLikeToArray(o, minLen); }
function buffs_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function buffs_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }









function yachtzeePotionProfits(potion, yachtzeeTurns) {
  // If we have an unused PYEC then
  // 1) If we don't have an effect, +5 to gained effect duration
  // 2) If we already have an effect, +5 to existing effect duration
  // This means that the first use of a potion that we don't already have an effect of is more valuable than the next use
  var PYECOffset = pyecAvailable() ? 5 : 0;
  var existingOffset = (0,external_kolmafia_namespaceObject.haveEffect)(potion.effect()) ? PYECOffset : 0;
  var extraOffset = PYECOffset - existingOffset;
  var effectiveYachtzeeTurns = Math.max(Math.min(yachtzeeTurns - (0,external_kolmafia_namespaceObject.haveEffect)(potion.effect()) - existingOffset, potion.effectDuration() + extraOffset), 0);
  var embezzlerTurns = Math.min(expectedEmbezzlers, Math.max(potion.effectDuration() + extraOffset - effectiveYachtzeeTurns, 0));
  var barfTurns = Math.max(potion.effectDuration() + extraOffset - effectiveYachtzeeTurns - embezzlerTurns, 0);
  var embezzlerValue = embezzlerTurns > 0 ? potion.gross(embezzlerTurns) : 0;
  var yachtzeeValue = effectiveYachtzeeTurns * 2000 * (potion.meatDrop() + 2.5 * potion.familiarWeight()) / 100; // Every 1lbs of lep ~ 2.5% meat drop
  var barfValue = barfTurns * baseMeat * turnsToNC / (turnsToNC + 1);
  return yachtzeeValue + embezzlerValue + barfValue - potion.price(true);
}
function yachtzeePotionSetup(yachtzeeTurns, simOnly) {
  var totalProfits = 0;
  var PYECOffset = pyecAvailable() ? 5 : 0;
  var excludedEffects = new Set();
  shrugIrrelevantSongs();
  if (lib_have(template_string_$item(buffs_templateObject || (buffs_templateObject = buffs_taggedTemplateLiteral(["Eight Days a Week Pill Keeper"])))) && !property_get("_freePillKeeperUsed")) {
    var doublingPotions = farmingPotions.filter(potion => potion.canDouble && (0,external_kolmafia_namespaceObject.haveEffect)(potion.effect()) + PYECOffset * (lib_have(potion.effect()) ? 1 : 0) < yachtzeeTurns && yachtzeePotionProfits(potion.doubleDuration(), yachtzeeTurns) > 0 && potion.price(true) < (0,external_kolmafia_namespaceObject.myMeat)()).sort((left, right) => yachtzeePotionProfits(right.doubleDuration(), yachtzeeTurns) - yachtzeePotionProfits(left.doubleDuration(), yachtzeeTurns));
    var bestPotion = doublingPotions.length > 0 ? doublingPotions[0].doubleDuration() : undefined;
    if (bestPotion) {
      var profit = yachtzeePotionProfits(bestPotion, yachtzeeTurns);
      var price = bestPotion.price(true);
      totalProfits += profit;
      (0,external_kolmafia_namespaceObject.print)("Determined that ".concat(bestPotion.potion, " was the best potion to double"), "blue");
      (0,external_kolmafia_namespaceObject.print)("Expected to profit ".concat(profit, " meat from doubling 1 ").concat(bestPotion.potion, " @ price ").concat(price, " meat"), "blue");
      if (!simOnly) {
        (0,external_kolmafia_namespaceObject.cliExecute)("pillkeeper extend");
        acquire(1, bestPotion.potion, profit + price);
        bestPotion.use(1);
      } else excludedEffects.add(bestPotion.effect());
    }
  }
  var _iterator = buffs_createForOfIteratorHelper(getActiveEffects()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _mutuallyExclusive$ge;
      var effect = _step.value;
      var _iterator3 = buffs_createForOfIteratorHelper((_mutuallyExclusive$ge = mutuallyExclusive.get(effect)) !== null && _mutuallyExclusive$ge !== void 0 ? _mutuallyExclusive$ge : []),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var excluded = _step3.value;
          excludedEffects.add(excluded);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var testPotions = farmingPotions.filter(potion => (0,external_kolmafia_namespaceObject.haveEffect)(potion.effect()) + PYECOffset * (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.haveEffect)(potion.effect()) > 0) < yachtzeeTurns && yachtzeePotionProfits(potion, yachtzeeTurns) > 0).sort((left, right) => yachtzeePotionProfits(right, yachtzeeTurns) - yachtzeePotionProfits(left, yachtzeeTurns));
  var _iterator2 = buffs_createForOfIteratorHelper(testPotions),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var potion = _step2.value;
      var _effect = potion.effect();
      var _price2 = potion.price(true);
      if ((0,external_kolmafia_namespaceObject.haveEffect)(_effect) + PYECOffset * (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.haveEffect)(_effect) > 0) >= yachtzeeTurns || _price2 > (0,external_kolmafia_namespaceObject.myMeat)()) {
        continue;
      }
      if (!excludedEffects.has(_effect)) {
        var tries = 0;
        while ((0,external_kolmafia_namespaceObject.haveEffect)(_effect) + PYECOffset * (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.haveEffect)(_effect) > 0) < yachtzeeTurns) {
          tries++;
          (0,external_kolmafia_namespaceObject.print)("Considering effect ".concat(_effect, " from source ").concat(potion.potion), "blue");
          var _profit2 = yachtzeePotionProfits(potion, yachtzeeTurns);
          if (_profit2 < 0) break;
          var nPotions = lib_have(_effect) ? utils_clamp(Math.floor((yachtzeeTurns - (0,external_kolmafia_namespaceObject.haveEffect)(_effect) - PYECOffset) / potion.effectDuration()), 1, Math.max(1, yachtzeeTurns - PYECOffset)) : 1;
          totalProfits += nPotions * _profit2;
          (0,external_kolmafia_namespaceObject.print)("Expected to profit ".concat(nPotions * _profit2, " meat from using ").concat(nPotions, " ").concat(potion.potion, " @ price ").concat(_price2, " meat each"), "blue");
          if (!simOnly) {
            acquire(nPotions, potion.potion, _profit2 + _price2, false);
            if ((0,external_kolmafia_namespaceObject.itemAmount)(potion.potion) < 1) break;
            if (isSong(_effect) && !lib_have(_effect)) {
              var _iterator4 = buffs_createForOfIteratorHelper(lib_getActiveSongs()),
                _step4;
              try {
                var _loop = function _loop() {
                  var song = _step4.value;
                  var slot = Mood.defaultOptions.songSlots.find(slot => slot.includes(song));
                  if (!slot || slot.includes(_effect)) {
                    (0,external_kolmafia_namespaceObject.cliExecute)("shrug ".concat(song));
                  }
                };
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  _loop();
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }
            }
            if (!potion.use(Math.min((0,external_kolmafia_namespaceObject.itemAmount)(potion.potion), nPotions)) || tries >= 5 * Math.ceil(yachtzeeTurns / potion.effectDuration())) {
              break;
            } else if (potion.potion === template_string_$item(buffs_templateObject16 || (buffs_templateObject16 = buffs_taggedTemplateLiteral(["pocket wish"]))) && failedWishes.includes(potion.effect())) {
              break;
            }
          } else break;
        }
        if (lib_have(_effect) || simOnly) {
          var _mutuallyExclusive$ge2;
          var _iterator5 = buffs_createForOfIteratorHelper((_mutuallyExclusive$ge2 = mutuallyExclusive.get(_effect)) !== null && _mutuallyExclusive$ge2 !== void 0 ? _mutuallyExclusive$ge2 : []),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _excluded = _step5.value;
              excludedEffects.add(_excluded);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  if (!simOnly) {
    variableMeatPotionsSetup(yachtzeeTurns, expectedEmbezzlers);
    executeNextDietStep(true);
    if (pyecAvailable()) {
      (0,external_kolmafia_namespaceObject.maximize)("MP", false);
      if (lib_have(template_string_$item(buffs_templateObject2 || (buffs_templateObject2 = buffs_taggedTemplateLiteral(["Platinum Yendorian Express Card"]))))) {
        burnLibrams(200);
        (0,external_kolmafia_namespaceObject.use)(template_string_$item(buffs_templateObject3 || (buffs_templateObject3 = buffs_taggedTemplateLiteral(["Platinum Yendorian Express Card"]))));
      } else {
        withStash(template_string_$items(buffs_templateObject4 || (buffs_templateObject4 = buffs_taggedTemplateLiteral(["Platinum Yendorian Express Card"]))), () => {
          if (lib_have(template_string_$item(buffs_templateObject5 || (buffs_templateObject5 = buffs_taggedTemplateLiteral(["Platinum Yendorian Express Card"]))))) {
            burnLibrams(200);
            (0,external_kolmafia_namespaceObject.use)(template_string_$item(buffs_templateObject6 || (buffs_templateObject6 = buffs_taggedTemplateLiteral(["Platinum Yendorian Express Card"]))));
          }
        });
      }
    }
    if (lib_have(template_string_$item(buffs_templateObject7 || (buffs_templateObject7 = buffs_taggedTemplateLiteral(["License to Chill"])))) && !property_get("_licenseToChillUsed")) {
      burnLibrams(200);
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(buffs_templateObject8 || (buffs_templateObject8 = buffs_taggedTemplateLiteral(["License to Chill"]))));
    }
    if (!property_get("_bagOTricksUsed")) {
      withStash(template_string_$items(buffs_templateObject9 || (buffs_templateObject9 = buffs_taggedTemplateLiteral(["Bag o' Tricks"]))), () => {
        burnLibrams(200);
        (0,external_kolmafia_namespaceObject.use)(template_string_$item(buffs_templateObject10 || (buffs_templateObject10 = buffs_taggedTemplateLiteral(["Bag o' Tricks"]))));
      });
    }
    burnLibrams(200);
    _set("_PYECAvailable", false);
  }

  // Uncle Greenspan's may be cost effective
  if (!simOnly && !lib_have(template_string_$effect(buffs_templateObject11 || (buffs_templateObject11 = buffs_taggedTemplateLiteral(["Buy!  Sell!  Buy!  Sell!"]))))) {
    var yachtzeeFactor = yachtzeeTurns * (yachtzeeTurns + 1);
    var embezzlerFactor = Math.min(100, expectedEmbezzlers + yachtzeeTurns) * (Math.min(100, expectedEmbezzlers + yachtzeeTurns) + 1);
    var greenspanValue = (2000 * yachtzeeFactor + (baseMeat + 750) * (embezzlerFactor - yachtzeeFactor) + baseMeat * (10100 - embezzlerFactor)) / 100;
    var _price = garboValue(template_string_$item(buffs_templateObject12 || (buffs_templateObject12 = buffs_taggedTemplateLiteral(["Uncle Greenspan's Bathroom Finance Guide"]))));
    var _profit = greenspanValue - _price;
    if (_profit > 0) {
      (0,external_kolmafia_namespaceObject.print)("Expected to profit ".concat(_profit, " meat from using 1 Uncle Greenspan's Bathroom Finance Guide @ price ").concat(_price, " meat"), "blue");
      acquire(1, template_string_$item(buffs_templateObject13 || (buffs_templateObject13 = buffs_taggedTemplateLiteral(["Uncle Greenspan's Bathroom Finance Guide"]))), greenspanValue, false);
      if (lib_have(template_string_$item(buffs_templateObject14 || (buffs_templateObject14 = buffs_taggedTemplateLiteral(["Uncle Greenspan's Bathroom Finance Guide"]))))) {
        (0,external_kolmafia_namespaceObject.use)(1, template_string_$item(buffs_templateObject15 || (buffs_templateObject15 = buffs_taggedTemplateLiteral(["Uncle Greenspan's Bathroom Finance Guide"]))));
      }
    }
  }
  return totalProfits;
}
;// CONCATENATED MODULE: ./src/yachtzee/index.ts
var yachtzee_templateObject, yachtzee_templateObject2, yachtzee_templateObject3, yachtzee_templateObject4, yachtzee_templateObject5, yachtzee_templateObject6, yachtzee_templateObject7, yachtzee_templateObject8, yachtzee_templateObject9, yachtzee_templateObject10, yachtzee_templateObject11, yachtzee_templateObject12, yachtzee_templateObject13;
function yachtzee_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
















function _yachtzeeChain() {
  if (!(0,external_kolmafia_namespaceObject.canInteract)()) return;
  // We definitely need to be able to eat sliders and drink pickle juice
  if (!realmAvailable("sleaze")) return;
  (0,external_kolmafia_namespaceObject.maximize)("MP", false);
  meatMood(false, 750 + baseMeat).execute(embezzlerCount());
  potionSetup(false); // This is the default set up for embezzlers (which helps us estimate if chaining is better than extros)
  maximizeMeat();
  prepareOutfitAndFamiliar();
  var meatLimit = 5000000;
  if ((0,external_kolmafia_namespaceObject.myMeat)() > meatLimit) {
    var meatToCloset = (0,external_kolmafia_namespaceObject.myMeat)() - meatLimit;
    (0,external_kolmafia_namespaceObject.print)("");
    (0,external_kolmafia_namespaceObject.print)("");
    (0,external_kolmafia_namespaceObject.print)("We are going to closet all-but-5million meat for your safety!", "blue");
    (0,external_kolmafia_namespaceObject.print)("");
    (0,external_kolmafia_namespaceObject.print)("");
    if (!property_get("_yachtzeeChainClosetedMeat")) {
      _set("_yachtzeeChainClosetedMeat", meatToCloset);
    } else {
      _set("_yachtzeeChainClosetedMeat", meatToCloset + property_get("_yachtzeeChainClosetedMeat"));
    }
    (0,external_kolmafia_namespaceObject.cliExecute)("closet put ".concat(meatToCloset, " meat"));
  }
  if (!yachtzeeChainDiet()) {
    (0,external_kolmafia_namespaceObject.cliExecute)("closet take ".concat(property_get("_yachtzeeChainClosetedMeat"), " meat"));
    _set("_yachtzeeChainClosetedMeat", 0);
    return;
  }
  var jellyTurns = property_get("_stenchJellyChargeTarget", 0);
  var fishyTurns = (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_templateObject || (yachtzee_templateObject = yachtzee_taggedTemplateLiteral(["Fishy"])))) + (pyecAvailable() ? 5 : 0);
  var turncount = (0,external_kolmafia_namespaceObject.myTurncount)();
  yachtzeePotionSetup(Math.min(jellyTurns, fishyTurns));
  stickerSetup(Math.min(jellyTurns, fishyTurns));
  (0,external_kolmafia_namespaceObject.cliExecute)("closet take ".concat(property_get("_yachtzeeChainClosetedMeat"), " meat"));
  _set("_yachtzeeChainClosetedMeat", 0);
  if ((0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_templateObject2 || (yachtzee_templateObject2 = yachtzee_taggedTemplateLiteral(["Beaten Up"]))))) {
    lib_uneffect(template_string_$effect(yachtzee_templateObject3 || (yachtzee_templateObject3 = yachtzee_taggedTemplateLiteral(["Beaten Up"]))));
  }
  meatMood(false, 2000).execute(Math.min(jellyTurns, fishyTurns));
  safeRestore();
  var plantCrookweed = true;
  _set("choiceAdventure918", 2);
  while (Math.min(jellyTurns, fishyTurns) > 0) {
    executeNextDietStep();
    if (!property_get("_stenchJellyUsed", false)) throw new Error("We did not use stench jellies");
    // Switch familiars in case changes in fam weight from buffs means our current familiar is no longer optimal
    prepareOutfitAndFamiliar();
    if (!lib_have(template_string_$effect(yachtzee_templateObject4 || (yachtzee_templateObject4 = yachtzee_taggedTemplateLiteral(["Really Deep Breath"]))))) {
      var bestWaterBreathingEquipment = getBestWaterBreathingEquipment(Math.min(jellyTurns, fishyTurns));
      if (bestWaterBreathingEquipment.item !== template_string_$item.none) (0,external_kolmafia_namespaceObject.equip)(bestWaterBreathingEquipment.item);
      if ((0,external_kolmafia_namespaceObject.haveEquipped)(template_string_$item(yachtzee_templateObject5 || (yachtzee_templateObject5 = yachtzee_taggedTemplateLiteral(["The Crown of Ed the Undying"])))) && !(0,external_kolmafia_namespaceObject.booleanModifier)("Adventure Underwater")) {
        (0,external_kolmafia_namespaceObject.cliExecute)("edpiece fish");
      }
    }
    if (!lib_have(template_string_$effect(yachtzee_templateObject6 || (yachtzee_templateObject6 = yachtzee_taggedTemplateLiteral(["Polka of Plenty"]))))) {
      if (lib_have(template_string_$effect(yachtzee_templateObject7 || (yachtzee_templateObject7 = yachtzee_taggedTemplateLiteral(["Ode to Booze"]))))) (0,external_kolmafia_namespaceObject.cliExecute)("shrug ".concat(template_string_$effect(yachtzee_templateObject8 || (yachtzee_templateObject8 = yachtzee_taggedTemplateLiteral(["Ode to Booze"])))));
      if (lib_getActiveSongs().length < (lib_have($skill(yachtzee_templateObject9 || (yachtzee_templateObject9 = yachtzee_taggedTemplateLiteral(["Mariachi Memory"])))) ? 4 : 3) && lib_have($skill(yachtzee_templateObject10 || (yachtzee_templateObject10 = yachtzee_taggedTemplateLiteral(["The Polka of Plenty"]))))) {
        (0,external_kolmafia_namespaceObject.useSkill)($skill(yachtzee_templateObject11 || (yachtzee_templateObject11 = yachtzee_taggedTemplateLiteral(["The Polka of Plenty"]))));
      }
    }
    garboAdventure($location(yachtzee_templateObject12 || (yachtzee_templateObject12 = yachtzee_taggedTemplateLiteral(["The Sunken Party Yacht"]))), combat_Macro.abort());
    postCombatActions();
    if ((0,external_kolmafia_namespaceObject.myTurncount)() > turncount || (0,external_kolmafia_namespaceObject.haveEffect)(template_string_$effect(yachtzee_templateObject13 || (yachtzee_templateObject13 = yachtzee_taggedTemplateLiteral(["Fishy"])))) < fishyTurns) {
      fishyTurns -= 1;
      jellyTurns -= 1;
      turncount = (0,external_kolmafia_namespaceObject.myTurncount)();
      _set("_stenchJellyChargeTarget", property_get("_stenchJellyChargeTarget", 0) - 1);
      _set("_stenchJellyUsed", false);
    }
    if (plantCrookweed && (0,external_kolmafia_namespaceObject.visitUrl)("forestvillage.php").includes("friarcottage.gif") && !property_get("_floristPlantsUsed").split(",").includes("Crookweed")) {
      (0,external_kolmafia_namespaceObject.cliExecute)("florist plant Crookweed");
    }
    plantCrookweed = false;
    doSausage();
  }
  _set("choiceAdventure918", "");
}
function yachtzeeChain() {
  if (!config_globalOptions.prefs.yachtzeechain) return;
  if (property_get("_garboYachtzeeChainCompleted", false)) return;
  (0,external_kolmafia_namespaceObject.print)("Running Yachtzee Chain", "purple");
  _yachtzeeChain();
  _set("_garboYachtzeeChainCompleted", true);
  config_globalOptions.prefs.yachtzeechain = false;
  if (!config_globalOptions.nodiet) {
    shrugIrrelevantSongs();
    runDiet();
    prepRobortender(); // Recompute robo drinks' worth after diet is finally consumed
  }

  freeRunFights();
}
;// CONCATENATED MODULE: ./src/barfTurn.ts
var barfTurn_templateObject, barfTurn_templateObject2, barfTurn_templateObject3, barfTurn_templateObject4, barfTurn_templateObject5, barfTurn_templateObject6, barfTurn_templateObject7, barfTurn_templateObject8, barfTurn_templateObject9, barfTurn_templateObject10, barfTurn_templateObject11, barfTurn_templateObject12, barfTurn_templateObject13, barfTurn_templateObject14, barfTurn_templateObject15, barfTurn_templateObject16, barfTurn_templateObject17, barfTurn_templateObject18, barfTurn_templateObject19, barfTurn_templateObject20, barfTurn_templateObject21, barfTurn_templateObject22, barfTurn_templateObject23, barfTurn_templateObject24, barfTurn_templateObject25, barfTurn_templateObject26, barfTurn_templateObject27, barfTurn_templateObject28, barfTurn_templateObject29, barfTurn_templateObject30, barfTurn_templateObject31, barfTurn_templateObject32, barfTurn_templateObject33, barfTurn_templateObject34, barfTurn_templateObject35, barfTurn_templateObject36, barfTurn_templateObject37, barfTurn_templateObject38, barfTurn_templateObject39, barfTurn_templateObject40, barfTurn_templateObject41, barfTurn_templateObject42, barfTurn_templateObject43, barfTurn_templateObject44, barfTurn_templateObject45, barfTurn_templateObject46, barfTurn_templateObject47, barfTurn_templateObject48, barfTurn_templateObject49, barfTurn_templateObject50, barfTurn_templateObject51, barfTurn_templateObject52, barfTurn_templateObject53, barfTurn_templateObject54, barfTurn_templateObject55, barfTurn_templateObject56, barfTurn_templateObject57, barfTurn_templateObject58, barfTurn_templateObject59, barfTurn_templateObject60, barfTurn_templateObject61, barfTurn_templateObject62, barfTurn_templateObject63, barfTurn_templateObject64, barfTurn_templateObject65, barfTurn_templateObject66, barfTurn_templateObject67, barfTurn_templateObject68, barfTurn_templateObject69, barfTurn_templateObject70, barfTurn_templateObject71, barfTurn_templateObject72, barfTurn_templateObject73, barfTurn_templateObject74;
function barfTurn_toConsumableArray(arr) { return barfTurn_arrayWithoutHoles(arr) || barfTurn_iterableToArray(arr) || barfTurn_unsupportedIterableToArray(arr) || barfTurn_nonIterableSpread(); }
function barfTurn_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function barfTurn_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function barfTurn_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return barfTurn_arrayLikeToArray(arr); }
function barfTurn_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = barfTurn_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function barfTurn_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return barfTurn_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return barfTurn_arrayLikeToArray(o, minLen); }
function barfTurn_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function barfTurn_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }














var barfTurn_embezzler = $monster(barfTurn_templateObject || (barfTurn_templateObject = barfTurn_taggedTemplateLiteral(["Knob Goblin Embezzler"])));
function embezzlerPrep() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  (0,external_kolmafia_namespaceObject.useFamiliar)(meatFamiliar());
  meatOutfit(true, options.requirements, options.sea);
}
function freeFightPrep(requirements) {
  (0,external_kolmafia_namespaceObject.useFamiliar)(freeFightFamiliar());
  freeFightOutfit(requirements);
}
function logEmbezzler(encounterType) {
  var isDigitize = encounterType === "Digitize Wanderer";
  isDigitize ? embezzlerLog.digitizedEmbezzlersFought++ : embezzlerLog.initialEmbezzlersFought++;
  embezzlerLog.sources.push(isDigitize ? "Digitize" : "Unknown Source");
}
function shouldGoUnderwater() {
  if (!sober()) return false;
  if ((0,external_kolmafia_namespaceObject.myLevel)() < 11) return false;
  if (lib_questStep("questS01OldGuy") === -1) {
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=sea_oldman&action=oldman_oldman");
  }
  if (!modifier_get("Adventure Underwater") && waterBreathingEquipment.every(item => !lib_have(item))) {
    return false;
  }
  if (!modifier_get("Underwater Familiar") && familiarWaterBreathingEquipment.every(item => !lib_have(item))) {
    return false;
  }
  if (lib_have(template_string_$item(barfTurn_templateObject2 || (barfTurn_templateObject2 = barfTurn_taggedTemplateLiteral(["envyfish egg"]))))) return false;
  if (!(0,external_kolmafia_namespaceObject.canAdventure)($location(barfTurn_templateObject3 || (barfTurn_templateObject3 = barfTurn_taggedTemplateLiteral(["The Briny Deeps"]))))) return false;
  if ((0,external_kolmafia_namespaceObject.mallPrice)(template_string_$item(barfTurn_templateObject4 || (barfTurn_templateObject4 = barfTurn_taggedTemplateLiteral(["pulled green taffy"])))) < EMBEZZLER_MULTIPLIER() * property_get("valueOfAdventure")) {
    return false;
  }
  return lib_have(template_string_$effect(barfTurn_templateObject5 || (barfTurn_templateObject5 = barfTurn_taggedTemplateLiteral(["Fishy"])))) || lib_have(template_string_$item(barfTurn_templateObject6 || (barfTurn_templateObject6 = barfTurn_taggedTemplateLiteral(["fishy pipe"])))) && (0,external_kolmafia_namespaceObject.use)(template_string_$item(barfTurn_templateObject7 || (barfTurn_templateObject7 = barfTurn_taggedTemplateLiteral(["fishy pipe"]))));
}

// Lights Out adventures require you to take several choices in a row
var steveAdventures = new Map([[$location(barfTurn_templateObject8 || (barfTurn_templateObject8 = barfTurn_taggedTemplateLiteral(["The Haunted Bedroom"]))), [1, 3, 1]], [$location(barfTurn_templateObject9 || (barfTurn_templateObject9 = barfTurn_taggedTemplateLiteral(["The Haunted Nursery"]))), [1, 2, 2, 1, 1]], [$location(barfTurn_templateObject10 || (barfTurn_templateObject10 = barfTurn_taggedTemplateLiteral(["The Haunted Conservatory"]))), [1, 2, 2]], [$location(barfTurn_templateObject11 || (barfTurn_templateObject11 = barfTurn_taggedTemplateLiteral(["The Haunted Billiards Room"]))), [1, 2, 2]], [$location(barfTurn_templateObject12 || (barfTurn_templateObject12 = barfTurn_taggedTemplateLiteral(["The Haunted Wine Cellar"]))), [1, 2, 2, 3]], [$location(barfTurn_templateObject13 || (barfTurn_templateObject13 = barfTurn_taggedTemplateLiteral(["The Haunted Boiler Room"]))), [1, 2, 2]], [$location(barfTurn_templateObject14 || (barfTurn_templateObject14 = barfTurn_taggedTemplateLiteral(["The Haunted Laboratory"]))), [1, 1, 3, 1, 1]]]);
var Sobriety;
/**
 * Describes an action we could take as part of our barf-turn loop.
 * Has a name, a a function to determine availability, and a function that executes the turn.
 * Execute function returns whether we succeeded.
 */
(function (Sobriety) {
  Sobriety["SOBER"] = "sober";
  Sobriety["DRUNK"] = "drunk";
  Sobriety["EITHER"] = "either";
})(Sobriety || (Sobriety = {}));
// This is roughly ordered by the encounter ontology, followed by general priority
var turns = [{
  name: "Lights Out",
  available: () => {
    var _get;
    return (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() % 37 === 0 && (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() !== property_get("lastLightsOutTurn") && (0,external_kolmafia_namespaceObject.canAdventure)((_get = property_get("nextSpookyravenStephenRoom")) !== null && _get !== void 0 ? _get : $location(barfTurn_templateObject15 || (barfTurn_templateObject15 = barfTurn_taggedTemplateLiteral(["none"]))));
  },
  execute: () => {
    var steveRoom = property_get("nextSpookyravenStephenRoom");
    var ghostLocation = property_get("ghostLocation");
    if (steveRoom && (0,external_kolmafia_namespaceObject.canAdventure)(steveRoom) && steveRoom !== ghostLocation) {
      var fightingSteve = steveRoom === $location(barfTurn_templateObject16 || (barfTurn_templateObject16 = barfTurn_taggedTemplateLiteral(["The Haunted Laboratory"])));
      // Technically drops 500 meat, but that's close enough for me.
      var drunkRequirement = sober() ? undefined : new Requirement([], {
        forceEquip: template_string_$items(barfTurn_templateObject17 || (barfTurn_templateObject17 = barfTurn_taggedTemplateLiteral(["Drunkula's wineglass"])))
      });
      if (fightingSteve) embezzlerPrep({
        requirements: drunkRequirement
      });
      var plan = steveAdventures.get(steveRoom);
      if (plan) {
        withMacro(combat_Macro.if_($monster(barfTurn_templateObject18 || (barfTurn_templateObject18 = barfTurn_taggedTemplateLiteral(["Stephen Spookyraven"]))), combat_Macro.basicCombat()).abort(), () => {
          (0,external_kolmafia_namespaceObject.visitUrl)((0,external_kolmafia_namespaceObject.toUrl)(steveRoom));
          var _iterator = barfTurn_createForOfIteratorHelper(plan),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var choiceValue = _step.value;
              (0,external_kolmafia_namespaceObject.runChoice)(choiceValue);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          if (fightingSteve || (0,external_kolmafia_namespaceObject.currentRound)()) (0,external_kolmafia_namespaceObject.runCombat)();
        }, true);
      }
      return (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() === property_get("lastLightsOutTurn");
    }
    return false;
  },
  spendsTurn: () => property_get("nextSpookyravenStephenRoom") === $location(barfTurn_templateObject19 || (barfTurn_templateObject19 = barfTurn_taggedTemplateLiteral(["The Haunted Laboratory"]))),
  sobriety: Sobriety.EITHER
}, {
  name: "Proton Ghost",
  available: () => lib_have(template_string_$item(barfTurn_templateObject20 || (barfTurn_templateObject20 = barfTurn_taggedTemplateLiteral(["protonic accelerator pack"])))) && property_get("questPAGhost") !== "unstarted" && !!property_get("ghostLocation"),
  execute: () => {
    var ghostLocation = property_get("ghostLocation");
    if (!ghostLocation) return false;
    freeFightPrep(new Requirement(ghostLocation === $location(barfTurn_templateObject21 || (barfTurn_templateObject21 = barfTurn_taggedTemplateLiteral(["The Icy Peak"]))) ? ["Cold Resistance 5 min"] : [], {
      forceEquip: template_string_$items(barfTurn_templateObject22 || (barfTurn_templateObject22 = barfTurn_taggedTemplateLiteral(["protonic accelerator pack"])))
    }));
    garboAdventure(ghostLocation, combat_Macro.ghostBustin());
    return property_get("questPAGhost") === "unstarted";
  },
  spendsTurn: false,
  // Ghost fights are currently hard
  // and they resist physical attacks!
  sobriety: Sobriety.SOBER
}, {
  name: "Vote Wanderer",
  available: () => lib_have(template_string_$item(barfTurn_templateObject23 || (barfTurn_templateObject23 = barfTurn_taggedTemplateLiteral(["\"I Voted!\" sticker"])))) && (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() % 11 === 1 && property_get("lastVoteMonsterTurn") < (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() && property_get("_voteFreeFights") < 3,
  execute: () => {
    var isGhost = property_get("_voteMonster") === $monster(barfTurn_templateObject24 || (barfTurn_templateObject24 = barfTurn_taggedTemplateLiteral(["angry ghost"])));
    var isMutant = property_get("_voteMonster") === $monster(barfTurn_templateObject25 || (barfTurn_templateObject25 = barfTurn_taggedTemplateLiteral(["terrible mutant"])));
    freeFightPrep(new Requirement([], {
      forceEquip: [template_string_$item(barfTurn_templateObject26 || (barfTurn_templateObject26 = barfTurn_taggedTemplateLiteral(["\"I Voted!\" sticker"])))].concat(barfTurn_toConsumableArray(!sober() && !isGhost ? template_string_$items(barfTurn_templateObject27 || (barfTurn_templateObject27 = barfTurn_taggedTemplateLiteral(["Drunkula's wineglass"]))) : []), barfTurn_toConsumableArray(!lib_have(template_string_$item(barfTurn_templateObject28 || (barfTurn_templateObject28 = barfTurn_taggedTemplateLiteral(["mutant crown"])))) && isMutant ? template_string_$items(barfTurn_templateObject29 || (barfTurn_templateObject29 = barfTurn_taggedTemplateLiteral(["mutant arm, mutant legs"]))).filter(i => lib_have(i)) : []))
    }));
    garboAdventureAuto(isGhost ? drunkSafeWander("wanderer") : wanderWhere("wanderer"), combat_Macro.basicCombat());
    return property_get("lastVoteMonsterTurn") === (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
  },
  spendsTurn: false,
  sobriety: Sobriety.EITHER
}, {
  name: "Digitize Wanderer",
  available: () => counter_get("Digitize Monster") <= 0,
  execute: () => {
    // This check exists primarily for the ease of modded garbos
    var isEmbezzler = getDigitizeMonster() === barfTurn_embezzler;
    var start = property_get("_sourceTerminalDigitizeMonsterCount");
    var underwater = isEmbezzler && shouldGoUnderwater();
    var targetLocation = underwater ? $location(barfTurn_templateObject30 || (barfTurn_templateObject30 = barfTurn_taggedTemplateLiteral(["The Briny Deeps"]))) : drunkSafeWander("wanderer");
    if (underwater) (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(barfTurn_templateObject31 || (barfTurn_templateObject31 = barfTurn_taggedTemplateLiteral(["pulled green taffy"]))));
    isEmbezzler ? embezzlerPrep({
      sea: underwater
    }) : freeFightPrep();
    garboAdventureAuto(targetLocation, combat_Macro.externalIf(underwater, combat_Macro.item(template_string_$item(barfTurn_templateObject32 || (barfTurn_templateObject32 = barfTurn_taggedTemplateLiteral(["pulled green taffy"]))))).meatKill(),
    // Hacky fix for when we fail init to embezzler, who are special monsters
    // Macro autoattacks fail when you lose the jump to special monsters
    combat_Macro.if_("(monsterid ".concat(barfTurn_embezzler.id, ") && !gotjump && !(pastround 2)"), combat_Macro.externalIf(underwater, combat_Macro.item(template_string_$item(barfTurn_templateObject33 || (barfTurn_templateObject33 = barfTurn_taggedTemplateLiteral(["pulled green taffy"]))))).meatKill()).abort());
    return property_get("_sourceTerminalDigitizeMonsterCount") !== start;
  },
  spendsTurn: () => {
    var _SourceTerminal$getDi;
    return !((_SourceTerminal$getDi = getDigitizeMonster()) !== null && _SourceTerminal$getDi !== void 0 && _SourceTerminal$getDi.attributes.includes("FREE"));
  },
  sobriety: Sobriety.EITHER
}, {
  name: "Guaranteed Kramco",
  available: () => kramcoGuaranteed() && romanticMonsterImpossible(),
  execute: () => {
    freeFightPrep(new Requirement([], {
      forceEquip: template_string_$items(barfTurn_templateObject34 || (barfTurn_templateObject34 = barfTurn_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))
    }));
    garboAdventureAuto(drunkSafeWander("wanderer"), combat_Macro.basicCombat());
    return !kramcoGuaranteed();
  },
  spendsTurn: false,
  sobriety: Sobriety.EITHER
}, {
  name: "Void Monster",
  available: () => lib_have(template_string_$item(barfTurn_templateObject35 || (barfTurn_templateObject35 = barfTurn_taggedTemplateLiteral(["cursed magnifying glass"])))) && property_get("cursedMagnifyingGlassCount") === 13 && property_get("_voidFreeFights") < 5,
  execute: () => {
    freeFightPrep(new Requirement([], {
      forceEquip: template_string_$items(barfTurn_templateObject36 || (barfTurn_templateObject36 = barfTurn_taggedTemplateLiteral(["cursed magnifying glass"])))
    }));
    garboAdventureAuto(drunkSafeWander("wanderer"), combat_Macro.basicCombat());
    return property_get("cursedMagnifyingGlassCount") === 0;
  },
  spendsTurn: false,
  sobriety: Sobriety.EITHER
}, {
  name: "Envyfish Egg",
  available: () => lib_have(template_string_$item(barfTurn_templateObject37 || (barfTurn_templateObject37 = barfTurn_taggedTemplateLiteral(["envyfish egg"])))) && property_get("envyfishMonster") === barfTurn_embezzler && !property_get("_envyfishEggUsed"),
  execute: () => {
    embezzlerPrep();
    withMacro(combat_Macro.meatKill(), () => (0,external_kolmafia_namespaceObject.use)(template_string_$item(barfTurn_templateObject38 || (barfTurn_templateObject38 = barfTurn_taggedTemplateLiteral(["envyfish egg"])))), true);
    return property_get("_envyfishEggUsed");
  },
  spendsTurn: true,
  sobriety: Sobriety.EITHER
}, {
  name: "Spit Acid",
  available: () => lib_have(template_string_$item(barfTurn_templateObject39 || (barfTurn_templateObject39 = barfTurn_taggedTemplateLiteral(["Jurassic Parka"])))) && !lib_have(template_string_$effect(barfTurn_templateObject40 || (barfTurn_templateObject40 = barfTurn_taggedTemplateLiteral(["Everything Looks Yellow"])))) && romanticMonsterImpossible(),
  execute: () => {
    var usingDuplicate = SourceTerminal_have() && duplicateUsesRemaining() > 0;
    var location = wanderWhere("yellow ray");
    var familiar = freeFightFamiliar({
      location: location,
      allowAttackFamiliars: !usingDuplicate
    });
    (0,external_kolmafia_namespaceObject.useFamiliar)(familiar);
    freeFightOutfit(new Requirement([], {
      forceEquip: template_string_$items(barfTurn_templateObject41 || (barfTurn_templateObject41 = barfTurn_taggedTemplateLiteral(["Jurassic Parka"])))
    }));
    (0,external_kolmafia_namespaceObject.cliExecute)("parka dilophosaur");
    if (usingDuplicate) {
      educate([$skill(barfTurn_templateObject42 || (barfTurn_templateObject42 = barfTurn_taggedTemplateLiteral(["Extract"]))), $skill(barfTurn_templateObject43 || (barfTurn_templateObject43 = barfTurn_taggedTemplateLiteral(["Duplicate"])))]);
    }
    var macro = combat_Macro.if_(barfTurn_embezzler, combat_Macro.meatKill()).familiarActions().externalIf(usingDuplicate, combat_Macro.trySkill($skill(barfTurn_templateObject44 || (barfTurn_templateObject44 = barfTurn_taggedTemplateLiteral(["Duplicate"]))))).skill($skill(barfTurn_templateObject45 || (barfTurn_templateObject45 = barfTurn_taggedTemplateLiteral(["Spit jurassic acid"]))));
    garboAdventureAuto(location, macro);
    if (SourceTerminal_have()) {
      educate([$skill(barfTurn_templateObject46 || (barfTurn_templateObject46 = barfTurn_taggedTemplateLiteral(["Extract"]))), $skill(barfTurn_templateObject47 || (barfTurn_templateObject47 = barfTurn_taggedTemplateLiteral(["Digitize"])))]);
    }
    return lib_have(template_string_$effect(barfTurn_templateObject48 || (barfTurn_templateObject48 = barfTurn_taggedTemplateLiteral(["Everything Looks Yellow"]))));
  },
  spendsTurn: false,
  sobriety: Sobriety.SOBER
}, {
  name: "Shocking Lick",
  available: () => property_get("shockingLickCharges") > 0 && romanticMonsterImpossible(),
  execute: () => {
    var curLicks = property_get("shockingLickCharges");
    var usingDuplicate = SourceTerminal_have() && duplicateUsesRemaining() > 0;
    var location = wanderWhere("yellow ray");
    var familiar = freeFightFamiliar({
      location: location,
      allowAttackFamiliars: !usingDuplicate
    });
    (0,external_kolmafia_namespaceObject.useFamiliar)(familiar);
    if (usingDuplicate) {
      educate([$skill(barfTurn_templateObject49 || (barfTurn_templateObject49 = barfTurn_taggedTemplateLiteral(["Extract"]))), $skill(barfTurn_templateObject50 || (barfTurn_templateObject50 = barfTurn_taggedTemplateLiteral(["Duplicate"])))]);
    }
    var macro = combat_Macro.if_(barfTurn_embezzler, combat_Macro.meatKill()).familiarActions().externalIf(usingDuplicate, combat_Macro.trySkill($skill(barfTurn_templateObject51 || (barfTurn_templateObject51 = barfTurn_taggedTemplateLiteral(["Duplicate"]))))).skill($skill(barfTurn_templateObject52 || (barfTurn_templateObject52 = barfTurn_taggedTemplateLiteral(["Shocking Lick"]))));
    garboAdventureAuto(location, macro);
    if (SourceTerminal_have()) {
      educate([$skill(barfTurn_templateObject53 || (barfTurn_templateObject53 = barfTurn_taggedTemplateLiteral(["Extract"]))), $skill(barfTurn_templateObject54 || (barfTurn_templateObject54 = barfTurn_taggedTemplateLiteral(["Digitize"])))]);
    }
    return property_get("shockingLickCharges") === curLicks - 1;
  },
  spendsTurn: false,
  sobriety: Sobriety.SOBER
}, {
  name: "Map for Pills",
  available: () => config_globalOptions.ascend && utils_clamp((0,external_kolmafia_namespaceObject.myAdventures)() - digitizedMonstersRemaining(), 1, (0,external_kolmafia_namespaceObject.myAdventures)()) <= (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(barfTurn_templateObject55 || (barfTurn_templateObject55 = barfTurn_taggedTemplateLiteral(["Map to Safety Shelter Grimace Prime"])))),
  execute: () => {
    var choiceToSet = (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(barfTurn_templateObject56 || (barfTurn_templateObject56 = barfTurn_taggedTemplateLiteral(["distention pill"])))) < (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(barfTurn_templateObject57 || (barfTurn_templateObject57 = barfTurn_taggedTemplateLiteral(["synthetic dog hair pill"])))) + (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(barfTurn_templateObject58 || (barfTurn_templateObject58 = barfTurn_taggedTemplateLiteral(["Map to Safety Shelter Grimace Prime"])))) ? 1 : 2;
    setChoice(536, choiceToSet);
    ensureEffect(template_string_$effect(barfTurn_templateObject59 || (barfTurn_templateObject59 = barfTurn_taggedTemplateLiteral(["Transpondent"]))));
    (0,external_kolmafia_namespaceObject.use)(template_string_$item(barfTurn_templateObject60 || (barfTurn_templateObject60 = barfTurn_taggedTemplateLiteral(["Map to Safety Shelter Grimace Prime"]))));
    return true;
  },
  spendsTurn: true,
  sobriety: Sobriety.DRUNK
}, {
  name: "Barf",
  available: () => true,
  execute: () => {
    (0,external_kolmafia_namespaceObject.useFamiliar)(barfFamiliar());
    var lubing = property_get("dinseyRollercoasterNext") && lib_have(template_string_$item(barfTurn_templateObject61 || (barfTurn_templateObject61 = barfTurn_taggedTemplateLiteral(["lube-shoes"]))));
    meatOutfit(false, lubing ? new Requirement([], {
      forceEquip: template_string_$items(barfTurn_templateObject62 || (barfTurn_templateObject62 = barfTurn_taggedTemplateLiteral(["lube-shoes"])))
    }) : undefined);
    garboAdventureAuto($location(barfTurn_templateObject63 || (barfTurn_templateObject63 = barfTurn_taggedTemplateLiteral(["Barf Mountain"]))), combat_Macro.meatKill(), combat_Macro.if_("(monsterid ".concat($monster(barfTurn_templateObject64 || (barfTurn_templateObject64 = barfTurn_taggedTemplateLiteral(["Knob Goblin Embezzler"]))).id, ") && !gotjump && !(pastround 2)"), combat_Macro.meatKill()).abort());
    completeBarfQuest();
    return true;
  },
  spendsTurn: true,
  sobriety: Sobriety.EITHER
}];
function runTurn() {
  var validSobrieties = [Sobriety.EITHER, sober() ? Sobriety.SOBER : Sobriety.DRUNK];
  var turn = turns.find(t => t.available() && validSobrieties.includes(t.sobriety));
  if (!turn) throw new Error("Somehow failed to find anything to do!");
  var expectToSpendATurn = typeof turn.spendsTurn === "function" ? turn.spendsTurn() : turn.spendsTurn;
  (0,external_kolmafia_namespaceObject.print)("Now running barf-turn: ".concat(turn.name, "."));
  var startTurns = (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
  var success = turn.execute();
  var spentATurn = (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() - startTurns === 1;
  if (spentATurn) {
    if (!expectToSpendATurn) (0,external_kolmafia_namespaceObject.print)("We unexpectedly spent a turn doing ".concat(turn.name, "!"), "red");
    var foughtAnEmbezzler = property_get("lastEncounter") === "Knob Goblin Embezzler";
    if (foughtAnEmbezzler) logEmbezzler(turn.name);
    var needTurns = (0,external_kolmafia_namespaceObject.myAdventures)() === 1 + config_globalOptions.saveTurns && sober();
    if (needTurns) generateTurnsAtEndOfDay();
  }
  return {
    success: success,
    spentATurn: spentATurn
  };
}
function barfTurn() {
  if (SourceTerminal_have()) educate([$skill(barfTurn_templateObject65 || (barfTurn_templateObject65 = barfTurn_taggedTemplateLiteral(["Extract"]))), $skill(barfTurn_templateObject66 || (barfTurn_templateObject66 = barfTurn_taggedTemplateLiteral(["Digitize"])))]);
  tryFillLatte();
  meatMood().execute(estimatedGarboTurns());
  safeRestore();
  var failures = 0;
  while (failures < 3) {
    var _runTurn = runTurn(),
      success = _runTurn.success,
      spentATurn = _runTurn.spentATurn;
    if (success) return;
    failures++;
    if (spentATurn) postCombatActions();
  }
  throw new Error("Tried thrice to adventure, and failed each time. Aborting.");
}
function generateTurnsAtEndOfDay() {
  deliverThesisIfAble();
  if (lib_have(template_string_$item(barfTurn_templateObject67 || (barfTurn_templateObject67 = barfTurn_taggedTemplateLiteral(["Kramco Sausage-o-Matic\u2122"])))) && (lib_have(template_string_$item(barfTurn_templateObject68 || (barfTurn_templateObject68 = barfTurn_taggedTemplateLiteral(["magical sausage"])))) || lib_have(template_string_$item(barfTurn_templateObject69 || (barfTurn_templateObject69 = barfTurn_taggedTemplateLiteral(["magical sausage casing"]))))) && property_get("_sausagesEaten") < 23) {
    var available = utils_clamp(23 - property_get("_sausagesEaten"), 0, (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(barfTurn_templateObject70 || (barfTurn_templateObject70 = barfTurn_taggedTemplateLiteral(["magical sausage"])))) + (0,external_kolmafia_namespaceObject.itemAmount)(template_string_$item(barfTurn_templateObject71 || (barfTurn_templateObject71 = barfTurn_taggedTemplateLiteral(["magical sausage casing"])))));
    (0,external_kolmafia_namespaceObject.eat)(available, template_string_$item(barfTurn_templateObject72 || (barfTurn_templateObject72 = barfTurn_taggedTemplateLiteral(["magical sausage"]))));
  }
  if (lib_have(template_string_$item(barfTurn_templateObject73 || (barfTurn_templateObject73 = barfTurn_taggedTemplateLiteral(["designer sweatpants"])))) && (0,external_kolmafia_namespaceObject.myAdventures)() === 1 + config_globalOptions.saveTurns && !config_globalOptions.nodiet) {
    while (property_get("_sweatOutSomeBoozeUsed") < 3 && property_get("sweat") >= 25 && (0,external_kolmafia_namespaceObject.myInebriety)() > 0) {
      (0,external_kolmafia_namespaceObject.useSkill)($skill(barfTurn_templateObject74 || (barfTurn_templateObject74 = barfTurn_taggedTemplateLiteral(["Sweat Out Some Booze"]))));
    }
    consumeDiet(computeDiet().sweatpants(), "SWEATPANTS");
  }
}
;// CONCATENATED MODULE: ./src/index.ts
var src_templateObject, src_templateObject2, src_templateObject3, src_templateObject4, src_templateObject5, src_templateObject6, src_templateObject7, src_templateObject8, src_templateObject9, src_templateObject10, src_templateObject11, src_templateObject12, src_templateObject13, src_templateObject14, src_templateObject15, src_templateObject16, src_templateObject17, src_templateObject18, src_templateObject19, src_templateObject20, src_templateObject21, src_templateObject22, src_templateObject23, src_templateObject24, src_templateObject25, src_templateObject26, src_templateObject27, src_templateObject28, src_templateObject29, src_templateObject30, src_templateObject31, src_templateObject32, src_templateObject33;
function src_slicedToArray(arr, i) { return src_arrayWithHoles(arr) || src_iterableToArrayLimit(arr, i) || src_unsupportedIterableToArray(arr, i) || src_nonIterableRest(); }
function src_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function src_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function src_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function src_toConsumableArray(arr) { return src_arrayWithoutHoles(arr) || src_iterableToArray(arr) || src_unsupportedIterableToArray(arr) || src_nonIterableSpread(); }
function src_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function src_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return src_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_arrayLikeToArray(o, minLen); }
function src_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function src_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return src_arrayLikeToArray(arr); }
function src_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function src_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

















// Max price for tickets. You should rethink whether Barf is the best place if they're this expensive.
var TICKET_MAX_PRICE = 500000;
function ensureBarfAccess() {
  if (!(property_get("stenchAirportAlways") || property_get("_stenchAirportToday"))) {
    var ticket = template_string_$item(src_templateObject || (src_templateObject = src_taggedTemplateLiteral(["one-day ticket to Dinseylandfill"])));
    // TODO: Get better item acquisition logic that e.g. checks own mall store.
    if (!lib_have(ticket)) (0,external_kolmafia_namespaceObject.buy)(1, ticket, TICKET_MAX_PRICE);
    (0,external_kolmafia_namespaceObject.use)(ticket);
  }
  if (!property_get("_dinseyGarbageDisposed")) {
    (0,external_kolmafia_namespaceObject.print)("Disposing of garbage.", HIGHLIGHT);
    (0,external_kolmafia_namespaceObject.retrieveItem)(template_string_$item(src_templateObject2 || (src_templateObject2 = src_taggedTemplateLiteral(["bag of park garbage"]))));
    (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=airport_stench&action=airport3_tunnels");
    (0,external_kolmafia_namespaceObject.runChoice)(6);
    (0,external_kolmafia_namespaceObject.cliExecute)("refresh inv");
  }
}
function canContinue() {
  return (0,external_kolmafia_namespaceObject.myAdventures)() > config_globalOptions.saveTurns && (config_globalOptions.stopTurncount === null || (0,external_kolmafia_namespaceObject.myTurncount)() < config_globalOptions.stopTurncount);
}
function main() {
  var argString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  sinceKolmafiaRevision(27149);
  checkGithubVersion();
  Args.fill(config_globalOptions, argString);
  if (config_globalOptions.version) return; // Since we always print the version, all done!
  if (config_globalOptions.help) {
    Args.showHelp(config_globalOptions);
    return;
  }
  if (config_globalOptions.turns) {
    if (config_globalOptions.turns >= 0) {
      config_globalOptions.stopTurncount = (0,external_kolmafia_namespaceObject.myTurncount)() + config_globalOptions.turns;
    } else {
      config_globalOptions.saveTurns = -config_globalOptions.turns;
    }
  }
  if (config_globalOptions.prefs.autoUserConfirm) {
    (0,external_kolmafia_namespaceObject.print)("I have set auto-confirm to true and accept all ramifications that come with that.", "red");
  }
  if (stashItems.length > 0) {
    if (config_globalOptions.returnstash || userConfirmDialog("Garbo has detected that you have the following items still out of the stash from a previous run of garbo: ".concat(stashItems.map(item => item.name).join(", "), ". Would you like us to return these to the stash now?"), true)) {
      startSession();
      try {
        var clanIdOrName = config_globalOptions.prefs.stashClan;
        var parsedClanIdOrName = clanIdOrName !== "none" ? clanIdOrName.match(/^\d+$/) ? parseInt(clanIdOrName) : clanIdOrName : null;
        if (parsedClanIdOrName) {
          Clan["with"](parsedClanIdOrName, () => {
            for (var _i = 0, _arr = src_toConsumableArray(stashItems); _i < _arr.length; _i++) {
              var item = _arr[_i];
              if (getFoldGroup(item).some(item => lib_have(item))) {
                (0,external_kolmafia_namespaceObject.cliExecute)("fold ".concat(item));
              }
              var retrieved = (0,external_kolmafia_namespaceObject.retrieveItem)(item);
              if (item === template_string_$item(src_templateObject3 || (src_templateObject3 = src_taggedTemplateLiteral(["Spooky Putty sheet"]))) && !retrieved && lib_have(template_string_$item(src_templateObject4 || (src_templateObject4 = src_taggedTemplateLiteral(["Spooky Putty monster"]))))) {
                continue;
              }
              (0,external_kolmafia_namespaceObject.print)("Returning ".concat(item, " to ").concat((0,external_kolmafia_namespaceObject.getClanName)(), " stash."), HIGHLIGHT);
              if ((0,external_kolmafia_namespaceObject.putStash)(item, 1)) {
                stashItems.splice(stashItems.indexOf(item), 1);
              }
            }
          });
        } else throw new Error("Error: No garbo_stashClan set.");
      } finally {
        endSession(false);
      }
    } else {
      if (userConfirmDialog("Are you a responsible friend who has already returned their stash clan items, or promise to do so manually at a later time?", true)) {
        stashItems.splice(0);
      }
    }
  }
  if (config_globalOptions.returnstash) return;
  if (!$classes(src_templateObject5 || (src_templateObject5 = src_taggedTemplateLiteral(["Seal Clubber, Turtle Tamer, Pastamancer, Sauceror, Disco Bandit, Accordion Thief, Cow Puncher, Snake Oiler, Beanslinger"]))).includes((0,external_kolmafia_namespaceObject.myClass)())) {
    throw new Error("Garbo does not support non-WOL avatar classes. It barely supports WOL avatar classes");
  }
  if (!property_get("kingLiberated") || (0,external_kolmafia_namespaceObject.myLevel)() < 13 || external_kolmafia_namespaceObject.Stat.all().some(s => (0,external_kolmafia_namespaceObject.myBasestat)(s) < 75)) {
    if (config_globalOptions.prefs.skipAscensionCheck) {
      (0,external_kolmafia_namespaceObject.logprint)("This player is a silly goose, who ignored our warnings about being underleveled.");
    } else {
      var proceedRegardless = userConfirmDialog("Looks like your ascension may not be done, or you may be severely underleveled. Running garbo in an unintended character state can result in serious injury and even death. Are you sure you want to garbologize?", true);
      if (!proceedRegardless) {
        throw new Error("User interrupt requested. Stopping Garbage Collector.");
      } else {
        (0,external_kolmafia_namespaceObject.logprint)("This player is a silly goose, who ignored our warnings about being underleveled.");
      }
    }
  }
  if (config_globalOptions.prefs.valueOfAdventure && config_globalOptions.prefs.valueOfAdventure <= 3500) {
    throw "Your valueOfAdventure is set to ".concat(config_globalOptions.prefs.valueOfAdventure, ", which is too low for barf farming to be worthwhile. If you forgot to set it, use \"set valueOfAdventure = XXXX\" to set it to your marginal turn meat value.");
  }
  if (config_globalOptions.prefs.valueOfAdventure && config_globalOptions.prefs.valueOfAdventure >= 10000) {
    throw "Your valueOfAdventure is set to ".concat(config_globalOptions.prefs.valueOfAdventure, ", which is definitely incorrect. Please set it to your reliable marginal turn value.");
  }
  if ((0,external_kolmafia_namespaceObject.myInebriety)() > (0,external_kolmafia_namespaceObject.inebrietyLimit)() && (!lib_have(template_string_$item(src_templateObject6 || (src_templateObject6 = src_taggedTemplateLiteral(["Drunkula's wineglass"])))) || !(0,external_kolmafia_namespaceObject.canEquip)(template_string_$item(src_templateObject7 || (src_templateObject7 = src_taggedTemplateLiteral(["Drunkula's wineglass"])))))) {
    throw new Error("Go home, you're drunk. And don't own (or can't equip) Drunkula's wineglass. Consider either being sober or owning Drunkula's wineglass and being able to equip it.");
  }
  var completedProperty = "_garboCompleted";
  _set(completedProperty, "");
  startSession();
  if (!config_globalOptions.nobarf && !config_globalOptions.simdiet) {
    ensureBarfAccess();
  }
  if (config_globalOptions.simdiet) {
    propertyManager.set({
      logPreferenceChange: true,
      autoSatisfyWithMall: true,
      autoSatisfyWithNPCs: true,
      autoSatisfyWithCoinmasters: true,
      autoSatisfyWithStash: false,
      maximizerFoldables: true,
      autoTuxedo: true,
      autoPinkyRing: true,
      autoGarish: true,
      valueOfInventory: 2,
      suppressMallPriceCacheMessages: true
    });
    runDiet();
    propertyManager.resetAll();
    return;
  }
  var gardens = template_string_$items(src_templateObject8 || (src_templateObject8 = src_taggedTemplateLiteral(["packet of pumpkin seeds, Peppermint Pip Packet, packet of dragon's teeth, packet of beer seeds, packet of winter seeds, packet of thanksgarden seeds, packet of tall grass seeds, packet of mushroom spores, packet of rock seeds"])));
  var startingGarden = gardens.find(garden => Object.getOwnPropertyNames((0,external_kolmafia_namespaceObject.getCampground)()).includes(garden.name));
  if (startingGarden && !template_string_$items(src_templateObject9 || (src_templateObject9 = src_taggedTemplateLiteral(["packet of tall grass seeds, packet of mushroom spores"]))).includes(startingGarden) && (0,external_kolmafia_namespaceObject.getCampground)()[startingGarden.name] && template_string_$items(src_templateObject10 || (src_templateObject10 = src_taggedTemplateLiteral(["packet of tall grass seeds, packet of mushroom spores"]))).some(gardenSeed => lib_have(gardenSeed))) {
    if (startingGarden === template_string_$item(src_templateObject11 || (src_templateObject11 = src_taggedTemplateLiteral(["packet of rock seeds"])))) {
      (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=rgarden1&pwd");
      (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=rgarden2&pwd");
      (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=rgarden3&pwd");
    } else {
      (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=garden&pwd");
    }
  }
  var aaBossFlag = (0,external_kolmafia_namespaceObject.xpath)((0,external_kolmafia_namespaceObject.visitUrl)("account.php?tab=combat"), "//*[@id=\"opt_flag_aabosses\"]/label/input[@type='checkbox']@checked")[0] === "checked" ? 1 : 0;
  try {
    (0,external_kolmafia_namespaceObject.print)("Collecting garbage!", HIGHLIGHT);
    if (config_globalOptions.stopTurncount !== null) {
      (0,external_kolmafia_namespaceObject.print)("Stopping in ".concat(config_globalOptions.stopTurncount - (0,external_kolmafia_namespaceObject.myTurncount)()), HIGHLIGHT);
    }
    (0,external_kolmafia_namespaceObject.print)();
    if (lib_have(template_string_$item(src_templateObject12 || (src_templateObject12 = src_taggedTemplateLiteral(["packet of tall grass seeds"])))) && (0,external_kolmafia_namespaceObject.myGardenType)() !== "grass" && (0,external_kolmafia_namespaceObject.myGardenType)() !== "mushroom") {
      (0,external_kolmafia_namespaceObject.use)(template_string_$item(src_templateObject13 || (src_templateObject13 = src_taggedTemplateLiteral(["packet of tall grass seeds"]))));
    }
    (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
    (0,external_kolmafia_namespaceObject.visitUrl)("account.php?actions[]=flag_aabosses&flag_aabosses=1&action=Update", true);
    var maximizerCombinationLimit = config_globalOptions.quick ? 100000 : property_get("maximizerCombinationLimit");
    propertyManager.set({
      logPreferenceChange: true,
      logPreferenceChangeFilter: src_toConsumableArray(new Set([].concat(src_toConsumableArray(property_get("logPreferenceChangeFilter").split(",")), ["libram_savedMacro", "maximizerMRUList", "testudinalTeachings", "garboEmbezzlerDate", "garboEmbezzlerCount", "garboEmbezzlerSources", "spadingData"]))).sort().filter(a => a).join(","),
      battleAction: "custom combat script",
      customCombatScript: "garbo",
      autoSatisfyWithMall: true,
      autoSatisfyWithNPCs: true,
      autoSatisfyWithCoinmasters: true,
      autoSatisfyWithStash: false,
      dontStopForCounters: true,
      maximizerFoldables: true,
      hpAutoRecovery: -0.05,
      hpAutoRecoveryTarget: 0.0,
      mpAutoRecovery: -0.05,
      mpAutoRecoveryTarget: 0.0,
      afterAdventureScript: "",
      betweenBattleScript: "",
      choiceAdventureScript: "",
      counterScript: "",
      familiarScript: "",
      currentMood: "apathetic",
      autoTuxedo: true,
      autoPinkyRing: true,
      autoGarish: true,
      allowNonMoodBurning: !config_globalOptions.ascend,
      allowSummonBurning: true,
      libramSkillsSoftcore: "none",
      // Don't cast librams when mana burning, handled manually based on sale price
      valueOfInventory: 2,
      suppressMallPriceCacheMessages: true,
      maximizerCombinationLimit: maximizerCombinationLimit,
      allowNegativeTally: true
    });
    var bestHalloweiner = 0;
    if (haveInCampground(template_string_$item(src_templateObject14 || (src_templateObject14 = src_taggedTemplateLiteral(["haunted doghouse"]))))) {
      var halloweinerOptions = [[template_string_$items(src_templateObject15 || (src_templateObject15 = src_taggedTemplateLiteral(["bowl of eyeballs, bowl of mummy guts, bowl of maggots"]))), 1], [template_string_$items(src_templateObject16 || (src_templateObject16 = src_taggedTemplateLiteral(["blood and blood, Jack-O-Lantern beer, zombie"]))), 2], [template_string_$items(src_templateObject17 || (src_templateObject17 = src_taggedTemplateLiteral(["wind-up spider, plastic nightmare troll, Telltale\u2122 rubber heart"]))), 3]].map(_ref => {
        var _ref2 = src_slicedToArray(_ref, 2),
          halloweinerOption = _ref2[0],
          choiceId = _ref2[1];
        return {
          price: garboAverageValue.apply(void 0, src_toConsumableArray(halloweinerOption)),
          choiceId: choiceId
        };
      });
      bestHalloweiner = lib_maxBy(halloweinerOptions, "price").choiceId;
    }
    propertyManager.setChoices({
      1106: 3,
      // Ghost Dog Chow
      1107: 1,
      // tennis ball
      1108: bestHalloweiner,
      1340: 1,
      // Accept the doctor quest
      1341: 1 // Cure her poison
    });

    if (JuneCleaver_have()) {
      propertyManager.setChoices(Object.fromEntries(choices.map(choice => [choice, bestJuneCleaverOption(choice)])));
    }
    safeRestore();
    if (lib_questStep("questM23Meatsmith") === -1) {
      (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=meatsmith&action=talk");
      (0,external_kolmafia_namespaceObject.runChoice)(1);
    }
    if (lib_questStep("questM24Doc") === -1) {
      (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=doc&action=talk");
      (0,external_kolmafia_namespaceObject.runChoice)(1);
    }
    if (lib_questStep("questM25Armorer") === -1) {
      (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=armory&action=talk");
      (0,external_kolmafia_namespaceObject.runChoice)(1);
    }

    // unlock the sea
    if ((0,external_kolmafia_namespaceObject.myLevel)() >= 11 && lib_questStep("questS01OldGuy") === -1) {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=sea_oldman&action=oldman_oldman");
    }
    if ((0,external_kolmafia_namespaceObject.myClass)() === $class(src_templateObject18 || (src_templateObject18 = src_taggedTemplateLiteral(["Seal Clubber"]))) && !lib_have($skill(src_templateObject19 || (src_templateObject19 = src_taggedTemplateLiteral(["Furious Wallop"])))) && (0,external_kolmafia_namespaceObject.guildStoreAvailable)()) {
      (0,external_kolmafia_namespaceObject.visitUrl)("guild.php?action=buyskill&skillid=32", true);
    }
    var _stashItems = template_string_$items(src_templateObject20 || (src_templateObject20 = src_taggedTemplateLiteral(["repaid diaper, Buddy Bjorn, Crown of Thrones, Pantsgiving, mafia pointer finger ring"])));
    if ((0,external_kolmafia_namespaceObject.myInebriety)() <= (0,external_kolmafia_namespaceObject.inebrietyLimit)() && ((0,external_kolmafia_namespaceObject.myClass)() !== $class(src_templateObject21 || (src_templateObject21 = src_taggedTemplateLiteral(["Seal Clubber"]))) || !lib_have($skill(src_templateObject22 || (src_templateObject22 = src_taggedTemplateLiteral(["Furious Wallop"])))))) {
      _stashItems.push.apply(_stashItems, src_toConsumableArray(template_string_$items(src_templateObject23 || (src_templateObject23 = src_taggedTemplateLiteral(["haiku katana, Operation Patriot Shield"])))));
    }
    if (!lib_have(template_string_$item(src_templateObject24 || (src_templateObject24 = src_taggedTemplateLiteral(["Jurassic Parka"])))) && lib_have($skill(src_templateObject25 || (src_templateObject25 = src_taggedTemplateLiteral(["Torso Awareness"]))))) {
      _stashItems.push(template_string_$item(src_templateObject26 || (src_templateObject26 = src_taggedTemplateLiteral(["origami pasties"]))));
    }
    // FIXME: Dynamically figure out pointer ring approach.
    withStash(_stashItems, () => {
      withVIPClan(() => {
        // 0. diet stuff.
        if (config_globalOptions.nodiet || property_get("_garboYachtzeeChainCompleted", false)) {
          (0,external_kolmafia_namespaceObject.print)("We should not be yachtzee chaining", "red");
          config_globalOptions.prefs.yachtzeechain = false;
        }
        if (!config_globalOptions.nodiet && (!config_globalOptions.prefs.yachtzeechain || property_get("_garboYachtzeeChainCompleted", false))) {
          runDiet();
        } else if (!config_globalOptions.simdiet) {
          nonOrganAdventures();
        }

        // 1. make an outfit (amulet coin, pantogram, etc), misc other stuff (VYKEA, songboom, robortender drinks)
        dailySetup();
        var preventEquip = template_string_$items(src_templateObject27 || (src_templateObject27 = src_taggedTemplateLiteral(["broken champagne bottle, Spooky Putty snake, Spooky Putty mitre, Spooky Putty leotard, Spooky Putty ball, papier-mitre, papier-m\xE2ch\xE9te, papier-m\xE2chine gun, papier-masque, papier-m\xE2churidars, smoke ball, stinky fannypack, dice-shaped backpack"])));
        if (config_globalOptions.quick) {
          // Brimstone equipment explodes the number of maximize combinations
          preventEquip.push.apply(preventEquip, src_toConsumableArray(template_string_$items(src_templateObject28 || (src_templateObject28 = src_taggedTemplateLiteral(["Brimstone Bludgeon, Brimstone Bunker, Brimstone Brooch, Brimstone Bracelet, Brimstone Boxers, Brimstone Beret"])))));
        }
        setDefaultMaximizeOptions({
          preventEquip: preventEquip,
          preventSlot: $slots(src_templateObject29 || (src_templateObject29 = src_taggedTemplateLiteral(["buddy-bjorn, crown-of-thrones"])))
        });

        // 2. do some embezzler stuff
        freeFights();
        postFreeFightDailySetup(); // setup stuff that can interfere with free fights (VYKEA)
        yachtzeeChain();
        dailyFights();
        if (!config_globalOptions.nobarf) {
          // 3. burn turns at barf
          potionSetup(false);
          (0,external_kolmafia_namespaceObject.maximize)("MP", false);
          meatMood().execute(estimatedGarboTurns());
          useBuffExtenders();
          try {
            while (canContinue()) {
              barfTurn();
              postCombatActions();
            }

            // buy one-day tickets with FunFunds if user desires
            if (config_globalOptions.prefs.buyPass && (0,external_kolmafia_namespaceObject.availableAmount)(template_string_$item(src_templateObject30 || (src_templateObject30 = src_taggedTemplateLiteral(["FunFunds\u2122"])))) >= 20 && !lib_have(template_string_$item(src_templateObject31 || (src_templateObject31 = src_taggedTemplateLiteral(["one-day ticket to Dinseylandfill"]))))) {
              (0,external_kolmafia_namespaceObject.print)("Buying a one-day ticket", HIGHLIGHT);
              (0,external_kolmafia_namespaceObject.buy)($coinmaster(src_templateObject32 || (src_templateObject32 = src_taggedTemplateLiteral(["The Dinsey Company Store"]))), 1, template_string_$item(src_templateObject33 || (src_templateObject33 = src_taggedTemplateLiteral(["one-day ticket to Dinseylandfill"]))));
            }
          } finally {
            (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
          }
        } else (0,external_kolmafia_namespaceObject.setAutoAttack)(0);
      });
    });
  } finally {
    propertyManager.resetAll();
    _set("garboStashItems", stashItems.map(item => (0,external_kolmafia_namespaceObject.toInt)(item).toFixed(0)).join(","));
    (0,external_kolmafia_namespaceObject.visitUrl)("account.php?actions[]=flag_aabosses&flag_aabosses=".concat(aaBossFlag, "&action=Update"), true);
    if (startingGarden && lib_have(startingGarden)) (0,external_kolmafia_namespaceObject.use)(startingGarden);
    printEmbezzlerLog();
    endSession();
    printLog(HIGHLIGHT);
  }
  _set(completedProperty, "garbo ".concat(argString));
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__(__webpack_require__.s = 7635);
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;